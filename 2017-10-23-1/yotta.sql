/*
Navicat MySQL Data Transfer

Source Server         : localhost_9220_root_root
Source Server Version : 50620
Source Host           : localhost:9220
Source Database       : yotta

Target Server Type    : MYSQL
Target Server Version : 50620
File Encoding         : 65001

Date: 2017-10-23 15:45:22
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for assemble_fragment
-- ----------------------------
DROP TABLE IF EXISTS `assemble_fragment`;
CREATE TABLE `assemble_fragment` (
  `FragmentID` int(20) NOT NULL AUTO_INCREMENT,
  `FragmentContent` longtext NOT NULL,
  `FragmentScratchTime` datetime DEFAULT NULL,
  `TermID` int(20) DEFAULT NULL,
  `TermName` varchar(255) DEFAULT NULL,
  `FacetName` varchar(255) DEFAULT NULL,
  `FacetLayer` varchar(255) DEFAULT NULL,
  `ClassName` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`FragmentID`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of assemble_fragment
-- ----------------------------
INSERT INTO `assemble_fragment` VALUES ('1', '\n                        <p>测试碎片<img src=\"http://yotta.xjtushilei.com:9218/Yotta/SpiderAPI/getUnaddImage?imageID=1\" alt=\"2eb0bc4bd11373f0f83801fdae0f4bfbfaed0444\" style=\"max-width: 100%;\"></p>\n                      <p><br></p>', '2017-10-22 16:29:58', '85', '测试主题1', '测试分面1', '1', '测试课程');
INSERT INTO `assemble_fragment` VALUES ('2', '\n                        <p>测试碎片<img src=\"http://yotta.xjtushilei.com:9218/Yotta/SpiderAPI/getUnaddImage?imageID=2\" alt=\"86d6277f9e2f07080b68f487e324b899a801f2cc\" style=\"max-width: 100%;\"></p>\n                      <p><br></p>', '2017-10-22 16:30:28', '85', '测试主题1', '测试分面2', '2', '测试课程');
INSERT INTO `assemble_fragment` VALUES ('3', '\n                        <p>测试碎片<img src=\"http://yotta.xjtushilei.com:9218/Yotta/SpiderAPI/getUnaddImage?imageID=3\" alt=\"31e88c16fdfaaf51ead3eadd865494eef11f7a97\" style=\"max-width: 100%;\"></p>\n                      <p><br></p>', '2017-10-22 16:30:53', '85', '测试主题1', '测试分面3', '3', '测试课程');
INSERT INTO `assemble_fragment` VALUES ('5', '\n                        <p>请添加碎片...</p>\n                      <p><br></p>', '2017-10-23 13:27:37', '85', '测试主题1', '测试分面1', '1', '测试课程');

-- ----------------------------
-- Table structure for assemble_image
-- ----------------------------
DROP TABLE IF EXISTS `assemble_image`;
CREATE TABLE `assemble_image` (
  `ImageID` int(20) NOT NULL AUTO_INCREMENT,
  `ImageUrl` varchar(255) DEFAULT NULL,
  `ImageWidth` int(20) DEFAULT NULL,
  `ImageHeight` int(20) DEFAULT NULL,
  `TermID` int(20) DEFAULT NULL,
  `TermName` varchar(255) DEFAULT NULL,
  `TermUrl` varchar(255) DEFAULT NULL,
  `FacetLayer` int(20) DEFAULT NULL,
  `FacetName` varchar(255) DEFAULT NULL,
  `ClassName` varchar(255) DEFAULT NULL,
  `ImageScratchTime` datetime DEFAULT NULL,
  `ImageAPI` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`ImageID`)
) ENGINE=InnoDB AUTO_INCREMENT=156 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of assemble_image
-- ----------------------------
INSERT INTO `assemble_image` VALUES ('1', '//upload.wikimedia.org/wikipedia/commons/thumb/2/24/Tree_graph.svg/220px-Tree_graph.svg.png', '220', '257', '2', '图论术语', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2', '树', '数据结构', '2016-12-20 09:37:17', null);
INSERT INTO `assemble_image` VALUES ('2', '//upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Complete_graph_K5.svg/220px-Complete_graph_K5.svg.png', '220', '216', '2', '图论术语', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2', '团', '数据结构', '2016-12-20 09:37:17', null);
INSERT INTO `assemble_image` VALUES ('4', '//upload.wikimedia.org/wikipedia/commons/thumb/9/90/HASHTB12.svg/220px-HASHTB12.svg.png', '220', '137', '4', '线性探测', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '1', '摘要', '数据结构', '2016-12-20 09:37:49', null);
INSERT INTO `assemble_image` VALUES ('5', '//upload.wikimedia.org/wikipedia/commons/thumb/3/38/Linear_Probing_Deletion.png/220px-Linear_Probing_Deletion.png', '220', '65', '4', '线性探测', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2', '删除', '数据结构', '2016-12-20 09:37:49', null);
INSERT INTO `assemble_image` VALUES ('6', '//upload.wikimedia.org/wikipedia/commons/thumb/9/9b/PAVE_PAWS_Radar_Clear_AFS_Alaska.jpg/220px-PAVE_PAWS_Radar_Clear_AFS_Alaska.jpg', '220', '193', '5', '相位阵列', 'https://zh.wikipedia.org/wiki/%E7%9B%B8%E4%BD%8D%E9%98%B5%E5%88%97', '1', '摘要', '数据结构', '2016-12-20 09:37:58', null);
INSERT INTO `assemble_image` VALUES ('7', '//upload.wikimedia.org/wikipedia/commons/thumb/e/e2/Complete_bipartite_graph_K3%2C2.svg/160px-Complete_bipartite_graph_K3%2C2.svg.png', '160', '121', '6', '完全二分图', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%88%86%E5%9B%BE', '1', '摘要', '数据结构', '2016-12-20 09:38:07', null);
INSERT INTO `assemble_image` VALUES ('8', '//upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Complete_bipartite_graph_K3%2C1.svg/120px-Complete_bipartite_graph_K3%2C1.svg.png', '120', '91', '6', '完全二分图', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%88%86%E5%9B%BE', '1', '例子', '数据结构', '2016-12-20 09:38:07', null);
INSERT INTO `assemble_image` VALUES ('9', '//upload.wikimedia.org/wikipedia/commons/thumb/2/28/6n-graph2.svg/185px-6n-graph2.svg.png', '185', '202', '7', '邻接矩阵', 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '1', '例子', '数据结构', '2016-12-20 09:38:18', null);
INSERT INTO `assemble_image` VALUES ('10', '//upload.wikimedia.org/wikipedia/commons/thumb/1/11/Tree_of_life_SVG.svg/340px-Tree_of_life_SVG.svg.png', '340', '340', '10', '系统发生树', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '1', '摘要', '数据结构', '2016-12-20 09:38:48', null);
INSERT INTO `assemble_image` VALUES ('11', '//upload.wikimedia.org/wikipedia/commons/thumb/0/0e/MyosinUnrootedTree.jpg/275px-MyosinUnrootedTree.jpg', '275', '194', '10', '系统发生树', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2', '根', '数据结构', '2016-12-20 09:38:48', null);
INSERT INTO `assemble_image` VALUES ('12', '//upload.wikimedia.org/wikipedia/commons/thumb/8/8b/Point_quadtree.svg/300px-Point_quadtree.svg.png', '300', '300', '12', '四叉树', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '1', '摘要', '数据结构', '2016-12-20 09:39:07', null);
INSERT INTO `assemble_image` VALUES ('13', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Quad_tree_bitmap.svg/380px-Quad_tree_bitmap.svg.png', '380', '156', '12', '四叉树', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '1', '一些四元树的常用法', '数据结构', '2016-12-20 09:39:07', null);
INSERT INTO `assemble_image` VALUES ('14', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Unbalanced_binary_tree.svg/240px-Unbalanced_binary_tree.svg.png', '240', '240', '16', '平衡树', 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '1', '摘要', '数据结构', '2016-12-20 09:39:44', null);
INSERT INTO `assemble_image` VALUES ('15', '//upload.wikimedia.org/wikipedia/commons/thumb/0/06/AVLtreef.svg/240px-AVLtreef.svg.png', '240', '107', '16', '平衡树', 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '1', '摘要', '数据结构', '2016-12-20 09:39:44', null);
INSERT INTO `assemble_image` VALUES ('16', '//upload.wikimedia.org/wikipedia/commons/thumb/3/37/Bplustree.png/400px-Bplustree.png', '400', '184', '19', 'B+树', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '1', '摘要', '数据结构', '2016-12-20 09:40:14', null);
INSERT INTO `assemble_image` VALUES ('17', '//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Binary_tree.svg/220px-Binary_tree.svg.png', '220', '183', '21', '数据结构', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '1', '摘要', '数据结构', '2016-12-20 09:40:33', null);
INSERT INTO `assemble_image` VALUES ('19', '//upload.wikimedia.org/wikipedia/commons/thumb/3/35/Octree2.png/400px-Octree2.png', '400', '230', '25', '八叉树', 'https://zh.wikipedia.org/wiki/%E5%85%AB%E5%8F%89%E6%A0%91', '1', '摘要', '数据结构', '2016-12-20 09:41:13', null);
INSERT INTO `assemble_image` VALUES ('20', '//upload.wikimedia.org/wikipedia/commons/thumb/8/82/Huffman_tree_2.svg/350px-Huffman_tree_2.svg.png', '350', '225', '29', '霍夫曼编码', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '1', '摘要', '数据结构', '2016-12-20 09:41:46', null);
INSERT INTO `assemble_image` VALUES ('21', '//upload.wikimedia.org/wikipedia/commons/0/0a/2-3-4_tree_example.png', '335', '166', '30', '2-3-4树', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '1', '摘要', '数据结构', '2016-12-20 09:41:56', null);
INSERT INTO `assemble_image` VALUES ('22', '//upload.wikimedia.org/wikipedia/commons/7/76/2-3-4_tree_2-node.png', '75', '69', '30', '2-3-4树', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '1', '背景', '数据结构', '2016-12-20 09:41:56', null);
INSERT INTO `assemble_image` VALUES ('23', '//upload.wikimedia.org/wikipedia/commons/4/4e/2-3-4-tree_3-node.png', '117', '69', '30', '2-3-4树', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '1', '背景', '数据结构', '2016-12-20 09:41:56', null);
INSERT INTO `assemble_image` VALUES ('24', '//upload.wikimedia.org/wikipedia/commons/f/f6/2-3-4_tree_4-node.png', '159', '69', '30', '2-3-4树', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '1', '背景', '数据结构', '2016-12-20 09:41:56', null);
INSERT INTO `assemble_image` VALUES ('25', '//upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/450px-Red-black_tree_example.svg.png', '450', '217', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '1', '性质', '数据结构', '2016-12-20 09:42:09', null);
INSERT INTO `assemble_image` VALUES ('26', '//upload.wikimedia.org/wikipedia/commons/c/c8/Red-black_tree_insert_case_3.png', '300', '139', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2', '插入', '数据结构', '2016-12-20 09:42:09', null);
INSERT INTO `assemble_image` VALUES ('27', '//upload.wikimedia.org/wikipedia/commons/5/56/Red-black_tree_insert_case_4.png', '283', '138', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2', '插入', '数据结构', '2016-12-20 09:42:09', null);
INSERT INTO `assemble_image` VALUES ('28', '//upload.wikimedia.org/wikipedia/commons/6/66/Red-black_tree_insert_case_5.png', '310', '138', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2', '插入', '数据结构', '2016-12-20 09:42:09', null);
INSERT INTO `assemble_image` VALUES ('29', '//upload.wikimedia.org/wikipedia/commons/3/39/Red-black_tree_delete_case_2.png', '298', '136', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2', '删除', '数据结构', '2016-12-20 09:42:10', null);
INSERT INTO `assemble_image` VALUES ('30', '//upload.wikimedia.org/wikipedia/commons/c/c7/Red-black_tree_delete_case_3.png', '313', '132', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2', '删除', '数据结构', '2016-12-20 09:42:10', null);
INSERT INTO `assemble_image` VALUES ('31', '//upload.wikimedia.org/wikipedia/commons/d/d7/Red-black_tree_delete_case_4.png', '313', '132', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2', '删除', '数据结构', '2016-12-20 09:42:10', null);
INSERT INTO `assemble_image` VALUES ('32', '//upload.wikimedia.org/wikipedia/commons/3/30/Red-black_tree_delete_case_5.png', '247', '133', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2', '删除', '数据结构', '2016-12-20 09:42:10', null);
INSERT INTO `assemble_image` VALUES ('33', '//upload.wikimedia.org/wikipedia/commons/3/31/Red-black_tree_delete_case_6.png', '299', '143', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2', '删除', '数据结构', '2016-12-20 09:42:10', null);
INSERT INTO `assemble_image` VALUES ('34', '//upload.wikimedia.org/wikipedia/commons/thumb/f/f5/Petersen_graph.svg/200px-Petersen_graph.svg.png', '200', '191', '33', '佩特森图', 'https://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', '1', '摘要', '数据结构', '2016-12-20 09:42:28', null);
INSERT INTO `assemble_image` VALUES ('35', '//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Petersen_graph%2C_two_crossings.svg/220px-Petersen_graph%2C_two_crossings.svg.png', '220', '220', '33', '佩特森图', 'https://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', '1', '性质', '数据结构', '2016-12-20 09:42:28', null);
INSERT INTO `assemble_image` VALUES ('36', '//upload.wikimedia.org/wikipedia/commons/thumb/0/0b/0-regul%C3%A1rn%C3%AD_graf_na_6_vrcholech.png/120px-0-regul%C3%A1rn%C3%AD_graf_na_6_vrcholech.png', '120', '120', '38', '正则图', 'https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', '1', '摘要', '数据结构', '2016-12-20 09:43:15', null);
INSERT INTO `assemble_image` VALUES ('37', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/220px-Binary_tree.png', '220', '128', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '1', '摘要', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `assemble_image` VALUES ('38', '//upload.wikimedia.org/wikipedia/commons/thumb/b/b1/BinaryTree_leaf.jpg/300px-BinaryTree_leaf.jpg', '300', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '1', '二叉树(Binary Tree)的类型', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `assemble_image` VALUES ('39', '//upload.wikimedia.org/wikipedia/commons/thumb/7/7d/FullBT_CompleteBT.jpg/400px-FullBT_CompleteBT.jpg', '400', '206', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '1', '二叉树(Binary Tree)的类型', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `assemble_image` VALUES ('40', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2', '前(先)序、中序、后序遍历', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `assemble_image` VALUES ('41', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2', '深度优先遍历', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `assemble_image` VALUES ('42', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2', '广度优先遍历', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `assemble_image` VALUES ('43', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2', '广度优先遍历', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `assemble_image` VALUES ('44', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2', '广度优先遍历', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `assemble_image` VALUES ('45', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2', '广度优先遍历', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('46', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2', '广度优先遍历', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('47', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('48', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('49', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('50', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('51', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('52', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('53', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('54', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('55', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('56', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('57', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('58', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('59', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('60', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('61', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('62', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('63', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('64', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('65', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('66', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('67', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('68', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('69', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('70', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('71', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:30', null);
INSERT INTO `assemble_image` VALUES ('72', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('73', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('74', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('75', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('76', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('77', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('78', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('79', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '树的二叉链表存储表示', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('80', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '树的二叉链表存储的基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('81', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '树的二叉链表存储的基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('82', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '树的二叉链表存储的基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('83', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '树的二叉链表存储的基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('84', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '树的二叉链表存储的基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('85', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('86', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('87', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('88', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '存储结构', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('89', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('90', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('91', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('92', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('93', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('94', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('95', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('96', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('97', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('98', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('99', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('100', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('101', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:31', null);
INSERT INTO `assemble_image` VALUES ('102', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:32', null);
INSERT INTO `assemble_image` VALUES ('103', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:32', null);
INSERT INTO `assemble_image` VALUES ('104', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:32', null);
INSERT INTO `assemble_image` VALUES ('105', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:32', null);
INSERT INTO `assemble_image` VALUES ('106', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:32', null);
INSERT INTO `assemble_image` VALUES ('107', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:32', null);
INSERT INTO `assemble_image` VALUES ('108', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:32', null);
INSERT INTO `assemble_image` VALUES ('109', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:32', null);
INSERT INTO `assemble_image` VALUES ('110', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:32', null);
INSERT INTO `assemble_image` VALUES ('111', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:32', null);
INSERT INTO `assemble_image` VALUES ('112', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '3', '基本操作', '数据结构', '2016-12-20 09:44:32', null);
INSERT INTO `assemble_image` VALUES ('113', '//upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Internet_map_1024.jpg/32px-Internet_map_1024.jpg', '32', '32', '44', '数组', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '1', '程序设计', '数据结构', '2016-12-20 09:44:53', null);
INSERT INTO `assemble_image` VALUES ('114', '//upload.wikimedia.org/wikipedia/commons/thumb/b/b6/3dtree.png/250px-3dtree.png', '250', '238', '45', 'K-d树', 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '1', '摘要', '数据结构', '2016-12-20 09:45:03', null);
INSERT INTO `assemble_image` VALUES ('116', '//upload.wikimedia.org/wikipedia/commons/thumb/d/da/Hash_function.svg/330px-Hash_function.svg.png', '330', '223', '47', '散列函数', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '1', '摘要', '数据结构', '2016-12-20 09:45:26', null);
INSERT INTO `assemble_image` VALUES ('117', '//upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Simple-bipartite-graph.svg/200px-Simple-bipartite-graph.svg.png', '200', '200', '49', '二分图', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '1', '摘要', '数据结构', '2016-12-20 09:45:43', null);
INSERT INTO `assemble_image` VALUES ('118', '//upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Binomial_Trees.svg/500px-Binomial_Trees.svg.png', '500', '286', '54', '二项堆', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '1', '二项树', '数据结构', '2016-12-20 09:46:33', null);
INSERT INTO `assemble_image` VALUES ('119', '//upload.wikimedia.org/wikipedia/commons/thumb/6/61/Binomial-heap-13.svg/325px-Binomial-heap-13.svg.png', '325', '217', '54', '二项堆', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '1', '二项堆', '数据结构', '2016-12-20 09:46:33', null);
INSERT INTO `assemble_image` VALUES ('120', '//upload.wikimedia.org/wikipedia/commons/thumb/9/9f/Binomial_heap_merge1.svg/200px-Binomial_heap_merge1.svg.png', '200', '291', '54', '二项堆', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2', '合并', '数据结构', '2016-12-20 09:46:33', null);
INSERT INTO `assemble_image` VALUES ('121', '//upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Binomial_heap_merge2.svg/300px-Binomial_heap_merge2.svg.png', '300', '248', '54', '二项堆', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2', '合并', '数据结构', '2016-12-20 09:46:33', null);
INSERT INTO `assemble_image` VALUES ('122', '//upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Depth-first-tree.svg/300px-Depth-first-tree.svg.png', '300', '192', '58', '深度优先搜索', 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '1', '摘要', '数据结构', '2016-12-20 09:47:09', null);
INSERT INTO `assemble_image` VALUES ('123', '//upload.wikimedia.org/wikipedia/commons/thumb/b/bc/Dialog_tree_example_%28zh-cn%29.svg/399px-Dialog_tree_example_%28zh-cn%29.svg.png', '399', '193', '61', '对话树', 'https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%AF%9D%E6%A0%91', '1', '摘要', '数据结构', '2016-12-20 09:47:39', null);
INSERT INTO `assemble_image` VALUES ('125', '//upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Breadth-first_tree.svg/300px-Breadth-first_tree.svg.png', '300', '199', '62', '广度优先搜索', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '1', '摘要', '数据结构', '2016-12-20 09:47:48', null);
INSERT INTO `assemble_image` VALUES ('126', '//upload.wikimedia.org/wikipedia/commons/thumb/a/ad/MapGermanyGraph.svg/250px-MapGermanyGraph.svg.png', '250', '252', '62', '广度优先搜索', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '1', '作法', '数据结构', '2016-12-20 09:47:48', null);
INSERT INTO `assemble_image` VALUES ('127', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Unbalanced_binary_tree.svg/250px-Unbalanced_binary_tree.svg.png', '250', '250', '63', 'AVL树', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '1', '摘要', '数据结构', '2016-12-20 09:47:58', null);
INSERT INTO `assemble_image` VALUES ('128', '//upload.wikimedia.org/wikipedia/commons/thumb/0/06/AVLtreef.svg/250px-AVLtreef.svg.png', '250', '111', '63', 'AVL树', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '1', '摘要', '数据结构', '2016-12-20 09:47:58', null);
INSERT INTO `assemble_image` VALUES ('129', '//upload.wikimedia.org/wikipedia/commons/thumb/3/3a/2-3-4_tree_2-node.svg/110px-2-3-4_tree_2-node.svg.png', '110', '95', '64', '2-3树', 'https://zh.wikipedia.org/wiki/2-3%E6%A0%91', '1', '摘要', '数据结构', '2016-12-20 09:48:07', null);
INSERT INTO `assemble_image` VALUES ('130', '//upload.wikimedia.org/wikipedia/commons/thumb/2/29/Data_stack.svg/200px-Data_stack.svg.png', '200', '144', '65', '堆栈', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '1', '摘要', '数据结构', '2016-12-20 09:48:17', null);
INSERT INTO `assemble_image` VALUES ('131', '//upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Internet_map_1024.jpg/32px-Internet_map_1024.jpg', '32', '32', '65', '堆栈', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '1', '堆叠的应用', '数据结构', '2016-12-20 09:48:17', null);
INSERT INTO `assemble_image` VALUES ('132', '//upload.wikimedia.org/wikipedia/commons/2/23/Tree_rotation.png', '612', '241', '69', '树旋转', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '1', '图示', '数据结构', '2016-12-20 09:48:55', null);
INSERT INTO `assemble_image` VALUES ('133', '//upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Singly-linked-list.svg/408px-Singly-linked-list.svg.png', '408', '41', '70', '链表', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2', '单向链表', '数据结构', '2016-12-20 09:49:08', null);
INSERT INTO `assemble_image` VALUES ('134', '//upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Doubly-linked-list.svg/610px-Doubly-linked-list.svg.png', '610', '41', '70', '链表', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2', '双向链表', '数据结构', '2016-12-20 09:49:08', null);
INSERT INTO `assemble_image` VALUES ('135', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Circularly-linked-list.svg/350px-Circularly-linked-list.svg.png', '350', '60', '70', '链表', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2', '循环链表', '数据结构', '2016-12-20 09:49:08', null);
INSERT INTO `assemble_image` VALUES ('136', '//upload.wikimedia.org/wikipedia/commons/thumb/d/da/Binary_search_tree.svg/150px-Binary_search_tree.svg.png', '150', '125', '71', '二元搜寻树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '1', '摘要', '数据结构', '2016-12-20 09:49:19', null);
INSERT INTO `assemble_image` VALUES ('137', '//upload.wikimedia.org/wikipedia/commons/thumb/4/46/Binary_search_tree_delete.svg/480px-Binary_search_tree_delete.svg.png', '480', '137', '71', '二元搜寻树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '1', '在二叉查找树删除结点的算法', '数据结构', '2016-12-20 09:49:19', null);
INSERT INTO `assemble_image` VALUES ('138', '//upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Venn_A_intersect_B.svg/100px-Venn_A_intersect_B.svg.png', '100', '71', '76', '有序对', 'https://zh.wikipedia.org/wiki/%E6%9C%89%E5%BA%8F%E5%AF%B9', '1', '引用', '数据结构', '2016-12-20 09:50:13', null);
INSERT INTO `assemble_image` VALUES ('140', '//upload.wikimedia.org/wikipedia/commons/thumb/f/f9/Red_Black_Shape_Cases.svg/360px-Red_Black_Shape_Cases.svg.png', '360', '70', '79', 'AA树', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '1', '摘要', '数据结构', '2016-12-20 09:50:45', null);
INSERT INTO `assemble_image` VALUES ('141', '//upload.wikimedia.org/wikipedia/commons/thumb/d/dd/AA_Tree_Shape_Cases.svg/105px-AA_Tree_Shape_Cases.svg.png', '105', '70', '79', 'AA树', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '1', '摘要', '数据结构', '2016-12-20 09:50:45', null);
INSERT INTO `assemble_image` VALUES ('142', '//upload.wikimedia.org/wikipedia/commons/thumb/e/e0/AA_Tree_Skew2.svg/280px-AA_Tree_Skew2.svg.png', '280', '120', '79', 'AA树', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '1', '旋转平衡', '数据结构', '2016-12-20 09:50:45', null);
INSERT INTO `assemble_image` VALUES ('143', '//upload.wikimedia.org/wikipedia/commons/thumb/0/0e/AA_Tree_Split2.svg/255px-AA_Tree_Split2.svg.png', '255', '150', '79', 'AA树', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '1', '旋转平衡', '数据结构', '2016-12-20 09:50:45', null);
INSERT INTO `assemble_image` VALUES ('144', '//upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Petersen_graph_complement.svg/300px-Petersen_graph_complement.svg.png', '300', '147', '80', '补图', 'https://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', '1', '摘要', '数据结构', '2016-12-20 09:50:55', null);
INSERT INTO `assemble_image` VALUES ('145', '//upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Cayley_graph_of_F2.svg/220px-Cayley_graph_of_F2.svg.png', '220', '220', '81', '凯莱图', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '1', '摘要', '数据结构', '2016-12-20 09:51:05', null);
INSERT INTO `assemble_image` VALUES ('146', '//upload.wikimedia.org/wikipedia/commons/thumb/c/c4/Dih_4_Cayley_Graph%3B_generators_a%2C_b%3B_prefix.svg/200px-Dih_4_Cayley_Graph%3B_generators_a%2C_b%3B_prefix.svg.png', '200', '200', '81', '凯莱图', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '1', '例子', '数据结构', '2016-12-20 09:51:05', null);
INSERT INTO `assemble_image` VALUES ('147', '//upload.wikimedia.org/wikipedia/commons/thumb/8/87/Line_graph_construction_%28original%29.png/220px-Line_graph_construction_%28original%29.png', '220', '221', '83', '线图', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E5%9B%BE', '1', '摘要', '数据结构', '2016-12-20 09:51:25', null);
INSERT INTO `assemble_image` VALUES ('148', '//upload.wikimedia.org/wikipedia/commons/thumb/c/c7/Line_graph_construction_%28intermediate%29.png/220px-Line_graph_construction_%28intermediate%29.png', '220', '220', '83', '线图', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E5%9B%BE', '1', '摘要', '数据结构', '2016-12-20 09:51:25', null);
INSERT INTO `assemble_image` VALUES ('149', '//upload.wikimedia.org/wikipedia/commons/thumb/6/67/Line_graph_construction_%28result%29.png/220px-Line_graph_construction_%28result%29.png', '220', '221', '83', '线图', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E5%9B%BE', '1', '摘要', '数据结构', '2016-12-20 09:51:26', null);
INSERT INTO `assemble_image` VALUES ('150', '//upload.wikimedia.org/wikipedia/commons/7/7b/Ind_subg_not_in_line_graph.png', '301', '362', '83', '线图', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E5%9B%BE', '1', '摘要', '数据结构', '2016-12-20 09:51:26', null);
INSERT INTO `assemble_image` VALUES ('151', '//upload.wikimedia.org/wikipedia/commons/thumb/f/f4/Cauchy_sequence_illustration2.png/250px-Cauchy_sequence_illustration2.png', '250', '160', '84', '序列', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '1', '摘要', '数据结构', '2016-12-20 09:51:36', null);
INSERT INTO `assemble_image` VALUES ('152', '//upload.wikimedia.org/wikipedia/commons/thumb/9/93/Fibonacci_spiral_34.svg/80px-Fibonacci_spiral_34.svg.png', '80', '51', '84', '序列', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '1', '序列的形式和性质', '数据结构', '2016-12-20 09:51:36', null);
INSERT INTO `assemble_image` VALUES ('153', 'http://yotta.xjtushilei.com:9218/Yotta/SpiderAPI/getUnaddImage?imageID=1', null, null, '85', '测试主题1', null, '1', '测试分面1', '测试课程', '2017-10-22 16:29:58', null);
INSERT INTO `assemble_image` VALUES ('154', 'http://yotta.xjtushilei.com:9218/Yotta/SpiderAPI/getUnaddImage?imageID=2', null, null, '85', '测试主题1', null, '2', '测试分面2', '测试课程', '2017-10-22 16:30:28', null);
INSERT INTO `assemble_image` VALUES ('155', 'http://yotta.xjtushilei.com:9218/Yotta/SpiderAPI/getUnaddImage?imageID=3', null, null, '85', '测试主题1', null, '3', '测试分面3', '测试课程', '2017-10-22 16:30:53', null);

-- ----------------------------
-- Table structure for assemble_text
-- ----------------------------
DROP TABLE IF EXISTS `assemble_text`;
CREATE TABLE `assemble_text` (
  `FragmentID` int(20) NOT NULL AUTO_INCREMENT,
  `FragmentContent` longtext NOT NULL,
  `FragmentUrl` varchar(255) DEFAULT NULL,
  `FragmentPostTime` datetime DEFAULT NULL,
  `FragmentScratchTime` datetime DEFAULT NULL,
  `TermID` int(20) DEFAULT NULL,
  `TermName` varchar(255) DEFAULT NULL,
  `FacetName` varchar(255) DEFAULT NULL,
  `FacetLayer` varchar(255) DEFAULT NULL,
  `ClassName` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`FragmentID`)
) ENGINE=InnoDB AUTO_INCREMENT=1473 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of assemble_text
-- ----------------------------
INSERT INTO `assemble_text` VALUES ('2', '树状数组（Fenwick tree），最早由Peter M. Fenwick于1994年以A New Data Structure for Cumulative Frequency Tables[1]为题发表在SOFTWARE PRACTICE AND EXPERIENCE。其初衷是解决数据压缩里的累积频率（Cumulative Frequency）的计算问题，现多用于高效计算数列的前缀和， 区间和。它可以以 O ( log ⁡ n ) {\\displaystyle O(\\log n)} 的时间得到任意前缀和 ∑ i = 1 j a [ i ] , 1 <= j <= N {\\displaystyle \\sum _{i=1}^{j}a[i],1<=j<=N} ，并同时支持在 O ( log ⁡ n ) {\\displaystyle O(\\log n)} 时间内支持动态单点值的修改。空间复杂度 O ( n ) {\\displaystyle O(n)} 。', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-21 09:37:06', '1', '树状数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('3', '按照Peter M. Fenwick的说法，正如所有的整数都可以表示成2的幂和，我们也可以把一串序列表示成一系列子序列的和。采用这个想法，我们可将一个前缀和划分成多个子序列的和，而划分的方法与数的2的幂和具有极其相似的方式。一方面，子序列的个数是其二进制表示中1的个数，另一方面，子序列代表的f[i]的个数也是2的幂。[2][3][4]', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-21 09:37:06', '1', '树状数组', '结构起源', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('4', '定义一个Lowbit函数，返回参数转为二进制后,最后一个1的位置所代表的数值.', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '预备函数', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('5', '例如,Lowbit(34)的返回值将是2；而Lowbit(12)返回4；Lowbit(8)返回8。', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '预备函数', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('6', '将34转为二进制,为0010 0010,这里的\"最后一个1\"指的是从 2 0 {\\displaystyle 2^{0}} 位往前数,见到的第一个1,也就是 2 1 {\\displaystyle 2^{1}} 位上的1.', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '预备函数', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('7', '程序上，((Not I)+1) And I表明了最后一位1的值,', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '预备函数', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('8', '仍然以34为例,Not 0010 0010的结果是 1101 1101(221),加一后为 1101 1110(222), 把 0010 0010与1101 1110作AND,得0000 0010(2).', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '预备函数', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('9', 'int lowbit(int x)\n{\n    return x&(-x);\n}', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '预备函数', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('10', '定义一个数组 BIT，用以维护 A {\\displaystyle A} 的前缀和，则:', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '新建', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('11', 'B I T i = ∑ j = i − l o w b i t ( i ) + 1 i A j {\\displaystyle BIT_{i}=\\sum _{j=i-lowbit(i)+1}^{i}A_{j}}', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '新建', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('12', 'void build()\n{ \n    for (int i=1;i<=MAX_N;i++)\n    {\n        BIT[i]=A[i];\n        for (int j=i-1; j>i-lowbit(i); j--)\n            BIT[i]+=A[j];\n    }\n}', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '新建', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('13', '假设现在要将 A [ i ] {\\displaystyle A[i]} 的值增加delta,', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '修改', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('14', '那么,需要将 B I T [ i ] {\\displaystyle BIT[i]} 覆盖的区间包含 A [ i ] {\\displaystyle A[i]} 的值都加上K.', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '修改', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('15', '这个过程可以写成递归,或者普通的循环.', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '修改', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('16', '需要计算的次数与数据规模N的二进制位数有关,即这部分的时间复杂度是O(LogN)', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '修改', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('17', 'void edit(int i, int delta)\n{\n    for (int j = i; j <= MAX_N; j += lowbit(j))\n        BIT[j] += delta;\n}', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '修改', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('18', '假设我们需要计算 ∑ i = 1 k A i {\\displaystyle \\sum _{i=1}^{k}A_{i}} 的值.', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '求和', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('19', '首先,将ans初始化为0，将i初始化为k. 将ans的值加上BIT[i] 将i的值减去lowbit(i) 重复步骤2～3，直到i的值变为0', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '求和', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('20', 'int sum (int k)\n{\n    int ans = 0;\n    for (int i = k; i > 0; i -= lowbit(i))\n        ans += BIT[i];\n    return ans;\n}', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '求和', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('21', '初始化复杂度最优为 O ( N log ⁡ N ) {\\displaystyle O(N\\log N)}', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '复杂度', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('22', '单次询问复杂度 O ( log ⁡ N ) {\\displaystyle O(\\log N)} ,其中N为数组大小', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '复杂度', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('23', '单次修改复杂度 O ( log ⁡ N ) {\\displaystyle O(\\log N)} ,其中N为数组大小', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '复杂度', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('24', '空间复杂度 O ( N ) {\\displaystyle O(N)}', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '复杂度', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('25', '逆序数是一个数列中在它前面有比它大的个数。如4312的逆序数是0+1+2+2=5。', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:07', '1', '树状数组', '求逆序数[5]', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('26', '^ Peter M. Fenwick. A new data structure for cumulative frequency tables. Software: Practice and Experience. 1994, 24 (3): 327–336. doi:10.1002/spe.4380240306.  ^ Binary indexed tree-树状数组 ^ Binary Indexed Trees ^ TopCoder树状数组教程的译文 ^ http://blog.csdn.net/cattycat/article/details/5640838', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:07', '1', '树状数组', '求逆序数[5]', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('28', '图论中有许多专有名词，此处总结了一些名词的一般意义和用法。', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('29', '称 G {\\displaystyle G} 是连通的，如果非空图 G {\\displaystyle G} 的任意两个顶点之间均有一条路相连。', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '连通性', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('30', '称 G {\\displaystyle G} 是k-连通的，如果非空图 G {\\displaystyle G} 的任意两个顶点之间都有 k {\\displaystyle k} 条独立路相连。k-连通的的另外一个定义是：若 ∣ G ∣> k ∈ N {\\displaystyle \\mid G\\mid >k\\in \\mathbb {N} } ,且对任意满足 | X | < k {\\displaystyle |X|<k} 的子集 X ⊆ V {\\displaystyle X\\subseteq V} 均有 G − X {\\displaystyle G-X} 是连通的，则称 G {\\displaystyle G} 是k-连通的。由Menger定理，易知这两个定义是等价的。通过k-连通的概念，定义使得 G {\\displaystyle G} 是k-连通的最大整数 k {\\displaystyle k} 称作 G {\\displaystyle G} 的连通度。', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '连通性', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('31', '类似的，还可以引入k-边连通的概念：称一个 ∣ G ∣ {\\displaystyle \\mid G\\mid } 的图 G {\\displaystyle G} 是k-边连通的，如果对任意一个满足 ∣ F ∣< k {\\displaystyle \\mid F\\mid <k} 的边的集合 F {\\displaystyle F} ， G − F {\\displaystyle G-F} 均是连通的。同样， G {\\displaystyle G} 的边连通度是使得 G {\\displaystyle G} 是k-边连通的最大整数。', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '连通性', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('32', '距离是两个顶点之间经过最短路径的边的数目，通常用 d G ( u , v ) {\\displaystyle d_{G}(u,v)} 表示。', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '距离', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('33', '顶点 v {\\displaystyle v} 的偏心率（eccentricity），用来表示连接图 G {\\displaystyle G} 中的顶点 v {\\displaystyle v} 到图 G {\\displaystyle G} 中其它顶点之间的最大距离，用符号 ϵ G ( v ) {\\displaystyle \\epsilon _{G}(v)} 表示。', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '距离', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('34', '图的直径（diameter），表示取遍图的所有顶点，得到的偏心率的最大值，记作 d i a m ( G ) {\\displaystyle diam(G)} 。相对于直径的一个概念是图的半径（radius），表示图的所有点的偏心率的最小值，记作 r a d ( G ) {\\displaystyle rad(G)} 。这两者间的关系是： d i a m ( G ) ⩽ 2 r a d ( G ) {\\displaystyle diam(G)\\leqslant 2rad(G)}', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '距离', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('36', '^ R.Diestel，图论（第四版），高等教育出版社，P10', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:17', '2', '图论术语', '不变量', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('37', '两个图G和H，如果V(H)是V(G)的子集且E(H)是E(G)的子集（当然，E(H)中只能包含将V(H)中的顶点相连的边）则称H是G的子图。如果图G和H不相等，即V(H)是V(G)的真子集或E（H）是E（G）的真子集，则称H是G的真子图。如果H是G的子图或者存在一个G的子图与H同构，则称G包含H。', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:17', '2', '图论术语', '子图', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('38', '如果图G的子图H满足V(H)=V(G)，即图H包含图G的所有顶点，则称H是G的支撑子图或生成子图。', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:17', '2', '图论术语', '子图', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('39', '如果图G的子图H满足边(u,v)在图H中当且仅当边(u,v)在图G中，即图H包含了图G中所有两个端点都在V(H)中的边，则称H是G的导出子图。', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:17', '2', '图论术语', '子图', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('40', '对于图的某个性质而言，如果图G具有此性质而G的任一真子图都不具有此性质，则称G是具有该性质的极小图。类似地，如果图G具有此性质而任一以G为真子图的图都不具有此性质，则称G是具有该性质的极大图。', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:17', '2', '图论术语', '子图', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('41', '路径（walk），又译作途径。一个长度为 k {\\displaystyle k} 的路径是一个非空的顶点和边的交错序列 v 0 e 0 v 1 e 1 . . . e k − 1 v k {\\displaystyle v_{0}e_{0}v_{1}e_{1}...e_{k-1}v_{k}} ，使得对于所有 i < k {\\displaystyle i<k} 均有 e i = v i v i + 1 {\\displaystyle e_{i}={v_{i}v_{i+1}}} 。特别的，当 v 0 = v k {\\displaystyle v_{0}=v_{k}} 时，称这个路径是闭的（closed）；当路径中的顶点互不相同，得到 G {\\displaystyle G} 的一条路。[1]', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:17', '2', '图论术语', '路径', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('42', '连通无圈图称为树，一般记为T。其中，度数为1的顶点称为叶子，否则称为内点。有时我们会从树中选出一个顶点作为特殊顶点，称之为根以示区分，此时称此树为有根树。有根树常作为有向无环图来处理。', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:17', '2', '图论术语', '树', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('43', '无环（不一定连通）图称为森林，森林F的子图称为F的子森林。', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:17', '2', '图论术语', '树', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('44', '如果图G的一个生成子图是树，则称该子图为生成树。', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:17', '2', '图论术语', '树', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('45', '星是仅有一个顶点不是叶子的树。星也可以表示为完全二分图K1,n。', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:17', '2', '图论术语', '树', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('46', '完全图是所有顶点两两相邻的图。n阶完全图，记作Kn。如图所示为K5。n阶完全图有n(n-1)/2条边。', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:17', '2', '图论术语', '团', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('47', '图中的团是由图中两两相邻的顶点构成的集合。', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:17', '2', '图论术语', '团', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('48', '在计算机科学或形式语言中，空字元串是指在字母表Σ上，其长度为 0 的那唯一字串，以ε或λ来标记。', 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('49', '在面向对象编程语言中，空字串共非空参照。一个字串型别的空参照并未指向一个字串物件，而对其操作则会导致错误。空字串则可以使用字串运算。', 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('50', '在形式语言中，空字串有以下特性：', 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '特性', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('51', '| λ | = 0 {\\displaystyle |\\lambda \\,|=0} 。字串长度为 0 。 λ + s = s + λ = s {\\displaystyle \\lambda \\,+s=s+\\lambda \\,=s} 。在串接运算之下，空字串是一个在Σ上之自由么半群的单位元素。 λ R = λ {\\displaystyle {\\lambda \\,}^{R}=\\lambda \\,} 。空字串的反元素为空字串。 空字串位于字典顺序中的最优先。[1]', 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '特性', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('52', '编程语言可能会维持这些特性，但保留特殊实作方式的可能[来源请求]。', 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '特性', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('53', '空字串通常使用和其它一般字串相同的方式来表示。在使用结束字符的语言(如C字串或纯文字的一行)中，则单统地将结束字符放在第一个位置。', 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '表示方式', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('54', '编程语言 λ 表示法 C语言, C++ \"\"\n {\'\\0\'}\n C++ std::string()\n Objective-C @\"\"\n Perl \"\"\n \'\'\n qw()\n Python \"\"\n \'\'\n \"\"\"\"\"\"\n str()\n C# \"\"\n string.Empty\n Visual Basic .NET \"\"\n String.Empty\n PHP \"\"\n \'\'\n Java \"\"\n Javascript \'\'\n \"\"\n Haskell \"\"\n OCaml \"\"\n String.make 0 \'-\'\n Delphi \'\'', 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '表示方式', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('55', '^ CSE1002 Lecture Notes - Lexicographic', 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '表示方式', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('56', '  这是与逻辑学相关的小作品。你可以通过编辑或修订扩充其内容。', 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '表示方式', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('57', '本条目部分链接不符合格式手册规范。跨语言链接及章节标题等处的链接可能需要清理。（2016年10月31日） 请协助改善此条目。参见WP:LINKSTYLE、WP:MOSIW以了解细节。突出显示跨语言链接可以便于检查。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('58', '线性探测是计算机程序解决散列表冲突时所采取的一种策略。散列表这种数据结构用于保存键值对，并且能通过给出的键来查找表中对应的值。线性探测这种策略是在1954年由Gene Amdahl, Elaine M. McGraw,和 Arthur Samuel 所发明，并且最早于1963年由Donald Knuth对其进行分析。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('59', 'John Smith和Sandra Dee（都被杂凑映射到了单元873）的冲突，借由把后者放在下一个空闲单元（单元874）而解决', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('60', '与二次探测和双散列一样，线性探测是一种开放寻址的策略。在这些策略里，散列表的每个单元都存储一对键值对。当散列函数对一个给定值产生一个键，并且这个键指向散列表中某个已经被另一个键值对所占用的单元时，线性探测用于解决此时产生的冲突：查找散列表中离冲突单元最近的空闲单元，并且把新的键插入这个空闲单元。同样的，查找也同插入如出一辙：从散列函数给出的散列值对应的单元开始查找，直到找到与键对应的值或者是找到空单元。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('61', '正如Thorup和张寅在2012年所写，…“散列表是最常用的普通数据结构，它在硬件上的标准实现中最流行的方法就是使用线性探测。线性探测又快又简单。[1]”线性探测能够提供高性能的原因是因为它的良好的引用局部性，然而它与其他解决散列冲突的策略相比对于散列函数的质量更为敏感。当使用随机散列函数， 5-independent散列函数或tabulation散列函数，其用于搜索，插入或删除的预期时间是常数。不过，借由其他像是私语杂凑的散列函数可以在实作中达到较好的结果[2]。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:49', '4', '线性探测', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('62', '^ Thorup, Mikkel; Zhang, Yin, Tabulation-based 5-independent hashing with applications to linear probing and second moment estimation, SIAM Journal on Computing, 2012, 41 (2): 293–331, doi:10.1137/100800774, MR 2914329 . ^ Richter, Stefan; Alvarez, Victor; Dittrich, Jens, A seven-dimensional analysis of hashing methods and its implications on query processing, Proceedings of the VLDB Endowment, 2015, 9 (3): 293–331 . ^ 3.0 3.1 3.2 Goodrich, Michael T.; Tamassia, Roberto, Section 6.3.3: Linear Probing, Algorithm Design and Applications, Wiley: 200–203, 2015 . ^ 4.0 4.1 Morin, Pat, Section 5.2: LinearHashTable: Linear Probing, Open Data Structures (in pseudocode) 0.1Gβ: 108–116, February 22, 2014 [2016-01-15] .', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:49', '4', '线性探测', '注解与参考文献', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('63', '为了搜索给定的键 x，散列表中由h(x)对应的单元开始的相邻单元 h(x) + 1, h(x) + 2, ..., 都将被检查，直到找到了内容为空的单元或是找到了存储给定键为x的单元。其中，h是散列函数。如果找到了存储给定键的单元，搜索将会返回单元中存储的键对应的值。否则，如果搜索遇到了空的单元，键在表中就不存在，因为键应当被存放在所有未被搜索的单元之前。此时，搜索返回表中无此键的结果。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:49', '4', '线性探测', '搜索', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('64', '为了在表中插入一对键值对(x,v) （有可能会替换有着相同键的键值对），插入算法也会访问搜索算法访问的同一系列单元，直到找到一个空的单元，或是找到了存储给定键为x的单元。新的键值对将会存储在此单元中。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:49', '4', '线性探测', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('65', '如果插入将导致表（占用单元的比例）增长高于某个预设的阈值的负载系数，整个表可以通过一个新的表（规模大于本表规模）和一个新的散列函数来代替，如使用动态数组。设置这个的阈值接近于零，并使用表大小的高增长率来带来更快速的哈希表的操作，但相比于接近一个阈值与低增长率，它会带来更高的内存使用情况。一个常见的选择是表规模扩大一倍，当负载系数将超过1/2，导致负载系数保持在1/4和1/2之间。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:49', '4', '线性探测', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('66', '当一对键值对被删除，可能会有必要将其他的键值对放回到它的单元中，来防止搜索时搜索到空的单元。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:49', '4', '线性探测', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('67', '散列表应当提供删除键值对的功能。然而，单纯地清空对应的单元是不够的。这会影响到对于储存时间早于该单元、但储存位置在该单元之后的其他键。此单元会造成搜索获得错误的结果，告诉使用者这些键并不存在。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:49', '4', '线性探测', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('68', '相较于直接清空对应单元i，更好的做法是先清空，然后把它之后所有会造成问题的单元向前移动，来避免搜索出错。重复直到出现空单元，则删除动作安全完成。但是，如果有发现后续有键可以移到这个位置上的话，直接将该键取代欲删除的单元可以加速后续的其他行为，当然，这样也会造成后面多出一个新的空单元。搜索可用来取代的单元的动作会持续到搜索到原本就空白的单元为止。在这个将键移到前面的过程中，所有的键都会被算过一遍。因此，完成这整个过程所需的时间与该储存位置的单元数量呈正比，与杂凑表的其他运算相符[3]。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:49', '4', '线性探测', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('69', '有一种可行的替代方案是懒惰删除，用指向欲删除键的特殊的标志值（flag value）取代原本的键值配对。不过，这些标志值在搜索上会当作非空。因此，如果一个阵列中有过多的被删除键，那么就需要清除所有的标志值并且重新杂凑整个表[3][4]。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:49', '4', '线性探测', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('70', '相位阵列（英语：phased array），是由一群天线组成的阵列。送往各个天线的讯号的相对相位经过适当调整，最后会强化讯号在指定方向的强度，并且压抑其他方向的强度。此技术本来是为射电天文学开发。后来也为主动电子扫描阵列雷达所用。', 'https://zh.wikipedia.org/wiki/%E7%9B%B8%E4%BD%8D%E9%98%B5%E5%88%97', '2016-12-14 16:53:00', '2016-12-20 09:37:58', '5', '相位阵列', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('71', '许多地区的调幅广播电台都使用这个技术，可以限定广播的范围，减少对其他地区的干扰。', 'https://zh.wikipedia.org/wiki/%E7%9B%B8%E4%BD%8D%E9%98%B5%E5%88%97', '2016-12-14 16:53:00', '2016-12-20 09:37:58', '5', '相位阵列', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('72', '美国铺路爪长程预警雷达就利用了相位阵列原理。', 'https://zh.wikipedia.org/wiki/%E7%9B%B8%E4%BD%8D%E9%98%B5%E5%88%97', '2016-12-14 16:53:00', '2016-12-20 09:37:58', '5', '相位阵列', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('73', '完全二分图 一个完全二分图m=3 n =2 顶点 n+m 边 mn 自同构群 2m!n!如果m=n，否则m!n! 查 论 编', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%88%86%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:38:07', '6', '完全二分图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('74', '完全二分图是一种特殊的二分图，可以把图中的顶点分成两个集合，使得第一个集合中的所有顶点都与第二个集合中的所有顶点相连。', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%88%86%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:38:07', '6', '完全二分图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('75', '完全二分图 G := ( V 1 + V 2 , E ) {\\displaystyle G:=(V_{1}+V_{2},E)} 是一个二分图，使得对于任何两个顶点 v 1 ∈ V 1 {\\displaystyle v_{1}\\in V_{1}} 和 v 2 ∈ V 2 {\\displaystyle v_{2}\\in V_{2}} ， v 1 v 2 {\\displaystyle v_{1}v_{2}} 都是 G {\\displaystyle G} 中的一条边。 | V 1 | = m {\\displaystyle \\left|V_{1}\\right|=m} 且 | V 2 | = n {\\displaystyle \\left|V_{2}\\right|=n} 的完全二分图记为 K m , n {\\displaystyle K_{m,n}} 。', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%88%86%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:38:07', '6', '完全二分图', '定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('76', '平面图不能含有子图 K 3 , 3 {\\displaystyle K_{3,3}} ；外平面图不能含有子图 K 3 , 2 {\\displaystyle K_{3,2}} （这些是必要条件而不是充分条件）。 完全二部图 K m , n {\\displaystyle K_{m,n}} 的顶点覆盖数为 min { m , n } {\\displaystyle \\min \\lbrace m,n\\rbrace } ，边覆盖数为 max { m , n } {\\displaystyle \\max \\lbrace m,n\\rbrace } 。 完全二分图 K m , n {\\displaystyle K_{m,n}} 具有大小为 max { m , n } {\\displaystyle \\max \\lbrace m,n\\rbrace } 的最大独立集合。 完全二分图 K m , n {\\displaystyle K_{m,n}} 具有大小为 min { m , n } {\\displaystyle \\min \\lbrace m,n\\rbrace } 的最大匹配。 完全二分图 K n , n {\\displaystyle K_{n,n}} 具有正则的n-边染色。 完全二分图 K m , n {\\displaystyle K_{m,n}} 有mn-1 nm-1个不同的生成树。', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%88%86%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:38:07', '6', '完全二分图', '性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('77', '邻接矩阵是表示一个图的常用存储表示。它用两个数组分别存储数据元素（顶点）的信息和数据元素之间的关系（边或弧）的信息。', 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '2014-01-31 07:15:00', '2016-12-20 09:38:18', '7', '邻接矩阵', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('78', '阶为 n {\\displaystyle n} 的图 G {\\displaystyle G} 的邻接矩阵 A {\\displaystyle A} 是 n × n {\\displaystyle n\\times n} 的。将 G {\\displaystyle G} 的顶点标签为 v 1 , v 2 , . . . , v n {\\displaystyle v_{1},v_{2},...,v_{n}} 。若 ( v i , v j ) ∈ E ( G ) {\\displaystyle (v_{i},v_{j})\\in E(G)} ， A i j = 1 {\\displaystyle A_{ij}=1} ，否则 A i j = 0 {\\displaystyle A_{ij}=0} 。', 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '2014-01-31 07:15:00', '2016-12-20 09:38:18', '7', '邻接矩阵', '定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('79', '( 1 1 0 0 1 0 1 0 1 0 1 0 0 1 0 1 0 0 0 0 1 0 1 1 1 1 0 1 0 0 0 0 0 1 0 0 ) . {\\displaystyle {\\begin{pmatrix}1&1&0&0&1&0\\\\1&0&1&0&1&0\\\\0&1&0&1&0&0\\\\0&0&1&0&1&1\\\\1&1&0&1&0&0\\\\0&0&0&1&0&0\\\\\\end{pmatrix}}.}', 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '2014-01-31 07:15:00', '2016-12-20 09:38:18', '7', '邻接矩阵', '例子', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('80', '设图 G {\\displaystyle G} 的邻接矩阵为 A {\\displaystyle A} 。', 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '2014-01-31 07:15:00', '2016-12-20 09:38:18', '7', '邻接矩阵', '特性', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('81', 'A n {\\displaystyle A^{n}} 的元素 A i j n {\\displaystyle A_{ij}^{n}} 表示由顶点 i {\\displaystyle i} 到顶点 j {\\displaystyle j} 长度为 n {\\displaystyle n} 的径的数目。[1]', 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '2014-01-31 07:15:00', '2016-12-20 09:38:18', '7', '邻接矩阵', '特性', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('82', 'G {\\displaystyle G} 没有有向圈当且仅当 I − A {\\displaystyle I-A} 可逆。 ( I − A ) − 1 {\\displaystyle (I-A)^{-1}} 的元素 i j {\\displaystyle ij} 表示由顶点 i {\\displaystyle i} 到顶点 j {\\displaystyle j} 的所有径的数目。因为： ( I − A ) − 1 = I + A + A 2 + A 3 + . . . {\\displaystyle (I-A)^{-1}=I+A+A^{2}+A^{3}+...}', 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '2014-01-31 07:15:00', '2016-12-20 09:38:18', '7', '邻接矩阵', '特性', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('83', 'm个人传n次球， ∑ i = 1 [ n 2 ] ( m − 1 ) i ( m − 2 ) n − 2 i C n − 1 − i i − 1 {\\displaystyle \\sum _{i=1}^{[{\\frac {n}{2}}]}(m-1)^{i}(m-2)^{n-2i}C_{n-1-i}^{i-1}} [2] ( m − 1 ) P n + 1 = 1 − P n , P n = 1 m ( 1 − ( − 1 m − 1 ) n − 1 ) {\\displaystyle (m-1)P_{n+1}=1-P_{n},P_{n}={\\frac {1}{m}}(1-({\\frac {-1}{m-1}})^{n-1})} ，将Pn乘上总传法数 ( m − 1 ) n − 1 {\\displaystyle (m-1)^{n-1}} [2]', 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '2014-01-31 07:15:00', '2016-12-20 09:38:18', '7', '邻接矩阵', '其他解法', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('84', '^ 图论中邻接矩阵的应用.  ^ 2.0 2.1 传球问题的终极解法. ', 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '2014-01-31 07:15:00', '2016-12-20 09:38:18', '7', '邻接矩阵', '其他解法', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('85', '树堆（英语：Treap），是有一个随机附加域满足堆的性质的二叉搜索树，其结构相当于以随机数据插入的二叉搜索树。其基本操作的期望时间复杂度为 O ( log ⁡ n ) {\\displaystyle O(\\log {n})} 。相对于其他的平衡二叉搜索树，Treap的特点是实现简单，且能基本实现随机平衡的结构。', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:28', '8', '树堆', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('86', '二叉搜索树有一个特性，就是每个子树的形态在优先级唯一确定的情况下都是唯一的，不受其他因素影响，也就是说，左子树的形态与树中大于根节点的值无关，右子树亦然。这是因为Treap满足堆的性质，Treap的根节点是优先级最大的那个节点，考虑它的左子树，树根也是子树里面最大的一点，右子树亦然。所以Treap相当于先把所有节点按照优先级排序，然后插入，实质上就相当于以随机顺序建立的二叉搜索树，只不过它并不需要一次读入所有数据，可以一个一个地插入。而当这个随机顺序确定的时候，这个树是唯一的。因此在给定优先级的情况下，只要是用符合要求的操作，通过任何方式得出的Treap都是一样的，所以不改变优先级的情况下，特殊的操作不会造成Treap结构的退化。而改变优先级可能会使Treap变得不够随机以致退化。', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:28', '8', '树堆', '算法分析', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('87', 'Treap的其它操作的期望复杂度同样是 O ( log ⁡ n ) {\\displaystyle O(\\log {n})} 。', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:28', '8', '树堆', '算法分析', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('88', 'AVL树 伸展树（Splay Tree） 线段树 红黑树 Size Balanced Tree', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:28', '8', '树堆', '与其他结构的比较', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('89', 'Randomized Search Trees(pdf)，有对Treap和它的加权形式的详尽介绍以及复杂度的严格证明', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:28', '8', '树堆', '与其他结构的比较', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('91', '给节点随机分配一个优先级，先和二叉搜索树的插入一样，先把要插入的点插入到一个叶子上，然后跟维护堆一样，如果当前节点的优先级比根大就旋转，如果当前节点是根的左儿子就右旋如果当前节点是根的右儿子就左旋。', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:28', '8', '树堆', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('92', '由于旋转是 O ( 1 ) {\\displaystyle O(1)} 的，最多进行h次（h是树的高度），插入的复杂度是 O ( h ) {\\displaystyle O(h)} 的，在期望情况下 h = O ( log ⁡ n ) {\\displaystyle h=O(\\log {n})} ，所以它的期望复杂度是 O ( log ⁡ n ) {\\displaystyle O(\\log {n})} 。', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:28', '8', '树堆', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('93', '因为Treap满足堆性质，所以只需要把要删除的节点旋转到叶节点上，然后直接删除就可以了。具体的方法就是每次找到优先级最大的儿子，向与其相反的方向旋转，直到那个节点被旋转到了叶节点，然后直接删除。', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:28', '8', '树堆', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('94', '删除最多进行 O ( h ) {\\displaystyle O(h)} 次旋转，期望复杂度是 O ( log ⁡ n ) {\\displaystyle O(\\log {n})} 。', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:28', '8', '树堆', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('95', '和一般的二叉搜索树一样，但是由于Treap的随机化结构，Treap中查找的期望复杂度是 O ( log ⁡ n ) {\\displaystyle O(\\log {n})} 。', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:28', '8', '树堆', '查找', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('96', '(*\n    Project: Amber Standard Sources Library [ASSL]\n    Author: Amber\n    Title: Treap\n    Category: Data Structure\n    Version: v1.0\n    Remark: XXXXXXXX\n    Tested Problems: N/A\n    Date: 2006-11-16\n *)\n program ASSL_Treap(Input, Output);\n const\n    Infinity = 65535;\n type\n    TIndex = Longint;\n    TKey = Longint;\n    TPriority = Word;\n    PTreapNode = ^TTreapNode;\n    TTreapNode = record\n        Left, Right: PTreapNode;\n        Priority: TPriority;\n        Key: TKey;\n    end;\n var\n    NullNode: PTreapNode;\n \n procedure Initalize;\n begin\n    if NullNode = nil then\n    begin\n        New(NullNode);\n        NullNode^.Left := NullNode;\n        NullNode^.Right := NullNode;\n        NullNode^.Priority := Infinity;\n    end;\n end;\n \n function FindMax(T: PTreapNode): PTreapNode;\n begin\n    if T <> NullNode then\n        while T^.Right <> NullNode do\n            T := T^.Right;\n    Result := T;\n end;\n \n function FindMin(T: PTreapNode): PTreapNode;\n begin\n    if T <> NullNode then\n        while T^.Left <> NullNode do\n            T := T^.Left;\n    Result := T;\n end;\n \n function Find(T: PTreapNode; Key: TKey): PTreapNode;\n begin\n    while T <> NullNode do\n        if Key < T^.Key then\n            T := T^.Left\n        else if Key > T^.Key then\n            T := T^.Right\n        else\n            Break;\n    Result := T;\n end;\n \n function LeftRotate(T: PTreapNode): PTreapNode;\n begin\n    Result := T^.Left;\n    T^.Left := Result^.Right;\n    Result^.Right := T;\n end;\n \n function RightRotate(T: PTreapNode): PTreapNode;\n begin\n    Result := T^.Right;\n    T^.Right := Result^.Left;\n    Result^.Left := T;\n end;\n \n function InsertNode(Key: TKey; T: PTreapNode): PTreapNode;\n begin\n    if T = NullNode then\n    begin\n        New(T);\n        T^.Left := NullNode;\n        T^.Right := NullNode;\n        T^.Key := Key;\n        T^.Priority := Random(65535);\n    end\n    else if Key < T^.Key then\n    begin\n        T^.Left := InsertNode(Key, T^.Left);\n        if T^.Left^.Priority < T^.Priority then\n            T := LeftRotate(T);\n    end\n    else if Key > T^.Key then\n    begin\n        T^.Right := InsertNode(Key, T^.Right);\n        if T^.Right^.Priority < T^.Priority then\n            T := RightRotate(T);\n    end;\n    Result := T;\n end;\n \n function DeleteNode(Key: TKey; T: PTreapNode): PTreapNode;\n begin\n    if T <> NullNode then\n        if Key < T^.Key then\n            T^.Left := DeleteNode(Key, T^.Left)\n        else if Key > T^.Key then\n            T^.Right := DeleteNode(Key, T^.Right)\n        else\n        begin\n            if T^.Left^.Priority < T^.Right^.Priority then\n                T := LeftRotate(T)\n            else\n                T := RightRotate(T);\n            if T <> NullNode then\n                T := DeleteNode(Key, T)\n            else //RightRotate\n            begin\n                Dispose(T^.Left);\n                T^.Left := NullNode;\n            end;\n        end;\n     Result := T;\n end;\n \n procedure Main;\n begin\n     Initalize;\n end;\n begin\n     Main;\n end.', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:28', '8', '树堆', 'Pascal', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('97', '#include <iostream>\n#include <ctime>\n\n#include <cstdlib>\n#define MAX 100\n\nusing namespace std;\n\ntypedef struct\n{\n	int l,r,key,fix;\n}node;\n\nclass treap\n{\npublic:\n	node p[MAX];\n	int size,root;\n	treap()\n	{\n		srand(time(0));\n		size=-1;\n		root=-1;\n	}\n\n	void rot_l(int &x)\n	{\n		int y=p[x].r;\n		p[x].r=p[y].l;\n		p[y].l=x;\n		x=y;\n	}\n\n	void rot_r(int &x)\n	{\n		int y=p[x].l;\n		p[x].l=p[y].r;\n		p[y].r=x;\n		x=y;\n	}\n\n	void insert(int &k,int tkey)\n	{\n		if (k==-1)\n		{\n			k=++size;\n			p[k].l=p[k].r=-1;\n			p[k].key=tkey;\n			p[k].fix=rand();\n		}\n		else\n		if (tkey<p[k].key)\n		{\n			insert(p[k].l,tkey);\n			if (p[ p[k].l ].fix>p[k].fix)\n				rot_r(k);\n		}\n		else\n		{\n			insert(p[k].r,tkey);\n			if (p[ p[k].r ].fix>p[k].fix)\n				rot_l(k);\n		}\n\n	}\n\n	void remove(int &k,int tkey)\n	{\n		if (k==-1) return;\n		if (tkey<p[k].key)\n			remove(p[k].l,tkey);\n		else if (tkey>p[k].key)\n			remove(p[k].r,tkey);\n		else\n		{\n			if (p[k].l==-1 && p[k].r==-1)\n				k=-1;\n			else if (p[k].l==-1)\n				k=p[k].r;\n			else if (p[k].r==-1)\n				k=p[k].l;\n			else\n			if (p[ p[k].l ].fix < p[ p[k].r ].fix)\n			{\n				rot_l(k);\n				remove(p[k].l,tkey);\n			}\n			else\n			{\n				rot_r(k);\n				remove(p[k].r,tkey);\n			}\n		}\n	}\n\n	void print(int k)\n	{\n		if (p[k].l!=-1)\n			print(p[k].l);\n		cout << p[k].key << \" : \" << p[k].fix << endl;\n		if (p[k].r!=-1)\n			print(p[k].r);\n	}\n};\n\ntreap T;\n\nint main(void)\n{\n\n	int i;\n	for (i = 3; i >= 1;i--)\n		T.insert(T.root,i);\n	T.print(T.root);\n	for (i = 3; i >= 1;i--)\n	{\n		cout << endl;\n		T.remove(T.root,i);\n		T.print(T.root);\n	}\n	return 0;\n}', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:28', '8', '树堆', 'C++', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('98', '本条目部分链接不符合格式手册规范。跨语言链接及章节标题等处的链接可能需要清理。（2015年12月12日） 请协助改善此条目。参见WP:LINKSTYLE、WP:MOSIW以了解细节。突出显示跨语言链接可以便于检查。', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('99', '利用16S 核糖体RNA绘制的系统演化树，三个最大分支（域）分别为细菌域、古菌域和真核生物域。', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('100', '自动生成的生命树，基于完全测序的基因组。[1][2]', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('101', '系统发生树（英语：phylogenetic tree）又称演化树（evolutionary tree），是表明被认为具有共同祖先的各物种间演化关系的树状图。是一种亲缘分支分类方法（cladogram）。在图中，每个节点代表其各分支的最近共同祖先，而节点间的线段长度对应演化距离（如估计的演化时间）。', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('102', '树可分为有根树和无根树两类。有根树是具有方向的树，包含唯一的节点，将其作为树中所有物种的最近共同祖先。右图即是一个有根树，表示了三域系统(Woese 1998)。最常用的确定树根的方法是使用一个或多个无可争议的同源物种作为外群（英文outgroup），这个外群要足够近，以提供足够的信息，但又不能太近以至于和树中的种类相混。', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '根', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('103', '把有根树去掉根即成为无根树。一棵无根树在没有其他信息（外群）或假设（如假设最大枝长为根）时不能确定其树根。无根树是没有方向的，其中线段的两个演化方向都有可能。', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '根', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('104', '近邻结合法 neighbor-joining (NJ)', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '矩阵法', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('105', '最大简约法 maximum parsimony (MP)', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '简约法', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('106', '最大似然估计 maximum likelihood (ML)', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '最大似然法', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('107', '官方网站：http://evolution.genetics.washington.edu/phylip.html （英文）', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', 'Phylip', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('108', '官方网站：http://www.arb-home.de/ （英文）', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', 'ARB', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('109', '官方网站：http://mrbayes.csit.fsu.edu/index.php （英文）', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', 'MrBayes', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('110', 'http://www.mathcs.duq.edu/larget/bambe.html (英文)', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', 'BAMBE', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('111', 'PAUP* TreeView Phylowin fastDNAml SEMPHY PALM', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '软件', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('112', '^ Letunic, I; Bork, P. Interactive Tree Of Life (iTOL): an online tool for phylogenetic tree display and annotation.. Bioinformatics (Pubmed)使用|format=需要含有|url= (帮助). 2007, 23 (1): 127–8. doi:10.1093/bioinformatics/btl529. PMID 17050570.  ^ Ciccarelli, FD; Doerks, T; Von Mering, C; Creevey, CJ; Snel, B; Bork, P. Toward automatic reconstruction of a highly resolved tree of life. Science (Pubmed)使用|format=需要含有|url= (帮助). 2006, 311 (5765): 1283–7. Bibcode:2006Sci...311.1283C. doi:10.1126/science.1123061. PMID 16513982. ', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:48', '10', '系统发生树', '软件', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('113', '维基共享资源中相关的多媒体资源：生命的系统发生树', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:48', '10', '系统发生树', '软件', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('114', 'The Death of the Tree of Life is Greatly Exaggerated 生物软件网 进化树分析软件 生物谷 进化树分析软件 进化树软件使用综述 演化树软件介绍（英文）', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:48', '10', '系统发生树', '软件', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('115', '进化论 生物分类总表 树 (数据结构) en:Tree of life (biology), en:David Hillis\' Hillis Plot (image) 分类学 系统发生学(phylogenetics) 系统发生网络(phylogenetic network)', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:48', '10', '系统发生树', '软件', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('117', '在数学中，随机图是指由随机过程产生的图[1]。随机图的理论处于图论和概率论的交叉地带，主要研究各种经典随机图的性质。第一批关于随机图的结果是保罗·埃尔德什和阿尔弗雷德·雷尼在1959年至1966年的一系列论文中提出的[2].', 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:56', '11', '随机图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('118', '随机图的“随机”二字体现在边的分布上。一个随机图实际上是将给定的顶点之间随机地连上边。假设将一些纽扣散落在地上，并且不断随机地将两个纽扣之间系上一条线，这样就得到一个随机图的例子[3]。边的产生可以依赖于不同的随机方式，这样就产生了不同的随机图模型。一个典型的模型是埃尔德什和雷尼共同研究的ER模型。ER模型是指在给定 n 个顶点后，规定每两个顶点之间都有 p 的概率连起来（ 0 ⩽ p ⩽ 1 {\\displaystyle 0\\leqslant p\\leqslant 1} ），而且这些判定之间两两无关。这样得到的随机图一般记作 G n p {\\displaystyle G_{n}^{p}} 或 E R n ( p ) {\\displaystyle ER_{n}(p)} [4]。', 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:56', '11', '随机图', '定义与模型', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('119', '另一种随机图模型叫做内积模型。内积模型的机制是对每一个顶点指定一个实系数的向量，而两个顶点之间是否连接的概率则是它们的向量的内积的函数。', 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:57', '11', '随机图', '定义与模型', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('120', '一般来说，可以定义任意两个顶点之间相连的概率，这个概率也被称为边概率。定义更广泛的随机图模型的方法是定义所谓的网络概率矩阵。这个矩阵的系数就是边概率，因此详细刻画了随机图的模型。', 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:57', '11', '随机图', '定义与模型', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('121', '随机规则图是随机图中特殊的一类，它的性质可能会与一般的随机图不同。', 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:57', '11', '随机图', '定义与模型', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('122', '随着边概率的不同，随机图可能会呈现不同的属性。对于最典型的ER模型，埃尔德什与雷尼研究了当顶点数目 n 趋向于正无穷大时，ER随机图的性质与概率 p 之间的关系。他们发现，当 p 的值越过某些门槛时，ER随机图的性质会发生突然的改变[3]。ER随机图的许多性质都是突然涌现的，比如说，当 p 的值小于某个特殊值之前，随机图具有某个性质的可能性等于0，但当 p 的值大于这个特殊值以后，随机图具有这个性质的可能性会突然变成1。', 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:57', '11', '随机图', '性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('123', '举例来说，当概率 p 大于某个临界值 pc(n) 后，生成的随机图几乎必然是连通的（概率等于1）。也就是说，对于散落在地上的 n 个纽扣，如果你以这样的概率 p 将两个纽扣之间系上线，那么你拿起一颗纽扣时就几乎能带起所有的纽扣了[3]。', 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:57', '11', '随机图', '性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('124', '随机树是随机图的一类。如同随机图一样，随机树是一个经由随机过程建立的树。随机树的一种生成方法是利用随机置换。首先生成一个 n 2 ( n − 1 ) {\\displaystyle \\scriptstyle {\\frac {n}{2}}(n-1)} 阶随机置换函数，将 n 2 ( n − 1 ) {\\displaystyle \\scriptstyle {\\frac {n}{2}}(n-1)} 个可能连起来的边标上 1 至 n 2 ( n − 1 ) {\\displaystyle \\scriptstyle {\\frac {n}{2}}(n-1)} 的序号。然后按照从小到大的序号排列为原本没有边的图一一添加边。添加第 k {\\displaystyle \\scriptstyle k} 条边时，如果发现添加后会导致图中出现一个圈，那么就放弃添加这条边，而开始添加第 k + 1 {\\displaystyle \\scriptstyle k+1} 条边。最后得到的就是一个随机树[5]。', 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:57', '11', '随机图', '随机树', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('125', '玻色-爱因斯坦凝聚 腔体法 复杂网络 小世界网络 无尺度网络', 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:57', '11', '随机图', '随机树', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('126', '^ Béla Bollobás, Random Graphs, 2nd Edition, 2001, Cambridge University Press ^ 第一篇论文发表于1959年，标题为“On Random Graphs I”（《论随机图 I》），Publ. Math. Debrecen 6, p290. ^ 3.0 3.1 3.2 汪小帆,李翔,陈关荣. 《复杂网络理论及其应用》. 清华大学出版社. 2006. ISBN 9787302125051 （中文）.  ^ Romeo Van Der Hofstad. Random Graphs and Complex Networks (PDF). Eindhoven University of Technology. 2011年2月25日 （英语）.  ^ Alexandr Kazda. The Random Tree Process. Center for Discrete Mathematics and Theoretical Computer Science. [2011-04-24]. ', 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:57', '11', '随机图', '参考来源', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('128', '四元树又称四叉树是一种树状数据结构，在每一个节点上会有四个子区块。四元树常应用于二维空间数据的分析与分类。 它将数据区分成为四个象限。数据范围可以是方形或矩形或其他任意形状。这种数据结构是由 拉斐尔·芬科尔(Raphael Finkel) 与 J. L. Bentley 在1974年发展出来 。 类似的数据分区方法也称为 Q-tree。 所有的四元树法有共同之特点:', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('129', '可分解成为各自的区块 每个区块都有节点容量。当节点达到最大容量时，节点分裂 树状数据结构依造四元树法加以区分', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('130', '图像表示法 空间索引(Spatial index)。 在二维的有效率之碰撞侦测(collision detection)。 地形数据的隐藏面决定(Hidden surface determination)。 存储分散数据，诸如电子表格(spreadsheet)、或著一些矩阵计算的格式化信息。 多维场的解法。(计算流体力学, 电磁学) 生命游戏模拟程序。[1]', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '一些四元树的常用法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('131', '假如几何次分区不能减缩每个四元树的项目数时，(例如，在数据重叠时)则四元树的次分区失败，为了使算法能够继续进行其容量必须突破限制。比如，一个四元树最大的容量为8，而且有9个点在(0, 0)，次分区将会造成3个空的四元树，且每个空四元树会包含最初的9个点，再次分区依此类推。因为树必须允许在这样的象限内超过8点，如此四元树对带有任意几何(比如：地图或图形)的数据集才能够达到O(N)的时间复杂度。', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '区辨说明', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('132', '^ Tomas G. Rokicki. An Algorithm for Compressing Space and Time. 2006-04-01 [2009-05-20]. ', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '区辨说明', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('133', 'Raphael Finkel and J.L. Bentley. Quad Trees: A Data Structure for Retrieval on Composite Keys. Acta Informatica. 1974, 4 (1): 1–9. doi:10.1007/BF00288933.  Mark de Berg, Marc van Kreveld, Mark Overmars, and Otfried Schwarzkopf. Computational Geometry 2nd revised edition. Springer-Verlag. 2000. ISBN 3-540-65620-0.  引文格式1维护：冗余文本 (link) Chapter 14: Quadtrees: pp.291–306.', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '区辨说明', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('134', '八叉树 二叉空间分区(Binary space partitioning) k-d树(Kd-tree) R树(R-tree) UB树(UB-tree) 空间索引(Spatial index) 空间数据库(Spatial database)', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '区辨说明', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('135', 'A discussion of the Quadtree and an application （英文） Considerable discussion and demonstrations of Spatial Indexing （英文）', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '区辨说明', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('137', '四元树区块表示为空间的分区，即在二维上分区块为四组相同的象限、次象限等，且每个叶节点包含有关特殊次区块的数据。树里的每个节点不是正好有4个子节点，就是没有子节点(为一个树叶节点)。四元树区块不是严格的一颗\'树\' - 且位置的次分区与数据无关。他们是比较精确一些称为\'单词查找树\'.', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '四元树区块', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('138', '在一个深度为n的四元树区块中可以用来表示一个视频包含有2n × 2n的像素，每个像素的值为0或1。根节点表示全部视频区块。假如像素在任何区块不是全部为0或1，那就可以进行画分。在这个应用中，每个叶节点代表一个段落的像素、段落像素里面包含全部为零或全部为一的组合。', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:07', '12', '四叉树', '四元树区块', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('139', '四元树区块也可以用为一种数据区块上不同变化解析的表达法。比如，温度在一个区块中可以存储为一个四元树，而树叶节点存储著平均温度涵盖到它所拥有的次区块。', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:07', '12', '四叉树', '四元树区块', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('140', '假如四元树区块被用来表达一组点数据(诸如一组城市的经纬度)，区块就进行次分区直到每个叶节点包含最多一个单点。', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:07', '12', '四叉树', '四元树区块', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('141', '边四元树是专门用来存储直线而不是点。曲线能分区每格到很接近精细的分辨率。如此能产生极度的不平衡树，而此不平衡树可能推翻索引的使用目的。', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:07', '12', '四叉树', '边四元树', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('142', '点四元树的节点类似于二叉树的节点，它们之间的主要差别在于点四元树有4个指针(每一个象限一个指针)、而一般二叉树只有2个指针(左指针及右指针)。点四元树的键值也是经常被分解为两部分，如在直角坐标上的 x 及 y 值。因此，一个节点包含下列信息：', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:07', '12', '四叉树', '点四元树的节点结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('143', '4个指针(Pointer)：quad[‘NW’](西北)、quad[‘NE’](东北)、quad[‘SW’](西南)、及quad[‘SE’](东南)。 点；含有如下项目： 键值；通常以直角作标(x, y)值来表示。 值；比如是\"名字\"。', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:07', '12', '四叉树', '点四元树的节点结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('144', '可变长数组是计算机程序设计中，数组对象的长度在运行时（而不是编译时）确定。[1]', 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:17', '13', '可变长数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('145', '支持可变长数组的程序设计语言有：Ada, Algol 68 (for non-flexible rows), APL, C99 (以及C11[2][3][4] ) ，C# [5], COBOL, Fortran 90, J。', 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:17', '13', '可变长数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('146', 'C/C++的柔性数组成员是另外一个语言特性。', 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:17', '13', '可变长数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('147', '下述C99函数内部的局部变量为可变长数组。', 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:17', '13', '可变长数组', '例子', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('148', 'float read_and_process(int n)\n{\n    float vals[n];\n\n    for (int i = 0; i < n; i++)\n        vals[i] = read_val();\n    return process(vals, n);\n}', 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:17', '13', '可变长数组', '例子', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('149', 'type Vals_Type is array (Positive range <>) of Float;\n\nfunction Read_And_Process (N : Integer) return Float is\n   Vals : Vals_Type (1 .. N);\nbegin\n   for I in 1 .. N loop\n      Vals (I) := Read_Val;\n   end loop;\n   return Process (Vals);\nend Read_And_Process;', 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:17', '13', '可变长数组', '例子', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('150', 'function read_and_process(n) result(o)\n    integer,intent(in)::n\n    real::o\n\n    real,dimension(n)::vals\n    real::read_val, process\n    integer::i\n \n    do i = 1,n\n       vals(i) = read_val()\n    end do\n    o = process(vals, n)\nend function read_and_process', 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:17', '13', '可变长数组', '例子', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('151', 'DATA DIVISION.\nWORKING-STORAGE SECTION.\n01  DEPT-PEOPLE.\n    05  PEOPLE-CNT          PIC S9(4) BINARY.\n    05  DEPT-PERSON         OCCURS 0 TO 20 TIMES DEPENDING ON PEOPLE-CNT.\n        10  PERSON-NAME     PIC X(20).\n        10  PERSON-WAGE     PIC S9(7)V99 PACKED-DECIMAL.', 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:17', '13', '可变长数组', '例子', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('152', 'unsafe void declareStackBasedArray(int size)\n{\n    int *pArray = stackalloc int[size];\n    pArray[0] = 123;\n}', 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:17', '13', '可变长数组', '例子', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('153', '^ http://docs.cray.com/books/004-2179-001/html-004-2179-001/z893434830malz.html ^ http://pic.dhe.ibm.com/infocenter/ratdevz/v8r0/topic/com.ibm.xlcpp111.aix.doc/language_ref/variable_length_arrays.html ^ http://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html ^ ISO 9899:2011 Programming Languages - C 6.7.6.2 4 ^ 作为unsafe-mode stack-allocated arrays', 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:17', '13', '可变长数组', '例子', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('154', '双端队列（deque，全名double-ended queue）是一种具有队列和栈性质的数据结构。双端队列中的元素可以从两端弹出，插入和删除操作限定在队列的两边进行。', 'https://zh.wikipedia.org/wiki/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97', '2013-08-14 06:09:00', '2016-12-20 09:39:35', '15', '双端队列', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('155', '双端队列可以在队列任意一端入队和出队。此外，经常还会有一个查看（Peek）操作，返回该端的数据而不将其出队。', 'https://zh.wikipedia.org/wiki/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97', '2013-08-14 06:09:00', '2016-12-20 09:39:35', '15', '双端队列', '操作', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('156', '操作的名称依语言的不同而不同；主流实现包括：', 'https://zh.wikipedia.org/wiki/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97', '2013-08-14 06:09:00', '2016-12-20 09:39:35', '15', '双端队列', '操作', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('157', '操作 常见名称 Ada C++ Java Perl PHP Python Ruby JavaScript 尾部插入 inject, snoc Append push_back offerLast push array_push append push push 头部插入 push, cons Prepend push_front offerFirst unshift array_unshift appendleft unshift unshift 尾部删除 eject Delete_Last pop_back pollLast pop array_pop pop pop pop 头部删除 pop Delete_First pop_front pollFirst shift array_shift popleft shift shift 查看尾部 Last_Element back peekLast $array[-1] end <obj>[-1] last <obj>[<obj>.length - 1] 查看头部 First_Element front peekFirst $array[0] reset <obj>[0] first <obj>[0]', 'https://zh.wikipedia.org/wiki/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97', '2013-08-14 06:09:00', '2016-12-20 09:39:35', '15', '双端队列', '操作', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('159', '  这是与计算机相关的小作品。你可以通过编辑或修订扩充其内容。', 'https://zh.wikipedia.org/wiki/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97', '2013-08-14 06:09:00', '2016-12-20 09:39:35', '15', '双端队列', '操作', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('160', '平衡树是计算机科学中的一类数据结构。 平衡树是计算机科学中的一类改进的二叉查找树。一般的二叉查找树的查询复杂度是跟目标结点到树根的距离（即深度）有关，因此当结点的深度普遍较大时，查询的均摊复杂度会上升，为了更高效的查询，平衡树应运而生了。', 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('161', '在这里，平衡指所有叶子的深度趋于平衡，更广义的是指在树上所有可能查找的均摊复杂度偏低。', 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('162', '几乎所有平衡树的操作都基于树旋转操作，通过旋转操作可以使得树趋于平衡。 对一棵查找树（search tree）进行查询/新增/删除 等动作, 所花的时间与树的高度h 成比例, 并不与树的容量 n 成比例。如果可以让树维持矮矮胖胖的好身材, 也就是让h维持在O(lg n)左右, 完成上述工作就很省时间。能够一直维持好身材, 不因新增删除而长歪的搜寻树, 叫做balanced search tree（平衡树）。 旋转Rotate —— 不破坏左小右大特性的小手术 平衡树有很多种, 其中有几类树维持平衡的方法, 都是靠整形小手术:', 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '基本操作', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('163', '图中 x 与 y 为 nodes; A, B, C 为一整串的 subtrees。 试想: 如果 x 原来是 y 的 left child; 现在想将 x 变成 parent, 则树的其它部分应如何变化? y 必须变成 right child, 这样才能维持 BST 的特性 -- 左小右大。 至于 x 与 y 以下的其它部分, 可以整串 subtree 一起处理: x 原来的 left subtree (A), 调整后还是 x 的 left subtree; y 原来的 right subtree (C), 调整后还是 y 的 right subtree; 而 x 原来的 right subtree (B), 调整后很自然只有一个地方可以放: 变成 y 的 left subtree。 这些规则都不需要记, 因为如果你希望调整后还维持 BST 左小右大的特性, 这是唯一的答案。 把 x,y 两个值及 A,B,C 三棵 subtrees 内的三串值画在数在线看更清楚:', 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '基本操作', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('164', 'A B C 这个动作, 称为 right rotation 向右旋转, 或称为顺时针旋转 (clockwise)。 原来的 parent (y) 叫做 pivot, 原来的 child (x) 叫做 rotator。 把上图反过来看, 如果原来的树长得像右图, 想将它改成左图, 则称为 left rotation 向左旋转, 或称为逆时针旋转 (counter-clockwise)。 原来的 parent (x) 叫做 pivot, 原来的 child (y) 叫做 rotator。', 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '基本操作', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('165', 'AVL树，经典平衡树, 所有操作的最坏复杂度都是 O ( log ⁡ n ) {\\displaystyle O(\\log {n})} 的。 Treap，利用随机堆的期望深度来优化树的深度，达到较优的期望复杂度。 伸展树，使得经常查找的结点深度较小，从而降低均摊复杂度。 红黑树。 加权平衡树。 2-3树 AA树 替罪羊树', 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '各种平衡树', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('166', '跳表，一种支持平衡树大多数操作的数据结构', 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '其他类型', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('167', '用于表示有序的线性数据结构，如优先队列、关联数组、键-值的映射等。自平衡的二叉查找树的实现与其竞争对手hash表的实现，各具有优缺点。自平衡二叉查找树在按序遍历所有键值时是量级最优的，hash表不能。自平衡二叉查找树在查找一个键值时，最坏情况下时间复杂度优于hash表， O(log n)对比O(n)；但平均时间复杂度逊于hash表，O(log n)对比O(1)。', 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '应用', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('168', '自平衡二叉查找树的排序方法，虽然在平均时间复杂度上也是O(n log n)，但由于cache性能、树的调整操作等，性能上不如快速排序、堆排序、合并排序。', 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '应用', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('170', '在计算机科学中，多重关连数组（英语：multimap），是一种抽象数据结构，它存储著(键，值)的有序对，和map不同之处在于，多重关连数组的有序对可以重复。通常，多重关连数组是利用在map中使用串列或集合当作值的字段。', 'https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E5%85%B3%E8%BF%9E%E6%95%B0%E7%BB%84', '2016-07-07 12:25:00', '2016-12-20 09:39:55', '17', '多重关连数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('171', '这种数据结构包含以下几种常见操作： 向关系数组添加配对 从关系数组内删除配对 修改关系数组内的配对 根据已知的键查找配对', 'https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E5%85%B3%E8%BF%9E%E6%95%B0%E7%BB%84', '2016-07-07 12:25:00', '2016-12-20 09:39:55', '17', '多重关连数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('172', '当需要对一同一个键值存储大量数据时，可以使用多重关连数组。 举例来说，在学生选课系统中，一个学生可以选择多门课程，可以使用多重关连数组，将有序对(学生ID, 课程ID)存入多重关连数组中。', 'https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E5%85%B3%E8%BF%9E%E6%95%B0%E7%BB%84', '2016-07-07 12:25:00', '2016-12-20 09:39:55', '17', '多重关连数组', '使用模式', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('173', 'C++的标准模板库提供利用平衡树来实现多重关连数组,[1] ，且SGI的标准模板库提供了利用散列表hash_multimap [2]', 'https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E5%85%B3%E8%BF%9E%E6%95%B0%E7%BB%84', '2016-07-07 12:25:00', '2016-12-20 09:39:55', '17', '多重关连数组', 'C++', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('174', '^ \"multimap<Key, Data, Compare, Alloc>\". ^ \"hash_multimap<Key, HashFcn, EqualKey, Alloc>\". ^ \"Multimap\".', 'https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E5%85%B3%E8%BF%9E%E6%95%B0%E7%BB%84', '2016-07-07 12:25:00', '2016-12-20 09:39:55', '17', '多重关连数组', 'Dart', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('176', '二叉堆是一种特殊的堆，二叉堆是完全二叉树或者是近似完全二叉树。二叉堆满足堆特性：父节点的键值总是保持固定的序关系于任何一个子节点的键值，且每个节点的左子树和右子树都是一个二叉堆。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('177', '当父节点的键值总是大于或等于任何一个子节点的键值时为最大堆。 当父节点的键值总是小于或等于任何一个子节点的键值时为最小堆。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('178', '二叉堆一般用数组来表示。如果根节点在数组中的位置是1，第n个位置的子节点分别在2n和 2n+1。因此，第1个位置的子节点在2和3，第2个位置的子节点在4和5。以此类推。这种基于1的数组存储方式便于寻找父节点和子节点。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '存储', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('179', '如果存储数组的下标基于0，那么下标为i的节点的子节点是2i + 1与2i + 2；其父节点的下标是⌊(i − 1) ∕ 2⌋。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '存储', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('180', '1                        11\n      /   \\                      /  \\\n     2     3                   9     10\n    /  \\  /  \\                / \\   /  \\\n   4   5  6  7               5  6  7   8\n  / \\  / \\                  /\\  /\\\n 8  9 10 11               1  2 3  4', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '存储', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('181', '将这两个堆保存在以1开始的数组中：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '存储', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('182', '位置:  1  2  3  4  5  6  7  8  9 10 11\n左图:  1  2  3  4  5  6  7  8  9 10 11\n右图: 11  9 10  5  6  7  8  1  2  3  4', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '存储', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('183', '对于一个很大的堆，这种存储是低效的。因为节点的子节点很可能在另外一个内存页中。B-heap是一种效率更高的存储方式，把每个子树放到同一内存页。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '存储', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('184', '如果用指针链表存储堆，那么需要能访问叶节点的方法。可以对二叉树“穿线”(threading)方式，来依序遍历这些节点。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '存储', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('185', '在数组的最末尾插入新节点。然后自下而上调整子节点与父节点（称作up-heap或bubble-up, percolate-up, sift-up, trickle up, heapify-up, cascade-up操作）：比较当前节点与父节点，不满足堆性质则交换。从而使得当前子树满足二叉堆的性质。时间复杂度为O(log n)。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '插入节点', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('186', '对于最大堆，删除根节点就是删除最大值；对于最小堆，是删除最小值。然后，把堆存储的最后那个节点移到填在根节点处。再从上而下调整父节点与它的子节点：对于最大堆，父节点如果小于具有最大值的子节点，则交换二者。这一操作称作down-heap或bubble-down, percolate-down, sift-down, trickle down, heapify-down, cascade-down,extract-min/max等。直至当前节点与它的子节点满足堆性质为止。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '删除根节点', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('187', '下属对最大堆的自上而下调整堆的伪代码中，数组A的下标索引值是从1开始： Max-Heapify[1] (A, i):  left ← 2i  right ← 2i + 1  largest ← i  if left ≤ heap_length[A] and A[left] > A[largest] then:  largest ← left  if right ≤ heap_length[A] and A[right] > A[largest] then:  largest ← right  if largest ≠ i then:  swap A[i] ↔ A[largest]  Max-Heapify(A, largest)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '删除根节点', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('188', '一个直观办法是从单节点的二叉堆开始，每次插入一个节点。其时间复杂度为 O ( n log ⁡ n ) {\\displaystyle O(n\\log n)} 。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:05', '18', '二叉堆', '构造二叉堆', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('189', '最优算法是从一个节点元素任意放置的二叉树开始，自底向上对每一个子树执行删除根节点时的Max-Heapify算法（这是对最大堆而言）使得当前子树成为一个二叉堆。具体而言，假设高度为h的子树均已完成二叉堆化，那么对于高度为h+1的子树，把其根节点沿着最大子节点的分枝做调整，最多需要h步完成二叉堆化。可以证明，这个算法的时间复杂度为 O ( n ) {\\displaystyle O(n)} 。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:05', '18', '二叉堆', '构造二叉堆', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('190', '建造最大堆的伪代码： Build-Max-Heap[1] (A):  heap_length[A] ← length[A]  for i ← floor(length[A]/2) downto 1 do  Max-Heapify(A, i)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:05', '18', '二叉堆', '构造二叉堆', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('191', '最优方法是把两个二叉堆首尾相连放在一个数组中，然后构造新的二叉堆。时间复杂度为 O ( log ⁡ n log ⁡ k ) {\\displaystyle O(\\log n\\log k)} ，其中n、k为两个堆的元素数目。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:05', '18', '二叉堆', '合并两个二叉堆', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('192', '如果经常需要合并两个堆的操作，那么使用二项式堆更好，其时间复杂度为 O ( log ⁡ n ) {\\displaystyle O(\\log n)} 。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:05', '18', '二叉堆', '合并两个二叉堆', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('193', '^ 1.0 1.1 Cormen, T. H. & al., Introduction to Algorithms 2nd, Cambridge, Massachusetts: The MIT Press, 2001, ISBN 0-07-013151-1 ', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:05', '18', '二叉堆', '合并两个二叉堆', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('194', 'http://mathworld.wolfram.com/Heap.html http://www.policyalmanac.org/games/binaryHeaps.htm', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:05', '18', '二叉堆', '合并两个二叉堆', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('195', '链接键 1-7 到数据值 d1-d7 的简单例子。注意链接列表（红色）允许快速按顺序遍历', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('196', 'B+ 树是一种树数据结构，通常用于数据库和操作系统的文件系统中。B+ 树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。B+ 树元素自底向上插入，这与二叉树恰好相反。', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('197', 'B+ 树在节点访问时间远远超过节点内部访问时间的时候，比可作为替代的实现有着实在的优势。这通常在多数节点在次级存储比如硬盘中的时候出现。通过最大化在每个内部节点内的子节点的数目减少树的高度，平衡操作不经常发生，而且效率增加了。这种价值得以确立通常需要每个节点在次级存储中占据完整的磁盘块或近似的大小。', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('198', 'B+ 背后的想法是内部节点可以有在预定范围内的可变数目的子节点。因此，B+ 树不需要象其他自平衡二叉查找树那样经常的重新平衡。对于特定的实现在子节点数目上的低和高边界是固定的。例如，在 2-3 B 树（常简称为2-3 树）中，每个内部节点只可能有 2 或 3 个子节点。如果节点有无效数目的子节点则被当作处于违规状态。', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('199', 'B+ 树的创造者 Rudolf Bayer 没有解释B代表什么。最常见的观点是B代表平衡(balanced)，因为所有的叶子节点在树中都在相同的级别上。B也可能代表Bayer，或者是波音（Boeing），因为他曾经工作于波音科学研究实验室。', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('200', '在 B+ 树中的节点通常被表示为一组有序的元素和子指针。如果此B+树的序数（order）是m ，则除了根之外的每个节点都包含最少 ⌊ m / 2 ⌋ {\\displaystyle \\lfloor m/2\\rfloor } 个元素最多 m-1 个元素，对于任意的节点有最多 m 个子指针。对于所有内部节点，子指针的数目总是比元素的数目多一个。因为所有叶子都在相同的高度上，节点通常不包含确定它们是叶子还是内部节点的方式。', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '节点结构', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('201', '每个内部节点的元素充当分开它的子树的分离值。例如，如果内部节点有三个子节点（或子树）则它必须有两个分离值或元素 a1 和 a2。在最左子树中所有的值都小于 a1，在中间子树中所有的值都在 a1 和 a2 之间，而在最右子树中所有的值都大于 a2。', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '节点结构', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('202', '假定 L 是节点允许拥有子节点的最小数目，而 U 是最大数目。则每个节点总是有在 L 和 U 之间（包含它们在内）个子节点，除了一个例外：根节点有从2到U（包含它们在内）个子节点。换句话说，根节点豁免于低边界限制，而拥有它自己的低边界2。这允许树持有小数目的元素。根有一个子节点没有意义，因为附着在这个子节点上的子树可以简单的附着在根节点上。允许根节点没有子节点也是不需要的，因为没有元素的树典型的表示为没有根节点。', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '注解', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('203', 'Robert Tarjan 证明了均摊的分裂／合并数目是 2。', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:14', '19', 'B+树', '注解', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('204', 'NTFS 数据库 二叉树 B# Tree B树 Bitmap index', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:14', '19', 'B+树', '注解', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('205', '在Wikibooks Transwiki有更多关于本条目的内容： B+ tree', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:14', '19', 'B+树', '注解', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('206', 'B+ tree in C language Open Source C++ B+ Tree Implementation B+ tree implementation as C++ template library Perl implementation of B+ trees java/C#/python implementations of B+ trees Your Grandmother\'s guide to Algorithms Java implementation of in-memory B+-Trees and other algorithms. Study notes for B+ Trees - Insertion and Deletion Dr. Monge\'s B+ Tree index notes Link to how BTrees work Evaluating the performance of CSB+-trees on Mutithreaded Architectures Effect of node size on the performance of cache conscious B+-trees Fractal Prefetching B+-trees Towards pB+-trees in the field: implementations Choices and performance Cache-Conscious Index Structures for Main-Memory Databases B+Tree Java SortedMap Implementation', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:14', '19', 'B+树', '注解', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('208', '查找以典型的方式进行，类似于二叉查找树。起始于根节点，自顶向下遍历树，选择其分离值在要查找值的任意一边的子指针。在节点内部典型的使用是二分查找来确定这个位置。', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:14', '19', 'B+树', '查找', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('209', '节点要处于违规状态，它必须包含在可接受范围之外数目的元素。', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:14', '19', 'B+树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('210', '首先，查找要插入其中的节点的位置。接着把值插入这个节点中。 如果没有节点处于违规状态则处理结束。 如果某个节点有过多元素，则把它分裂为两个节点，每个都有最小数目的元素。在树上递归向上继续这个处理直到到达根节点，如果根节点被分裂，则创建一个新根节点。为了使它工作，元素的最小和最大数目典型的必须选择为使最小数不小于最大数的一半。', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:14', '19', 'B+树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('211', '首先，查找要删除的值。接着从包含它的节点中删除这个值。 如果没有节点处于违规状态则处理结束。 如果节点处于违规状态则有两种可能情况： 它的兄弟节点，就是同一个父节点的子节点，可以把一个或多个它的子节点转移到当前节点，而把它返回为合法状态。如果是这样，在更改父节点和两个兄弟节点的分离值之后处理结束。 它的兄弟节点由于处在低边界上而没有额外的子节点。在这种情况下把两个兄弟节点合并到一个单一的节点中，而且我们递归到父节点上，因为它被删除了一个子节点。持续这个处理直到当前节点是合法状态或者到达根节点，在其上根节点的子节点被合并而且合并后的节点成为新的根节点。', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:14', '19', 'B+树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('212', '在计算机科学中，数据结构（英语：data structure）是计算机中存储、组织数据的方式。', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('213', '数据结构意味着接口或封装：一个数据结构可被视为两个函数之间的接口，或者是由数据类型联合组成的存储内容的访问方法封装。', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('214', '大多数数据结构都由数列、记录、可辨识联合、引用等基本类型构成。举例而言，可为空的引用（nullable reference）是引用与可辨识联合的结合体，而最简单的链式结构链表则是由记录与可空引用构成。', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('215', '数据结构可透过程序语言所提供的数据类型、引用及其他操作加以实现。一个设计良好的数据结构，应该在尽可能使用较少的时间与空间资源的前提下，支持各种程序运行。', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('216', '不同种类的数据结构适合不同种类的应用，部分数据结构甚至是为了解决特定问题而设计出来的。例如B树即为加快树状结构访问速度而设计的数据结构，常被应用在数据库和文件系统上。', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('217', '正确的数据结构选择可以提高算法的效率（请参考算法效率（英语：algorithmic efficiency））。在计算机程序设计的过程里，选择适当的数据结构是一项重要工作。许多大型系统的编写经验显示，程序设计的困难程度与最终成果的质量与表现，取决于是否选择了最适合的数据结构。', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('218', '系统架构的关键因素是数据结构而非算法的见解，导致了多种形式化的设计方法与编程语言的出现。绝大多数的语言都带有某种程度上的模块化思想，透过将数据结构的具体实现封装隐藏于用户界面之后的方法，来让不同的应用程序能够安全地重用这些数据结构。C++、Java、Python等面向对象的编程语言可使用类别来达到这个目的。', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('219', '因为数据结构概念的普及，现代编程语言及其API中都包含了多种默认的数据结构，例如 C++ 标准模板库中的容器、Java集合框架以及微软的.NET Framework。', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('220', '数组（Array） 堆栈（Stack） 队列（Queue） 链表（Linked List） 树（Tree） 图（Graph） 堆（Heap） 散列表（Hash）', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '常见的数据结构', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('221', '《算法与数据结构词典》中的描述 http://www.cse.unr.edu/~bebis/CS308/ Bruno R. Preiss，面向对象程序设计的数据类型与算法模型：C++、Java、C#、Python、Ruby', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '常见的数据结构', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('222', '[显示] 查 论 编 数据结构 类型 集合 容器 抽象类型 关联数组 多重关连数组 列表 堆栈 队列 双端队列 优先队列 双端优先队列 集合 多重集 并查集 数组 字符串 位数组 环形缓冲器 动态数组 哈希表 哈希数组树 稀疏数组 列表 双端队列 队列 堆栈 循环队列 关联表 链表 跳跃列表 松散链表 异或链表 树 线段树 自平衡二叉查找树 B树 二叉树 AA树 AVL树 红黑树 平衡树 伸展树 二叉查找树 堆 二叉堆 二项堆 斐波那契堆 R树 R*树 R+树 Hilbert R树 前缀树 哈希树 图 有向图 有向无环图 二元决策图 无向图 确定性非循环有限自动机 数据结构列表', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '常见的数据结构', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('223', '[显示] 查 论 编 计算机科学 数学基础 数理逻辑 · 集合论 · 数论 · 图论 · 类型论 · 范畴论 · 数值分析 · 信息论 计算理论 自动机 · 可计算性理论 · 计算复杂性理论 · 量子计算 · 数值计算方法 算法和数据结构 算法分析 · 算法设计 · 计算几何 编程语言和编译器 语法分析器 · 解释器 · 编程范型（过程化编程 · 面向对象程序编程 · 函数式编程 · 逻辑编程等） 并发、并行和分布式系统 多处理器 · 网格计算 · 并发控制 软件工程 需求分析 · 软件设计 · 程序设计 · 形式化方法 · 软件测试 · 软件开发过程 系统架构 电脑系统架构 · 微处理器体系结构 · 操作系统 电信与网络 路由 · 网络拓扑 · 密码学 数据库 数据库管理系统 · 关系数据库 · 结构化查询语言 · NoSQL · 事务处理 · 数据库索引 · 数据挖掘 人工智能 自动推理 · 计算语言学 · 计算机视觉 · 进化计算 · 专家系统 · 机器学习 · 自然语言处理 · 机器人学 计算机图形学 可视化 · 计算机动画 · 图像处理 人机交互 计算机辅助功能 · 用户界面 · 可穿戴计算机 · 普适计算 · 虚拟现实 · 聊天机器人 科学计算 人工生命 · 生物信息学 · 认知科学 · 计算化学 · 计算神经科学 · 计算物理学 · 数值算法 · 符号计算 注：计算机科学领域也可根据ACM-2012分类系统进行分类。', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '常见的数据结构', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('224', '规范控制 GND: 4011146-5 NDL: 01167757', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '常见的数据结构', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('226', '斐波那契堆(Fibonacci heap)是计算机科学中树的集合。它比二项式堆具有更好的平摊分析性能，可用于实现合并优先队列。不涉及删除元素的操作有O(1)的平摊时间。 Extract-Min和Delete的数目和其它相比，较小时效率更佳。稠密图每次decrease key只要O(1)的平摊时间，和二项堆的O(lg n)相比是巨大的改进。', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('227', '斐波纳契堆于1984年由Michael L. Fredman与Robert E. Tarjan提出，1987年公开发表。[1]名字来源于运行时分析使用的斐波那契数。', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('228', '斐波那契堆是由一组最小堆有序树构成的。每个节点的度数为其子节点的数目。树的度数为其根节点的度数。', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '结构', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('229', '斐波那契堆中的树都是有根的但是无序。每个节点x包含指向父节点的指针p[x]和指向任意一个子结点的child[x]。x的所有子节点都用双向循环链表链接起来，叫做x的子链表。子链表中的每一个节点y都有指向它的左兄弟的left[y]和右兄弟的right[y]。如果节点y是x仅有的子节点，则left[y]=right[y]=y。', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '结构', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('230', '斐波那契堆中所有树的根节点也用一个双向循环链表链接起来。', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '结构', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('231', '使用一个指针指向斐波那契堆中最小元素。', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '结构', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('232', '父节点p[x] 指向任一子女的指针child[x]——结点x的子女被链接成一个环形双链表，称为x的子女表 左兄弟left[x] 右兄弟right[x]——当left[x] = right[x] = x时，说明x是独子。 子女的个数degree[x] 布尔值域mark[x]——标记是否失去了一个孩子', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '建立一个新的斐波纳契堆', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('233', '//斐波那契结点ADT\n   struct FibonacciHeapNode {\n       int key;       //结点\n       int degree;    //度\n       FibonacciHeapNode * left;  //左兄弟\n       FibonacciHeapNode * right; //右兄弟\n       FibonacciHeapNode * parent; //父结点\n       FibonacciHeapNode * child;  //第一个孩子结点\n       bool marked;           //是否被删除第1个孩子\n   };\n   typedef FibonacciHeapNode FibNode;', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '建立一个新的斐波纳契堆', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('234', '对于一个给定的斐波那契堆H，可以通过指向包含最小关键字的树根的指针min[H]来访问，这个结点被称为斐波那契堆中的最小结点。如果一个斐波那契堆H是空的，则min[H] = NIL. 在一个斐波那契堆中，所有树的根都通过left和right指针链接成一个环形的双向链表，称为堆的根表。于是，指针min[H]就指向根表中具有最小关键字的结点。', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '建立一个新的斐波纳契堆', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('235', '//斐波那契堆ADT\n   struct FibonacciHeap {\n       int keyNum;   //堆中结点个数\n       FibonacciHeapNode * min;//最小堆，根结点\n       int maxNumOfDegree;   //最大度\n       FibonacciHeapNode * * cons;//指向最大度的内存区域\n   };\n   typedef FibonacciHeap FibHeap;', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '建立一个新的斐波纳契堆', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('236', '创建一个空的斐波那契堆，过程MAKE-FIB-HEAP 分配并返回一个斐波那契堆对象H；', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '建立一个新的斐波纳契堆', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('237', '//初始化一个空的Fibonacci Heap\n   FibHeap * FibHeapMake() {\n       FibHeap * heap = NULL;\n       heap = (FibHeap *) malloc(sizeof(FibHeap));\n       if (NULL == heap) {\n           puts(\"Out of Space!!\");\n           exit(1);\n       }\n       memset(heap, 0, sizeof(FibHeap));\n       return heap;\n   }\n    \n   //初始化结点x\n   FibNode * FibHeapNodeMake() {\n       FibNode * x = NULL;\n       x = (FibNode *) malloc(sizeof(FibNode));\n       if (NULL == x) {\n           puts(\"Out of Space!!\");\n           exit(1);\n       }\n       memset(x, 0, sizeof(FibNode));\n       x->left = x->right = x;\n       return x;\n   }', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '建立一个新的斐波纳契堆', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('238', '创建一个仅包含一个节点的新的斐波纳契堆，然后执行堆合并。', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '插入一个节点', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('239', '由于用一个指针指向了具有最小值的根节点，因此查找最小的节点是平凡的操作。', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:45', '22', '斐波那契堆', '查找最小的节点', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('240', '简单合并两个斐波纳契堆的根表。即把两个斐波纳契堆的所有树的根首尾衔接并置。', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:45', '22', '斐波那契堆', '合并两个斐波纳契堆', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('241', '查找最小的根节点并删除它，其所有的子节点都加入堆的根表，即它的子树都成为堆所包含的树； 需要查找并维护堆的最小根节点，但这耗时较大。为此，同时完成堆的维护：对堆当前包含的树的度数从低到高，迭代执行具有相同度数的树的合并并实现最小树化调整，使得堆包含的树具有不同的度数。这一步使用一个数组，数组下标为根节点的度数，数组的值为指向该根节点指针。如果发现具有相同度数的其他根节点则合并两棵树并维护该数组的状态。 对当前堆的所有根节点查找最小的根节点。', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:45', '22', '斐波那契堆', '释放（删除）最小的节点', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('242', '对一个节点的键值降低后，自键值降低的节点开始自下而上的迭代执行下述操作，直至到根节点或一个未被标记（marked）节点为止：', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:45', '22', '斐波那契堆', '降低一个节点的键值', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('243', '如果当前节点键值小于其父节点的键值，则把该节点及其子树摘下来作为堆的新树的根节点；其原父节点如果是被标记（marked）节点，则也被摘下来作为堆的新树的根节点；如果其原父节点不是被标记（marked）节点且不是根节点，则其原父节点被加标记。', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:45', '22', '斐波那契堆', '降低一个节点的键值', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('244', '如果堆的新树的根节点被标记（marked），则去除该标记。', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:45', '22', '斐波那契堆', '降低一个节点的键值', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('245', '把被删除节点的键值调整为负无穷小，然后执行“降低一个节点的键值”算法，然后再执行“删除最小节点”算法。', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:45', '22', '斐波那契堆', '删除节点', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('246', '^ Fredman, Michael Lawrence; Tarjan, Robert E. Fibonacci heaps and their uses in improved network optimization algorithms (PDF). Journal of the Association for Computing Machinery. 1987, 34 (3): 596–615. doi:10.1145/28869.28874. ', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:45', '22', '斐波那契堆', '删除节点', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('247', '当前条目的内容正在依照en:Perfect_hash_function的内容进行翻译。 如果您熟知条目内容并擅长翻译，欢迎协助改善或校对这篇条目，长期闲置的非中文内容可能会被移除。', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('248', '对集合S的完美散列函数 是一个将S的每个元素映射到一系列无冲突的整数的 哈希函数。一个完美散列函数的应用与其他哈希函数的应用基本一致，但不需要任何冲突解决方案。在数学术语中，这是一个完全 单射函数.', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('249', '对于特定集合S的完美散列函数能在常数时间中被计算出，其映射值在一个相对小的范围内，能被一个随机化算法发现，该算法的操作次数与S的大小成正比.[1]任何适合在哈希表中使用的完美散列函数需要至少与S的大小成正比的位数。', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '特性及使用', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('250', '一个值的位数被限定 范围的完美散列函数能应用于高效查找操作中：假定查找键(key)与集合S（或与集合S关联的值）对应，然后将完美散列函数应用于查找键，得到哈希值（一个整数），然后在查找表中取出该整数对应的值。在集合S极少更新且查询频率非常多的情况下，使用完美hash函数是非常有效的。对集合S更新频率的限定是由于对任何集合S的修改，都将导致该完美散列函数退化为非完美散列函数。每次集合S被修改后自动更新hash函数的解决方案被称为 dynamic perfect hashing，但这类方法非常复杂，难以实现。一个简单的允许动态更新集合S的完美散列函数的替代品叫 cuckoo hashing。', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '特性及使用', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('251', '最小完美散列函数是一个能将n个键（key）映射到n个连续的整数的完美散列函数。 产生的值通常为 [0..n−1] 或 [1..n]。正式表述如下：设j和k是有限集合K的两个元素。F是一个最小完美散列函数iff F(j)=F(k)只在j=k的情况下成立(单射)；并且存在整数a，使得F的范围为a..a+|K|−1。已经在数学上证明，通用的完美hash函数至少需要每个键（key）1.44 比特（bit）[2] 。而当前已知的最小完美hash散列函数每个键需要2.6 比特[3]。', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '最小完美散列函数', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('252', '对一个最小完美散列函数F，若键以a1, a2, ..., an次序给出，对任意键aj and ak, j<k，意味着F(aj)<F(ak).[4] Order-preserving minimal perfect hash functions require necessarily Ω(n log n) bits to be represented.[5]，我们称该最小完美散列函数F是保序 的。', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '最小完美散列函数', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('253', '若对一个最小完美散列函数F，其应用变换后得到的值保持了键（key）的字典序，我们称该最小完美散列函数F为单调的。在此情况下，函数产生的值就是输入的键在所有可能的有序键序列中的位置。若被hash的键被存储于有序数组中，已实现一种策略，对每个键存储少量附加位（bits），以取得更快计算hash值的优势。[6]', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '最小完美散列函数', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('254', 'Dynamic perfect hashing Pearson hashing Succinct data structure Universal hashing', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '请参阅', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('255', '^ Fredman, M. L.; Komlós, J. N.; Szemerédi, E. Storing a Sparse Table with 0(1) Worst Case Access Time. Journal of the ACM. 1984, 31 (3): 538. doi:10.1145/828.1884.  ^ Belazzougui, D.; Botelho, F. C.; Dietzfelbinger, M. Hash, Displace, and Compress. Algorithms - ESA 2009 (PDF). LNCS 5757. 2009: 682. doi:10.1007/978-3-642-04128-0_61. ISBN 978-3-642-04127-3.  ^ Baeza-Yates, Ricardo; Poblete, Patricio V., Searching, (编) Atallah, Mikhail J.; Blanton, Marina, Algorithms and Theory of Computation Handbook: General Concepts and Techniques 2nd, CRC Press, 2010, ISBN 9781584888239 . See in particular p. 2-10 ^ Jenkins, Bob, order-preserving minimal perfect hashing, (编) Black, Paul E., Dictionary of Algorithms and Data Structures, U.S. National Institute of Standards and Technology, 14 April 2009 [2013-03-05]  ^ Fox, E. A.; Chen, Q. F.; Daoud, A. M.; Heath, L. S. Order preserving minimal perfect hash functions and information retrieval. Proceedings of the 13th annual international ACM SIGIR conference on Research and development in information retrieval - SIGIR \'90. 1990: 279. doi:10.1145/96749.98233. ISBN 0897914082.  ^ Belazzougui, Djamal; Boldi, Paolo; Pagh, Rasmus; Vigna, Sebastiano, Theory and practice of monotone minimal perfect hashing, Journal of Experimental Algorithmics, November 2008, 16, Art. no. 3.2, 26pp, doi:10.1145/1963190.2025378 .', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:55', '23', '完美散列', '索引', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('256', 'Richard J. Cichelli. Minimal Perfect Hash Functions Made Simple, Communications of the ACM, Vol. 23, Number 1, January 1980. Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Section 11.5: Perfect hashing, pp. 245–249. Fabiano C. Botelho, Rasmus Pagh and Nivio Ziviani. \"Perfect Hashing for Data Management Applications\". Fabiano C. Botelho and Nivio Ziviani. \"External perfect hashing for very large key sets\". 16th ACM Conference on Information and Knowledge Management (CIKM07), Lisbon, Portugal, November 2007. Djamal Belazzougui, Paolo Boldi, Rasmus Pagh, and Sebastiano Vigna. \"Monotone minimal perfect hashing: Searching a sorted table with O(1) accesses\". In Proceedings of the 20th Annual ACM-SIAM Symposium On Discrete Mathematics (SODA), New York, 2009. ACM Press. Djamal Belazzougui, Paolo Boldi, Rasmus Pagh, and Sebastiano Vigna. \"Theory and practise of monotone minimal perfect hashing\". In Proceedings of the Tenth Workshop on Algorithm Engineering and Experiments (ALENEX). SIAM, 2009. Douglas C. Schmidt, GPERF: A Perfect Hash Function Generator, C++ Report, SIGS, Vol. 10, No. 10, November/December, 1998.', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:55', '23', '完美散列', '进一步阅读', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('257', 'Minimal Perfect Hashing by Bob Jenkins gperf is an Open Source C and C++ perfect hash generator cmph is Open Source implementing many perfect hashing methods Sux4J is Open Source implementing perfect hashing, including monotone minimal perfect hashing in Java MPHSharp is Open Source implementing many perfect hashing methods in C#', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:55', '23', '完美散列', '进一步阅读', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('258', '左：递回子切分一个立方体为多个卦限。右：对应的八岔树', 'https://zh.wikipedia.org/wiki/%E5%85%AB%E5%8F%89%E6%A0%91', '2015-10-12 12:48:00', '2016-12-20 09:41:13', '25', '八叉树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('259', '八叉树（octree），或称八元树，是一种用于描述三维空间的树状数据结构。八叉树的每个节点表示一个正方体的体积元素，每个节点有八个子节点，这八个子节点所表示的体积元素加在一起就等于父节点的体积。一般中心点作为节点的分叉中心。', 'https://zh.wikipedia.org/wiki/%E5%85%AB%E5%8F%89%E6%A0%91', '2015-10-12 12:48:00', '2016-12-20 09:41:13', '25', '八叉树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('260', '维基共享资源中相关的多媒体资源：八叉树', 'https://zh.wikipedia.org/wiki/%E5%85%AB%E5%8F%89%E6%A0%91', '2015-10-12 12:48:00', '2016-12-20 09:41:13', '25', '八叉树', '主要用途', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('261', 'Octree Quantization in Microsoft Systems Journal Color Quantization using Octrees in Dr. Dobb\'s Color Quantization using Octrees in Dr. Dobb\'s Source Code Octree Color Quantization Overview Parallel implementation of octtree generation algorithm, P. Sojan Lal, A Unnikrishnan, K Poulose Jacob, ICIP 1997, IEEE Digital Library Generation of Octrees from Raster Scan with Reduced Information Loss, P. Sojan Lal, A Unnikrishnan, K Poulose Jacob, IASTED International conference VIIP 2001 [1] C++ implementation (GPL license) Parallel Octrees for Finite Element Applications Cube 2: Sauerbraten - a game written in the octree-heavy Cube 2 engine Ogre - A 3d Object-oriented Graphics Rendering Engine with a Octree Scene Manager Implementation (MIT license) Dendro: parallel multigrid for octree meshes (MPI/C++ implementation) Video: Use of an octree in state estimation', 'https://zh.wikipedia.org/wiki/%E5%85%AB%E5%8F%89%E6%A0%91', '2015-10-12 12:48:00', '2016-12-20 09:41:13', '25', '八叉树', '主要用途', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('263', '一笔画问题是图论中一个著名的问题。一笔画问题起源于柯尼斯堡七桥问题。数学家欧拉在他1736年发表的论文《柯尼斯堡的七桥》中不仅解决了七桥问题，也提出了一笔画定理，顺带解决了一笔画问题[1]。一般认为，欧拉的研究是图论的开端。', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('264', '与一笔画问题相对应的一个图论问题是哈密顿问题。', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('265', '一笔画问题是柯尼斯堡问题经抽象化后的推广，是图遍历问题的一种。在柯尼斯堡问题中，如果将桥所连接的地区视为点，将每座桥视为一条边，那么问题将变成：对于一个有着四个顶点和七条边的连通图 G ( S , E ) {\\displaystyle G(S,E)} ，能否找到一个恰好包含了所有的边，并且没有重复的路径。欧拉将这个问题推广为：对于一个给定的连通图，怎样判断是否存在着一个恰好包含了所有的边，并且没有重复的路径？这就是一笔画问题。用图论的术语来说，就是判断这个图是否是一个能够遍历完所有的边而没有重复。这样的图现称为欧拉图。这时遍历的路径称作欧拉路径（一个环或者一条链），如果路径闭合（一个圈），则称为欧拉回路[1]。', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '问题的提出', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('266', '一笔画问题的推广是多笔画问题，即对于不能一笔画的图，探讨最少能用多少笔来画成。', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '问题的提出', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('267', '一笔画问题讨论的是能否不重复地遍历一个图的所有边，至于其中有否顶点的遍历或重复经过则没有要求。哈密顿问题讨论的则是顶点的遍历：能否不重复地遍历一个图的所有顶点？[4]哈密顿问题由哈密顿在1856年首次提出，至今尚未完全解决[2]。', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '一笔画问题与哈密顿问题', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('268', '柯尼斯堡七桥问题 哈密尔顿问题 树 (图论) 中国邮递员问题', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '一笔画问题与哈密顿问题', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('269', '^ 1.0 1.1 1.2 Janet Heine Barnett, Early Writings on Graph Theory: Euler Circuits and The KÄonigsberg Bridge Problem ^ 2.0 2.1 2.2 2.3 2.4 熊斌，郑仲义，《图论》，第四章，38-46，华东师范大学出版社。 ^ 3.0 3.1 详细的证明 ^ 欧拉图和哈密顿图', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '参考来源', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('270', '连通的无向图 G {\\displaystyle G} 有欧拉路径的充要条件是： G {\\displaystyle G} 中奇顶点（连接的边数量为奇数的顶点）的数目等于0或者2。', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '定理一', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('271', '连通的无向图 G {\\displaystyle G} 是欧拉环（存在欧拉回路）的充要条件是： G {\\displaystyle G} 中每个顶点的度都是偶数。[2]。', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '定理一', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('272', '证明：[2][3] 必要性：如果一个图能一笔画成，那么对每一个顶点，要么路径中“进入”这个点的边数等于“离开”这个点的边数：这时点的度为偶数。要么两者相差一：这时这个点必然是起点或终点之一。注意到有起点就必然有终点，因此奇顶点的数目要么是0，要么是2。 充分性： 如果图中没有奇顶点，那么随便选一个点出发，连一个环 C 1 {\\displaystyle C_{1}} 。如果这个环就是原图，那么结束。如果不是，那么由于原图是连通的， C 1 {\\displaystyle C_{1}} 和原图的其它部分必然有公共顶点 s 1 {\\displaystyle s_{1}} 。从这一点出发，在原图的剩余部分中重复上述步骤。由于原图是连通图，经过若干步后，全图被分为一些环。由于两个相连的环就是一个环，原来的图也就是一个欧拉环了。 如果图中有两个奇顶点 u {\\displaystyle u} 和 v {\\displaystyle v} ，那么加多一条边将它们连上后得到一个无奇顶点的连通图。由上知这个图是一个环，因此去掉新加的边后成为一条路径，起点和终点是 u {\\displaystyle u} 和 v {\\displaystyle v} 。证毕。', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '定理一', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('273', '连通无向图有欧拉路径的充要条件也可以写作“图中奇顶点数目不多于2个”，这是因为奇顶点数目不可能是1个。实际上，连通无向图中，奇顶点的数目总是偶数。', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '定理一', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('274', '对于不连通的无向图，如果有两个互不连通的部分都包含至少一条边，那么显然不能一笔画。只有当此图的边全都在某一个连通部分中（即其它的连通部分都是一个个孤立的顶点，度数为0），并满足连通无向图关于一笔画的充要条件，而该图才能一笔画。也即是说，可以一笔画的（无向）图如果不是连通图，就必定是一个可以一笔画的连通图与若干个孤立顶点的组合。', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '定理一', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('275', '除了用顶点的度数作为判定的充要条件，还可以用图中边的特性来作为欧拉回路存在的判定准则。连通的无向图 G {\\displaystyle G} 中存在欧拉回路，等价于图 G {\\displaystyle G} 所有的边可以划分为若干个环的不交并。具体来说，等价于存在一系列的环 C 1 , C 2 , ⋯ , C m {\\displaystyle C_{1},C_{2},\\cdots ,C_{m}} ，使得图 G {\\displaystyle G} 里的每一条边都恰好属于某一个环。', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '定理一', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('276', '如果连通无向图 G {\\displaystyle G} 有 2 k {\\displaystyle 2k} 个奇顶点，那么它可以用 k {\\displaystyle k} 笔画成，并且至少要用 k {\\displaystyle k} 笔画成[2]。', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '定理二', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('277', '证明：[2][3] 将这 2 k {\\displaystyle 2k} 个奇顶点分成 k {\\displaystyle k} 对后分别连起，则得到一个无奇顶点的连通图。由上知这个图是一个环，因此去掉新加的边后至多成为 k {\\displaystyle k} 条欧拉路径，因此必然可以用 k {\\displaystyle k} 笔画成。但是假设全图可以分为 q {\\displaystyle q} 条欧拉路径，则由定理一知，每条链中只有不多于两个奇顶点，于是 2 q ≥ 2 k {\\displaystyle 2q\\geq 2k} 。因此必定要 k {\\displaystyle k} 笔画成。', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '定理二', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('278', '对有向图来说，一笔画不仅指遍历所有边，而且要遵循正确的方向。严谨地说，一个连通有向图 G {\\displaystyle G} 有欧拉路径，指存在一个顶点，从它出发，沿着有向边的方向，可以不重复地遍历图中所有的边。有向图的欧拉回路则是指可以从某一顶点开始，沿有向边的方向不重复地遍历所有边，然后回到原来出发的顶点。用类似于定理一中证明的思路，可以得到有向图一笔画的判定准则：', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '有向图的一笔画', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('279', '一个连通的有向图可以表示为一条从顶点 u {\\displaystyle u} 到 v {\\displaystyle v} 的（不闭合的）欧拉路径的充要条件是： u {\\displaystyle u} 的出度（从这个顶点发出的有向边的数量）比入度（指向这个顶点的有向边的数量）多1， v {\\displaystyle v} 的出度比入度少1，而其它顶点的出度和入度都相等。 一个连通的有向图是欧拉环（存在欧拉回路）的充要条件是以下两个之一： 每个顶点的出度和入度都相等； 存在一系列的（有向）环 C 1 , C 2 , ⋯ , C m {\\displaystyle C_{1},C_{2},\\cdots ,C_{m}} ，使得图 G {\\displaystyle G} 里的每一条边都恰好属于某一个环。', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '有向图的一笔画', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('280', '右图一是七桥问题抽象化后得到的模型，由四个顶点和七条边组成。注意到四个顶点全是奇顶点，由定理一可知无法一笔画成。', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '七桥问题', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('281', '图二是中文“串”字抽象化后得到的模型。由于只有最上方和最下方的顶点是奇顶点，由定理一知它可以一笔画成。', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '一个可以一笔画的例子', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('282', '这个句子“this is an example of a huffman tree”中得到的字母频率来建构霍夫曼树。句中字母的编码和频率如图所示。编码此句子需要135 bit（不包括保存树所用的空间）', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('283', '字母 频率 编码 space 7 111 a 4 010 e 4 000 f 3 1101 h 2 1010 i 2 1000 m 2 0111 n 2 0010 s 2 1011 t 2 0110 l 1 11001 o 1 00110 p 1 10011 r 1 11000 u 1 00111 x 1 10010', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('284', '霍夫曼编码（英语：Huffman Coding），又译为哈夫曼编码、赫夫曼编码，是一种用于无损数据压缩的熵编码（权编码）算法。由大卫·霍夫曼在1952年发明。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('285', '在计算机数据处理中，霍夫曼编码使用变长编码表对源符号（如文件中的一个字母）进行编码，其中变长编码表是通过一种评估来源符号出现概率的方法得到的，出现概率高的字母使用较短的编码，反之出现概率低的则使用较长的编码，这便使编码之后的字符串的平均长度、期望值降低，从而达到无损压缩数据的目的。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('286', '例如，在英文中，e的出现概率最高，而z的出现概率则最低。当利用霍夫曼编码对一篇英文进行压缩时，e极有可能用一个比特来表示，而z则可能花去25个比特（不是26）。用普通的表示方法时，每个英文字母均占用一个字节，即8个比特。二者相比，e使用了一般编码的1/8的长度，z则使用了3倍多。倘若我们能实现对于英文中各个字母出现概率的较准确的估算，就可以大幅度提高无损压缩的比例。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('287', '霍夫曼树又称最优二叉树，是一种带权路径长度最短的二叉树。所谓树的带权路径长度，就是树中所有的叶结点的权值乘上其到根结点的路径长度（若根结点为0层，叶结点到根结点的路径长度为叶结点的层数）。树的路径长度是从树根到每一结点的路径长度之和，记为WPL=（W1*L1+W2*L2+W3*L3+...+Wn*Ln），N个权值Wi（i=1,2,...n）构成一棵有N个叶结点的二叉树，相应的叶结点的路径长度为Li（i=1,2,...n）。可以证明霍夫曼树的WPL是最小的。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('288', '1951年，霍夫曼和他在MIT信息论的同学得选择是完成学期报告还是期末考试。导师罗伯特·法诺出的学期报告题目是，查找最有效的二进制编码。由于无法证明哪个已有编码是最有效的，霍夫曼放弃对已有编码的研究，转向新的探索，最终发现了基于有序频率二叉树编码的想法，并很快证明了这个方法是最有效的。霍夫曼使用自底向上的方法构建二叉树，避免了次优算法香农-范诺编码的最大弊端──自顶向下构建树。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '历史', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('289', '1952年，于论文《一种构建极小多余编码的方法》（A Method for the Construction of Minimum-Redundancy Codes）中发表了这个编码方法。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '历史', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('290', '设符号集合 S = { s 1 , s 2 , ⋯ , s n } {\\displaystyle S=\\left\\{s_{1},s_{2},\\cdots ,s_{n}\\right\\}} 设 P ( s j ) {\\displaystyle P\\left(s_{j}\\right)}  : s j {\\displaystyle s_{j}} 发生的概率 设 L ( s j ) {\\displaystyle L\\left(s_{j}\\right)}  : s j {\\displaystyle s_{j}} 编码的长度', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据长度', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('291', 'e n t r o p y = ∑ j = 1 J P ( s j ) × log ⁡ 1 P ( s j ) {\\displaystyle entropy=\\sum _{j=1}^{J}{P\\left(s_{j}\\right)\\times \\log {1 \\over P\\left(s_{j}\\right)}}}', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据长度', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('292', 'm e a n ( L ) = ∑ j = 1 J P ( s j ) ×   L ( s j ) {\\displaystyle mean\\left(L\\right)=\\sum _{j=1}^{J}{P\\left(s_{j}\\right)\\times \\ L\\left(s_{j}\\right)}}', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据长度', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('293', 'Shannon编码定理： e n t r o p y l o g k {\\displaystyle entropy \\over logk} ≤ m e a n ( L ) {\\displaystyle mean\\left(L\\right)} ≤ e n t r o p y l o g k {\\displaystyle entropy \\over logk} + 1 {\\displaystyle +1} ，若使用 k {\\displaystyle k} 进位的编码', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据长度', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('294', '霍夫曼码的平均编码长度：设 b = m e a n ( L ) N {\\displaystyle b=mean\\left(L\\right)N} ， N {\\displaystyle N} 为数据长度', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据长度', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('295', 'N {\\displaystyle N} e n t r o p y l o g k {\\displaystyle entropy \\over logk} ≤ b {\\displaystyle b} ≤ N {\\displaystyle N} e n t r o p y l o g k {\\displaystyle entropy \\over logk} + N {\\displaystyle +N}', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据长度', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('296', '//以下为C++程式码，在GCC下编译通过\n//仅用于示范如何根据权值构建霍夫曼树，\n//没有经过性能上的优化及加上完善的异常处理。\n#include <cstdlib>\n#include <iostream>\n#include <deque>\n#include <algorithm>\n\nusing namespace std;\n\nconst int size=10;\nstruct node                                 //霍夫曼树节点结构\n{\n    unsigned key;                           //保存权值\n    node* lchild;                           //左孩子指针\n    node* rchild;                           //右孩子指针\n};\ndeque<node*> forest;\ndeque<bool> code;                           //此处也可使用bitset\nnode* ptr;                   \nint frequency[size]={0};\n\nvoid printCode(deque<bool> ptr);            //用于输出霍夫曼编码\n\nbool compare( node* a, node* b)\n{\nreturn a->key < b->key;\n}\nint main(int argc, char *argv[])\n{\n    for(int i=0;i<size;i++)\n    {\n        cin>>frequency[i];                  //输入10个权值\n        ptr=new node;\n        ptr->key=frequency[i];\n        ptr->lchild=NULL;\n        ptr->rchild=NULL;\n        forest.push_back(ptr);\n    }//形成森林，森林中的每一棵树都是一个节点\n    \n    //从森林构建霍夫曼树\n    for(int i=0;i<size-1;i++)\n    {\n		sort(forest.begin(),forest.end(),compare);\n		ptr=new node;\n                //以下代码使用下标索引队列元素，具有潜在危险，使用时请注意\n		ptr->key=forest[0]->key+forest[1]->key;\n		ptr->lchild=forest[0];\n		ptr->rchild=forest[1];\n		forest.pop_front();\n		forest.pop_front();\n		forest.push_back(ptr);\n	}\n    ptr=forest.front();//ptr是一个指向根的指针\n    system(\"PAUSE\");\n    return EXIT_SUCCESS;\n}\n\nvoid printCode(deque<bool> ptr)\n{\n	//deque<bool>\n	for (int i=0;i<ptr.size();i++)\n	{\n		if(ptr[i])\n			cout<<\"1\";\n		else\n			cout<<\"0\";\n	}\n}', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '示范程序', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('297', '有关霍夫曼压缩技术的原文：D.A. Huffman, \"A method for the construction of minimum-redundancy codes\", Proceedings of the I.R.E., sept 1952, pp 1098-1102 霍夫曼树图形演示 Animation of the Huffman Algorithm: Algorithm Simulation by Simon Mescal Background story: Profile: David A. Huffman, Scientific American, Sept. 1991, pp. 54-58 n-ary Huffman Template Algorithm Huffman codes\' connection with Fibonacci and Lucas numbers Fibonacci connection between Huffman codes and Wythoff array Sloane A098950 Minimizing k-ordered sequences of maximum height Huffman tree Computing Huffman codes on a Turing Machine Mordecai J. Golin, Claire Kenyon, Neal E. Young \"Huffman coding with unequal letter costs\", STOC 2002: 785-791 Huffman Coding, implemented in python', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '示范程序', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('299', '一组符号（Symbol）和其对应的权重值（weight），其权重通常表示成概率（%）。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '广义', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('300', '一组二元的前置码，其二元码的长度为最短。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '广义', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('301', '符号集合 S = { s 1 , s 2 , ⋯ , s n } {\\displaystyle S=\\left\\{s_{1},s_{2},\\cdots ,s_{n}\\right\\}} ，其S集合的大小为 n {\\displaystyle n} 。 权重集合 W = { w 1 , w 2 , ⋯ , w n } {\\displaystyle W=\\left\\{w_{1},w_{2},\\cdots ,w_{n}\\right\\}} ，其W集合不为负数且 w i = w e i g h t ( s i ) , 1 ≤ i ≤ n {\\displaystyle w_{i}=\\mathrm {weight} \\left(s_{i}\\right),1\\leq i\\leq n} 。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '狭义', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('302', '一组编码 C ( S , W ) = { c 1 , c 2 , ⋯ , c n } {\\displaystyle C\\left(S,W\\right)=\\left\\{c_{1},c_{2},\\cdots ,c_{n}\\right\\}} ，其C集合是一组二进制编码且 c i {\\displaystyle c_{i}} 为 s i {\\displaystyle s_{i}} 相对应的编码， 1 ≤ i ≤ n {\\displaystyle 1\\leq i\\leq n} 。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '狭义', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('303', '设 L ( C ) = ∑ i = 1 n w i × l e n g t h ( c i ) {\\displaystyle L\\left(C\\right)=\\sum _{i=1}^{n}{w_{i}\\times \\mathrm {length} \\left(c_{i}\\right)}} 为 C {\\displaystyle C} 的加权的路径长，对所有编码 T ( S , W ) {\\displaystyle T\\left(S,W\\right)} ，则 L ( C ) ≤ L ( T ) {\\displaystyle L\\left(C\\right)\\leq L\\left(T\\right)}', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '狭义', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('304', '实现霍夫曼编码的方式主要是创建一个二叉树和其节点。这些树的节点可以存储在数组里，数组的大小为符号（symbols）数的大小n，而节点分为是终端节点（叶节点）与非终端节点（内部节点）。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('305', '一开始，所有的节点都是终端节点，节点内有三个字段：', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('306', '2.权重（Weight、Probabilities、Frequency）', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('307', '3.指向父节点的链接（Link to its parent node）', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('308', '1.权重（Weight、Probabilities、Frequency）', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('309', '2.指向两个子节点的 链接（Links to two child node）', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('310', '3.指向父节点的链接（Link to its parent node）', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('311', '基本上，我们用\'0\'与\'1\'分别代表指向左子节点与右子节点，最后为完成的二叉树共有n个终端节点与n-1个非终端节点，去除了不必要的符号并产生最佳的编码长度。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('312', '过程中，每个终端节点都包含着一个权重（Weight、Probabilities、Frequency），两两终端节点结合会产生一个新节点，新节点的权重是由两个权重最小的终端节点权重之总和，并持续进行此过程直到只剩下一个节点为止。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('313', '实现霍夫曼树的方式有很多种，可以使用优先队列（Priority Queue）简单达成这个过程，给与权重较低的符号较高的优先级（Priority），算法如下：', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('314', '⒈把n个终端节点加入优先队列，则n个节点都有一个优先权Pi，1 ≤ i ≤ n', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('315', '⑴从队列中移除两个最大的Pi节点，即连续做两次remove（max(Pi）, Priority_Queue)', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('316', '⑵产生一个新节点，此节点为（1）之移除节点之父节点，而此节点的权重值为（1）两节点之权重和', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('317', '⑶把（2）产生之节点加入优先队列中', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('318', '⒊最后在优先队列里的点为树的根节点（root）', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('319', '而此算法的时间复杂度（ Time Complexity）为O（n log n）；因为有n个终端节点，所以树总共有2n-1个节点，使用优先队列每个循环须O（log n）。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('320', '此外，有一个更快的方式使时间复杂度降至线性时间（Linear Time）O（n），就是使用两个队列（Queue）创件霍夫曼树。第一个队列用来存储n个符号（即n个终端节点）的权重，第二个队列用来存储两两权重的合（即非终端节点）。此法可保证第二个队列的前端（Front）权重永远都是最小值，且方法如下：', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('321', '⒈把n个终端节点加入第一个队列（依照权重大小排列，最小在前端）', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('322', '⑴从队列前端移除两个最低权重的节点', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('323', '⑵将（1）中移除的两个节点权重相加合成一个新节点', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('324', '⒊最后在第一个队列的节点为根节点', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('325', '虽然使用此方法比使用优先队列的时间复杂度还低，但是注意此法的第1项，节点必须依照权重大小加入队列中，如果节点加入顺序不按大小，则需要经过排序，则至少花了O（n log n）的时间复杂度计算。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('326', '但是在不同的状况考量下，时间复杂度并非是最重要的，如果我们今天考虑英文字母的出现频率，变量n就是英文字母的26个字母，则使用哪一种算法时间复杂度都不会影响很大，因为n不是一笔庞大的数字。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('327', '简单来说，霍夫曼码树的解压缩就是将得到的前置码（Prefix Huffman code）转换回符号，通常借由树的追踪（Traversal），将接收到的比特串（Bits stream）一步一步还原。但是要追踪树之前，必须要先重建霍夫曼树 ；某些情况下，如果每个符号的权重可以被事先预测，那么霍夫曼树就可以预先重建，并且存储并重复使用，否则，发送端必须预先发送霍夫曼树的相关信息给接收端。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据解压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('328', '最简单的方式，就是预先统计各符号的权重并加入至压缩之比特串，但是此法的运算量花费相当大，并不适合实际的应用。若是使用Canonical encoding，则可精准得知树重建的数据量只占B2^B比特（其中B为每个符号的比特数（bits））。如果简单将接收到的比特串一个比特一个比特的重建，例如：\'0\'表示父节点，\'1\'表示终端节点，若每次读取到1时，下8个比特则会被解读是终端节点（假设数据为8-bit字母），则霍夫曼树则可被重建，以此方法，数据量的大小可能为2~320字节不等。虽然还有很多方法可以重建霍夫曼树，但因为压缩的数据串包含\"traling bits\"，所以还原时一定要考虑何时停止，不要还原到错误的值，如在数据压缩时时加上每笔数据的长度等。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '数据解压缩', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('329', '（一）进行霍夫曼编码前，我们先创建一个霍夫曼树。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '演算过程', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('330', '⒈将每个英文字母依照出现频率由小排到大，最小在左，如Fig.1。 ⒉每个字母都代表一个终端节点（叶节点），比较F.O.R.G.E.T六个字母中每个字母的出现频率，将最小的两个字母频率相加合成一个新的节点。如Fig.2所示，发现F与O的频率最小，故相加2+3=5。 ⒊比较5.R.G.E.T，发现R与G的频率最小，故相加4+4=8。 ⒋比较5.8.E.T，发现5与E的频率最小，故相加5+5=10。 ⒌比较8.10.T，发现8与T的频率最小，故相加8+7=15。 ⒍最后剩10.15，没有可以比较的对象，相加10+15=25。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '演算过程', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('331', '最后产生的树状图就是霍夫曼树，参考Fig.2。 （二）进行编码', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '演算过程', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('332', '1.给霍夫曼树的所有左链接\'0\'与右链接\'1\'。 2.从树根至树叶依序记录所有字母的编码，如Fig.3。', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:46', '29', '霍夫曼编码', '演算过程', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('333', '2-3-4 树在计算机科学中是阶为 4 的B树。', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('334', '大体上同B树一样，2-3-4 树是可以用做字典的一种自平衡数据结构。它可以在O（log n）时间内查找、插入和删除，这里的 n 是树中元素的数目。', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('335', '2-3-4 树在多数编程语言中实现起来相对困难，因为在树上的操作涉及大量的特殊情况。红黑树实现起来更简单一些，所以可以用它来替代。', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('336', '2-3-4 树把数据存储在叫做元素的单独单元中。它们组合成节点，每个节点都是下列之一', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '背景', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('337', '2-节点，就是说，它包含 1 个元素和 2 个儿子， 3-节点，就是说，它包含 2 个元素和 3 个儿子， 4-节点，就是说，它包含 3 个元素和 4 个儿子 。', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '背景', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('338', '每个儿子都是（可能为空）一个子 2-3-4 树。根节点是其中没有父亲的那个节点；它在遍历树的时候充当起点，因为从它可以到达所有的其他节点。叶子节点是有至少一个空儿子的节点。', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '背景', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('339', '同B树一样，2-3-4 树是有序的：每个元素必须大于或等于它左边的和它的左子树中的任何其他元素。每个儿子因此成为了由它的左和右元素界定的一个区间。', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '背景', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('340', '2-3-4 树是红黑树的一种等同，这意味着它们是等价的数据结构。换句话说，对于每个 2-3-4 树，都存在着至少一个数据元素是相同次序的红黑树。在 2-3-4 树上的插入和删除操作也等价于在红黑树中的颜色翻转和旋转。这使得它成为理解红黑树背后的逻辑的重要工具。', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '背景', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('342', '  这是与计算机相关的小作品。你可以通过编辑或修订扩充其内容。', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '背景', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('343', '红黑树（英语：Red–black tree）是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。它是在1972年由鲁道夫·贝尔发明的，他称之为\"对称二叉B树\"，它现代的名字是在Leo J. Guibas和Robert Sedgewick于1978年写的一篇论文中获得的。它是复杂的，但它的操作有着良好的最坏情况运行时间，并且在实践中是高效的：它可以在O(log n)时间内做查找，插入和删除，这里的n是树中元素的数目。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('344', '红黑树和AVL树一样都对插入时间、删除时间和查找时间提供了最好可能的最坏情况担保。这不只是使它们在时间敏感的应用如实时应用（real time application）中有价值，而且使它们有在提供最坏情况担保的其他数据结构中作为建造板块的价值；例如，在计算几何中使用的很多数据结构都可以基于红黑树。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '用途和好处', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('345', '红黑树在函数式编程中也特别有用，在这里它们是最常用的持久数据结构（persistent data structure）之一，它们用来构造关联数组和集合，每次插入、删除之后它们能保持为以前的版本。除了O(log n)的时间之外，红黑树的持久版本对每次插入或删除需要O(log n)的空间。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '用途和好处', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('346', '红黑树是2-3-4树的一种等同。换句话说，对于每个2-3-4树，都存在至少一个数据元素是同样次序的红黑树。在2-3-4树上的插入和删除操作也等同于在红黑树中颜色翻转和旋转。这使得2-3-4树成为理解红黑树背后的逻辑的重要工具，这也是很多介绍算法的教科书在红黑树之前介绍2-3-4树的原因，尽管2-3-4树在实践中不经常使用。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '用途和好处', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('347', '红黑树相对于AVL树来说，牺牲了部分平衡性以换取插入/删除操作时少量的旋转操作，整体来说性能要优于AVL树。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '用途和好处', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('348', '红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求：', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('349', '节点是红色或黑色。 根是黑色。 所有叶子都是黑色（叶子是NIL节点）。 每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。） 从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('350', '这些约束确保了红黑树的关键特性：从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。结果是这个树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的二叉查找树。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('351', '要知道为什么这些性质确保了这个结果，注意到性质4导致了路径不能有两个毗连的红色节点就足够了。最短的可能路径都是黑色节点，最长的可能路径有交替的红色和黑色节点。因为根据性质5所有最长的路径都有相同数目的黑色节点，这就表明了没有路径能多于任何其他路径的两倍长。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('352', '在很多树数据结构的表示中，一个节点有可能只有一个子节点，而叶子节点包含数据。用这种范例表示红黑树是可能的，但是这会改变一些性质并使算法复杂。为此，本文中我们使用\"nil叶子\"或\"空（null）叶子\"，如上图所示，它不包含数据而只充当树在此结束的指示。这些节点在绘图中经常被省略，导致了这些树好像同上述原则相矛盾，而实际上不是这样。与此有关的结论是所有节点都有两个子节点，尽管其中的一个或两个可能是空叶子。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('353', '包含n个内部节点的红黑树的高度是O(log(n))。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '渐进边界的证明', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('354', 'h(v) = 以节点v为根的子树的高度。 bh(v) = 从v到子树中任何叶子的黑色节点的数目（如果v是黑色则不计数它，也叫做黑色高度）。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '渐进边界的证明', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('355', '引理：以节点v为根的子树有至少 2 b h ( v ) − 1 {\\displaystyle 2^{bh(v)}-1} 个内部节点。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '渐进边界的证明', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('356', '如果v的高度是零则它必定是nil，因此bh(v) = 0。所以：', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '渐进边界的证明', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('357', '2 b h ( v ) − 1 = 2 0 − 1 = 1 − 1 = 0 {\\displaystyle 2^{bh(v)}-1=2^{0}-1=1-1=0}', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '渐进边界的证明', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('358', '归纳假设：h(v) = k的v有 2 b h ( v ) − 1 − 1 {\\displaystyle 2^{bh(v)-1}-1} 个内部节点暗示了h( v ′ {\\displaystyle v\'} ) = k+1的 v ′ {\\displaystyle v\'} 有 2 b h ( v ′ ) − 1 {\\displaystyle 2^{bh(v\')}-1} 个内部节点。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '渐进边界的证明', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('359', '因为 v ′ {\\displaystyle v\'} 有h( v ′ {\\displaystyle v\'} )> 0所以它是个内部节点。同样的它有黑色高度要么是bh( v ′ {\\displaystyle v\'} )要么是bh( v ′ {\\displaystyle v\'} )-1（依据 v ′ {\\displaystyle v\'} 是红色还是黑色）的两个儿子。通过归纳假设每个儿子都有至少 2 b h ( v ′ ) − 1 − 1 {\\displaystyle 2^{bh(v\')-1}-1} 个内部接点，所以 v ′ {\\displaystyle v\'} 有：', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '渐进边界的证明', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('360', '2 b h ( v ′ ) − 1 − 1 + 2 b h ( v ′ ) − 1 − 1 + 1 = 2 b h ( v ′ ) − 1 {\\displaystyle 2^{bh(v\')-1}-1+2^{bh(v\')-1}-1+1=2^{bh(v\')}-1}', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '渐进边界的证明', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('361', '使用这个引理我们现在可以展示出树的高度是对数性的。因为在从根到叶子的任何路径上至少有一半的节点是黑色（根据红黑树性质4），根的黑色高度至少是h(root)/2。通过引理我们得到：', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '渐进边界的证明', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('362', 'n ⩾ 2 h ( r o o t ) 2 − 1 ↔ log ⁡ ( n + 1 ) ⩾ h ( r o o t ) 2 ↔ h ( r o o t ) ⩽ 2 log ⁡ ( n + 1 ) {\\displaystyle n\\geqslant 2^{\\frac {h(root)}{2}}-1\\leftrightarrow \\;\\log {(n+1)}\\geqslant {\\frac {h(root)}{2}}\\leftrightarrow \\;h(root)\\leqslant 2\\log {(n+1)}}', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '渐进边界的证明', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('363', 'AVL树 B树 dancing tree 伸展树 2-3-4树 Treap', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '渐进边界的证明', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('364', 'Mathworld: Red-Black Tree San Diego State University: CS 660: Red-Black tree notes, by Roger Whitney Cormen, Leiserson, Rivest, Stein. Introduction to Algorithms. Massachusetts: The MIT Press, 2002. pp273-77. ISBN 0-07-013151-1', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '引用', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('365', '维基共享资源中相关的多媒体资源：红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '引用', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('366', 'An applet + quick explanation Red/Black Tree Demonstration An example[失效链接]（animated GIF, 200KB） An example[失效链接]（static picture） Another explanation[失效链接]（pictures, source code, and Java interactive animation） Red-Black Tree Demonstration by David M. Howard RBT: A SmallEiffel Red-Black Tree Library libredblack: A C Red-Black Tree Library Red-Black Tree C++ Code[失效链接] Red-Black Trees[失效链接] by Thomas Niemann 红黑树的介绍和实现', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '引用', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('368', '我们首先以二叉查找树的方法增加节点并标记它为红色。（如果设为黑色，就会导致根到叶子的路径上有一条路上，多一个额外的黑节点，这个是很难调整的。但是设为红色节点后，可能会导致出现两个连续红色节点的冲突，那么可以通过颜色调换（color flips）和树旋转来调整。）下面要进行什么操作取决于其他临近节点的颜色。同人类的家族树中一样，我们将使用术语叔父节点来指一个节点的父节点的兄弟节点。注意：', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('369', '性质1和性质3总是保持着。 性质4只在增加红色节点、重绘黑色节点为红色，或做旋转时受到威胁。 性质5只在增加黑色节点、重绘红色节点为黑色，或做旋转时受到威胁。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('370', '在下面的示意图中，将要插入的节点标为N，N的父节点标为P，N的祖父节点标为G，N的叔父节点标为U。在图中展示的任何颜色要么是由它所处情形这些所作的假定，要么是假定所暗含（imply）的。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('371', '对于每一种情形，我们将使用C示例代码来展示。通过下列函数，可以找到一个节点的叔父和祖父节点：', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('372', 'node* grandparent(node *n){\n     return n->parent->parent;\n }\n\n node* uncle(node *n){\n     if(n->parent == grandparent(n)->left)\n         return grandparent (n)->right;\n     else\n         return grandparent (n)->left;\n }', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('373', '情形1:新节点N位于树的根上，没有父节点。在这种情形下，我们把它重绘为黑色以满足性质2。因为它在每个路径上对黑节点数目增加一，性质5匹配。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('374', 'void insert_case1(node *n){\n     if(n->parent == NULL)\n         n->color = BLACK;\n     else\n         insert_case2 (n);\n }', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('375', '情形2:新节点的父节点P是黑色，所以性质4没有失效（新节点是红色的）。在这种情形下，树仍是有效的。性质5也未受到威胁，尽管新节点N有两个黑色叶子子节点；但由于新节点N是红色，通过它的每个子节点的路径就都有同通过它所替换的黑色的叶子的路径同样数目的黑色节点，所以依然满足这个性质。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('376', 'void insert_case2(node *n){\n     if(n->parent->color == BLACK)\n         return; /* 树仍旧有效*/\n     else\n         insert_case3 (n);\n }', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('377', '注意：在下列情形下我们假定新节点的父节点为红色，所以它有祖父节点；因为如果父节点是根节点，那父节点就应当是黑色。所以新节点总有一个叔父节点，尽管在情形4和5下它可能是叶子节点。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('378', '情形3:如果父节点P和叔父节点U二者都是红色，（此时新插入节点N做为P的左子节点或右子节点都属于情形3，这里右图仅显示N做为P左子的情形）则我们可以将它们两个重绘为黑色并重绘祖父节点G为红色（用来保持性质5）。现在我们的新节点N有了一个黑色的父节点P。因为通过父节点P或叔父节点U的任何路径都必定通过祖父节点G，在这些路径上的黑节点数目没有改变。但是，红色的祖父节点G可能是根节点，这就违反了性质2，也有可能祖父节点G的父节点是红色的，这就违反了性质4。为了解决这个问题，我们在祖父节点G上递归地进行情形1的整个过程。（把G当成是新加入的节点进行各种情形的检查）', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('379', 'void insert_case3(node *n){\n     if(uncle(n) != NULL && uncle (n)->color == RED) {\n         n->parent->color = BLACK;\n         uncle (n)->color = BLACK;\n         grandparent (n)->color = RED;\n         insert_case1(grandparent(n));\n     }\n     else\n         insert_case4 (n);\n }', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('380', '注意：在余下的情形下，我们假定父节点P是其父亲G的左子节点。如果它是右子节点，情形4和情形5中的左和右应当对调。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('381', '情形4:父节点P是红色而叔父节点U是黑色或缺少，并且新节点N是其父节点P的右子节点而父节点P又是其父节点的左子节点。在这种情形下，我们进行一次左旋转调换新节点和其父节点的角色;接着，我们按情形5处理以前的父节点P以解决仍然失效的性质4。注意这个改变会导致某些路径通过它们以前不通过的新节点N（比如图中1号叶子节点）或不通过节点P（比如图中3号叶子节点），但由于这两个节点都是红色的，所以性质5仍有效。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('382', 'void insert_case4(node *n){\n     if(n == n->parent->right && n->parent == grandparent(n)->left) {\n         rotate_left(n->parent);\n         n = n->left;\n     } else if(n == n->parent->left && n->parent == grandparent(n)->right) {\n         rotate_right(n->parent);\n         n = n->right;\n     }\n     insert_case5 (n);\n }', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('383', '情形5：父节点P是红色而叔父节点U是黑色或缺少，新节点N是其父节点的左子节点，而父节点P又是其父节点G的左子节点。在这种情形下，我们进行针对祖父节点G的一次右旋转；在旋转产生的树中，以前的父节点P现在是新节点N和以前的祖父节点G的父节点。我们知道以前的祖父节点G是黑色，否则父节点P就不可能是红色（如果P和G都是红色就违反了性质4，所以G必须是黑色）。我们切换以前的父节点P和祖父节点G的颜色，结果的树满足性质4。性质5也仍然保持满足，因为通过这三个节点中任何一个的所有路径以前都通过祖父节点G，现在它们都通过以前的父节点P。在各自的情形下，这都是三个节点中唯一的黑色节点。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('384', 'void insert_case5(node *n){\n     n->parent->color = BLACK;\n     grandparent (n)->color = RED;\n     if(n == n->parent->left && n->parent == grandparent(n)->left) {\n         rotate_right(grandparent(n));\n     } else {\n         /* Here, n == n->parent->right && n->parent == grandparent (n)->right */\n         rotate_left(grandparent(n));\n     }\n }', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('385', '注意插入实际上是原地算法，因为上述所有调用都使用了尾部递归。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('386', '如果需要删除的节点有两个儿子，那么问题可以被转化成删除另一个只有一个儿子的节点的问题（为了表述方便，这里所指的儿子，为非叶子节点的儿子）。对于二叉查找树，在删除带有两个非叶子儿子的节点的时候，我们找到要么在它的左子树中的最大元素、要么在它的右子树中的最小元素，并把它的值转移到要删除的节点中（如在这里所展示的那样）。我们接着删除我们从中复制出值的那个节点，它必定有少于两个非叶子的儿子。因为只是复制了一个值，不违反任何性质，这就把问题简化为如何删除最多有一个儿子的节点的问题。它不关心这个节点是最初要删除的节点还是我们从中复制出值的那个节点。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('387', '在本文余下的部分中，我们只需要讨论删除只有一个儿子的节点（如果它两个儿子都为空，即均为叶子，我们任意将其中一个看作它的儿子）。如果我们删除一个红色节点（此时该节点的儿子将都为叶子节点），它的父亲和儿子一定是黑色的。所以我们可以简单的用它的黑色儿子替换它，并不会破坏性质3和性质4。通过被删除节点的所有路径只是少了一个红色节点，这样可以继续保证性质5。另一种简单情况是在被删除节点是黑色而它的儿子是红色的时候。如果只是去除这个黑色节点，用它的红色儿子顶替上来的话，会破坏性质5，但是如果我们重绘它的儿子为黑色，则曾经通过它的所有路径将通过它的黑色儿子，这样可以继续保持性质5。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('388', '需要进一步讨论的是在要删除的节点和它的儿子二者都是黑色的时候，这是一种复杂的情况。我们首先把要删除的节点替换为它的儿子。出于方便，称呼这个儿子为N（在新的位置上），称呼它的兄弟（它父亲的另一个儿子）为S。在下面的示意图中，我们还是使用P称呼N的父亲，SL称呼S的左儿子，SR称呼S的右儿子。我们将使用下述函数找到兄弟节点：', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('389', 'struct node *\nsibling(struct node *n)\n{\n        if(n == n->parent->left)\n                return n->parent->right;\n        else\n                return n->parent->left;\n}', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('390', '我们可以使用下列代码进行上述的概要步骤，这里的函数replace_node替换child到n在树中的位置。出于方便，在本章节中的代码将假定空叶子被用不是NULL的实际节点对象来表示（在插入章节中的代码可以同任何一种表示一起工作）。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('391', 'void\ndelete_one_child(struct node *n)\n{\n        /*\n         * Precondition: n has at most one non-null child.\n         */\n        struct node *child = is_leaf(n->right)? n->left : n->right;\n \n        replace_node(n, child);\n        if(n->color == BLACK){\n                if(child->color == RED)\n                        child->color = BLACK;\n                else\n                        delete_case1 (child);\n        }\n        free (n);\n}', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('392', '如果N和它初始的父亲是黑色，则删除它的父亲导致通过N的路径都比不通过它的路径少了一个黑色节点。因为这违反了性质5，树需要被重新平衡。有几种情形需要考虑：', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('393', '情形1: N是新的根。在这种情形下，我们就做完了。我们从所有路径去除了一个黑色节点，而新根是黑色的，所以性质都保持着。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:08', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('394', 'void\ndelete_case1(struct node *n)\n{\n        if(n->parent != NULL)\n                delete_case2 (n);\n}', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:09', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('395', '注意：在情形2、5和6下，我们假定N是它父亲的左儿子。如果它是右儿子，则在这些情形下的左和右应当对调。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:09', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('396', '情形2： S是红色。在这种情形下我们在N的父亲上做左旋转，把红色兄弟转换成N的祖父，我们接着对调N的父亲和祖父的颜色。完成这两个操作后，尽管所有路径上黑色节点的数目没有改变，但现在N有了一个黑色的兄弟和一个红色的父亲（它的新兄弟是黑色因为它是红色S的一个儿子），所以我们可以接下去按情形4、情形5或情形6来处理。 （注意：这里的图中没有显示出来，N是删除了黑色节点后替换上来的子节点，所以这个过程中由P->X->N变成了P->N，实际上是少了一个黑色节点，也可以理解为Parent(Black)和Silbing(Red)那么他们的孩子黑色节点的数目肯定不等，让他们做新兄弟肯定是不平衡的，还需后面继续处理。这里看英文版本的[1]比较的明了）', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:09', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('397', 'void\ndelete_case2(struct node *n)\n{\n        struct node *s = sibling (n);\n \n        if(s->color == RED){\n                n->parent->color = RED;\n                s->color = BLACK;\n                if(n == n->parent->left)\n                        rotate_left(n->parent）;\n                else\n                        rotate_right(n->parent);\n        } \n        delete_case3 (n);\n}', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:09', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('398', '情形3： N的父亲、S和S的儿子都是黑色的。在这种情形下，我们简单的重绘S为红色。结果是通过S的所有路径，它们就是以前不通过N的那些路径，都少了一个黑色节点。因为删除N的初始的父亲使通过N的所有路径少了一个黑色节点，这使事情都平衡了起来。但是，通过P的所有路径现在比不通过P的路径少了一个黑色节点，所以仍然违反性质5。要修正这个问题，我们要从情形1开始，在P上做重新平衡处理。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:09', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('399', 'void\ndelete_case3(struct node *n)\n{\n        struct node *s = sibling (n);\n \n        if((n->parent->color == BLACK)&&\n(s->color == BLACK)&&\n(s->left->color == BLACK)&&\n(s->right->color == BLACK)) {\n                s->color = RED;\n                delete_case1(n->parent);\n        } else\n                delete_case4 (n);\n}', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:09', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('400', '情形4： S和S的儿子都是黑色，但是N的父亲是红色。在这种情形下，我们简单的交换N的兄弟和父亲的颜色。这不影响不通过N的路径的黑色节点的数目，但是它在通过N的路径上对黑色节点数目增加了一，添补了在这些路径上删除的黑色节点。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:09', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('401', 'void\ndelete_case4(struct node *n)\n{\n        struct node *s = sibling (n);\n \n        if（(n->parent->color == RED)&&\n(s->color == BLACK)&&\n(s->left->color == BLACK)&&\n(s->right->color == BLACK)) {\n                s->color = RED;\n                n->parent->color = BLACK;\n        } else\n                delete_case5 (n);\n}', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:09', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('402', '情形5： S是黑色，S的左儿子是红色，S的右儿子是黑色，而N是它父亲的左儿子。在这种情形下我们在S上做右旋转，这样S的左儿子成为S的父亲和N的新兄弟。我们接着交换S和它的新父亲的颜色。所有路径仍有同样数目的黑色节点，但是现在N有了一个黑色兄弟，他的右儿子是红色的，所以我们进入了情形6。N和它的父亲都不受这个变换的影响。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:09', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('403', 'void\ndelete_case5(struct node *n)\n{\n        struct node *s = sibling (n);\n \n        if（s->color == BLACK){ /* this if statement is trivial, \ndue to Case 2(even though Case two changed the sibling to a sibling\'s child, \nthe sibling\'s child can\'t be red, since no red parent can have a red child). */\n// the following statements just force the red to be on the left of the left of the parent, \n// or right of the right, so case six will rotate correctly.\n                if((n == n->parent->left)&&\n(s->right->color == BLACK)&&\n(s->left->color == RED)) { // this last test is trivial too due to cases 2-4.\n                        s->color = RED;\n                        s->left->color = BLACK;\n                        rotate_right (s);\n                } else if((n == n->parent->right)&&\n(s->left->color == BLACK)&&\n(s->right->color == RED)) {// this last test is trivial too due to cases 2-4.\n                        s->color = RED;\n                        s->right->color = BLACK;\n                        rotate_left (s);\n                }\n        }\n        delete_case6 (n);\n}', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:09', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('404', '情形6： S是黑色，S的右儿子是红色，而N是它父亲的左儿子。在这种情形下我们在N的父亲上做左旋转，这样S成为N的父亲（P）和S的右儿子的父亲。我们接着交换N的父亲和S的颜色，并使S的右儿子为黑色。子树在它的根上的仍是同样的颜色，所以性质3没有被违反。但是，N现在增加了一个黑色祖先：要么N的父亲变成黑色，要么它是黑色而S被增加为一个黑色祖父。所以，通过N的路径都增加了一个黑色节点。 此时，如果一个路径不通过N，则有两种可能性： 它通过N的新兄弟。那么它以前和现在都必定通过S和N的父亲，而它们只是交换了颜色。所以路径保持了同样数目的黑色节点。 它通过N的新叔父，S的右儿子。那么它以前通过S、S的父亲和S的右儿子，但是现在只通过S，它被假定为它以前的父亲的颜色，和S的右儿子，它被从红色改变为黑色。合成效果是这个路径通过了同样数目的黑色节点。 在任何情况下，在这些路径上的黑色节点数目都没有改变。所以我们恢复了性质4。在示意图中的白色节点可以是红色或黑色，但是在变换前后都必须指定相同的颜色。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:09', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('405', 'void\ndelete_case6(struct node *n)\n{\n        struct node *s = sibling (n);\n \n        s->color = n->parent->color;\n        n->parent->color = BLACK;\n \n        if(n == n->parent->left){\n                s->right->color = BLACK;\n                rotate_left(n->parent);\n        } else {\n                s->left->color = BLACK;\n                rotate_right(n->parent);\n        }\n}', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:09', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('406', '同样的，函数调用都使用了尾部递归，所以算法是原地算法。此外，在旋转之后不再做递归调用，所以进行了恒定数目（最多3次）的旋转。', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:09', '31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('407', '#define BLACK 1\n#define RED 0\n\nusing namespace std;\n\nclass bst {\nprivate:\n\n    struct Node {\n        int value;\n        bool color;\n        Node *leftTree, *rightTree, *parent;\n\n        Node() {\n            color = RED;\n            leftTree = NULL;\n            rightTree = NULL;\n            parent = NULL;\n            value = 0;\n        }\n\n        Node* grandparent() {\n            if(parent == NULL){\n                return NULL;\n            }\n            return parent->parent;\n        }\n\n        Node* uncle() {\n            if(grandparent(） == NULL) {\n                return NULL;\n            }\n            if(parent == grandparent()->rightTree)\n                return grandparent()->leftTree;\n            else\n                return grandparent()->rightTree;\n        }\n\n        Node* sibling() {\n            if(parent->leftTree == this)\n                return parent->rightTree;\n            else\n                return parent->leftTree;\n        }\n    };\n\n    void rotate_right(Node *p){\n        Node *gp = p->grandparent();\n        Node *fa = p->parent;\n        Node *y = p->rightTree;\n\n        fa->leftTree = y;\n\n        if(y != NIL)\n            y->parent = fa;\n        p->rightTree = fa;\n        fa->parent = p;\n\n        if(root == fa)\n            root = p;\n        p->parent = gp;\n\n        if(gp != NULL){\n            if(gp->leftTree == fa)\n                gp->leftTree = p;\n            else\n                gp->rightTree = p;\n        }\n\n    }\n\n    void rotate_left(Node *p){\n        if(p->parent == NULL){\n            root = p;\n            return;\n        }\n        Node *gp = p->grandparent();\n        Node *fa = p->parent;\n        Node *y = p->leftTree;\n\n        fa->rightTree = y;\n\n        if(y != NIL)\n            y->parent = fa;\n        p->leftTree = fa;\n        fa->parent = p;\n\n        if(root == fa)\n            root = p;\n        p->parent = gp;\n\n        if(gp != NULL){\n            if(gp->leftTree == fa)\n                gp->leftTree = p;\n            else\n                gp->rightTree = p;\n        }\n    }\n\n    void inorder(Node *p){\n        if(p == NIL)\n            return;\n\n        if(p->leftTree)\n            inorder(p->leftTree);\n\n        cout << p->value << \" \";\n                \n        if(p->rightTree)\n            inorder(p->rightTree);\n    }\n\n    string outputColor (bool color) {\n        return color ? \"BLACK\" : \"RED\";\n    }\n\n    Node* getSmallestChild(Node *p){\n        if(p->leftTree == NIL)\n            return p;\n        return getSmallestChild(p->leftTree);\n    }\n\n    bool delete_child(Node *p, int data){\n        if(p->value > data){\n            if(p->leftTree == NIL){\n                return false;\n            }\n            return delete_child(p->leftTree, data);\n        } else if(p->value < data){\n            if(p->rightTree == NIL){\n                return false;\n            }\n            return delete_child(p->rightTree, data);\n        } else if(p->value == data){\n            if(p->rightTree == NIL){\n                delete_one_child (p);\n                return true;\n            }\n            Node *smallest = getSmallestChild(p->rightTree);\n            swap(p->value, smallest->value);\n            delete_one_child (smallest);\n\n            return true;\n        }\n    }\n\n    void delete_one_child(Node *p){\n        Node *child = p->leftTree == NIL ? p->rightTree : p->leftTree;\n        if(p->parent == NULL && p->leftTree == NIL && p->rightTree == NIL){\n            p = NULL;\n            root = p;\n            return;\n        }\n        \n        if(p->parent == NULL){\n            delete  p;\n            child->parent = NULL;\n            root = child;\n            root->color = BLACK;\n            return;\n        }\n        \n        if(p->parent->leftTree == p){\n            p->parent->leftTree = child;\n        } else {\n            p->parent->rightTree = child;\n        }\n        child->parent = p->parent;\n\n        if(p->color == BLACK){\n            if(child->color == RED){\n                child->color = BLACK;\n            } else\n                delete_case (child);\n        }\n\n        delete p;\n    }\n\n    void delete_case(Node *p){\n        if(p->parent == NULL){\n            p->color = BLACK;\n            return;\n        }\n        if(p->sibling()->color == RED) {\n            p->parent->color = RED;\n            p->sibling()->color = BLACK;\n            if(p == p->parent->leftTree)\n                rotate_left(p->sibling());\n            else\n                rotate_right(p->sibling());\n        }\n        if(p->parent->color == BLACK && p->sibling()->color == BLACK\n                && p->sibling()->leftTree->color == BLACK && p->sibling()->rightTree->color == BLACK) {\n            p->sibling()->color = RED;\n            delete_case(p->parent);\n        } else if(p->parent->color == RED && p->sibling()->color == BLACK\n                && p->sibling()->leftTree->color == BLACK && p->sibling()->rightTree->color == BLACK) {\n            p->sibling()->color = RED;\n            p->parent->color = BLACK;\n        } else {\n            if(p->sibling()->color == BLACK) {\n                if(p == p->parent->leftTree && p->sibling()->leftTree->color == RED\n                        && p->sibling()->rightTree->color == BLACK) {\n                    p->sibling()->color = RED;\n                    p->sibling()->leftTree->color = BLACK;\n                    rotate_right(p->sibling()->leftTree);\n                } else if(p == p->parent->rightTree && p->sibling()->leftTree->color == BLACK\n                        && p->sibling()->rightTree->color == RED) {\n                    p->sibling()->color = RED;\n                    p->sibling()->rightTree->color = BLACK;\n                    rotate_left(p->sibling()->rightTree);\n                }\n            }\n            p->sibling()->color = p->parent->color;\n            p->parent->color = BLACK;\n            if(p == p->parent->leftTree){\n                p->sibling()->rightTree->color = BLACK;\n                rotate_left(p->sibling());\n            } else {\n                p->sibling()->leftTree->color = BLACK;\n                rotate_right(p->sibling());\n            }\n        }\n    }\n\n    void insert(Node *p, int data){\n        if(p->value >= data){\n            if(p->leftTree != NIL)\n                insert(p->leftTree, data);\n            else {\n                Node *tmp = new Node();\n                tmp->value = data;\n                tmp->leftTree = tmp->rightTree = NIL;\n                tmp->parent = p;\n                p->leftTree = tmp;\n                insert_case (tmp);\n            }\n        } else {\n            if(p->rightTree != NIL)\n                insert(p->rightTree, data);\n            else {\n                Node *tmp = new Node();\n                tmp->value = data;\n                tmp->leftTree = tmp->rightTree = NIL;\n                tmp->parent = p;\n                p->rightTree = tmp;\n                insert_case (tmp);\n            }\n        }\n    }\n\n    void insert_case(Node *p){\n        if(p->parent == NULL){\n            root = p;\n            p->color = BLACK;\n            return;\n        }\n        if(p->parent->color == RED){\n            if(p->uncle()->color == RED) {\n                p->parent->color = p->uncle()->color = BLACK;\n                p->grandparent()->color = RED;\n                insert_case(p->grandparent());\n            } else {\n                if(p->parent->rightTree == p && p->grandparent()->leftTree == p->parent) {\n                    rotate_left (p);\n                    rotate_right (p);\n                    p->color = BLACK;\n                    p->leftTree->color = p->rightTree->color = RED;\n                } else if(p->parent->leftTree == p && p->grandparent()->rightTree == p->parent) {\n                    rotate_right (p);\n                    rotate_left (p);\n                    p->color = BLACK;\n                    p->leftTree->color = p->rightTree->color = RED;\n                } else if(p->parent->leftTree == p && p->grandparent()->leftTree == p->parent) {\n                    p->parent->color = BLACK;\n                    p->grandparent()->color = RED;\n                    rotate_right(p->parent);\n                } else if(p->parent->rightTree == p && p->grandparent()->rightTree == p->parent) {\n                    p->parent->color = BLACK;\n                    p->grandparent()->color = RED;\n                    rotate_left(p->parent);\n                }\n            }\n        }\n    }\n\n    void DeleteTree(Node *p){\n        if(!p || p == NIL){\n            return;\n        }\n        DeleteTree(p->leftTree);\n        DeleteTree(p->rightTree);\n        delete p;\n    }\npublic:\n\n    bst() {\n        NIL = new Node();\n        NIL->color = BLACK;\n        root = NULL;\n    }\n\n    ~bst() {\n        if (root)\n            DeleteTree (root);\n        delete NIL;\n    }\n\n    void inorder() {\n        if(root == NULL)\n            return;\n        inorder (root);\n        cout << endl;\n    }\n\n    void insert (int x) {\n        if(root == NULL){\n            root = new Node();\n            root->color = BLACK;\n            root->leftTree = root->rightTree = NIL;\n            root->value = x;\n        } else {\n            insert(root, x);\n        }\n    }\n\n    bool delete_value (int data) {\n        return delete_child(root, data);\n    }\nprivate:\n    Node *root, *NIL;\n};', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:09', '31', '红黑树', 'C++示例代码', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('408', '在图论中，连通图基于连通的概念。在一个无向图G中，若从顶点 v i {\\displaystyle v_{i}} 到顶点 v j {\\displaystyle v_{j}} 有路径相连（当然从 v j {\\displaystyle v_{j}} 到 v i {\\displaystyle v_{i}} 也一定有路径），则称 v i {\\displaystyle v_{i}} 和 v j {\\displaystyle v_{j}} 是连通的。如果G是有向图，那么连接 v i {\\displaystyle v_{i}} 和 v j {\\displaystyle v_{j}} 的路径中所有的边都必须同向。如果图中任意两点都是连通的，那么图被称作连通图。图的连通性是图的基本性质。', 'https://zh.wikipedia.org/wiki/%E8%BF%9E%E9%80%9A%E5%9B%BE', '2015-12-14 17:43:00', '2016-12-20 09:42:18', '32', '连通图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('409', '对一个图G= (V,E)中的两点 x {\\displaystyle x} 和 y {\\displaystyle y} ，若存在交替的顶点和边的序列 Γ = ( x = v 0 − e 1 − v 1 − e 2 − ⋯ − e k − v k + 1 = y ) {\\displaystyle \\Gamma =(x=v_{0}-e_{1}-v_{1}-e_{2}-\\cdots -e_{k}-v_{k+1}=y)} （在有向图中要求有向边 v i − v i + 1 {\\displaystyle v_{i}-v_{i+1}} 属于E），则两点 x {\\displaystyle x} 和 y {\\displaystyle y} 是连通的。 Γ {\\displaystyle \\Gamma } 是一条 x {\\displaystyle x} 到 y {\\displaystyle y} 的连通路径， x {\\displaystyle x} 和 y {\\displaystyle y} 分别是起点和终点。当 x = y {\\displaystyle x=y} 时， Γ {\\displaystyle \\Gamma } 被称为回路。如果通路 Γ {\\displaystyle \\Gamma } 中的边两两不同，则 Γ {\\displaystyle \\Gamma } 是一条简单通路，否则为一条复杂通路。如果图G中每两点间皆连通，则G是连通图。', 'https://zh.wikipedia.org/wiki/%E8%BF%9E%E9%80%9A%E5%9B%BE', '2015-12-14 17:43:00', '2016-12-20 09:42:18', '32', '连通图', '严格定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('410', '连通分量：无向图G的一个极大连通子图称为G的一个连通分量（或连通分支）。连通图只有一个连通分量，即其自身；非连通的无向图有多个连通分量。 强连通图：有向图G= (V,E)中，若对于V中任意两个不同的顶点x和y，都存在从x到y以及从y到x的路径，则称G是强连通图（Strongly Connected Graph）。相应地有强连通分量（Strongly Connected Component）的概念。强连通图只有一个强连通分量，即是其自身；非强连通的有向图有多个强连通分量。 初级通路：通路中所有的顶点互不相同。初级通路必为简单通路，但反之不真。', 'https://zh.wikipedia.org/wiki/%E8%BF%9E%E9%80%9A%E5%9B%BE', '2015-12-14 17:43:00', '2016-12-20 09:42:18', '32', '连通图', '相关概念', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('411', '一个无向图G= (V,E)是连通的，那么边的数目大于等于顶点的数目减一： | E | ≥ | V | − 1 {\\displaystyle |E|\\geq |V|-1} ，而反之不成立。', 'https://zh.wikipedia.org/wiki/%E8%BF%9E%E9%80%9A%E5%9B%BE', '2015-12-14 17:43:00', '2016-12-20 09:42:18', '32', '连通图', '性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('412', '如果G= (V,E)是有向图，那么它是强连通图的必要条件是边的数目大于等于顶点的数目： | E | ≥ | V | {\\displaystyle |E|\\geq |V|} ，而反之不成立。', 'https://zh.wikipedia.org/wiki/%E8%BF%9E%E9%80%9A%E5%9B%BE', '2015-12-14 17:43:00', '2016-12-20 09:42:18', '32', '连通图', '性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('413', '没有回路的无向图是连通的当且仅当它是树，即等价于： | E | = | V | − 1 {\\displaystyle \\displaystyle |E|=|V|-1} 。', 'https://zh.wikipedia.org/wiki/%E8%BF%9E%E9%80%9A%E5%9B%BE', '2015-12-14 17:43:00', '2016-12-20 09:42:18', '32', '连通图', '性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('414', 'Fred Buckley,Marty Lewinter。《图论简明教程》。李慧霸王凤芹译。北京：清华大学出版社。2005年。 W.T.Tutte, Graph Theory . Cambridge University Press . 2004 .', 'https://zh.wikipedia.org/wiki/%E8%BF%9E%E9%80%9A%E5%9B%BE', '2015-12-14 17:43:00', '2016-12-20 09:42:18', '32', '连通图', '参考来源', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('416', '本条目需要编修，以确保文法、用词、语气、格式、标点等使用恰当。（2010年8月16日） 请按照校对指引，帮助编辑这个条目。（帮助、讨论）', 'https://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:42:28', '33', '佩特森图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('417', '佩特森图是一个特定的图。朱利叶斯·佩特森在1898年构作它。虽然它以佩特森命名，但1886年已有人提及它了[1]。', 'https://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:42:28', '33', '佩特森图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('418', '强正则图 半径同直径均为2 点色数为3，边色数为4。它是1898年至1946年期间，数学家唯一知道的snark。 非平面图：子图有完全图 K 5 {\\displaystyle K_{5}} 和完全双分图 K 3 , 3 {\\displaystyle K_{3,3}} ，交叉数为2。 有哈密顿路径而无哈密顿圈。 K G 5 , 2 {\\displaystyle KG_{5,2}} （Kneser图） 单位距离图 K 5 {\\displaystyle K_{5}} 的线图的补图 交叉数为2', 'https://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:42:28', '33', '佩特森图', '性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('419', '最小无桥而边色数大于3的三次图 最小无桥而没有哈密尔顿圈的三次图 最大半径为2的三次图 最小的hypohamiltonian图（原本无哈密尔顿圈，但除去任何一个顶点，便可有哈密尔顿圈） 最小围长为5的三次图（唯一的 ( 3 , 5 ) {\\displaystyle (3,5)} -cage graph和唯一的 ( 3 , 5 ) {\\displaystyle (3,5)} -Moore graph。）', 'https://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:42:28', '33', '佩特森图', '最……', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('420', '^ 初见于A.B. Kempe的论文，参见英文版wiki（Petersen graph）', 'https://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:42:28', '33', '佩特森图', '脚注', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('421', '维基共享资源中相关的多媒体资源：佩特森图', 'https://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:42:28', '33', '佩特森图', '脚注', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('422', '在计算机科学中，原始类型（英语：Primitive type）有别于复合类型，是由编程语言提供的数据类型，作为创建基础。根据语言及其实现，在电脑的存储器中，原始类型可能没有与对象一对一的对应。', 'https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%AB', '2016-06-20 09:59:00', '2016-12-20 09:42:49', '35', '原始型别', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('423', 'Primitive type也有称作内置类型、基础类型或者基本类型。', 'https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%AB', '2016-06-20 09:59:00', '2016-12-20 09:42:49', '35', '原始型别', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('424', '原始类型的实际范围，取决于所使用的特定编程语言。例如，在C语言中，字符串是一个复合类型，不过在后来的Basic中，字符串是原始类型。', 'https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%AB', '2016-06-20 09:59:00', '2016-12-20 09:42:49', '35', '原始型别', '概览', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('425', '字符（character、char），依字符集又分为SBCS、DBCS、MBCS这三大类； 整数（integer、int、short、long、byte），其有各种精度，依是否可表示负数的数值又再各自区分有号数与无号数； 浮点数（float、double、real、double precision）； 定点数（fixed），其有各种精度，以及所选的数量级。 布尔类型有真和假两值。 引用（又称作指针或handle），它是一个较小的值，指向其它可能大得多的对象，其所在的存储器地址。', 'https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%AB', '2016-06-20 09:59:00', '2016-12-20 09:42:49', '35', '原始型别', '概览', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('426', '多元组，出现于ML、Python 链表，出现于Lisp 复数，出现于Fortran、C（C99）、Python 有理数，出现于Lisp 一等函数、闭包、续延，出现于函数式编程语言，如Lisp和ML', 'https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%AB', '2016-06-20 09:59:00', '2016-12-20 09:42:49', '35', '原始型别', '概览', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('427', '通常预期以基于原始类型的运算，构成较快速的语言。整数加法，例如，可以运行单一的机器指令，且部分处理器提供特定的指令，以单一指令处理一系列的字符。尤其是，C语言标准中提到，“一个‘简单’的int对象，具有原始的大小，其大小以运行环境的架构所暗示。”意即在32位架构下的int，可能就是32位的长度。', 'https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%AB', '2016-06-20 09:59:00', '2016-12-20 09:42:49', '35', '原始型别', '概览', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('428', '大部分语言不允许以程序修改原始类型的行为或性能。例外的有Smalltalk，其允许在程序内部扩展原始类型。可以在其上运行加入的运算，甚至重新定义内置的运算。', 'https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%AB', '2016-06-20 09:59:00', '2016-12-20 09:42:49', '35', '原始型别', '概览', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('430', '替罪羊树是计算机科学中，一种基于部分重建的自平衡二叉搜索树。在替罪羊树上，插入或删除节点的平摊最坏时间复杂度是O(log n)，搜索节点的最坏时间复杂度是O(log n)。', 'https://zh.wikipedia.org/wiki/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91', '2015-12-09 16:14:00', '2016-12-20 09:42:58', '36', '替罪羊树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('431', '在非平衡的二叉搜索树中，每次操作以后检查操作路径，找到最高的满足max(size(son_L),size(son_R))>alpha*size(this)的结点，重建整个子树。 这样就得到了替罪羊树，而被重建的子树的原来的根就被称为替罪羊节点。 常数alpha一般选择为0.7左右。 通过势能分析，至少对于只有插入操作的替罪羊树，单操作均摊复杂度为O(log n)。 删除操作可以通过设置“删除”标记完成，复杂度即为查找复杂度O(log n)。', 'https://zh.wikipedia.org/wiki/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91', '2015-12-09 16:14:00', '2016-12-20 09:42:58', '36', '替罪羊树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('432', '正则图是每个顶点都有相同数目的邻居的图，即每个顶点的度相同。若每个顶点的度均为 k {\\displaystyle k} ，称为 k {\\displaystyle k} -正则图。', 'https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', '2016-03-22 12:47:00', '2016-12-20 09:43:15', '38', '正则图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('433', '0-正则图是没有边的图。1-正则图由不相连的边组成。2-正则图由不相连的圈组成。3-正则图称为三次图。阶为 k {\\displaystyle k} 的 k − 1 {\\displaystyle k-1} -正则图是 k {\\displaystyle k} 完全图。', 'https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', '2016-03-22 12:47:00', '2016-12-20 09:43:15', '38', '正则图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('434', '在强正则图，每对相邻顶点都是相同数目的共同邻居。最小的正则而非强正则的图是6个顶点的环状图或圈。', 'https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', '2016-03-22 12:47:00', '2016-12-20 09:43:15', '38', '正则图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('435', '0-正则图 1-正则图 2-正则图 3-正则图', 'https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', '2016-03-22 12:47:00', '2016-12-20 09:43:15', '38', '正则图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('436', '对于每个图 G {\\displaystyle G} 及每个不小于 G {\\displaystyle G} 的最大度整数 r {\\displaystyle r} ，存在一个有 G {\\displaystyle G} 作子图的 r {\\displaystyle r} -正则图。 若有阶为 n {\\displaystyle n} 的 k {\\displaystyle k} -正则图，k是偶数或n是偶数。', 'https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', '2016-03-22 12:47:00', '2016-12-20 09:43:15', '38', '正则图', '性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('437', '设 A {\\displaystyle A} 为图 G {\\displaystyle G} 的邻接矩阵。 G {\\displaystyle G} 是正则图当且仅当 [ 1 ⋮ 1 ] {\\displaystyle {\\begin{bmatrix}1\\\\\\vdots \\\\1\\end{bmatrix}}} 是A的特征向量。', 'https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', '2016-03-22 12:47:00', '2016-12-20 09:43:15', '38', '正则图', '代数性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('438', '图 G {\\displaystyle G} 是正则又连通的图当且仅当矩阵 J {\\displaystyle J} （ J i j = 1 {\\displaystyle J_{ij}=1} ）在图的邻接代数内。', 'https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', '2016-03-22 12:47:00', '2016-12-20 09:43:15', '38', '正则图', '代数性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('440', '散列表（Hash table，也叫哈希表），是根据键（Key）而直接访问在内存存储位置的数据结构。也就是说，它通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做散列函数，存放记录的数组称做散列表。', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('441', '一个通俗的例子是，为了查找电话簿中某人的号码，可以创建一个按照人名首字母顺序排列的表（即建立人名 x {\\displaystyle x} 到首字母 F ( x ) {\\displaystyle F(x)} 的一个函数关系），在首字母为W的表中查找“王”姓的电话号码，显然比直接查找就要快得多。这里使用人名作为关键字，“取首字母”是这个例子中散列函数的函数法则 F ( ) {\\displaystyle F()} ，存放首字母的表对应散列表。关键字和函数法则理论上可以任意确定。', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('442', '若关键字为 k {\\displaystyle k} ，则其值存放在 f ( k ) {\\displaystyle f(k)} 的存储位置上。由此，不需比较便可直接取得所查记录。称这个对应关系 f {\\displaystyle f} 为散列函数，按这个思想建立的表为散列表。', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '基本概念', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('443', '对不同的关键字可能得到同一散列地址，即 k 1 ≠ k 2 {\\displaystyle k_{1}\\neq k_{2}} ，而 f ( k 1 ) = f ( k 2 ) {\\displaystyle f(k_{1})=f(k_{2})} ，这种现象称为冲突（英语：Collision）。具有相同函数值的关键字对该散列函数来说称做同义词。综上所述，根据散列函数 f ( k ) {\\displaystyle f(k)} 和处理冲突的方法将一组关键字映射到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“像”作为记录在表中的存储位置，这种表便称为散列表，这一映射过程称为散列造表或散列，所得的存储位置称散列地址。', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '基本概念', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('444', '若对于关键字集合中的任一个关键字，经散列函数映象到地址集合中任何一个地址的概率是相等的，则称此类散列函数为均匀散列函数（Uniform Hash function），这就是使关键字经过散列函数得到一个“随机的地址”，从而减少冲突。', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '基本概念', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('445', '散列函数能使对一个数据序列的访问过程更加迅速有效，通过散列函数，数据元素将被更快定位。', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '构造散列函数', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('446', '直接定址法：取关键字或关键字的某个线性函数值为散列地址。即 h a s h ( k ) = k {\\displaystyle hash(k)=k} 或 h a s h ( k ) = a ⋅ k + b {\\displaystyle hash(k)=a\\cdot k+b} ，其中 a b {\\displaystyle a\\,b} 为常数（这种散列函数叫做自身函数） 数字分析法：假设关键字是以r为基的数，并且哈希表中可能出现的关键字都是事先知道的，则可取关键字的若干数位组成哈希地址。 平方取中法：取关键字平方后的中间几位为哈希地址。通常在选定哈希函数时不一定能知道关键字的全部情况，取其中的哪几位也不一定合适，而一个数平方后的中间几位数和数的每一位都相关，由此使随机分布的关键字得到的哈希地址也是随机的。取的位数由表长决定。 折叠法：将关键字分割成位数相同的几部分（最后一部分的位数可以不同），然后取这几部分的叠加和（舍去进位）作为哈希地址。 随机数法 除留余数法：取关键字被某个不大于散列表表长m的数p除后所得的余数为散列地址。即 h a s h ( k ) = k mod p {\\displaystyle hash(k)=k\\,{\\bmod {\\,}}p} , p ≤ m {\\displaystyle p\\leq m} 。不仅可以对关键字直接取模，也可在折叠法、平方取中法等运算之后取模。对p的选择很重要，一般取素数或m，若p选择不好，容易产生冲突。', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '构造散列函数', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('447', '为了知道冲突产生的相同散列函数地址所对应的关键字，必须选用另外的散列函数，或者对冲突结果进行处理。而不发生冲突的可能性是非常之小的，所以通常对冲突进行处理。常用方法有以下几种：', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '处理冲突', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('448', '开放定址法（open addressing）： h a s h i = ( h a s h ( k e y ) + d i ) mod m {\\displaystyle hash_{i}=(hash(key)+d_{i})\\,{\\bmod {\\,}}m} , i = 1 , 2... k ( k ≤ m − 1 ) {\\displaystyle i=1,2...k\\,(k\\leq m-1)} ，其中 h a s h ( k e y ) {\\displaystyle hash(key)} 为散列函数， m {\\displaystyle m} 为散列表长， d i {\\displaystyle d_{i}} 为增量序列， i {\\displaystyle i} 为已发生冲突的次数。增量序列可有下列取法：', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '处理冲突', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('449', 'd i = 1 , 2 , 3... ( m − 1 ) {\\displaystyle d_{i}=1,2,3...(m-1)} 称为 线性探测(Linear Probing)；即 d i = i {\\displaystyle d_{i}=i} ，或者为其他线性函数。相当于逐个探测存放地址的表，直到查找到一个空单元，把散列地址存放在该空单元。 d i = ± 1 2 , ± 2 2 , ± 3 2 . . . ± k 2 {\\displaystyle d_{i}=\\pm 1^{2},\\pm 2^{2},\\pm 3^{2}...\\pm k^{2}} ( k ≤ m / 2 ) {\\displaystyle (k\\leq m/2)} 称为 平方探测(Quadratic Probing)。相对线性探测，相当于发生冲突时探测间隔 d i = i 2 {\\displaystyle d_{i}=i^{2}} 个单元的位置是否为空，如果为空，将地址存放进去。 d i = {\\displaystyle d_{i}=} 伪随机数序列，称为 伪随机探测。', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '处理冲突', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('450', '显示线性探测填装一个散列表的过程：', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '处理冲突', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('451', '关键字为{89,18,49,58,69}插入到一个散列表中的情况。此时线性探测的方法是取 d i = i {\\displaystyle d_{i}=i} 。并假定取关键字除以10的余数为散列函数法则。', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '处理冲突', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('452', '散列地址 空表 插入89 插入18 插入49 插入58 插入69 0 49 49 49 1 58 58 2 69 3 4 5 6 7 8 18 18 18 18 9 89 89 89 89 89', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '处理冲突', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('453', '第一次冲突发生在填装49的时候。地址为9的单元已经填装了89这个关键字，所以取 i = 1 {\\displaystyle i=1} ，往下查找一个单位，发现为空，所以将49填装在地址为0的空单元。第二次冲突则发生在58上，取 i = 2 {\\displaystyle i=2} ，往下查找两个单位，将58填装在地址为1的空单元。69同理。 表的大小选取至关重要，此处选取10作为大小，发生冲突的几率就比选择质数11作为大小的可能性大。越是质数，mod取余就越可能均匀分布在表的各处。', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '处理冲突', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('454', '聚集（Cluster，也翻译做“堆积”）的意思是，在函数地址的表中，散列函数的结果不均匀地占据表的单元，形成区块，造成线性探测产生一次聚集（primary clustering）和平方探测的二次聚集（secondary clustering），散列到区块中的任何关键字需要查找多次试选单元才能插入表中，解决冲突，造成时间浪费。对于开放定址法，聚集会造成性能的灾难性损失，是必须避免的。', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '处理冲突', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('455', '单独链表法：将散列到同一个存储位置的所有元素保存在一个链表中。实现时，一种策略是散列表同一位置的所有冲突结果都是用栈存放的，新元素被插入到表的前端还是后端完全取决于怎样方便。', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '处理冲突', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('456', '再散列： h a s h i = h a s h i ( k e y ) {\\displaystyle hash_{i}=hash_{i}(key)} , i = 1 , 2... k {\\displaystyle i=1,2...k} 。 h a s h i {\\displaystyle hash_{i}} 是一些散列函数。即在上次散列计算发生冲突时，利用该次冲突的散列函数地址产生新的散列函数地址，直到冲突不再发生。这种方法不易产生“聚集”（Cluster），但增加了计算时间。', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '处理冲突', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('457', '在C语言中，实现以上过程的简要程序[1]：', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '例程', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('458', 'HashTable\nInitializeTable( int TableSize )\n{\n    HashTable H;\n    int i;\n\n    /* 为散列表分配空间。 */\n    /* 有些编译器不支持为 struct HashTable 分配空间，声称这是一个不完全的结构， */\n    /* 可使用一个指向 HashTable 的指针为之分配空间。 */\n    /* 如：sizeof( Probe )，Probe 作为 HashTable 在 typedef 定义的指针。 */\n    H = malloc( sizeof( struct HashTable ) );\n\n    /* 散列表大小为一个质数。 */\n    H->TableSize = Prime;\n\n    /* 分配表所有地址的空间。 */\n    H->Cells = malloc( sizeof( Cell )  * H->TableSize );\n\n    /* 地址初始为空。 */\n    for( i = 0; i < H->TableSize; i++ )\n        H->Cells[i].info = Empty;\n\n    return H;\n}', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '例程', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('459', 'Position\nFind( ElementType Key, HashTable H )\n{\n    Position Current;\n    int CollisionNum;\n\n    /* 冲突次数初始为0。 */\n    /* 通过表的大小对关键字进行处理。 */\n    CollisionNum = 0;\n    Current = Hash( Key, H->TableSize );\n\n    /* 不为空时进行查找。 */\n    while( H->Cells[Current].info != Empty &&\n        H->Cells[Current].Element != Key )\n    {\n        Current = ++CollosionNum * ++CollisionNum;\n\n        /* 向下查找超过表范围时回到表开头。 */\n        if( Current >= H->TableSize )\n            Current -= H->TableSize;\n    }\n\n    return Current;\n}', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '例程', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('460', 'Linux操作系统在物理文件系统与块设备驱动程序之间引入了“缓冲区缓存”（Buffer Cache，简称bcache）。当读写磁盘文件的数据，实际上都是对bcache操作，这大大提高了读写数据的速度。如果要读写的磁盘数据不在bcache中，即缓存不命中（miss），则把相应数据从磁盘加载到bcache中。一个缓存数据大小是与文件系统上一个逻辑块的大小相对应的（例如1KiB字节），在bcache中每个缓存数据块用struct buffer_head记载其元信息：', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '举例：Linux内核的bcache', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('461', 'struct buffer_head {\n                 char * b_data;    //指向缓存的数据块的指针   \n                 unsigned long b_blocknr;   //逻辑块号\n                 unsigned short b_dev;         //设备号\n                 unsigned char b_uptodate;  //缓存中的数据是否是最新的\n                 unsigned char b_dirt;           //缓存中数据是否为脏数据\n                 unsigned char b_count;        //这个缓存块被引用的次数\n                 unsigned char b_lock;          //b_lock表示这个缓存块是否被加锁\n                 struct task_struct * b_wait;   //等待在这个缓存块上的进程\n                 struct buffer_head * b_prev;  //指向缓存中相同hash值的下一个缓存块\n                 struct buffer_head * b_next; //指向缓存中相同hash值的上一个缓存块\n                 struct buffer_head * b_prev_free; //缓存块空闲链表中指向下一个缓存块\n                 struct buffer_head * b_next_free;  //缓存块空闲链表中指向上一个缓存块\n};', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '举例：Linux内核的bcache', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('462', '整个bcache以struct buffer_head为基本数据单元，组织为一个封闭定址（close addressing，即“单独链表法”解决冲突）的散列表struct buffer_head * hash_table[NR_HASH]; 散列函数的输入关键字是b_blocknr（逻辑块号）与b_dev（设备号）。计算hash值的散列函数表达式为：', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '举例：Linux内核的bcache', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('463', '其中NR_HASH是散列表的条目总数。发生“ 冲突”的struct buffer_head，以b_prev与b_next指针组成一个双向（不循环）链表。bcache中所有的struct buffer_head，包括使用中不空闲与未使用空闲的struct buffer_head，以b_prev_free和b_next_free指针组成一个双向循环链表free_list，其中未使用空闲的struct buffer_head放在该链表的前部。', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '举例：Linux内核的bcache', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('464', '^ [http//users.cis.fiu.edu/~weiss/dsaa_c2e/files.html], Data Structures and Algorithm Analysis in C (2nd edition).', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '举例：Linux内核的bcache', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('466', '散列表的载荷因子定义为： α {\\displaystyle \\alpha } = 填入表中的元素个数 / 散列表的长度', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '载荷因子', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('467', 'α {\\displaystyle \\alpha } 是散列表装满程度的标志因子。由于表长是定值， α {\\displaystyle \\alpha } 与“填入表中的元素个数”成正比，所以， α {\\displaystyle \\alpha } 越大，表明填入表中的元素越多，产生冲突的可能性就越大；反之， α {\\displaystyle \\alpha } 越小，标明填入表中的元素越少，产生冲突的可能性就越小。实际上，散列表的平均查找长度是载荷因子 α {\\displaystyle \\alpha } 的函数，只是不同处理冲突的方法有不同的函数。', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '载荷因子', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('468', '对于开放定址法，荷载因子是特别重要因素，应严格限制在0.7-0.8以下。超过0.8，查表时的CPU缓存不命中（cache missing）按照指数曲线上升。因此，一些采用开放定址法的hash库，如Java的系统库限制了荷载因子为0.75，超过此值将resize散列表。', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:35', '40', '哈希表', '载荷因子', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('469', '本条目可能包含过度、低质、或不恰当的范例或举例。请协助改善条目，增加叙述文字、除去不切题与过多的范例、精简范例分量。（2015年4月8日）', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('470', '本条目存在隐藏的内容，可能损害或改善读者的阅览体验。请协助改善条目，以符合维基百科的标准。（2015年3月2日） 一般应该仅由特定标准化模板提供折叠资料表格，勿因故事剧情或项目混杂而隐藏；内容应该考虑其他方式呈现。重复记载、过度细节与无助了解主题的堆砌内容等需要考虑除去。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('471', '在计算机科学中，二叉树（英语：Binary tree）是每个节点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二元堆积。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('472', '二叉树的每个节点至多只有二棵子树(不存在度大于2的节点)，二叉树的子树有左右之分，次序不能颠倒。二叉树的第i层至多有 2 i − 1 {\\displaystyle 2^{i-1}} 个节点；深度为k的二叉树至多共有 2 k + 1 − 1 {\\displaystyle 2^{\\begin{aligned}k+1\\end{aligned}}-1} 个节点；对任何一棵二叉树T，如果其终端节点数为 n 0 {\\displaystyle n_{0}} ，度为2的节点数为 n 2 {\\displaystyle n_{2}} ，则 n 0 = n 2 + 1 {\\displaystyle n_{0}=n_{2}+1} 。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('473', '一棵深度为k，且有 2 k + 1 − 1 {\\displaystyle 2^{\\begin{aligned}k+1\\end{aligned}}-1} 个节点称之为满二叉树；深度为k，有n个节点的二叉树，当且仅当其每一个节点都与深度为k的满二叉树中，序号为1至n的节点对应时，称之为完全二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('474', '与树不同，树的节点个数至少为1，而二叉树的节点个数可以为0；树中节点的最大度数没有限制，而二叉树节点的最大度数为2；树的节点无左、右之分，而二叉树的节点有左、右之分。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('475', '二叉树是一个连通的无环图，并且每一个顶点的度不大于3。有根二叉树还要满足根节点的度不大于2。有了根节点之后，每个顶点定义了唯一的父节点，和最多2个子节点。然而，没有足够的信息来区分左节点和右节点。如果不考虑连通性，允许图中有多个连通分量，这样的结构叫做森林。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('476', '二叉树是一个有根树，并且每个节点最多有2个子节点。非空的二叉树，若树叶总数为 n0，分支度为2的总数为 n2，则 n0 = n2 + 1。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '类型', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('477', '一棵深度为k，且有 2 k + 1 − 1 {\\displaystyle 2^{\\begin{aligned}k+1\\end{aligned}}-1} 个节点的二叉树，称为满二叉树（Full Binary Tree）。这种树的特点是每一层上的节点数都是最大节点数。而在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树（Complete Binary Tree）。具有n个节点的完全二叉树的深度为 l o g 2 n + 1 {\\displaystyle log_{2}n+1} 。深度为k的完全二叉树，至少有 2 k {\\displaystyle 2^{\\begin{aligned}k\\end{aligned}}} 个节点，至多有 2 k + 1 − 1 {\\displaystyle 2^{\\begin{aligned}k+1\\end{aligned}}-1} 个节点。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '类型', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('478', '完全二叉树 满二叉树 总节点k 2 h − 1 {\\displaystyle 2^{h-1}} <= k <= 2 h − 1 {\\displaystyle 2^{h}-1} k = 2 h − 1 {\\displaystyle 2^{h}-1} 树高h h = l o g 2 k + 1 {\\displaystyle log_{2}k+1} h = l o g 2 ( k + 1 ) {\\displaystyle log_{2}(k+1)}', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '类型', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('479', '/* [[二元树]]的顺序存储表示 */\n #define MAX_TREE_SIZE 100 /* [[二元树]]的最大节点数 */\n typedef TElemType SqBiTree[MAX_TREE_SIZE]; /* 0号单元存储根节点 */\n\n typedef struct\n {\n   int level,order; /* 节点的层，本层序号(按[[满二元树]]计算) */\n }position;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '前(先)序、中序、后序遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('480', '基于C/C++的实现算法显示▼  /* [[二元树]]的顺序存储的基本操作(23个)*/\n #define ClearBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\\arccos{}\n #define DestroyBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\n void InitBiTree(SqBiTree T) －－－（SqBiTree & T）\n { /* 构造[[空二元树]]T。因为T是阵列名称，故不需要& */\n   int i;\n   for(i=0;i<MAX_TREE_SIZE;i++)\n     T[i]=Nil; /* 初值为空(Nil在主程中定义) */\n }\n  void CreateBiTree(SqBiTree T)\n { /* 按层序次序输入二叉树中结点的值(字元型或整型), 构造顺序存储的二叉树T */\n   int i=0;\n #if CHAR /* 结点类型为字元 */\n   int l;\n   char s[MAX_TREE_SIZE];\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入结点的值(字元)，空格表示空结点，节点数≦%d:\\n\",MAX_TREE_SIZE);\n   gets(s); /* 输入字串 */\n   l=strlen(s); /* 求字串的长度 */\n   for(;i<l;i++) /* 将字串赋值给T */\n     T[i]=s[i];\n #else  /* 节点类型为整型 */\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入节点的值(整型)，0表示空节点，输999结束。节点数≦%d:\\n\",MAX_TREE_SIZE);\n   while(1)\n   {\n     scanf(\"%d\",&T[i]);\n     if(T[i]==999)\n     {\n       T[i]=Nil;\n       break;\n     }\n     i++;\n   }\n #endif\n   for(i=1;i<MAX_TREE_SIZE;i++)\n     if(T[(i+1)/2-1]==Nil&&T[i]!=Nil) /* 此非根节点(不空)无双亲 */\n     {\n       printf(\"出现无双亲的非根节点\"form\"\\n\",T[i]);\n       exit(ERROR);\n     }\n }\n  int BiTreeDepth(SqBiTree T)\n { /* 初始条件：[二元树]T存在。操作结果：返回T的深度 */\n   int i,j=-1;\n   for(i=MAX_TREE_SIZE-1;i>=0;i--) /* 找到最后一个节点 */\n     if(T[i]!=Nil)\n       break;\n   i++; /* 为了便于计算 */\n   do\n     j++;\n   while(i>=pow(2,j));   /*pow是原型为double pow( double x, double y ),计算x的y次方,h = log<sub>2</sub>k + 1来计算[二元树]的深度*/\n   return j;\n }\n  Status Root(SqBiTree T,TElemType *e)\n { /* 初始条件：[二元树]T存在。操作结果：当T不空，用e返回T的根，返回OK；否则返回ERROR，e无定义 */\n   if(BiTreeEmpty(T)) /* T空 */\n     return ERROR;\n   else\n   {\n     *e=T[0];\n     return OK;\n   }\n }\n  TElemType Value(SqBiTree T,position e)\n { /* 初始条件：[二元树]T存在，e是T中某个结点(的位置) */\n   /* 操作结果：返回处于位置e(层,本层序号)的结点的值 */\n   return T[(int)pow(2,e.level-1)+e.order-2];\n }\n  Status Assign(SqBiTree T,position e,TElemType value)\n { /* 初始条件：二叉树T存在，e是T中某个结点(的位置) */\n   /* 操作结果：给处于位置e(层,本层序号)的结点赋新值value */\n   int i=(int)pow(2,e.level-1)+e.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(value!=Nil&&T[(i+1)/2-1]==Nil) /* 给叶子赋非空值但双亲为空 */\n     return ERROR;\n   else if(value==Nil&&(T[i*2+1]!=Nil||T[i*2+2]!=Nil)) /*  给双亲赋空值但有叶子(不空) */\n     return ERROR;\n   T[i]=value;\n   return OK;\n }\n  TElemType Parent(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[(i+1)/2-1];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+2];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2==0) /* 找到e且其序号为偶数(是右孩子) */\n       return T[i-1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2) /* 找到e且其序号为奇数(是左孩子) */\n       return T[i+1];\n   return Nil; /* 没找到e */\n }\n  void Move(SqBiTree q,int j,SqBiTree T,int i) /* InsertChild()用到。加 */\n { /* 把从q的j结点开始的子树移为从T的i结点开始的子树 */\n   if(q[2*j+1]!=Nil) /* q的左子树不空 */\n     Move(q,(2*j+1),T,(2*i+1)); /* 把q的j结点的左子树移为T的i结点的左子树 */\n   if(q[2*j+2]!=Nil) /* q的右子树不空 */\n     Move(q,(2*j+2),T,(2*i+2)); /* 把q的j结点的右子树移为T的i结点的右子树 */\n   T[i]=q[j]; /* 把q的j结点移为T的i结点 */\n   q[j]=Nil; /* 把q的j结点置空 */\n }\n  void InsertChild(SqBiTree T,TElemType p,int LR,SqBiTree c)\n { /* 初始条件：二叉树T存在，p是T中某个结点的值，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果: 根据LR为0或1,插入c为T中p结点的左或右子树。p结点的原有左或右子树则成为c的右子树 */\n   int j,k,i=0;\n   for(j=0;j<(int)pow(2,BiTreeDepth(T))-1;j++) /* 查找p的序号 */\n     if(T[j]==p) /* j为p的序号 */\n       break;\n   k=2*j+1+LR; /* k为p的左或右孩子的序号 */\n   if(T[k]!=Nil) /* p原来的左或右孩子不空 */\n     Move(T,k,T,2*k+2); /* 把从T的k结点开始的子树移为从k结点的右子树开始的子树 */\n   Move(c,i,T,k); /* 把从c的i结点开始的子树移为从T的k结点开始的子树 */\n }\n  typedef int QElemType; /* 设伫列元素类型为整型(序号) */\n #include \"c3-2.h\" /* 链伫列 */\n #include \"bo3-2.c\" /* 链伫列的基本操作 */\n Status DeleteChild(SqBiTree T,position p,int LR)\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为1或0 */\n   /* 操作结果：根据LR为1或0，删除T中p所指结点的左或右子树 */\n   int i;\n   Status k=OK; /* 伫列不空的标志 */\n   LinkQueue q;\n   InitQueue(&q); /* 初始化伫列，用于存放待删除的结点 */\n   i=(int)pow(2,p.level-1)+p.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(T[i]==Nil) /* 此结点空 */\n     return ERROR;\n   i=i*2+1+LR; /* 待删除子树的根结点在矩阵中的序号 */\n   while(k)\n   {\n     if(T[2*i+1]!=Nil) /* 左结点不空 */\n       EnQueue(&q,2*i+1); /* 入队左结点的序号 */\n     if(T[2*i+2]!=Nil) /* 右结点不空 */\n       EnQueue(&q,2*i+2); /* 入队右结点的序号 */\n     T[i]=Nil; /* 删除此结点 */\n     k=DeQueue(&q,&i); /* 伫列不空 */\n   }\n   return OK;\n }\n  void(*VisitFunc)(TElemType); /* 函数变数 */\n void PreTraverse(SqBiTree T,int e)\n { /* PreOrderTraverse()调用 */\n   VisitFunc(T[e]);\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PreTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PreTraverse(T,2*e+2);\n }\n  void PreOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：先序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PreTraverse(T,0);\n   printf(\"\\n\");\n }\n  void InTraverse(SqBiTree T,int e)\n { /* InOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     InTraverse(T,2*e+1);\n   VisitFunc(T[e]);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     InTraverse(T,2*e+2);\n }\n  void InOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：中序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     InTraverse(T,0);\n   printf(\"\\n\");\n }\n  void PostTraverse(SqBiTree T,int e)\n { /* PostOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PostTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PostTraverse(T,2*e+2);\n   VisitFunc(T[e]);\n }\n  void PostOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PostTraverse(T,0);\n   printf(\"\\n\");\n }\n  void LevelOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 层序遍历二叉树 */\n   int i=MAX_TREE_SIZE-1,j;\n   while(T[i]==Nil)\n     i--; /* 找到最后一个非空结点的序号 */\n   for(j=0;j<=i;j++) /* 从根结点起，按层序遍历二叉树 */\n     if(T[j]!=Nil)\n       Visit(T[j]); /* 只遍历非空的结点 */\n   printf(\"\\n\");\n }\n  void Print(SqBiTree T)\n { /* 逐层、按本层序号输出二叉树 */\n   int j,k;\n   position p;\n   TElemType e;\n   for(j=1;j<=BiTreeDepth(T);j++)\n   {\n     printf(\"第%d层: \",j);\n     for(k=1;k<=pow(2,j-1);k++)\n     {\n       p.level=j;\n       p.order=k;\n       e=Value(T,p);\n       if(e!=Nil)\n	 printf(\"%d:\"form\" \",k,e);\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '前(先)序、中序、后序遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('481', '在使用记录或存储器地址指针的程序设计语言中，二叉树通常用树结点结构来存储。有时也包含指向唯一的父节点的指针。如果一个结点的子结点个数小于2，一些子结点指针可能为空值，或者为特殊的哨兵结点。 使用链表能避免顺序存储浪费空间的问题，算法和结构相对简单，但使用二叉链表，由于缺乏父链的指引，在找回父节点时需要重新扫描树得知父节点的节点地址。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '前(先)序、中序、后序遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('482', '/* 二叉树的二叉链表存储表示 */\n typedef struct BiTNode\n {\n   TElemType data;\n   struct BiTNode *lchild,*rchild; /* 左右孩子指针 */\n }BiTNode,*BiTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '深度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('483', '基于C/C++的实现算法显示▼  /* 二叉树的二叉链表存储的基本操作(22个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n #include\"func6-3.c\"\n /* 包括InitBiTree()、DestroyBiTree()、PreOrderTraverse()和InOrderTraverse()4函数 */\n  void CreateBiTree(BiTree *T)\n { /* 演算法6.4：按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造二叉链表表示的二叉树T。变数Nil表示空(子)树。有改动 */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiTree)malloc(sizeof(BiTNode)); /* 生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch;\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n   }\n }\n  Status BiTreeEmpty(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(T==NULL)  /*如果T=NULL,这样写便于理解，当然也可以写成if（!T）*/; \n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(BiTreeEmpty(T))\n     return Nil;\n   else\n     return T->data;\n }\n  TElemType Value(BiTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n TElemType Parent(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 树根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->lchild&&a->lchild->data==e||a->rchild&&a->rchild->data==e)\n       /* 找到e(是其左或右孩子) */\n         return a->data; /* 返回e的双亲的值 */\n       else /* 没找到e，则入队其左右孩子指针(如果非空) */\n       {\n         if(a->lchild)\n           EnQueue(&q,a->lchild);\n         if(a->rchild)\n           EnQueue(&q,a->rchild);\n       }\n     }\n   }\n   return Nil; /* 树空或没找到e */\n }\n  BiTree Point(BiTree T,TElemType s)\n { /* 返回二叉树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==s)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType LeftChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->rchild->data==e) /* p存在左右孩子且右孩子是e */\n         return p->lchild->data; /* 返回p的左孩子(e的左兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->lchild->data==e) /* p存在左右孩子且左孩子是e */\n         return p->rchild->data; /* 返回p的右孩子(e的右兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiTree p,int LR,BiTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点的 */\n   /*           原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       p->lchild=c;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       p->rchild=c;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  typedef BiTree SElemType; /* 设栈元素为二叉树的指针类型 */\n #include\"c3-1.h\" /* 顺序栈 */\n #include\"bo3-1.c\" /* 顺序栈的基本操作 */\n void InOrderTraverse1(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.3，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   InitStack(&S);\n   while(T||!StackEmpty(S))\n   {\n     if(T)\n     { /* 根指针进栈，遍历左子树 */\n       Push(&S,T);\n       T=T->lchild;\n     }\n     else\n     { /* 根指针退栈，访问根结点，遍历右子树 */\n       Pop(&S,&T);\n       Visit(T->data);\n       T=T->rchild;\n     }\n   }\n   printf(\"\\n\");\n }\n  void InOrderTraverse2(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.2，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   BiTree p;\n   InitStack(&S);\n   Push(&S,T); /* 根指针进栈 */\n   while(!StackEmpty(S))\n   {\n     while(GetTop(S,&p)&&p)\n       Push(&S,p->lchild); /* 向左走到尽头 */\n     Pop(&S,&p); /* 空指针退栈 */\n     if(!StackEmpty(S))\n     { /* 访问结点，向右一步 */\n       Pop(&S,&p);\n       Visit(p->data);\n       Push(&S,p->rchild);\n     }\n   }\n   printf(\"\\n\");\n }\n  void PostOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序递回遍历T，对每个结点调用函数Visit一次且仅一次 */\n   if(T) /* T不空 */\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 先后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 再后序遍历右子树 */\n     Visit(T->data); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：层序递回遍历T(利用伫列)，对每个结点调用函数Visit一次且仅一次 */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q); /* 初始化伫列q */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 伫列不空 */\n     {\n       DeQueue(&q,&a); /* 出队元素(指标),赋给a */\n       Visit(a->data); /* 访问a所指结点 */\n       if(a->lchild!=NULL) /* a有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队a的左孩子 */\n       if(a->rchild!=NULL) /* a有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队a的右孩子 */\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '深度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('484', '改进于二叉链表，增加父节点的指引，能更好地实现节点间的访问，不过算法相对复杂。 当二叉树用三叉链表表示时，有N个结点，就会有N+2个空指针。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '深度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('485', '/* 二叉树的三叉链表存储表示 */\n typedef struct BiTPNode\n {\n   TElemType data;\n   struct BiTPNode *parent,*lchild,*rchild; /* 父、左右孩子指针 */\n }BiTPNode,*BiPTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('486', '基于C/C++的实现算法显示▼  /* 二叉树的三叉链表存储的基本操作(21个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n void InitBiTree(BiPTree *T)\n { /* 操作结果：构造空二叉树T */\n   *T=NULL;\n }\n  void DestroyBiTree(BiPTree *T)\n { /* 初始条件：二叉树T存在。操作结果：销毁二叉树T */\n   if(*T) /* 非空树 */\n   {\n     if((*T)->lchild) /* 有左孩子 */\n       DestroyBiTree(&(*T)->lchild); /* 销毁左孩子子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       DestroyBiTree(&(*T)->rchild); /* 销毁右孩子子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL; /* 空指针赋0 */\n   }\n }\n  void CreateBiTree(BiPTree *T)\n { /* 按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造三叉链表表示的二叉树T */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiPTree)malloc(sizeof(BiTPNode)); /* 动态生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch; /* 给根结点赋值 */\n     (*T)->parent=NULL; /* 根结点无双亲 */\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     if((*T)->lchild) /* 有左孩子 */\n       (*T)->lchild->parent=*T; /* 给左孩子的双亲域赋值 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       (*T)->rchild->parent=*T; /* 给右孩子的双亲域赋值 */\n   }\n }\n  Status BiTreeEmpty(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(!T)\n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(T)\n     return T->data;\n   else\n     return Nil;\n }\n  TElemType Value(BiPTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiPTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiPTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n  BiPTree Point(BiPTree T,TElemType e)\n { /* 返回二叉树T中指向元素值为e的结点的指标。加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==e)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType Parent(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T) /* T中存在结点e且e是非根结点 */\n       return a->parent->data; /* 返回e的双亲的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->lchild&&a->parent->lchild!=a) /* T中存在结点e且e存在左兄弟 */\n       return a->parent->lchild->data; /* 返回e的左兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->rchild&&a->parent->rchild!=a) /* T中存在结点e且e存在右兄弟 */\n       return a->parent->rchild->data; /* 返回e的右兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiPTree p,int LR,BiPTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点 */\n   /*           的原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       if(c->rchild) /* c有右孩子(p原有左孩子) */\n         c->rchild->parent=c;\n       p->lchild=c;\n       c->parent=p;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       if(c->rchild) /* c有右孩子(p原有右孩子) */\n         c->rchild->parent=c;\n       p->rchild=c;\n       c->parent=p;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiPTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  void PreOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 先序递回遍历二叉树T */\n   if(T)\n   {\n     Visit(T); /* 先访问根结点 */\n     PreOrderTraverse(T->lchild,Visit); /* 再先序遍历左子树 */\n     PreOrderTraverse(T->rchild,Visit); /* 最后先序遍历右子树 */\n   }\n }\n  void InOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 中序递回遍历二叉树T */\n   if(T)\n   {\n     InOrderTraverse(T->lchild,Visit); /* 中序遍历左子树 */\n     Visit(T); /* 再访问根结点 */\n     InOrderTraverse(T->rchild,Visit); /* 最后中序遍历右子树 */\n   }\n }\n  void PostOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 后序递回遍历二叉树T */\n   if(T)\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 后序遍历右子树 */\n     Visit(T); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 层序遍历二叉树T(利用伫列) */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q);\n     EnQueue(&q,T);\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&a);\n       Visit(a);\n       if(a->lchild!=NULL)\n         EnQueue(&q,a->lchild);\n       if(a->rchild!=NULL)\n         EnQueue(&q,a->rchild);\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('487', '我们经常希望访问树中的每一个结点并且查看它的值。有很多常见的顺序来访问所有的结点，而且每一种都有有用的性质。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('488', '遍历二叉树：L、D、R分别表示遍历左子树、访问根结点和遍历右子树，则先(根)序遍历二叉树的顺序是DLR，中(根)序遍历二叉树的顺序是LDR，后(根)序遍历二叉树的顺序是LRD。还有按层遍历二叉树。这些方法的时间复杂度都是O(n)，n为结点个数。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('489', '如果T2是由有序树T转换而来的二叉树，那么T中结点的前序就是T2中结点的前序，T中结点的后序就是T2中结点的中序。任何一棵二叉树的叶结点在先序、中序和后序遍历中的相对次序不发改变。设n,m为一棵二叉树上的两个结点，在中序遍历时，n在m前的条件是n在m的左方。前序序列和中序序列相同的二叉树为空树或任一结点均无左孩子的非空二叉树；中序序列和后序序列相同的二叉树为空树或任一结点均无右孩子的非空二叉树；前序序列和后序序列相同的二叉树为空树或仅有一个结点的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('490', '假设我们有一个包含值的value和指向两个子结点的left和right的树结点结构。我们可以写出这样的过程：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('491', 'visit(node)\n    print node.value\n    if node.left  != null then visit(node.left)\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('492', '这样会用前序打印出树中的值。在前序，每个结点在访问它的子结点之前访问。类似地，如果打印语句在最后，每个结点在访问他的子节点之后访问，树中的值会用后序来打印。在这两种情况中，左子树中的值比右子树中得值先打印。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('493', 'visit(node)\n    if node.left  != null then visit(node.left)\n    print node.value\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('494', '最后，上面的中序遍历，每个结点在访问左子树和右子树之间访问。这在遍历二叉搜索树时很常用，因为它能用递增的顺序来遍历所有的值。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('495', '为什么呢？如果n是二叉搜索树的结点，那么n的左子树的所有结点的值都比n的值要小，而且n的右子树的所有节点的值都比n的值要大。因此，如果我们顺序遍历左子树，然后访问n，然后顺序遍历右子树。我们就已经循序访问了整个树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('496', '在这个二叉树中， 前序遍历的结果：2, 7, 2, 6, 5, 11, 5, 9, 4 后序遍历的结果：2, 5, 11, 6, 7, 4, 9, 5, 2 中序遍历的结果：2, 7, 5, 6, 11, 2, 5, 4, 9', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('497', '以上的递归算法使用与树的高度成比例的栈空间。如果我们在每个结点中存储指向父结点的指针，那样可以使用反复运算算法，只使用常数空间实现所有这些遍历。然而，指向父结点的指针占用更多的空间。这只在需要指向父节点的指针或栈空间有限时才使用。例如， 这是一个中序遍历的反复运算算法：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('498', 'visit(root)\n    prev    := null\n    current := root\n    next    := null\n    \n    while current != null\n        if prev == current.parent\n            prev := current\n            next := current.left\n        if next == null or prev == current.left\n            print current.value\n            prev := current\n            next := current.right\n        if next == null or prev == current.right\n            prev := current\n            next := current.parent\n        current := next', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('499', '用二叉树表示下述表达式：a+b*(c-d)-e/f 先序遍历的序列是：-+a*b-cd/ef 中序遍历的序列是：a+b*c-d-e/f 后序遍历的序列是：abcd-*+ef/-', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('500', '在深度优先级中，我们希望从根结点访问最远的结点。和图的深度优先搜索不同的是，不需记住访问过的每一个结点，因为树中不会有环。前序，中序和后序遍历都是深度优先遍历的特例。参见深度优先搜索。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('501', '和深度优先遍历不同，广度优先遍历会先访问离根节点最近的节点。参见广度优先搜索。 二叉树的广度优先遍历又称按层次遍历。算法借助队列实现。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('502', '一般有序树和二叉树之间有一一映射关系，能进行相互转换。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('503', 'n叉树转换为二叉树的方法：二叉树中结点x的左子结点为n叉树中结点x的左子结点；二叉树中结点x的右子结点为n叉树中结点x的第一个右边的同级结点y。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('504', '例如，在左边的树中，A有6个子结点{B,C,D,E,F,G}。它能被转换成右边的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('505', '在兄弟之间加一连接； 对每个结点，除了其左孩子外，去除其与其余孩子之间的联系； 以树的根结点为轴心，将整树顺时针转45度。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('506', '树的二叉链表标记法（孩子兄弟标记法）是树和二叉树转换的媒介。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:11', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('507', '/* 树的二叉链表(孩子—兄弟)存储表示 */\n typedef struct CSNode\n {\n   TElemType data;\n   struct CSNode *firstchild,*nextsibling;\n }CSNode,*CSTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('508', '树的二叉链表存储的基本操作[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('509', '基于C/C++的算法实现显示▼  /* 树的二叉链表(孩子—兄弟)存储的基本操作(17个) */\n #define ClearTree DestroyTree /* 二者操作相同 */\n #include\"func6-2.c\" /* 包括PreOrderTraverse() */\n void InitTree(CSTree *T)\n { /* 操作结果：构造空树T */\n   *T=NULL;\n }\n  void DestroyTree(CSTree *T)\n { /* 初始条件：树T存在。操作结果：销毁树T */\n   if(*T)\n   {\n     if((*T)->firstchild) /* T有长子 */\n       DestroyTree(&(*T)->firstchild); /* 销毁T的长子为根结点的子树 */\n     if((*T)->nextsibling) /* T有下一个兄弟 */\n       DestroyTree(&(*T)->nextsibling); /* 销毁T的下一个兄弟为根结点的子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL;\n   }\n }\n  typedef CSTree QElemType; /* 定义伫列元素类型 */\n #include\"c3-2.h\" /* 定义LinkQueue类型(链伫列) */\n #include\"bo3-2.c\" /* LinkQueue类型的基本操作 */\n void CreateTree(CSTree *T)\n { /* 构造树T */\n   char c[20]; /* 临时存放孩子结点(设不超过20个)的值 */\n   CSTree p,p1;\n   LinkQueue q;\n   int i,l;\n   InitQueue(&q);\n   printf(\"请输入根结点(字元型,空格为空): \");\n   scanf(\"%c%*c\",&c[0]);\n   if(c[0]!=Nil) /* 非空树 */\n   {\n     *T=(CSTree)malloc(sizeof(CSNode)); /* 建立根结点 */\n     (*T)->data=c[0];\n     (*T)->nextsibling=NULL;\n     EnQueue(&q,*T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       printf(\"请按长幼顺序输入结点%c的所有孩子: \",p->data);\n       gets(c);\n       l=strlen(c);\n       if(l>0) /* 有孩子 */\n       {\n         p1=p->firstchild=(CSTree)malloc(sizeof(CSNode)); /* 建立长子结点 */\n         p1->data=c[0];\n         for(i=1;i<l;i++)\n         {\n           p1->nextsibling=(CSTree)malloc(sizeof(CSNode)); /* 建立下一个兄弟结点 */\n           EnQueue(&q,p1); /* 入队上一个结点 */\n           p1=p1->nextsibling;\n           p1->data=c[i];\n         }\n         p1->nextsibling=NULL;\n         EnQueue(&q,p1); /* 入队最后一个结点 */\n       }\n       else\n         p->firstchild=NULL; /* 长子指针为空 */\n     }\n   }\n   else\n     *T=NULL; /* 空树 */\n }\n  Status TreeEmpty(CSTree T)\n { /* 初始条件：树T存在。操作结果：若T为空树，则返回TURE，否则返回FALSE */\n   if(T) /* T不空 */\n     return FALSE;\n   else\n     return TRUE;\n }\n  int TreeDepth(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的深度 */\n   CSTree p;\n   int depth,max=0;\n   if(!T) /* 树空 */\n     return 0;\n   if(!T->firstchild) /* 树无长子 */\n     return 1;\n   for(p=T->firstchild;p;p=p->nextsibling)\n   { /* 求子树深度的最大值 */\n     depth=TreeDepth(p);\n     if(depth>max)\n       max=depth;\n   }\n   return max+1; /* 树的深度=子树深度最大值+1 */\n }\n  TElemType Value(CSTree p)\n { /* 返回p所指结点的值 */\n   return p->data;\n }\n  TElemType Root(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的根 */\n   if(T)\n     return Value(T);\n   else\n     return Nil;\n }\n  CSTree Point(CSTree T,TElemType s)\n { /* 返回二叉链表(孩子—兄弟)树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队,伫列元素赋给a */\n       if(a->data==s)\n	 return a;\n       if(a->firstchild) /* 有长子 */\n         EnQueue(&q,a->firstchild); /* 入队长子 */\n       if(a->nextsibling) /* 有下一个兄弟 */\n         EnQueue(&q,a->nextsibling); /* 入队下一个兄弟 */\n     }\n   }\n   return NULL;\n }\n  Status Assign(CSTree *T,TElemType cur_e,TElemType value)\n { /* 初始条件：树T存在，cur_e是树T中结点的值。操作结果：改cur_e为value */\n   CSTree p;\n   if(*T) /* 非空树 */\n   {\n     p=Point(*T,cur_e); /* p为cur_e的指针 */\n     if(p) /* 找到cur_e */\n     {\n       p->data=value; /* 赋新值 */\n       return OK;\n     }\n   }\n   return ERROR; /* 树空或没找到 */\n }\n  TElemType Parent(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非根结点，则返回它的双亲，否则函数值为＂空＂*/\n   CSTree p,t;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T) /* 树非空 */\n   {\n     if(Value(T)==cur_e) /* 根结点值为cur_e */\n       return Nil;\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&p);\n       if(p->firstchild) /* p有长子 */\n       {\n         if(p->firstchild->data==cur_e) /* 长子为cur_e */\n           return Value(p); /* 返回双亲 */\n         t=p; /* 双亲指针赋给t */\n         p=p->firstchild; /* p指向长子 */\n         EnQueue(&q,p); /* 入队长子 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling; /* p指向下一个兄弟 */\n	 if(Value(p)==cur_e) /* 下一个兄弟为cur_e */\n	 return Value(t); /* 返回双亲 */\n	 EnQueue(&q,p); /* 入队下一个兄弟 */\n	 }\n       }\n     }\n   }\n   return Nil; /* 树空或没找到cur_e */\n }\n  TElemType LeftChild(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非叶子结点，则返回它的最左孩子，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->firstchild) /* 找到结点cur_e且结点cur_e有长子 */\n     return f->firstchild->data;\n   else\n     return Nil;\n }\n  TElemType RightSibling(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e有右兄弟，则返回它的右兄弟，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->nextsibling) /* 找到结点cur_e且结点cur_e有右兄弟 */\n     return f->nextsibling->data;\n   else\n     return Nil; /* 树空 */\n }\n  Status InsertChild(CSTree *T,CSTree p,int i,CSTree c)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度+1，非空树c与T不相交 */\n   /* 操作结果：插入c为T中p结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 插入c为p的长子 */\n     {\n       c->nextsibling=p->firstchild; /* p的原长子现是c的下一个兄弟(c本无兄弟) */\n       p->firstchild=c;\n     }\n     else /* 找插入点 */\n     {\n       p=p->firstchild; /* 指向p的长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到插入位置 */\n       {\n         c->nextsibling=p->nextsibling;\n         p->nextsibling=c;\n       }\n       else /* p原有孩子数小于i-1 */\n         return ERROR;\n     }\n     return OK;\n   }\n   else /* T空 */\n     return ERROR;\n }\n  Status DeleteChild(CSTree *T,CSTree p,int i)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度 */\n   /* 操作结果：删除T中p所指结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   CSTree b;\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 删除长子 */\n     {\n       b=p->firstchild;\n       p->firstchild=b->nextsibling; /* p的原次子现是长子 */\n       b->nextsibling=NULL;\n       DestroyTree(&b);\n     }\n     else /* 删除非长子 */\n     {\n       p=p->firstchild; /* p指向长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到第i棵子树 */\n       {\n         b=p->nextsibling;\n         p->nextsibling=b->nextsibling;\n         b->nextsibling=NULL;\n         DestroyTree(&b);\n       }\n       else /* p原有孩子数小于i */\n         return ERROR;\n     }\n     return OK;\n   }\n   else\n     return ERROR;\n }\n  void PostOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 后根遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   if(T)\n   {\n     if(T->firstchild) /* 有长子 */\n     {\n       PostOrderTraverse(T->firstchild,Visit); /* 后根遍历长子子树 */\n       p=T->firstchild->nextsibling; /* p指向长子的下一个兄弟 */\n       while(p)\n       {\n         PostOrderTraverse(p,Visit); /* 后根遍历下一个兄弟子树 */\n         p=p->nextsibling; /* p指向再下一个兄弟 */\n       }\n     }\n     Visit(Value(T)); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 层序遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T)\n   {\n     Visit(Value(T)); /* 先访问根结点 */\n     EnQueue(&q,T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       if(p->firstchild) /* 有长子 */\n       {\n         p=p->firstchild;\n         Visit(Value(p)); /* 访问长子结点 */\n         EnQueue(&q,p); /* 入队长子结点的指针 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling;\n           Visit(Value(p)); /* 访问下一个兄弟 */\n           EnQueue(&q,p); /* 入队兄弟结点的指针 */\n         }\n       }\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('510', '线索二叉树 (threaded binary tree)[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('511', '线索二叉树(保留遍历时结点在任一序列的前驱和后继的信息)：若结点有左子树，则其lchild域指示其左孩子，否则令lchild域指示其前驱；若结点有右子树，则其rchild域指示其右孩子，否则令rchild指示其后继。还需在结点结构中增加两个标志域LTag和RTag。LTag=0时，lchild域指示结点的左孩子，LTag=1时，lchild域指示结点的前驱；RTag=0时，rchild域指示结点的右孩子，RTag=1时，rchild域指示结点的后继。以这种结点结构构成的二叉链表作为二叉树的存储结构，叫做线索链表，其中指向结点前驱和后继的指针叫做线索，加上线索的二叉树称为线索二叉树。对二叉树以某种次序遍历使其变为线索二叉树的过程叫做线索化。若对二叉树进行中序遍历，则所得的线索二叉树称为中序线索二叉树，线索链表称为为中序线索链表。线索二叉树是一种物理结构。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('512', '在中序线索树找结点后继的规律是：若其右标志为1，则右链为线索，指示其后继，否则遍历其右子树时访问的第一个结点（右子树最左下的结点）为其后继；找结点前驱的规律是：若其左标志为1，则左链为线索，指示其前驱，否则遍历左子树时最后访问的一个结点（左子树中最右下的结点）为其前驱。 在后序线索树中找到结点的后继分三种情况：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('513', '若结点是二叉树的根，则其后继为空； 若结点是其双亲的右孩子，或是其双亲的左孩子且其双亲没有右子树，则其后继即为双亲结点； 若结点是其双亲的左孩子，且其双亲有右子树，则其后继为双亲右子树上按后序遍历列出的第一个结点。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('514', '/* [[二元树]]的顺序存储表示 */\n #define MAX_TREE_SIZE 100 /* [[二元树]]的最大节点数 */\n typedef TElemType SqBiTree[MAX_TREE_SIZE]; /* 0号单元存储根节点 */\n\n typedef struct\n {\n   int level,order; /* 节点的层，本层序号(按[[满二元树]]计算) */\n }position;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('515', '基于C/C++的实现算法显示▼  /* [[二元树]]的顺序存储的基本操作(23个)*/\n #define ClearBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\\arccos{}\n #define DestroyBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\n void InitBiTree(SqBiTree T) －－－（SqBiTree & T）\n { /* 构造[[空二元树]]T。因为T是阵列名称，故不需要& */\n   int i;\n   for(i=0;i<MAX_TREE_SIZE;i++)\n     T[i]=Nil; /* 初值为空(Nil在主程中定义) */\n }\n  void CreateBiTree(SqBiTree T)\n { /* 按层序次序输入二叉树中结点的值(字元型或整型), 构造顺序存储的二叉树T */\n   int i=0;\n #if CHAR /* 结点类型为字元 */\n   int l;\n   char s[MAX_TREE_SIZE];\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入结点的值(字元)，空格表示空结点，节点数≦%d:\\n\",MAX_TREE_SIZE);\n   gets(s); /* 输入字串 */\n   l=strlen(s); /* 求字串的长度 */\n   for(;i<l;i++) /* 将字串赋值给T */\n     T[i]=s[i];\n #else  /* 节点类型为整型 */\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入节点的值(整型)，0表示空节点，输999结束。节点数≦%d:\\n\",MAX_TREE_SIZE);\n   while(1)\n   {\n     scanf(\"%d\",&T[i]);\n     if(T[i]==999)\n     {\n       T[i]=Nil;\n       break;\n     }\n     i++;\n   }\n #endif\n   for(i=1;i<MAX_TREE_SIZE;i++)\n     if(T[(i+1)/2-1]==Nil&&T[i]!=Nil) /* 此非根节点(不空)无双亲 */\n     {\n       printf(\"出现无双亲的非根节点\"form\"\\n\",T[i]);\n       exit(ERROR);\n     }\n }\n  int BiTreeDepth(SqBiTree T)\n { /* 初始条件：[二元树]T存在。操作结果：返回T的深度 */\n   int i,j=-1;\n   for(i=MAX_TREE_SIZE-1;i>=0;i--) /* 找到最后一个节点 */\n     if(T[i]!=Nil)\n       break;\n   i++; /* 为了便于计算 */\n   do\n     j++;\n   while(i>=pow(2,j));   /*pow是原型为double pow( double x, double y ),计算x的y次方,h = log<sub>2</sub>k + 1来计算[二元树]的深度*/\n   return j;\n }\n  Status Root(SqBiTree T,TElemType *e)\n { /* 初始条件：[二元树]T存在。操作结果：当T不空，用e返回T的根，返回OK；否则返回ERROR，e无定义 */\n   if(BiTreeEmpty(T)) /* T空 */\n     return ERROR;\n   else\n   {\n     *e=T[0];\n     return OK;\n   }\n }\n  TElemType Value(SqBiTree T,position e)\n { /* 初始条件：[二元树]T存在，e是T中某个结点(的位置) */\n   /* 操作结果：返回处于位置e(层,本层序号)的结点的值 */\n   return T[(int)pow(2,e.level-1)+e.order-2];\n }\n  Status Assign(SqBiTree T,position e,TElemType value)\n { /* 初始条件：二叉树T存在，e是T中某个结点(的位置) */\n   /* 操作结果：给处于位置e(层,本层序号)的结点赋新值value */\n   int i=(int)pow(2,e.level-1)+e.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(value!=Nil&&T[(i+1)/2-1]==Nil) /* 给叶子赋非空值但双亲为空 */\n     return ERROR;\n   else if(value==Nil&&(T[i*2+1]!=Nil||T[i*2+2]!=Nil)) /*  给双亲赋空值但有叶子(不空) */\n     return ERROR;\n   T[i]=value;\n   return OK;\n }\n  TElemType Parent(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[(i+1)/2-1];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+2];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2==0) /* 找到e且其序号为偶数(是右孩子) */\n       return T[i-1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2) /* 找到e且其序号为奇数(是左孩子) */\n       return T[i+1];\n   return Nil; /* 没找到e */\n }\n  void Move(SqBiTree q,int j,SqBiTree T,int i) /* InsertChild()用到。加 */\n { /* 把从q的j结点开始的子树移为从T的i结点开始的子树 */\n   if(q[2*j+1]!=Nil) /* q的左子树不空 */\n     Move(q,(2*j+1),T,(2*i+1)); /* 把q的j结点的左子树移为T的i结点的左子树 */\n   if(q[2*j+2]!=Nil) /* q的右子树不空 */\n     Move(q,(2*j+2),T,(2*i+2)); /* 把q的j结点的右子树移为T的i结点的右子树 */\n   T[i]=q[j]; /* 把q的j结点移为T的i结点 */\n   q[j]=Nil; /* 把q的j结点置空 */\n }\n  void InsertChild(SqBiTree T,TElemType p,int LR,SqBiTree c)\n { /* 初始条件：二叉树T存在，p是T中某个结点的值，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果: 根据LR为0或1,插入c为T中p结点的左或右子树。p结点的原有左或右子树则成为c的右子树 */\n   int j,k,i=0;\n   for(j=0;j<(int)pow(2,BiTreeDepth(T))-1;j++) /* 查找p的序号 */\n     if(T[j]==p) /* j为p的序号 */\n       break;\n   k=2*j+1+LR; /* k为p的左或右孩子的序号 */\n   if(T[k]!=Nil) /* p原来的左或右孩子不空 */\n     Move(T,k,T,2*k+2); /* 把从T的k结点开始的子树移为从k结点的右子树开始的子树 */\n   Move(c,i,T,k); /* 把从c的i结点开始的子树移为从T的k结点开始的子树 */\n }\n  typedef int QElemType; /* 设伫列元素类型为整型(序号) */\n #include \"c3-2.h\" /* 链伫列 */\n #include \"bo3-2.c\" /* 链伫列的基本操作 */\n Status DeleteChild(SqBiTree T,position p,int LR)\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为1或0 */\n   /* 操作结果：根据LR为1或0，删除T中p所指结点的左或右子树 */\n   int i;\n   Status k=OK; /* 伫列不空的标志 */\n   LinkQueue q;\n   InitQueue(&q); /* 初始化伫列，用于存放待删除的结点 */\n   i=(int)pow(2,p.level-1)+p.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(T[i]==Nil) /* 此结点空 */\n     return ERROR;\n   i=i*2+1+LR; /* 待删除子树的根结点在矩阵中的序号 */\n   while(k)\n   {\n     if(T[2*i+1]!=Nil) /* 左结点不空 */\n       EnQueue(&q,2*i+1); /* 入队左结点的序号 */\n     if(T[2*i+2]!=Nil) /* 右结点不空 */\n       EnQueue(&q,2*i+2); /* 入队右结点的序号 */\n     T[i]=Nil; /* 删除此结点 */\n     k=DeQueue(&q,&i); /* 伫列不空 */\n   }\n   return OK;\n }\n  void(*VisitFunc)(TElemType); /* 函数变数 */\n void PreTraverse(SqBiTree T,int e)\n { /* PreOrderTraverse()调用 */\n   VisitFunc(T[e]);\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PreTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PreTraverse(T,2*e+2);\n }\n  void PreOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：先序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PreTraverse(T,0);\n   printf(\"\\n\");\n }\n  void InTraverse(SqBiTree T,int e)\n { /* InOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     InTraverse(T,2*e+1);\n   VisitFunc(T[e]);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     InTraverse(T,2*e+2);\n }\n  void InOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：中序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     InTraverse(T,0);\n   printf(\"\\n\");\n }\n  void PostTraverse(SqBiTree T,int e)\n { /* PostOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PostTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PostTraverse(T,2*e+2);\n   VisitFunc(T[e]);\n }\n  void PostOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PostTraverse(T,0);\n   printf(\"\\n\");\n }\n  void LevelOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 层序遍历二叉树 */\n   int i=MAX_TREE_SIZE-1,j;\n   while(T[i]==Nil)\n     i--; /* 找到最后一个非空结点的序号 */\n   for(j=0;j<=i;j++) /* 从根结点起，按层序遍历二叉树 */\n     if(T[j]!=Nil)\n       Visit(T[j]); /* 只遍历非空的结点 */\n   printf(\"\\n\");\n }\n  void Print(SqBiTree T)\n { /* 逐层、按本层序号输出二叉树 */\n   int j,k;\n   position p;\n   TElemType e;\n   for(j=1;j<=BiTreeDepth(T);j++)\n   {\n     printf(\"第%d层: \",j);\n     for(k=1;k<=pow(2,j-1);k++)\n     {\n       p.level=j;\n       p.order=k;\n       e=Value(T,p);\n       if(e!=Nil)\n	 printf(\"%d:\"form\" \",k,e);\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('516', '在使用记录或存储器地址指针的程序设计语言中，二叉树通常用树结点结构来存储。有时也包含指向唯一的父节点的指针。如果一个结点的子结点个数小于2，一些子结点指针可能为空值，或者为特殊的哨兵结点。 使用链表能避免顺序存储浪费空间的问题，算法和结构相对简单，但使用二叉链表，由于缺乏父链的指引，在找回父节点时需要重新扫描树得知父节点的节点地址。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('517', '/* [[二元树]]的顺序存储表示 */\n #define MAX_TREE_SIZE 100 /* [[二元树]]的最大节点数 */\n typedef TElemType SqBiTree[MAX_TREE_SIZE]; /* 0号单元存储根节点 */\n\n typedef struct\n {\n   int level,order; /* 节点的层，本层序号(按[[满二元树]]计算) */\n }position;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('518', '基于C/C++的实现算法显示▼  /* [[二元树]]的顺序存储的基本操作(23个)*/\n #define ClearBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\\arccos{}\n #define DestroyBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\n void InitBiTree(SqBiTree T) －－－（SqBiTree & T）\n { /* 构造[[空二元树]]T。因为T是阵列名称，故不需要& */\n   int i;\n   for(i=0;i<MAX_TREE_SIZE;i++)\n     T[i]=Nil; /* 初值为空(Nil在主程中定义) */\n }\n  void CreateBiTree(SqBiTree T)\n { /* 按层序次序输入二叉树中结点的值(字元型或整型), 构造顺序存储的二叉树T */\n   int i=0;\n #if CHAR /* 结点类型为字元 */\n   int l;\n   char s[MAX_TREE_SIZE];\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入结点的值(字元)，空格表示空结点，节点数≦%d:\\n\",MAX_TREE_SIZE);\n   gets(s); /* 输入字串 */\n   l=strlen(s); /* 求字串的长度 */\n   for(;i<l;i++) /* 将字串赋值给T */\n     T[i]=s[i];\n #else  /* 节点类型为整型 */\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入节点的值(整型)，0表示空节点，输999结束。节点数≦%d:\\n\",MAX_TREE_SIZE);\n   while(1)\n   {\n     scanf(\"%d\",&T[i]);\n     if(T[i]==999)\n     {\n       T[i]=Nil;\n       break;\n     }\n     i++;\n   }\n #endif\n   for(i=1;i<MAX_TREE_SIZE;i++)\n     if(T[(i+1)/2-1]==Nil&&T[i]!=Nil) /* 此非根节点(不空)无双亲 */\n     {\n       printf(\"出现无双亲的非根节点\"form\"\\n\",T[i]);\n       exit(ERROR);\n     }\n }\n  int BiTreeDepth(SqBiTree T)\n { /* 初始条件：[二元树]T存在。操作结果：返回T的深度 */\n   int i,j=-1;\n   for(i=MAX_TREE_SIZE-1;i>=0;i--) /* 找到最后一个节点 */\n     if(T[i]!=Nil)\n       break;\n   i++; /* 为了便于计算 */\n   do\n     j++;\n   while(i>=pow(2,j));   /*pow是原型为double pow( double x, double y ),计算x的y次方,h = log<sub>2</sub>k + 1来计算[二元树]的深度*/\n   return j;\n }\n  Status Root(SqBiTree T,TElemType *e)\n { /* 初始条件：[二元树]T存在。操作结果：当T不空，用e返回T的根，返回OK；否则返回ERROR，e无定义 */\n   if(BiTreeEmpty(T)) /* T空 */\n     return ERROR;\n   else\n   {\n     *e=T[0];\n     return OK;\n   }\n }\n  TElemType Value(SqBiTree T,position e)\n { /* 初始条件：[二元树]T存在，e是T中某个结点(的位置) */\n   /* 操作结果：返回处于位置e(层,本层序号)的结点的值 */\n   return T[(int)pow(2,e.level-1)+e.order-2];\n }\n  Status Assign(SqBiTree T,position e,TElemType value)\n { /* 初始条件：二叉树T存在，e是T中某个结点(的位置) */\n   /* 操作结果：给处于位置e(层,本层序号)的结点赋新值value */\n   int i=(int)pow(2,e.level-1)+e.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(value!=Nil&&T[(i+1)/2-1]==Nil) /* 给叶子赋非空值但双亲为空 */\n     return ERROR;\n   else if(value==Nil&&(T[i*2+1]!=Nil||T[i*2+2]!=Nil)) /*  给双亲赋空值但有叶子(不空) */\n     return ERROR;\n   T[i]=value;\n   return OK;\n }\n  TElemType Parent(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[(i+1)/2-1];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+2];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2==0) /* 找到e且其序号为偶数(是右孩子) */\n       return T[i-1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2) /* 找到e且其序号为奇数(是左孩子) */\n       return T[i+1];\n   return Nil; /* 没找到e */\n }\n  void Move(SqBiTree q,int j,SqBiTree T,int i) /* InsertChild()用到。加 */\n { /* 把从q的j结点开始的子树移为从T的i结点开始的子树 */\n   if(q[2*j+1]!=Nil) /* q的左子树不空 */\n     Move(q,(2*j+1),T,(2*i+1)); /* 把q的j结点的左子树移为T的i结点的左子树 */\n   if(q[2*j+2]!=Nil) /* q的右子树不空 */\n     Move(q,(2*j+2),T,(2*i+2)); /* 把q的j结点的右子树移为T的i结点的右子树 */\n   T[i]=q[j]; /* 把q的j结点移为T的i结点 */\n   q[j]=Nil; /* 把q的j结点置空 */\n }\n  void InsertChild(SqBiTree T,TElemType p,int LR,SqBiTree c)\n { /* 初始条件：二叉树T存在，p是T中某个结点的值，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果: 根据LR为0或1,插入c为T中p结点的左或右子树。p结点的原有左或右子树则成为c的右子树 */\n   int j,k,i=0;\n   for(j=0;j<(int)pow(2,BiTreeDepth(T))-1;j++) /* 查找p的序号 */\n     if(T[j]==p) /* j为p的序号 */\n       break;\n   k=2*j+1+LR; /* k为p的左或右孩子的序号 */\n   if(T[k]!=Nil) /* p原来的左或右孩子不空 */\n     Move(T,k,T,2*k+2); /* 把从T的k结点开始的子树移为从k结点的右子树开始的子树 */\n   Move(c,i,T,k); /* 把从c的i结点开始的子树移为从T的k结点开始的子树 */\n }\n  typedef int QElemType; /* 设伫列元素类型为整型(序号) */\n #include \"c3-2.h\" /* 链伫列 */\n #include \"bo3-2.c\" /* 链伫列的基本操作 */\n Status DeleteChild(SqBiTree T,position p,int LR)\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为1或0 */\n   /* 操作结果：根据LR为1或0，删除T中p所指结点的左或右子树 */\n   int i;\n   Status k=OK; /* 伫列不空的标志 */\n   LinkQueue q;\n   InitQueue(&q); /* 初始化伫列，用于存放待删除的结点 */\n   i=(int)pow(2,p.level-1)+p.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(T[i]==Nil) /* 此结点空 */\n     return ERROR;\n   i=i*2+1+LR; /* 待删除子树的根结点在矩阵中的序号 */\n   while(k)\n   {\n     if(T[2*i+1]!=Nil) /* 左结点不空 */\n       EnQueue(&q,2*i+1); /* 入队左结点的序号 */\n     if(T[2*i+2]!=Nil) /* 右结点不空 */\n       EnQueue(&q,2*i+2); /* 入队右结点的序号 */\n     T[i]=Nil; /* 删除此结点 */\n     k=DeQueue(&q,&i); /* 伫列不空 */\n   }\n   return OK;\n }\n  void(*VisitFunc)(TElemType); /* 函数变数 */\n void PreTraverse(SqBiTree T,int e)\n { /* PreOrderTraverse()调用 */\n   VisitFunc(T[e]);\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PreTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PreTraverse(T,2*e+2);\n }\n  void PreOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：先序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PreTraverse(T,0);\n   printf(\"\\n\");\n }\n  void InTraverse(SqBiTree T,int e)\n { /* InOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     InTraverse(T,2*e+1);\n   VisitFunc(T[e]);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     InTraverse(T,2*e+2);\n }\n  void InOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：中序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     InTraverse(T,0);\n   printf(\"\\n\");\n }\n  void PostTraverse(SqBiTree T,int e)\n { /* PostOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PostTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PostTraverse(T,2*e+2);\n   VisitFunc(T[e]);\n }\n  void PostOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PostTraverse(T,0);\n   printf(\"\\n\");\n }\n  void LevelOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 层序遍历二叉树 */\n   int i=MAX_TREE_SIZE-1,j;\n   while(T[i]==Nil)\n     i--; /* 找到最后一个非空结点的序号 */\n   for(j=0;j<=i;j++) /* 从根结点起，按层序遍历二叉树 */\n     if(T[j]!=Nil)\n       Visit(T[j]); /* 只遍历非空的结点 */\n   printf(\"\\n\");\n }\n  void Print(SqBiTree T)\n { /* 逐层、按本层序号输出二叉树 */\n   int j,k;\n   position p;\n   TElemType e;\n   for(j=1;j<=BiTreeDepth(T);j++)\n   {\n     printf(\"第%d层: \",j);\n     for(k=1;k<=pow(2,j-1);k++)\n     {\n       p.level=j;\n       p.order=k;\n       e=Value(T,p);\n       if(e!=Nil)\n	 printf(\"%d:\"form\" \",k,e);\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('519', '在使用记录或存储器地址指针的程序设计语言中，二叉树通常用树结点结构来存储。有时也包含指向唯一的父节点的指针。如果一个结点的子结点个数小于2，一些子结点指针可能为空值，或者为特殊的哨兵结点。 使用链表能避免顺序存储浪费空间的问题，算法和结构相对简单，但使用二叉链表，由于缺乏父链的指引，在找回父节点时需要重新扫描树得知父节点的节点地址。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('520', '/* [[二元树]]的顺序存储表示 */\n #define MAX_TREE_SIZE 100 /* [[二元树]]的最大节点数 */\n typedef TElemType SqBiTree[MAX_TREE_SIZE]; /* 0号单元存储根节点 */\n\n typedef struct\n {\n   int level,order; /* 节点的层，本层序号(按[[满二元树]]计算) */\n }position;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('521', '基于C/C++的实现算法显示▼  /* [[二元树]]的顺序存储的基本操作(23个)*/\n #define ClearBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\\arccos{}\n #define DestroyBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\n void InitBiTree(SqBiTree T) －－－（SqBiTree & T）\n { /* 构造[[空二元树]]T。因为T是阵列名称，故不需要& */\n   int i;\n   for(i=0;i<MAX_TREE_SIZE;i++)\n     T[i]=Nil; /* 初值为空(Nil在主程中定义) */\n }\n  void CreateBiTree(SqBiTree T)\n { /* 按层序次序输入二叉树中结点的值(字元型或整型), 构造顺序存储的二叉树T */\n   int i=0;\n #if CHAR /* 结点类型为字元 */\n   int l;\n   char s[MAX_TREE_SIZE];\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入结点的值(字元)，空格表示空结点，节点数≦%d:\\n\",MAX_TREE_SIZE);\n   gets(s); /* 输入字串 */\n   l=strlen(s); /* 求字串的长度 */\n   for(;i<l;i++) /* 将字串赋值给T */\n     T[i]=s[i];\n #else  /* 节点类型为整型 */\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入节点的值(整型)，0表示空节点，输999结束。节点数≦%d:\\n\",MAX_TREE_SIZE);\n   while(1)\n   {\n     scanf(\"%d\",&T[i]);\n     if(T[i]==999)\n     {\n       T[i]=Nil;\n       break;\n     }\n     i++;\n   }\n #endif\n   for(i=1;i<MAX_TREE_SIZE;i++)\n     if(T[(i+1)/2-1]==Nil&&T[i]!=Nil) /* 此非根节点(不空)无双亲 */\n     {\n       printf(\"出现无双亲的非根节点\"form\"\\n\",T[i]);\n       exit(ERROR);\n     }\n }\n  int BiTreeDepth(SqBiTree T)\n { /* 初始条件：[二元树]T存在。操作结果：返回T的深度 */\n   int i,j=-1;\n   for(i=MAX_TREE_SIZE-1;i>=0;i--) /* 找到最后一个节点 */\n     if(T[i]!=Nil)\n       break;\n   i++; /* 为了便于计算 */\n   do\n     j++;\n   while(i>=pow(2,j));   /*pow是原型为double pow( double x, double y ),计算x的y次方,h = log<sub>2</sub>k + 1来计算[二元树]的深度*/\n   return j;\n }\n  Status Root(SqBiTree T,TElemType *e)\n { /* 初始条件：[二元树]T存在。操作结果：当T不空，用e返回T的根，返回OK；否则返回ERROR，e无定义 */\n   if(BiTreeEmpty(T)) /* T空 */\n     return ERROR;\n   else\n   {\n     *e=T[0];\n     return OK;\n   }\n }\n  TElemType Value(SqBiTree T,position e)\n { /* 初始条件：[二元树]T存在，e是T中某个结点(的位置) */\n   /* 操作结果：返回处于位置e(层,本层序号)的结点的值 */\n   return T[(int)pow(2,e.level-1)+e.order-2];\n }\n  Status Assign(SqBiTree T,position e,TElemType value)\n { /* 初始条件：二叉树T存在，e是T中某个结点(的位置) */\n   /* 操作结果：给处于位置e(层,本层序号)的结点赋新值value */\n   int i=(int)pow(2,e.level-1)+e.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(value!=Nil&&T[(i+1)/2-1]==Nil) /* 给叶子赋非空值但双亲为空 */\n     return ERROR;\n   else if(value==Nil&&(T[i*2+1]!=Nil||T[i*2+2]!=Nil)) /*  给双亲赋空值但有叶子(不空) */\n     return ERROR;\n   T[i]=value;\n   return OK;\n }\n  TElemType Parent(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[(i+1)/2-1];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+2];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2==0) /* 找到e且其序号为偶数(是右孩子) */\n       return T[i-1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2) /* 找到e且其序号为奇数(是左孩子) */\n       return T[i+1];\n   return Nil; /* 没找到e */\n }\n  void Move(SqBiTree q,int j,SqBiTree T,int i) /* InsertChild()用到。加 */\n { /* 把从q的j结点开始的子树移为从T的i结点开始的子树 */\n   if(q[2*j+1]!=Nil) /* q的左子树不空 */\n     Move(q,(2*j+1),T,(2*i+1)); /* 把q的j结点的左子树移为T的i结点的左子树 */\n   if(q[2*j+2]!=Nil) /* q的右子树不空 */\n     Move(q,(2*j+2),T,(2*i+2)); /* 把q的j结点的右子树移为T的i结点的右子树 */\n   T[i]=q[j]; /* 把q的j结点移为T的i结点 */\n   q[j]=Nil; /* 把q的j结点置空 */\n }\n  void InsertChild(SqBiTree T,TElemType p,int LR,SqBiTree c)\n { /* 初始条件：二叉树T存在，p是T中某个结点的值，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果: 根据LR为0或1,插入c为T中p结点的左或右子树。p结点的原有左或右子树则成为c的右子树 */\n   int j,k,i=0;\n   for(j=0;j<(int)pow(2,BiTreeDepth(T))-1;j++) /* 查找p的序号 */\n     if(T[j]==p) /* j为p的序号 */\n       break;\n   k=2*j+1+LR; /* k为p的左或右孩子的序号 */\n   if(T[k]!=Nil) /* p原来的左或右孩子不空 */\n     Move(T,k,T,2*k+2); /* 把从T的k结点开始的子树移为从k结点的右子树开始的子树 */\n   Move(c,i,T,k); /* 把从c的i结点开始的子树移为从T的k结点开始的子树 */\n }\n  typedef int QElemType; /* 设伫列元素类型为整型(序号) */\n #include \"c3-2.h\" /* 链伫列 */\n #include \"bo3-2.c\" /* 链伫列的基本操作 */\n Status DeleteChild(SqBiTree T,position p,int LR)\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为1或0 */\n   /* 操作结果：根据LR为1或0，删除T中p所指结点的左或右子树 */\n   int i;\n   Status k=OK; /* 伫列不空的标志 */\n   LinkQueue q;\n   InitQueue(&q); /* 初始化伫列，用于存放待删除的结点 */\n   i=(int)pow(2,p.level-1)+p.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(T[i]==Nil) /* 此结点空 */\n     return ERROR;\n   i=i*2+1+LR; /* 待删除子树的根结点在矩阵中的序号 */\n   while(k)\n   {\n     if(T[2*i+1]!=Nil) /* 左结点不空 */\n       EnQueue(&q,2*i+1); /* 入队左结点的序号 */\n     if(T[2*i+2]!=Nil) /* 右结点不空 */\n       EnQueue(&q,2*i+2); /* 入队右结点的序号 */\n     T[i]=Nil; /* 删除此结点 */\n     k=DeQueue(&q,&i); /* 伫列不空 */\n   }\n   return OK;\n }\n  void(*VisitFunc)(TElemType); /* 函数变数 */\n void PreTraverse(SqBiTree T,int e)\n { /* PreOrderTraverse()调用 */\n   VisitFunc(T[e]);\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PreTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PreTraverse(T,2*e+2);\n }\n  void PreOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：先序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PreTraverse(T,0);\n   printf(\"\\n\");\n }\n  void InTraverse(SqBiTree T,int e)\n { /* InOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     InTraverse(T,2*e+1);\n   VisitFunc(T[e]);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     InTraverse(T,2*e+2);\n }\n  void InOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：中序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     InTraverse(T,0);\n   printf(\"\\n\");\n }\n  void PostTraverse(SqBiTree T,int e)\n { /* PostOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PostTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PostTraverse(T,2*e+2);\n   VisitFunc(T[e]);\n }\n  void PostOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PostTraverse(T,0);\n   printf(\"\\n\");\n }\n  void LevelOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 层序遍历二叉树 */\n   int i=MAX_TREE_SIZE-1,j;\n   while(T[i]==Nil)\n     i--; /* 找到最后一个非空结点的序号 */\n   for(j=0;j<=i;j++) /* 从根结点起，按层序遍历二叉树 */\n     if(T[j]!=Nil)\n       Visit(T[j]); /* 只遍历非空的结点 */\n   printf(\"\\n\");\n }\n  void Print(SqBiTree T)\n { /* 逐层、按本层序号输出二叉树 */\n   int j,k;\n   position p;\n   TElemType e;\n   for(j=1;j<=BiTreeDepth(T);j++)\n   {\n     printf(\"第%d层: \",j);\n     for(k=1;k<=pow(2,j-1);k++)\n     {\n       p.level=j;\n       p.order=k;\n       e=Value(T,p);\n       if(e!=Nil)\n	 printf(\"%d:\"form\" \",k,e);\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('522', '在使用记录或存储器地址指针的程序设计语言中，二叉树通常用树结点结构来存储。有时也包含指向唯一的父节点的指针。如果一个结点的子结点个数小于2，一些子结点指针可能为空值，或者为特殊的哨兵结点。 使用链表能避免顺序存储浪费空间的问题，算法和结构相对简单，但使用二叉链表，由于缺乏父链的指引，在找回父节点时需要重新扫描树得知父节点的节点地址。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('523', '/* [[二元树]]的顺序存储表示 */\n #define MAX_TREE_SIZE 100 /* [[二元树]]的最大节点数 */\n typedef TElemType SqBiTree[MAX_TREE_SIZE]; /* 0号单元存储根节点 */\n\n typedef struct\n {\n   int level,order; /* 节点的层，本层序号(按[[满二元树]]计算) */\n }position;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:12', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('524', '基于C/C++的实现算法显示▼  /* [[二元树]]的顺序存储的基本操作(23个)*/\n #define ClearBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\\arccos{}\n #define DestroyBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\n void InitBiTree(SqBiTree T) －－－（SqBiTree & T）\n { /* 构造[[空二元树]]T。因为T是阵列名称，故不需要& */\n   int i;\n   for(i=0;i<MAX_TREE_SIZE;i++)\n     T[i]=Nil; /* 初值为空(Nil在主程中定义) */\n }\n  void CreateBiTree(SqBiTree T)\n { /* 按层序次序输入二叉树中结点的值(字元型或整型), 构造顺序存储的二叉树T */\n   int i=0;\n #if CHAR /* 结点类型为字元 */\n   int l;\n   char s[MAX_TREE_SIZE];\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入结点的值(字元)，空格表示空结点，节点数≦%d:\\n\",MAX_TREE_SIZE);\n   gets(s); /* 输入字串 */\n   l=strlen(s); /* 求字串的长度 */\n   for(;i<l;i++) /* 将字串赋值给T */\n     T[i]=s[i];\n #else  /* 节点类型为整型 */\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入节点的值(整型)，0表示空节点，输999结束。节点数≦%d:\\n\",MAX_TREE_SIZE);\n   while(1)\n   {\n     scanf(\"%d\",&T[i]);\n     if(T[i]==999)\n     {\n       T[i]=Nil;\n       break;\n     }\n     i++;\n   }\n #endif\n   for(i=1;i<MAX_TREE_SIZE;i++)\n     if(T[(i+1)/2-1]==Nil&&T[i]!=Nil) /* 此非根节点(不空)无双亲 */\n     {\n       printf(\"出现无双亲的非根节点\"form\"\\n\",T[i]);\n       exit(ERROR);\n     }\n }\n  int BiTreeDepth(SqBiTree T)\n { /* 初始条件：[二元树]T存在。操作结果：返回T的深度 */\n   int i,j=-1;\n   for(i=MAX_TREE_SIZE-1;i>=0;i--) /* 找到最后一个节点 */\n     if(T[i]!=Nil)\n       break;\n   i++; /* 为了便于计算 */\n   do\n     j++;\n   while(i>=pow(2,j));   /*pow是原型为double pow( double x, double y ),计算x的y次方,h = log<sub>2</sub>k + 1来计算[二元树]的深度*/\n   return j;\n }\n  Status Root(SqBiTree T,TElemType *e)\n { /* 初始条件：[二元树]T存在。操作结果：当T不空，用e返回T的根，返回OK；否则返回ERROR，e无定义 */\n   if(BiTreeEmpty(T)) /* T空 */\n     return ERROR;\n   else\n   {\n     *e=T[0];\n     return OK;\n   }\n }\n  TElemType Value(SqBiTree T,position e)\n { /* 初始条件：[二元树]T存在，e是T中某个结点(的位置) */\n   /* 操作结果：返回处于位置e(层,本层序号)的结点的值 */\n   return T[(int)pow(2,e.level-1)+e.order-2];\n }\n  Status Assign(SqBiTree T,position e,TElemType value)\n { /* 初始条件：二叉树T存在，e是T中某个结点(的位置) */\n   /* 操作结果：给处于位置e(层,本层序号)的结点赋新值value */\n   int i=(int)pow(2,e.level-1)+e.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(value!=Nil&&T[(i+1)/2-1]==Nil) /* 给叶子赋非空值但双亲为空 */\n     return ERROR;\n   else if(value==Nil&&(T[i*2+1]!=Nil||T[i*2+2]!=Nil)) /*  给双亲赋空值但有叶子(不空) */\n     return ERROR;\n   T[i]=value;\n   return OK;\n }\n  TElemType Parent(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[(i+1)/2-1];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+2];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2==0) /* 找到e且其序号为偶数(是右孩子) */\n       return T[i-1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2) /* 找到e且其序号为奇数(是左孩子) */\n       return T[i+1];\n   return Nil; /* 没找到e */\n }\n  void Move(SqBiTree q,int j,SqBiTree T,int i) /* InsertChild()用到。加 */\n { /* 把从q的j结点开始的子树移为从T的i结点开始的子树 */\n   if(q[2*j+1]!=Nil) /* q的左子树不空 */\n     Move(q,(2*j+1),T,(2*i+1)); /* 把q的j结点的左子树移为T的i结点的左子树 */\n   if(q[2*j+2]!=Nil) /* q的右子树不空 */\n     Move(q,(2*j+2),T,(2*i+2)); /* 把q的j结点的右子树移为T的i结点的右子树 */\n   T[i]=q[j]; /* 把q的j结点移为T的i结点 */\n   q[j]=Nil; /* 把q的j结点置空 */\n }\n  void InsertChild(SqBiTree T,TElemType p,int LR,SqBiTree c)\n { /* 初始条件：二叉树T存在，p是T中某个结点的值，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果: 根据LR为0或1,插入c为T中p结点的左或右子树。p结点的原有左或右子树则成为c的右子树 */\n   int j,k,i=0;\n   for(j=0;j<(int)pow(2,BiTreeDepth(T))-1;j++) /* 查找p的序号 */\n     if(T[j]==p) /* j为p的序号 */\n       break;\n   k=2*j+1+LR; /* k为p的左或右孩子的序号 */\n   if(T[k]!=Nil) /* p原来的左或右孩子不空 */\n     Move(T,k,T,2*k+2); /* 把从T的k结点开始的子树移为从k结点的右子树开始的子树 */\n   Move(c,i,T,k); /* 把从c的i结点开始的子树移为从T的k结点开始的子树 */\n }\n  typedef int QElemType; /* 设伫列元素类型为整型(序号) */\n #include \"c3-2.h\" /* 链伫列 */\n #include \"bo3-2.c\" /* 链伫列的基本操作 */\n Status DeleteChild(SqBiTree T,position p,int LR)\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为1或0 */\n   /* 操作结果：根据LR为1或0，删除T中p所指结点的左或右子树 */\n   int i;\n   Status k=OK; /* 伫列不空的标志 */\n   LinkQueue q;\n   InitQueue(&q); /* 初始化伫列，用于存放待删除的结点 */\n   i=(int)pow(2,p.level-1)+p.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(T[i]==Nil) /* 此结点空 */\n     return ERROR;\n   i=i*2+1+LR; /* 待删除子树的根结点在矩阵中的序号 */\n   while(k)\n   {\n     if(T[2*i+1]!=Nil) /* 左结点不空 */\n       EnQueue(&q,2*i+1); /* 入队左结点的序号 */\n     if(T[2*i+2]!=Nil) /* 右结点不空 */\n       EnQueue(&q,2*i+2); /* 入队右结点的序号 */\n     T[i]=Nil; /* 删除此结点 */\n     k=DeQueue(&q,&i); /* 伫列不空 */\n   }\n   return OK;\n }\n  void(*VisitFunc)(TElemType); /* 函数变数 */\n void PreTraverse(SqBiTree T,int e)\n { /* PreOrderTraverse()调用 */\n   VisitFunc(T[e]);\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PreTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PreTraverse(T,2*e+2);\n }\n  void PreOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：先序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PreTraverse(T,0);\n   printf(\"\\n\");\n }\n  void InTraverse(SqBiTree T,int e)\n { /* InOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     InTraverse(T,2*e+1);\n   VisitFunc(T[e]);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     InTraverse(T,2*e+2);\n }\n  void InOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：中序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     InTraverse(T,0);\n   printf(\"\\n\");\n }\n  void PostTraverse(SqBiTree T,int e)\n { /* PostOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PostTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PostTraverse(T,2*e+2);\n   VisitFunc(T[e]);\n }\n  void PostOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PostTraverse(T,0);\n   printf(\"\\n\");\n }\n  void LevelOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 层序遍历二叉树 */\n   int i=MAX_TREE_SIZE-1,j;\n   while(T[i]==Nil)\n     i--; /* 找到最后一个非空结点的序号 */\n   for(j=0;j<=i;j++) /* 从根结点起，按层序遍历二叉树 */\n     if(T[j]!=Nil)\n       Visit(T[j]); /* 只遍历非空的结点 */\n   printf(\"\\n\");\n }\n  void Print(SqBiTree T)\n { /* 逐层、按本层序号输出二叉树 */\n   int j,k;\n   position p;\n   TElemType e;\n   for(j=1;j<=BiTreeDepth(T);j++)\n   {\n     printf(\"第%d层: \",j);\n     for(k=1;k<=pow(2,j-1);k++)\n     {\n       p.level=j;\n       p.order=k;\n       e=Value(T,p);\n       if(e!=Nil)\n	 printf(\"%d:\"form\" \",k,e);\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:13', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('525', '在使用记录或存储器地址指针的程序设计语言中，二叉树通常用树结点结构来存储。有时也包含指向唯一的父节点的指针。如果一个结点的子结点个数小于2，一些子结点指针可能为空值，或者为特殊的哨兵结点。 使用链表能避免顺序存储浪费空间的问题，算法和结构相对简单，但使用二叉链表，由于缺乏父链的指引，在找回父节点时需要重新扫描树得知父节点的节点地址。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:13', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('526', '/* 二叉树的二叉链表存储表示 */\n typedef struct BiTNode\n {\n   TElemType data;\n   struct BiTNode *lchild,*rchild; /* 左右孩子指针 */\n }BiTNode,*BiTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:13', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('527', '基于C/C++的实现算法显示▼  /* 二叉树的二叉链表存储的基本操作(22个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n #include\"func6-3.c\"\n /* 包括InitBiTree()、DestroyBiTree()、PreOrderTraverse()和InOrderTraverse()4函数 */\n  void CreateBiTree(BiTree *T)\n { /* 演算法6.4：按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造二叉链表表示的二叉树T。变数Nil表示空(子)树。有改动 */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiTree)malloc(sizeof(BiTNode)); /* 生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch;\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n   }\n }\n  Status BiTreeEmpty(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(T==NULL)  /*如果T=NULL,这样写便于理解，当然也可以写成if（!T）*/; \n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(BiTreeEmpty(T))\n     return Nil;\n   else\n     return T->data;\n }\n  TElemType Value(BiTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n TElemType Parent(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 树根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->lchild&&a->lchild->data==e||a->rchild&&a->rchild->data==e)\n       /* 找到e(是其左或右孩子) */\n         return a->data; /* 返回e的双亲的值 */\n       else /* 没找到e，则入队其左右孩子指针(如果非空) */\n       {\n         if(a->lchild)\n           EnQueue(&q,a->lchild);\n         if(a->rchild)\n           EnQueue(&q,a->rchild);\n       }\n     }\n   }\n   return Nil; /* 树空或没找到e */\n }\n  BiTree Point(BiTree T,TElemType s)\n { /* 返回二叉树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==s)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType LeftChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->rchild->data==e) /* p存在左右孩子且右孩子是e */\n         return p->lchild->data; /* 返回p的左孩子(e的左兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->lchild->data==e) /* p存在左右孩子且左孩子是e */\n         return p->rchild->data; /* 返回p的右孩子(e的右兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiTree p,int LR,BiTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点的 */\n   /*           原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       p->lchild=c;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       p->rchild=c;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  typedef BiTree SElemType; /* 设栈元素为二叉树的指针类型 */\n #include\"c3-1.h\" /* 顺序栈 */\n #include\"bo3-1.c\" /* 顺序栈的基本操作 */\n void InOrderTraverse1(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.3，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   InitStack(&S);\n   while(T||!StackEmpty(S))\n   {\n     if(T)\n     { /* 根指针进栈，遍历左子树 */\n       Push(&S,T);\n       T=T->lchild;\n     }\n     else\n     { /* 根指针退栈，访问根结点，遍历右子树 */\n       Pop(&S,&T);\n       Visit(T->data);\n       T=T->rchild;\n     }\n   }\n   printf(\"\\n\");\n }\n  void InOrderTraverse2(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.2，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   BiTree p;\n   InitStack(&S);\n   Push(&S,T); /* 根指针进栈 */\n   while(!StackEmpty(S))\n   {\n     while(GetTop(S,&p)&&p)\n       Push(&S,p->lchild); /* 向左走到尽头 */\n     Pop(&S,&p); /* 空指针退栈 */\n     if(!StackEmpty(S))\n     { /* 访问结点，向右一步 */\n       Pop(&S,&p);\n       Visit(p->data);\n       Push(&S,p->rchild);\n     }\n   }\n   printf(\"\\n\");\n }\n  void PostOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序递回遍历T，对每个结点调用函数Visit一次且仅一次 */\n   if(T) /* T不空 */\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 先后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 再后序遍历右子树 */\n     Visit(T->data); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：层序递回遍历T(利用伫列)，对每个结点调用函数Visit一次且仅一次 */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q); /* 初始化伫列q */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 伫列不空 */\n     {\n       DeQueue(&q,&a); /* 出队元素(指标),赋给a */\n       Visit(a->data); /* 访问a所指结点 */\n       if(a->lchild!=NULL) /* a有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队a的左孩子 */\n       if(a->rchild!=NULL) /* a有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队a的右孩子 */\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:13', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('528', '改进于二叉链表，增加父节点的指引，能更好地实现节点间的访问，不过算法相对复杂。 当二叉树用三叉链表表示时，有N个结点，就会有N+2个空指针。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:13', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('529', '/* 二叉树的二叉链表存储表示 */\n typedef struct BiTNode\n {\n   TElemType data;\n   struct BiTNode *lchild,*rchild; /* 左右孩子指针 */\n }BiTNode,*BiTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:13', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('530', '基于C/C++的实现算法显示▼  /* 二叉树的二叉链表存储的基本操作(22个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n #include\"func6-3.c\"\n /* 包括InitBiTree()、DestroyBiTree()、PreOrderTraverse()和InOrderTraverse()4函数 */\n  void CreateBiTree(BiTree *T)\n { /* 演算法6.4：按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造二叉链表表示的二叉树T。变数Nil表示空(子)树。有改动 */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiTree)malloc(sizeof(BiTNode)); /* 生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch;\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n   }\n }\n  Status BiTreeEmpty(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(T==NULL)  /*如果T=NULL,这样写便于理解，当然也可以写成if（!T）*/; \n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(BiTreeEmpty(T))\n     return Nil;\n   else\n     return T->data;\n }\n  TElemType Value(BiTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n TElemType Parent(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 树根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->lchild&&a->lchild->data==e||a->rchild&&a->rchild->data==e)\n       /* 找到e(是其左或右孩子) */\n         return a->data; /* 返回e的双亲的值 */\n       else /* 没找到e，则入队其左右孩子指针(如果非空) */\n       {\n         if(a->lchild)\n           EnQueue(&q,a->lchild);\n         if(a->rchild)\n           EnQueue(&q,a->rchild);\n       }\n     }\n   }\n   return Nil; /* 树空或没找到e */\n }\n  BiTree Point(BiTree T,TElemType s)\n { /* 返回二叉树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==s)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType LeftChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->rchild->data==e) /* p存在左右孩子且右孩子是e */\n         return p->lchild->data; /* 返回p的左孩子(e的左兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->lchild->data==e) /* p存在左右孩子且左孩子是e */\n         return p->rchild->data; /* 返回p的右孩子(e的右兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiTree p,int LR,BiTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点的 */\n   /*           原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       p->lchild=c;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       p->rchild=c;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  typedef BiTree SElemType; /* 设栈元素为二叉树的指针类型 */\n #include\"c3-1.h\" /* 顺序栈 */\n #include\"bo3-1.c\" /* 顺序栈的基本操作 */\n void InOrderTraverse1(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.3，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   InitStack(&S);\n   while(T||!StackEmpty(S))\n   {\n     if(T)\n     { /* 根指针进栈，遍历左子树 */\n       Push(&S,T);\n       T=T->lchild;\n     }\n     else\n     { /* 根指针退栈，访问根结点，遍历右子树 */\n       Pop(&S,&T);\n       Visit(T->data);\n       T=T->rchild;\n     }\n   }\n   printf(\"\\n\");\n }\n  void InOrderTraverse2(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.2，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   BiTree p;\n   InitStack(&S);\n   Push(&S,T); /* 根指针进栈 */\n   while(!StackEmpty(S))\n   {\n     while(GetTop(S,&p)&&p)\n       Push(&S,p->lchild); /* 向左走到尽头 */\n     Pop(&S,&p); /* 空指针退栈 */\n     if(!StackEmpty(S))\n     { /* 访问结点，向右一步 */\n       Pop(&S,&p);\n       Visit(p->data);\n       Push(&S,p->rchild);\n     }\n   }\n   printf(\"\\n\");\n }\n  void PostOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序递回遍历T，对每个结点调用函数Visit一次且仅一次 */\n   if(T) /* T不空 */\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 先后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 再后序遍历右子树 */\n     Visit(T->data); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：层序递回遍历T(利用伫列)，对每个结点调用函数Visit一次且仅一次 */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q); /* 初始化伫列q */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 伫列不空 */\n     {\n       DeQueue(&q,&a); /* 出队元素(指标),赋给a */\n       Visit(a->data); /* 访问a所指结点 */\n       if(a->lchild!=NULL) /* a有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队a的左孩子 */\n       if(a->rchild!=NULL) /* a有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队a的右孩子 */\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:13', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('531', '改进于二叉链表，增加父节点的指引，能更好地实现节点间的访问，不过算法相对复杂。 当二叉树用三叉链表表示时，有N个结点，就会有N+2个空指针。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:13', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('532', '/* 二叉树的二叉链表存储表示 */\n typedef struct BiTNode\n {\n   TElemType data;\n   struct BiTNode *lchild,*rchild; /* 左右孩子指针 */\n }BiTNode,*BiTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:13', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('533', '基于C/C++的实现算法显示▼  /* 二叉树的二叉链表存储的基本操作(22个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n #include\"func6-3.c\"\n /* 包括InitBiTree()、DestroyBiTree()、PreOrderTraverse()和InOrderTraverse()4函数 */\n  void CreateBiTree(BiTree *T)\n { /* 演算法6.4：按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造二叉链表表示的二叉树T。变数Nil表示空(子)树。有改动 */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiTree)malloc(sizeof(BiTNode)); /* 生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch;\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n   }\n }\n  Status BiTreeEmpty(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(T==NULL)  /*如果T=NULL,这样写便于理解，当然也可以写成if（!T）*/; \n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(BiTreeEmpty(T))\n     return Nil;\n   else\n     return T->data;\n }\n  TElemType Value(BiTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n TElemType Parent(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 树根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->lchild&&a->lchild->data==e||a->rchild&&a->rchild->data==e)\n       /* 找到e(是其左或右孩子) */\n         return a->data; /* 返回e的双亲的值 */\n       else /* 没找到e，则入队其左右孩子指针(如果非空) */\n       {\n         if(a->lchild)\n           EnQueue(&q,a->lchild);\n         if(a->rchild)\n           EnQueue(&q,a->rchild);\n       }\n     }\n   }\n   return Nil; /* 树空或没找到e */\n }\n  BiTree Point(BiTree T,TElemType s)\n { /* 返回二叉树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==s)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType LeftChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->rchild->data==e) /* p存在左右孩子且右孩子是e */\n         return p->lchild->data; /* 返回p的左孩子(e的左兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->lchild->data==e) /* p存在左右孩子且左孩子是e */\n         return p->rchild->data; /* 返回p的右孩子(e的右兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiTree p,int LR,BiTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点的 */\n   /*           原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       p->lchild=c;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       p->rchild=c;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  typedef BiTree SElemType; /* 设栈元素为二叉树的指针类型 */\n #include\"c3-1.h\" /* 顺序栈 */\n #include\"bo3-1.c\" /* 顺序栈的基本操作 */\n void InOrderTraverse1(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.3，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   InitStack(&S);\n   while(T||!StackEmpty(S))\n   {\n     if(T)\n     { /* 根指针进栈，遍历左子树 */\n       Push(&S,T);\n       T=T->lchild;\n     }\n     else\n     { /* 根指针退栈，访问根结点，遍历右子树 */\n       Pop(&S,&T);\n       Visit(T->data);\n       T=T->rchild;\n     }\n   }\n   printf(\"\\n\");\n }\n  void InOrderTraverse2(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.2，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   BiTree p;\n   InitStack(&S);\n   Push(&S,T); /* 根指针进栈 */\n   while(!StackEmpty(S))\n   {\n     while(GetTop(S,&p)&&p)\n       Push(&S,p->lchild); /* 向左走到尽头 */\n     Pop(&S,&p); /* 空指针退栈 */\n     if(!StackEmpty(S))\n     { /* 访问结点，向右一步 */\n       Pop(&S,&p);\n       Visit(p->data);\n       Push(&S,p->rchild);\n     }\n   }\n   printf(\"\\n\");\n }\n  void PostOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序递回遍历T，对每个结点调用函数Visit一次且仅一次 */\n   if(T) /* T不空 */\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 先后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 再后序遍历右子树 */\n     Visit(T->data); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：层序递回遍历T(利用伫列)，对每个结点调用函数Visit一次且仅一次 */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q); /* 初始化伫列q */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 伫列不空 */\n     {\n       DeQueue(&q,&a); /* 出队元素(指标),赋给a */\n       Visit(a->data); /* 访问a所指结点 */\n       if(a->lchild!=NULL) /* a有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队a的左孩子 */\n       if(a->rchild!=NULL) /* a有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队a的右孩子 */\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:13', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('534', '改进于二叉链表，增加父节点的指引，能更好地实现节点间的访问，不过算法相对复杂。 当二叉树用三叉链表表示时，有N个结点，就会有N+2个空指针。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:13', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('535', '/* 二叉树的二叉链表存储表示 */\n typedef struct BiTNode\n {\n   TElemType data;\n   struct BiTNode *lchild,*rchild; /* 左右孩子指针 */\n }BiTNode,*BiTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:13', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('536', '基于C/C++的实现算法显示▼  /* 二叉树的二叉链表存储的基本操作(22个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n #include\"func6-3.c\"\n /* 包括InitBiTree()、DestroyBiTree()、PreOrderTraverse()和InOrderTraverse()4函数 */\n  void CreateBiTree(BiTree *T)\n { /* 演算法6.4：按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造二叉链表表示的二叉树T。变数Nil表示空(子)树。有改动 */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiTree)malloc(sizeof(BiTNode)); /* 生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch;\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n   }\n }\n  Status BiTreeEmpty(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(T==NULL)  /*如果T=NULL,这样写便于理解，当然也可以写成if（!T）*/; \n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(BiTreeEmpty(T))\n     return Nil;\n   else\n     return T->data;\n }\n  TElemType Value(BiTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n TElemType Parent(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 树根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->lchild&&a->lchild->data==e||a->rchild&&a->rchild->data==e)\n       /* 找到e(是其左或右孩子) */\n         return a->data; /* 返回e的双亲的值 */\n       else /* 没找到e，则入队其左右孩子指针(如果非空) */\n       {\n         if(a->lchild)\n           EnQueue(&q,a->lchild);\n         if(a->rchild)\n           EnQueue(&q,a->rchild);\n       }\n     }\n   }\n   return Nil; /* 树空或没找到e */\n }\n  BiTree Point(BiTree T,TElemType s)\n { /* 返回二叉树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==s)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType LeftChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->rchild->data==e) /* p存在左右孩子且右孩子是e */\n         return p->lchild->data; /* 返回p的左孩子(e的左兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->lchild->data==e) /* p存在左右孩子且左孩子是e */\n         return p->rchild->data; /* 返回p的右孩子(e的右兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiTree p,int LR,BiTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点的 */\n   /*           原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       p->lchild=c;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       p->rchild=c;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  typedef BiTree SElemType; /* 设栈元素为二叉树的指针类型 */\n #include\"c3-1.h\" /* 顺序栈 */\n #include\"bo3-1.c\" /* 顺序栈的基本操作 */\n void InOrderTraverse1(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.3，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   InitStack(&S);\n   while(T||!StackEmpty(S))\n   {\n     if(T)\n     { /* 根指针进栈，遍历左子树 */\n       Push(&S,T);\n       T=T->lchild;\n     }\n     else\n     { /* 根指针退栈，访问根结点，遍历右子树 */\n       Pop(&S,&T);\n       Visit(T->data);\n       T=T->rchild;\n     }\n   }\n   printf(\"\\n\");\n }\n  void InOrderTraverse2(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.2，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   BiTree p;\n   InitStack(&S);\n   Push(&S,T); /* 根指针进栈 */\n   while(!StackEmpty(S))\n   {\n     while(GetTop(S,&p)&&p)\n       Push(&S,p->lchild); /* 向左走到尽头 */\n     Pop(&S,&p); /* 空指针退栈 */\n     if(!StackEmpty(S))\n     { /* 访问结点，向右一步 */\n       Pop(&S,&p);\n       Visit(p->data);\n       Push(&S,p->rchild);\n     }\n   }\n   printf(\"\\n\");\n }\n  void PostOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序递回遍历T，对每个结点调用函数Visit一次且仅一次 */\n   if(T) /* T不空 */\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 先后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 再后序遍历右子树 */\n     Visit(T->data); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：层序递回遍历T(利用伫列)，对每个结点调用函数Visit一次且仅一次 */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q); /* 初始化伫列q */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 伫列不空 */\n     {\n       DeQueue(&q,&a); /* 出队元素(指标),赋给a */\n       Visit(a->data); /* 访问a所指结点 */\n       if(a->lchild!=NULL) /* a有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队a的左孩子 */\n       if(a->rchild!=NULL) /* a有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队a的右孩子 */\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:13', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('537', '改进于二叉链表，增加父节点的指引，能更好地实现节点间的访问，不过算法相对复杂。 当二叉树用三叉链表表示时，有N个结点，就会有N+2个空指针。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:13', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('538', '基于C/C++的实现算法显示▼  /* [[二元树]]的顺序存储的基本操作(23个)*/\n #define ClearBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\\arccos{}\n #define DestroyBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\n void InitBiTree(SqBiTree T) －－－（SqBiTree & T）\n { /* 构造[[空二元树]]T。因为T是阵列名称，故不需要& */\n   int i;\n   for(i=0;i<MAX_TREE_SIZE;i++)\n     T[i]=Nil; /* 初值为空(Nil在主程中定义) */\n }\n  void CreateBiTree(SqBiTree T)\n { /* 按层序次序输入二叉树中结点的值(字元型或整型), 构造顺序存储的二叉树T */\n   int i=0;\n #if CHAR /* 结点类型为字元 */\n   int l;\n   char s[MAX_TREE_SIZE];\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入结点的值(字元)，空格表示空结点，节点数≦%d:\\n\",MAX_TREE_SIZE);\n   gets(s); /* 输入字串 */\n   l=strlen(s); /* 求字串的长度 */\n   for(;i<l;i++) /* 将字串赋值给T */\n     T[i]=s[i];\n #else  /* 节点类型为整型 */\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入节点的值(整型)，0表示空节点，输999结束。节点数≦%d:\\n\",MAX_TREE_SIZE);\n   while(1)\n   {\n     scanf(\"%d\",&T[i]);\n     if(T[i]==999)\n     {\n       T[i]=Nil;\n       break;\n     }\n     i++;\n   }\n #endif\n   for(i=1;i<MAX_TREE_SIZE;i++)\n     if(T[(i+1)/2-1]==Nil&&T[i]!=Nil) /* 此非根节点(不空)无双亲 */\n     {\n       printf(\"出现无双亲的非根节点\"form\"\\n\",T[i]);\n       exit(ERROR);\n     }\n }\n  int BiTreeDepth(SqBiTree T)\n { /* 初始条件：[二元树]T存在。操作结果：返回T的深度 */\n   int i,j=-1;\n   for(i=MAX_TREE_SIZE-1;i>=0;i--) /* 找到最后一个节点 */\n     if(T[i]!=Nil)\n       break;\n   i++; /* 为了便于计算 */\n   do\n     j++;\n   while(i>=pow(2,j));   /*pow是原型为double pow( double x, double y ),计算x的y次方,h = log<sub>2</sub>k + 1来计算[二元树]的深度*/\n   return j;\n }\n  Status Root(SqBiTree T,TElemType *e)\n { /* 初始条件：[二元树]T存在。操作结果：当T不空，用e返回T的根，返回OK；否则返回ERROR，e无定义 */\n   if(BiTreeEmpty(T)) /* T空 */\n     return ERROR;\n   else\n   {\n     *e=T[0];\n     return OK;\n   }\n }\n  TElemType Value(SqBiTree T,position e)\n { /* 初始条件：[二元树]T存在，e是T中某个结点(的位置) */\n   /* 操作结果：返回处于位置e(层,本层序号)的结点的值 */\n   return T[(int)pow(2,e.level-1)+e.order-2];\n }\n  Status Assign(SqBiTree T,position e,TElemType value)\n { /* 初始条件：二叉树T存在，e是T中某个结点(的位置) */\n   /* 操作结果：给处于位置e(层,本层序号)的结点赋新值value */\n   int i=(int)pow(2,e.level-1)+e.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(value!=Nil&&T[(i+1)/2-1]==Nil) /* 给叶子赋非空值但双亲为空 */\n     return ERROR;\n   else if(value==Nil&&(T[i*2+1]!=Nil||T[i*2+2]!=Nil)) /*  给双亲赋空值但有叶子(不空) */\n     return ERROR;\n   T[i]=value;\n   return OK;\n }\n  TElemType Parent(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[(i+1)/2-1];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+2];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2==0) /* 找到e且其序号为偶数(是右孩子) */\n       return T[i-1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2) /* 找到e且其序号为奇数(是左孩子) */\n       return T[i+1];\n   return Nil; /* 没找到e */\n }\n  void Move(SqBiTree q,int j,SqBiTree T,int i) /* InsertChild()用到。加 */\n { /* 把从q的j结点开始的子树移为从T的i结点开始的子树 */\n   if(q[2*j+1]!=Nil) /* q的左子树不空 */\n     Move(q,(2*j+1),T,(2*i+1)); /* 把q的j结点的左子树移为T的i结点的左子树 */\n   if(q[2*j+2]!=Nil) /* q的右子树不空 */\n     Move(q,(2*j+2),T,(2*i+2)); /* 把q的j结点的右子树移为T的i结点的右子树 */\n   T[i]=q[j]; /* 把q的j结点移为T的i结点 */\n   q[j]=Nil; /* 把q的j结点置空 */\n }\n  void InsertChild(SqBiTree T,TElemType p,int LR,SqBiTree c)\n { /* 初始条件：二叉树T存在，p是T中某个结点的值，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果: 根据LR为0或1,插入c为T中p结点的左或右子树。p结点的原有左或右子树则成为c的右子树 */\n   int j,k,i=0;\n   for(j=0;j<(int)pow(2,BiTreeDepth(T))-1;j++) /* 查找p的序号 */\n     if(T[j]==p) /* j为p的序号 */\n       break;\n   k=2*j+1+LR; /* k为p的左或右孩子的序号 */\n   if(T[k]!=Nil) /* p原来的左或右孩子不空 */\n     Move(T,k,T,2*k+2); /* 把从T的k结点开始的子树移为从k结点的右子树开始的子树 */\n   Move(c,i,T,k); /* 把从c的i结点开始的子树移为从T的k结点开始的子树 */\n }\n  typedef int QElemType; /* 设伫列元素类型为整型(序号) */\n #include \"c3-2.h\" /* 链伫列 */\n #include \"bo3-2.c\" /* 链伫列的基本操作 */\n Status DeleteChild(SqBiTree T,position p,int LR)\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为1或0 */\n   /* 操作结果：根据LR为1或0，删除T中p所指结点的左或右子树 */\n   int i;\n   Status k=OK; /* 伫列不空的标志 */\n   LinkQueue q;\n   InitQueue(&q); /* 初始化伫列，用于存放待删除的结点 */\n   i=(int)pow(2,p.level-1)+p.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(T[i]==Nil) /* 此结点空 */\n     return ERROR;\n   i=i*2+1+LR; /* 待删除子树的根结点在矩阵中的序号 */\n   while(k)\n   {\n     if(T[2*i+1]!=Nil) /* 左结点不空 */\n       EnQueue(&q,2*i+1); /* 入队左结点的序号 */\n     if(T[2*i+2]!=Nil) /* 右结点不空 */\n       EnQueue(&q,2*i+2); /* 入队右结点的序号 */\n     T[i]=Nil; /* 删除此结点 */\n     k=DeQueue(&q,&i); /* 伫列不空 */\n   }\n   return OK;\n }\n  void(*VisitFunc)(TElemType); /* 函数变数 */\n void PreTraverse(SqBiTree T,int e)\n { /* PreOrderTraverse()调用 */\n   VisitFunc(T[e]);\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PreTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PreTraverse(T,2*e+2);\n }\n  void PreOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：先序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PreTraverse(T,0);\n   printf(\"\\n\");\n }\n  void InTraverse(SqBiTree T,int e)\n { /* InOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     InTraverse(T,2*e+1);\n   VisitFunc(T[e]);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     InTraverse(T,2*e+2);\n }\n  void InOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：中序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     InTraverse(T,0);\n   printf(\"\\n\");\n }\n  void PostTraverse(SqBiTree T,int e)\n { /* PostOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PostTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PostTraverse(T,2*e+2);\n   VisitFunc(T[e]);\n }\n  void PostOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PostTraverse(T,0);\n   printf(\"\\n\");\n }\n  void LevelOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 层序遍历二叉树 */\n   int i=MAX_TREE_SIZE-1,j;\n   while(T[i]==Nil)\n     i--; /* 找到最后一个非空结点的序号 */\n   for(j=0;j<=i;j++) /* 从根结点起，按层序遍历二叉树 */\n     if(T[j]!=Nil)\n       Visit(T[j]); /* 只遍历非空的结点 */\n   printf(\"\\n\");\n }\n  void Print(SqBiTree T)\n { /* 逐层、按本层序号输出二叉树 */\n   int j,k;\n   position p;\n   TElemType e;\n   for(j=1;j<=BiTreeDepth(T);j++)\n   {\n     printf(\"第%d层: \",j);\n     for(k=1;k<=pow(2,j-1);k++)\n     {\n       p.level=j;\n       p.order=k;\n       e=Value(T,p);\n       if(e!=Nil)\n	 printf(\"%d:\"form\" \",k,e);\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:13', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('539', '在使用记录或存储器地址指针的程序设计语言中，二叉树通常用树结点结构来存储。有时也包含指向唯一的父节点的指针。如果一个结点的子结点个数小于2，一些子结点指针可能为空值，或者为特殊的哨兵结点。 使用链表能避免顺序存储浪费空间的问题，算法和结构相对简单，但使用二叉链表，由于缺乏父链的指引，在找回父节点时需要重新扫描树得知父节点的节点地址。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('540', '/* 二叉树的二叉链表存储表示 */\n typedef struct BiTNode\n {\n   TElemType data;\n   struct BiTNode *lchild,*rchild; /* 左右孩子指针 */\n }BiTNode,*BiTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('541', '基于C/C++的实现算法显示▼  /* [[二元树]]的顺序存储的基本操作(23个)*/\n #define ClearBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\\arccos{}\n #define DestroyBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\n void InitBiTree(SqBiTree T) －－－（SqBiTree & T）\n { /* 构造[[空二元树]]T。因为T是阵列名称，故不需要& */\n   int i;\n   for(i=0;i<MAX_TREE_SIZE;i++)\n     T[i]=Nil; /* 初值为空(Nil在主程中定义) */\n }\n  void CreateBiTree(SqBiTree T)\n { /* 按层序次序输入二叉树中结点的值(字元型或整型), 构造顺序存储的二叉树T */\n   int i=0;\n #if CHAR /* 结点类型为字元 */\n   int l;\n   char s[MAX_TREE_SIZE];\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入结点的值(字元)，空格表示空结点，节点数≦%d:\\n\",MAX_TREE_SIZE);\n   gets(s); /* 输入字串 */\n   l=strlen(s); /* 求字串的长度 */\n   for(;i<l;i++) /* 将字串赋值给T */\n     T[i]=s[i];\n #else  /* 节点类型为整型 */\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入节点的值(整型)，0表示空节点，输999结束。节点数≦%d:\\n\",MAX_TREE_SIZE);\n   while(1)\n   {\n     scanf(\"%d\",&T[i]);\n     if(T[i]==999)\n     {\n       T[i]=Nil;\n       break;\n     }\n     i++;\n   }\n #endif\n   for(i=1;i<MAX_TREE_SIZE;i++)\n     if(T[(i+1)/2-1]==Nil&&T[i]!=Nil) /* 此非根节点(不空)无双亲 */\n     {\n       printf(\"出现无双亲的非根节点\"form\"\\n\",T[i]);\n       exit(ERROR);\n     }\n }\n  int BiTreeDepth(SqBiTree T)\n { /* 初始条件：[二元树]T存在。操作结果：返回T的深度 */\n   int i,j=-1;\n   for(i=MAX_TREE_SIZE-1;i>=0;i--) /* 找到最后一个节点 */\n     if(T[i]!=Nil)\n       break;\n   i++; /* 为了便于计算 */\n   do\n     j++;\n   while(i>=pow(2,j));   /*pow是原型为double pow( double x, double y ),计算x的y次方,h = log<sub>2</sub>k + 1来计算[二元树]的深度*/\n   return j;\n }\n  Status Root(SqBiTree T,TElemType *e)\n { /* 初始条件：[二元树]T存在。操作结果：当T不空，用e返回T的根，返回OK；否则返回ERROR，e无定义 */\n   if(BiTreeEmpty(T)) /* T空 */\n     return ERROR;\n   else\n   {\n     *e=T[0];\n     return OK;\n   }\n }\n  TElemType Value(SqBiTree T,position e)\n { /* 初始条件：[二元树]T存在，e是T中某个结点(的位置) */\n   /* 操作结果：返回处于位置e(层,本层序号)的结点的值 */\n   return T[(int)pow(2,e.level-1)+e.order-2];\n }\n  Status Assign(SqBiTree T,position e,TElemType value)\n { /* 初始条件：二叉树T存在，e是T中某个结点(的位置) */\n   /* 操作结果：给处于位置e(层,本层序号)的结点赋新值value */\n   int i=(int)pow(2,e.level-1)+e.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(value!=Nil&&T[(i+1)/2-1]==Nil) /* 给叶子赋非空值但双亲为空 */\n     return ERROR;\n   else if(value==Nil&&(T[i*2+1]!=Nil||T[i*2+2]!=Nil)) /*  给双亲赋空值但有叶子(不空) */\n     return ERROR;\n   T[i]=value;\n   return OK;\n }\n  TElemType Parent(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[(i+1)/2-1];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+2];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2==0) /* 找到e且其序号为偶数(是右孩子) */\n       return T[i-1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2) /* 找到e且其序号为奇数(是左孩子) */\n       return T[i+1];\n   return Nil; /* 没找到e */\n }\n  void Move(SqBiTree q,int j,SqBiTree T,int i) /* InsertChild()用到。加 */\n { /* 把从q的j结点开始的子树移为从T的i结点开始的子树 */\n   if(q[2*j+1]!=Nil) /* q的左子树不空 */\n     Move(q,(2*j+1),T,(2*i+1)); /* 把q的j结点的左子树移为T的i结点的左子树 */\n   if(q[2*j+2]!=Nil) /* q的右子树不空 */\n     Move(q,(2*j+2),T,(2*i+2)); /* 把q的j结点的右子树移为T的i结点的右子树 */\n   T[i]=q[j]; /* 把q的j结点移为T的i结点 */\n   q[j]=Nil; /* 把q的j结点置空 */\n }\n  void InsertChild(SqBiTree T,TElemType p,int LR,SqBiTree c)\n { /* 初始条件：二叉树T存在，p是T中某个结点的值，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果: 根据LR为0或1,插入c为T中p结点的左或右子树。p结点的原有左或右子树则成为c的右子树 */\n   int j,k,i=0;\n   for(j=0;j<(int)pow(2,BiTreeDepth(T))-1;j++) /* 查找p的序号 */\n     if(T[j]==p) /* j为p的序号 */\n       break;\n   k=2*j+1+LR; /* k为p的左或右孩子的序号 */\n   if(T[k]!=Nil) /* p原来的左或右孩子不空 */\n     Move(T,k,T,2*k+2); /* 把从T的k结点开始的子树移为从k结点的右子树开始的子树 */\n   Move(c,i,T,k); /* 把从c的i结点开始的子树移为从T的k结点开始的子树 */\n }\n  typedef int QElemType; /* 设伫列元素类型为整型(序号) */\n #include \"c3-2.h\" /* 链伫列 */\n #include \"bo3-2.c\" /* 链伫列的基本操作 */\n Status DeleteChild(SqBiTree T,position p,int LR)\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为1或0 */\n   /* 操作结果：根据LR为1或0，删除T中p所指结点的左或右子树 */\n   int i;\n   Status k=OK; /* 伫列不空的标志 */\n   LinkQueue q;\n   InitQueue(&q); /* 初始化伫列，用于存放待删除的结点 */\n   i=(int)pow(2,p.level-1)+p.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(T[i]==Nil) /* 此结点空 */\n     return ERROR;\n   i=i*2+1+LR; /* 待删除子树的根结点在矩阵中的序号 */\n   while(k)\n   {\n     if(T[2*i+1]!=Nil) /* 左结点不空 */\n       EnQueue(&q,2*i+1); /* 入队左结点的序号 */\n     if(T[2*i+2]!=Nil) /* 右结点不空 */\n       EnQueue(&q,2*i+2); /* 入队右结点的序号 */\n     T[i]=Nil; /* 删除此结点 */\n     k=DeQueue(&q,&i); /* 伫列不空 */\n   }\n   return OK;\n }\n  void(*VisitFunc)(TElemType); /* 函数变数 */\n void PreTraverse(SqBiTree T,int e)\n { /* PreOrderTraverse()调用 */\n   VisitFunc(T[e]);\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PreTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PreTraverse(T,2*e+2);\n }\n  void PreOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：先序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PreTraverse(T,0);\n   printf(\"\\n\");\n }\n  void InTraverse(SqBiTree T,int e)\n { /* InOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     InTraverse(T,2*e+1);\n   VisitFunc(T[e]);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     InTraverse(T,2*e+2);\n }\n  void InOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：中序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     InTraverse(T,0);\n   printf(\"\\n\");\n }\n  void PostTraverse(SqBiTree T,int e)\n { /* PostOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PostTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PostTraverse(T,2*e+2);\n   VisitFunc(T[e]);\n }\n  void PostOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PostTraverse(T,0);\n   printf(\"\\n\");\n }\n  void LevelOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 层序遍历二叉树 */\n   int i=MAX_TREE_SIZE-1,j;\n   while(T[i]==Nil)\n     i--; /* 找到最后一个非空结点的序号 */\n   for(j=0;j<=i;j++) /* 从根结点起，按层序遍历二叉树 */\n     if(T[j]!=Nil)\n       Visit(T[j]); /* 只遍历非空的结点 */\n   printf(\"\\n\");\n }\n  void Print(SqBiTree T)\n { /* 逐层、按本层序号输出二叉树 */\n   int j,k;\n   position p;\n   TElemType e;\n   for(j=1;j<=BiTreeDepth(T);j++)\n   {\n     printf(\"第%d层: \",j);\n     for(k=1;k<=pow(2,j-1);k++)\n     {\n       p.level=j;\n       p.order=k;\n       e=Value(T,p);\n       if(e!=Nil)\n	 printf(\"%d:\"form\" \",k,e);\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('542', '在使用记录或存储器地址指针的程序设计语言中，二叉树通常用树结点结构来存储。有时也包含指向唯一的父节点的指针。如果一个结点的子结点个数小于2，一些子结点指针可能为空值，或者为特殊的哨兵结点。 使用链表能避免顺序存储浪费空间的问题，算法和结构相对简单，但使用二叉链表，由于缺乏父链的指引，在找回父节点时需要重新扫描树得知父节点的节点地址。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('543', '/* 二叉树的二叉链表存储表示 */\n typedef struct BiTNode\n {\n   TElemType data;\n   struct BiTNode *lchild,*rchild; /* 左右孩子指针 */\n }BiTNode,*BiTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('544', '基于C/C++的实现算法显示▼  /* [[二元树]]的顺序存储的基本操作(23个)*/\n #define ClearBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\\arccos{}\n #define DestroyBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\n void InitBiTree(SqBiTree T) －－－（SqBiTree & T）\n { /* 构造[[空二元树]]T。因为T是阵列名称，故不需要& */\n   int i;\n   for(i=0;i<MAX_TREE_SIZE;i++)\n     T[i]=Nil; /* 初值为空(Nil在主程中定义) */\n }\n  void CreateBiTree(SqBiTree T)\n { /* 按层序次序输入二叉树中结点的值(字元型或整型), 构造顺序存储的二叉树T */\n   int i=0;\n #if CHAR /* 结点类型为字元 */\n   int l;\n   char s[MAX_TREE_SIZE];\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入结点的值(字元)，空格表示空结点，节点数≦%d:\\n\",MAX_TREE_SIZE);\n   gets(s); /* 输入字串 */\n   l=strlen(s); /* 求字串的长度 */\n   for(;i<l;i++) /* 将字串赋值给T */\n     T[i]=s[i];\n #else  /* 节点类型为整型 */\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入节点的值(整型)，0表示空节点，输999结束。节点数≦%d:\\n\",MAX_TREE_SIZE);\n   while(1)\n   {\n     scanf(\"%d\",&T[i]);\n     if(T[i]==999)\n     {\n       T[i]=Nil;\n       break;\n     }\n     i++;\n   }\n #endif\n   for(i=1;i<MAX_TREE_SIZE;i++)\n     if(T[(i+1)/2-1]==Nil&&T[i]!=Nil) /* 此非根节点(不空)无双亲 */\n     {\n       printf(\"出现无双亲的非根节点\"form\"\\n\",T[i]);\n       exit(ERROR);\n     }\n }\n  int BiTreeDepth(SqBiTree T)\n { /* 初始条件：[二元树]T存在。操作结果：返回T的深度 */\n   int i,j=-1;\n   for(i=MAX_TREE_SIZE-1;i>=0;i--) /* 找到最后一个节点 */\n     if(T[i]!=Nil)\n       break;\n   i++; /* 为了便于计算 */\n   do\n     j++;\n   while(i>=pow(2,j));   /*pow是原型为double pow( double x, double y ),计算x的y次方,h = log<sub>2</sub>k + 1来计算[二元树]的深度*/\n   return j;\n }\n  Status Root(SqBiTree T,TElemType *e)\n { /* 初始条件：[二元树]T存在。操作结果：当T不空，用e返回T的根，返回OK；否则返回ERROR，e无定义 */\n   if(BiTreeEmpty(T)) /* T空 */\n     return ERROR;\n   else\n   {\n     *e=T[0];\n     return OK;\n   }\n }\n  TElemType Value(SqBiTree T,position e)\n { /* 初始条件：[二元树]T存在，e是T中某个结点(的位置) */\n   /* 操作结果：返回处于位置e(层,本层序号)的结点的值 */\n   return T[(int)pow(2,e.level-1)+e.order-2];\n }\n  Status Assign(SqBiTree T,position e,TElemType value)\n { /* 初始条件：二叉树T存在，e是T中某个结点(的位置) */\n   /* 操作结果：给处于位置e(层,本层序号)的结点赋新值value */\n   int i=(int)pow(2,e.level-1)+e.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(value!=Nil&&T[(i+1)/2-1]==Nil) /* 给叶子赋非空值但双亲为空 */\n     return ERROR;\n   else if(value==Nil&&(T[i*2+1]!=Nil||T[i*2+2]!=Nil)) /*  给双亲赋空值但有叶子(不空) */\n     return ERROR;\n   T[i]=value;\n   return OK;\n }\n  TElemType Parent(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[(i+1)/2-1];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+2];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2==0) /* 找到e且其序号为偶数(是右孩子) */\n       return T[i-1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2) /* 找到e且其序号为奇数(是左孩子) */\n       return T[i+1];\n   return Nil; /* 没找到e */\n }\n  void Move(SqBiTree q,int j,SqBiTree T,int i) /* InsertChild()用到。加 */\n { /* 把从q的j结点开始的子树移为从T的i结点开始的子树 */\n   if(q[2*j+1]!=Nil) /* q的左子树不空 */\n     Move(q,(2*j+1),T,(2*i+1)); /* 把q的j结点的左子树移为T的i结点的左子树 */\n   if(q[2*j+2]!=Nil) /* q的右子树不空 */\n     Move(q,(2*j+2),T,(2*i+2)); /* 把q的j结点的右子树移为T的i结点的右子树 */\n   T[i]=q[j]; /* 把q的j结点移为T的i结点 */\n   q[j]=Nil; /* 把q的j结点置空 */\n }\n  void InsertChild(SqBiTree T,TElemType p,int LR,SqBiTree c)\n { /* 初始条件：二叉树T存在，p是T中某个结点的值，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果: 根据LR为0或1,插入c为T中p结点的左或右子树。p结点的原有左或右子树则成为c的右子树 */\n   int j,k,i=0;\n   for(j=0;j<(int)pow(2,BiTreeDepth(T))-1;j++) /* 查找p的序号 */\n     if(T[j]==p) /* j为p的序号 */\n       break;\n   k=2*j+1+LR; /* k为p的左或右孩子的序号 */\n   if(T[k]!=Nil) /* p原来的左或右孩子不空 */\n     Move(T,k,T,2*k+2); /* 把从T的k结点开始的子树移为从k结点的右子树开始的子树 */\n   Move(c,i,T,k); /* 把从c的i结点开始的子树移为从T的k结点开始的子树 */\n }\n  typedef int QElemType; /* 设伫列元素类型为整型(序号) */\n #include \"c3-2.h\" /* 链伫列 */\n #include \"bo3-2.c\" /* 链伫列的基本操作 */\n Status DeleteChild(SqBiTree T,position p,int LR)\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为1或0 */\n   /* 操作结果：根据LR为1或0，删除T中p所指结点的左或右子树 */\n   int i;\n   Status k=OK; /* 伫列不空的标志 */\n   LinkQueue q;\n   InitQueue(&q); /* 初始化伫列，用于存放待删除的结点 */\n   i=(int)pow(2,p.level-1)+p.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(T[i]==Nil) /* 此结点空 */\n     return ERROR;\n   i=i*2+1+LR; /* 待删除子树的根结点在矩阵中的序号 */\n   while(k)\n   {\n     if(T[2*i+1]!=Nil) /* 左结点不空 */\n       EnQueue(&q,2*i+1); /* 入队左结点的序号 */\n     if(T[2*i+2]!=Nil) /* 右结点不空 */\n       EnQueue(&q,2*i+2); /* 入队右结点的序号 */\n     T[i]=Nil; /* 删除此结点 */\n     k=DeQueue(&q,&i); /* 伫列不空 */\n   }\n   return OK;\n }\n  void(*VisitFunc)(TElemType); /* 函数变数 */\n void PreTraverse(SqBiTree T,int e)\n { /* PreOrderTraverse()调用 */\n   VisitFunc(T[e]);\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PreTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PreTraverse(T,2*e+2);\n }\n  void PreOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：先序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PreTraverse(T,0);\n   printf(\"\\n\");\n }\n  void InTraverse(SqBiTree T,int e)\n { /* InOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     InTraverse(T,2*e+1);\n   VisitFunc(T[e]);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     InTraverse(T,2*e+2);\n }\n  void InOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：中序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     InTraverse(T,0);\n   printf(\"\\n\");\n }\n  void PostTraverse(SqBiTree T,int e)\n { /* PostOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PostTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PostTraverse(T,2*e+2);\n   VisitFunc(T[e]);\n }\n  void PostOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PostTraverse(T,0);\n   printf(\"\\n\");\n }\n  void LevelOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 层序遍历二叉树 */\n   int i=MAX_TREE_SIZE-1,j;\n   while(T[i]==Nil)\n     i--; /* 找到最后一个非空结点的序号 */\n   for(j=0;j<=i;j++) /* 从根结点起，按层序遍历二叉树 */\n     if(T[j]!=Nil)\n       Visit(T[j]); /* 只遍历非空的结点 */\n   printf(\"\\n\");\n }\n  void Print(SqBiTree T)\n { /* 逐层、按本层序号输出二叉树 */\n   int j,k;\n   position p;\n   TElemType e;\n   for(j=1;j<=BiTreeDepth(T);j++)\n   {\n     printf(\"第%d层: \",j);\n     for(k=1;k<=pow(2,j-1);k++)\n     {\n       p.level=j;\n       p.order=k;\n       e=Value(T,p);\n       if(e!=Nil)\n	 printf(\"%d:\"form\" \",k,e);\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('545', '在使用记录或存储器地址指针的程序设计语言中，二叉树通常用树结点结构来存储。有时也包含指向唯一的父节点的指针。如果一个结点的子结点个数小于2，一些子结点指针可能为空值，或者为特殊的哨兵结点。 使用链表能避免顺序存储浪费空间的问题，算法和结构相对简单，但使用二叉链表，由于缺乏父链的指引，在找回父节点时需要重新扫描树得知父节点的节点地址。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('546', '/* 二叉树的二叉链表存储表示 */\n typedef struct BiTNode\n {\n   TElemType data;\n   struct BiTNode *lchild,*rchild; /* 左右孩子指针 */\n }BiTNode,*BiTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('547', '基于C/C++的实现算法显示▼  /* [[二元树]]的顺序存储的基本操作(23个)*/\n #define ClearBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\\arccos{}\n #define DestroyBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\n void InitBiTree(SqBiTree T) －－－（SqBiTree & T）\n { /* 构造[[空二元树]]T。因为T是阵列名称，故不需要& */\n   int i;\n   for(i=0;i<MAX_TREE_SIZE;i++)\n     T[i]=Nil; /* 初值为空(Nil在主程中定义) */\n }\n  void CreateBiTree(SqBiTree T)\n { /* 按层序次序输入二叉树中结点的值(字元型或整型), 构造顺序存储的二叉树T */\n   int i=0;\n #if CHAR /* 结点类型为字元 */\n   int l;\n   char s[MAX_TREE_SIZE];\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入结点的值(字元)，空格表示空结点，节点数≦%d:\\n\",MAX_TREE_SIZE);\n   gets(s); /* 输入字串 */\n   l=strlen(s); /* 求字串的长度 */\n   for(;i<l;i++) /* 将字串赋值给T */\n     T[i]=s[i];\n #else  /* 节点类型为整型 */\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入节点的值(整型)，0表示空节点，输999结束。节点数≦%d:\\n\",MAX_TREE_SIZE);\n   while(1)\n   {\n     scanf(\"%d\",&T[i]);\n     if(T[i]==999)\n     {\n       T[i]=Nil;\n       break;\n     }\n     i++;\n   }\n #endif\n   for(i=1;i<MAX_TREE_SIZE;i++)\n     if(T[(i+1)/2-1]==Nil&&T[i]!=Nil) /* 此非根节点(不空)无双亲 */\n     {\n       printf(\"出现无双亲的非根节点\"form\"\\n\",T[i]);\n       exit(ERROR);\n     }\n }\n  int BiTreeDepth(SqBiTree T)\n { /* 初始条件：[二元树]T存在。操作结果：返回T的深度 */\n   int i,j=-1;\n   for(i=MAX_TREE_SIZE-1;i>=0;i--) /* 找到最后一个节点 */\n     if(T[i]!=Nil)\n       break;\n   i++; /* 为了便于计算 */\n   do\n     j++;\n   while(i>=pow(2,j));   /*pow是原型为double pow( double x, double y ),计算x的y次方,h = log<sub>2</sub>k + 1来计算[二元树]的深度*/\n   return j;\n }\n  Status Root(SqBiTree T,TElemType *e)\n { /* 初始条件：[二元树]T存在。操作结果：当T不空，用e返回T的根，返回OK；否则返回ERROR，e无定义 */\n   if(BiTreeEmpty(T)) /* T空 */\n     return ERROR;\n   else\n   {\n     *e=T[0];\n     return OK;\n   }\n }\n  TElemType Value(SqBiTree T,position e)\n { /* 初始条件：[二元树]T存在，e是T中某个结点(的位置) */\n   /* 操作结果：返回处于位置e(层,本层序号)的结点的值 */\n   return T[(int)pow(2,e.level-1)+e.order-2];\n }\n  Status Assign(SqBiTree T,position e,TElemType value)\n { /* 初始条件：二叉树T存在，e是T中某个结点(的位置) */\n   /* 操作结果：给处于位置e(层,本层序号)的结点赋新值value */\n   int i=(int)pow(2,e.level-1)+e.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(value!=Nil&&T[(i+1)/2-1]==Nil) /* 给叶子赋非空值但双亲为空 */\n     return ERROR;\n   else if(value==Nil&&(T[i*2+1]!=Nil||T[i*2+2]!=Nil)) /*  给双亲赋空值但有叶子(不空) */\n     return ERROR;\n   T[i]=value;\n   return OK;\n }\n  TElemType Parent(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[(i+1)/2-1];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+2];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2==0) /* 找到e且其序号为偶数(是右孩子) */\n       return T[i-1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2) /* 找到e且其序号为奇数(是左孩子) */\n       return T[i+1];\n   return Nil; /* 没找到e */\n }\n  void Move(SqBiTree q,int j,SqBiTree T,int i) /* InsertChild()用到。加 */\n { /* 把从q的j结点开始的子树移为从T的i结点开始的子树 */\n   if(q[2*j+1]!=Nil) /* q的左子树不空 */\n     Move(q,(2*j+1),T,(2*i+1)); /* 把q的j结点的左子树移为T的i结点的左子树 */\n   if(q[2*j+2]!=Nil) /* q的右子树不空 */\n     Move(q,(2*j+2),T,(2*i+2)); /* 把q的j结点的右子树移为T的i结点的右子树 */\n   T[i]=q[j]; /* 把q的j结点移为T的i结点 */\n   q[j]=Nil; /* 把q的j结点置空 */\n }\n  void InsertChild(SqBiTree T,TElemType p,int LR,SqBiTree c)\n { /* 初始条件：二叉树T存在，p是T中某个结点的值，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果: 根据LR为0或1,插入c为T中p结点的左或右子树。p结点的原有左或右子树则成为c的右子树 */\n   int j,k,i=0;\n   for(j=0;j<(int)pow(2,BiTreeDepth(T))-1;j++) /* 查找p的序号 */\n     if(T[j]==p) /* j为p的序号 */\n       break;\n   k=2*j+1+LR; /* k为p的左或右孩子的序号 */\n   if(T[k]!=Nil) /* p原来的左或右孩子不空 */\n     Move(T,k,T,2*k+2); /* 把从T的k结点开始的子树移为从k结点的右子树开始的子树 */\n   Move(c,i,T,k); /* 把从c的i结点开始的子树移为从T的k结点开始的子树 */\n }\n  typedef int QElemType; /* 设伫列元素类型为整型(序号) */\n #include \"c3-2.h\" /* 链伫列 */\n #include \"bo3-2.c\" /* 链伫列的基本操作 */\n Status DeleteChild(SqBiTree T,position p,int LR)\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为1或0 */\n   /* 操作结果：根据LR为1或0，删除T中p所指结点的左或右子树 */\n   int i;\n   Status k=OK; /* 伫列不空的标志 */\n   LinkQueue q;\n   InitQueue(&q); /* 初始化伫列，用于存放待删除的结点 */\n   i=(int)pow(2,p.level-1)+p.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(T[i]==Nil) /* 此结点空 */\n     return ERROR;\n   i=i*2+1+LR; /* 待删除子树的根结点在矩阵中的序号 */\n   while(k)\n   {\n     if(T[2*i+1]!=Nil) /* 左结点不空 */\n       EnQueue(&q,2*i+1); /* 入队左结点的序号 */\n     if(T[2*i+2]!=Nil) /* 右结点不空 */\n       EnQueue(&q,2*i+2); /* 入队右结点的序号 */\n     T[i]=Nil; /* 删除此结点 */\n     k=DeQueue(&q,&i); /* 伫列不空 */\n   }\n   return OK;\n }\n  void(*VisitFunc)(TElemType); /* 函数变数 */\n void PreTraverse(SqBiTree T,int e)\n { /* PreOrderTraverse()调用 */\n   VisitFunc(T[e]);\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PreTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PreTraverse(T,2*e+2);\n }\n  void PreOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：先序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PreTraverse(T,0);\n   printf(\"\\n\");\n }\n  void InTraverse(SqBiTree T,int e)\n { /* InOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     InTraverse(T,2*e+1);\n   VisitFunc(T[e]);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     InTraverse(T,2*e+2);\n }\n  void InOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：中序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     InTraverse(T,0);\n   printf(\"\\n\");\n }\n  void PostTraverse(SqBiTree T,int e)\n { /* PostOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PostTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PostTraverse(T,2*e+2);\n   VisitFunc(T[e]);\n }\n  void PostOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PostTraverse(T,0);\n   printf(\"\\n\");\n }\n  void LevelOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 层序遍历二叉树 */\n   int i=MAX_TREE_SIZE-1,j;\n   while(T[i]==Nil)\n     i--; /* 找到最后一个非空结点的序号 */\n   for(j=0;j<=i;j++) /* 从根结点起，按层序遍历二叉树 */\n     if(T[j]!=Nil)\n       Visit(T[j]); /* 只遍历非空的结点 */\n   printf(\"\\n\");\n }\n  void Print(SqBiTree T)\n { /* 逐层、按本层序号输出二叉树 */\n   int j,k;\n   position p;\n   TElemType e;\n   for(j=1;j<=BiTreeDepth(T);j++)\n   {\n     printf(\"第%d层: \",j);\n     for(k=1;k<=pow(2,j-1);k++)\n     {\n       p.level=j;\n       p.order=k;\n       e=Value(T,p);\n       if(e!=Nil)\n	 printf(\"%d:\"form\" \",k,e);\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('548', '在使用记录或存储器地址指针的程序设计语言中，二叉树通常用树结点结构来存储。有时也包含指向唯一的父节点的指针。如果一个结点的子结点个数小于2，一些子结点指针可能为空值，或者为特殊的哨兵结点。 使用链表能避免顺序存储浪费空间的问题，算法和结构相对简单，但使用二叉链表，由于缺乏父链的指引，在找回父节点时需要重新扫描树得知父节点的节点地址。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('549', '/* 二叉树的二叉链表存储表示 */\n typedef struct BiTNode\n {\n   TElemType data;\n   struct BiTNode *lchild,*rchild; /* 左右孩子指针 */\n }BiTNode,*BiTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('550', '基于C/C++的实现算法显示▼  /* 二叉树的三叉链表存储的基本操作(21个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n void InitBiTree(BiPTree *T)\n { /* 操作结果：构造空二叉树T */\n   *T=NULL;\n }\n  void DestroyBiTree(BiPTree *T)\n { /* 初始条件：二叉树T存在。操作结果：销毁二叉树T */\n   if(*T) /* 非空树 */\n   {\n     if((*T)->lchild) /* 有左孩子 */\n       DestroyBiTree(&(*T)->lchild); /* 销毁左孩子子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       DestroyBiTree(&(*T)->rchild); /* 销毁右孩子子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL; /* 空指针赋0 */\n   }\n }\n  void CreateBiTree(BiPTree *T)\n { /* 按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造三叉链表表示的二叉树T */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiPTree)malloc(sizeof(BiTPNode)); /* 动态生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch; /* 给根结点赋值 */\n     (*T)->parent=NULL; /* 根结点无双亲 */\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     if((*T)->lchild) /* 有左孩子 */\n       (*T)->lchild->parent=*T; /* 给左孩子的双亲域赋值 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       (*T)->rchild->parent=*T; /* 给右孩子的双亲域赋值 */\n   }\n }\n  Status BiTreeEmpty(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(!T)\n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(T)\n     return T->data;\n   else\n     return Nil;\n }\n  TElemType Value(BiPTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiPTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiPTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n  BiPTree Point(BiPTree T,TElemType e)\n { /* 返回二叉树T中指向元素值为e的结点的指标。加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==e)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType Parent(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T) /* T中存在结点e且e是非根结点 */\n       return a->parent->data; /* 返回e的双亲的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->lchild&&a->parent->lchild!=a) /* T中存在结点e且e存在左兄弟 */\n       return a->parent->lchild->data; /* 返回e的左兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->rchild&&a->parent->rchild!=a) /* T中存在结点e且e存在右兄弟 */\n       return a->parent->rchild->data; /* 返回e的右兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiPTree p,int LR,BiPTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点 */\n   /*           的原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       if(c->rchild) /* c有右孩子(p原有左孩子) */\n         c->rchild->parent=c;\n       p->lchild=c;\n       c->parent=p;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       if(c->rchild) /* c有右孩子(p原有右孩子) */\n         c->rchild->parent=c;\n       p->rchild=c;\n       c->parent=p;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiPTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  void PreOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 先序递回遍历二叉树T */\n   if(T)\n   {\n     Visit(T); /* 先访问根结点 */\n     PreOrderTraverse(T->lchild,Visit); /* 再先序遍历左子树 */\n     PreOrderTraverse(T->rchild,Visit); /* 最后先序遍历右子树 */\n   }\n }\n  void InOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 中序递回遍历二叉树T */\n   if(T)\n   {\n     InOrderTraverse(T->lchild,Visit); /* 中序遍历左子树 */\n     Visit(T); /* 再访问根结点 */\n     InOrderTraverse(T->rchild,Visit); /* 最后中序遍历右子树 */\n   }\n }\n  void PostOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 后序递回遍历二叉树T */\n   if(T)\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 后序遍历右子树 */\n     Visit(T); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 层序遍历二叉树T(利用伫列) */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q);\n     EnQueue(&q,T);\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&a);\n       Visit(a);\n       if(a->lchild!=NULL)\n         EnQueue(&q,a->lchild);\n       if(a->rchild!=NULL)\n         EnQueue(&q,a->rchild);\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('551', '我们经常希望访问树中的每一个结点并且查看它的值。有很多常见的顺序来访问所有的结点，而且每一种都有有用的性质。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('552', '遍历二叉树：L、D、R分别表示遍历左子树、访问根结点和遍历右子树，则先(根)序遍历二叉树的顺序是DLR，中(根)序遍历二叉树的顺序是LDR，后(根)序遍历二叉树的顺序是LRD。还有按层遍历二叉树。这些方法的时间复杂度都是O(n)，n为结点个数。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('553', '如果T2是由有序树T转换而来的二叉树，那么T中结点的前序就是T2中结点的前序，T中结点的后序就是T2中结点的中序。任何一棵二叉树的叶结点在先序、中序和后序遍历中的相对次序不发改变。设n,m为一棵二叉树上的两个结点，在中序遍历时，n在m前的条件是n在m的左方。前序序列和中序序列相同的二叉树为空树或任一结点均无左孩子的非空二叉树；中序序列和后序序列相同的二叉树为空树或任一结点均无右孩子的非空二叉树；前序序列和后序序列相同的二叉树为空树或仅有一个结点的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('554', '假设我们有一个包含值的value和指向两个子结点的left和right的树结点结构。我们可以写出这样的过程：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('555', 'visit(node)\n    print node.value\n    if node.left  != null then visit(node.left)\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('556', '这样会用前序打印出树中的值。在前序，每个结点在访问它的子结点之前访问。类似地，如果打印语句在最后，每个结点在访问他的子节点之后访问，树中的值会用后序来打印。在这两种情况中，左子树中的值比右子树中得值先打印。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('557', 'visit(node)\n    if node.left  != null then visit(node.left)\n    print node.value\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('558', '最后，上面的中序遍历，每个结点在访问左子树和右子树之间访问。这在遍历二叉搜索树时很常用，因为它能用递增的顺序来遍历所有的值。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('559', '为什么呢？如果n是二叉搜索树的结点，那么n的左子树的所有结点的值都比n的值要小，而且n的右子树的所有节点的值都比n的值要大。因此，如果我们顺序遍历左子树，然后访问n，然后顺序遍历右子树。我们就已经循序访问了整个树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('560', '在这个二叉树中， 前序遍历的结果：2, 7, 2, 6, 5, 11, 5, 9, 4 后序遍历的结果：2, 5, 11, 6, 7, 4, 9, 5, 2 中序遍历的结果：2, 7, 5, 6, 11, 2, 5, 4, 9', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('561', '以上的递归算法使用与树的高度成比例的栈空间。如果我们在每个结点中存储指向父结点的指针，那样可以使用反复运算算法，只使用常数空间实现所有这些遍历。然而，指向父结点的指针占用更多的空间。这只在需要指向父节点的指针或栈空间有限时才使用。例如， 这是一个中序遍历的反复运算算法：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:14', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('562', 'visit(root)\n    prev    := null\n    current := root\n    next    := null\n    \n    while current != null\n        if prev == current.parent\n            prev := current\n            next := current.left\n        if next == null or prev == current.left\n            print current.value\n            prev := current\n            next := current.right\n        if next == null or prev == current.right\n            prev := current\n            next := current.parent\n        current := next', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('563', '用二叉树表示下述表达式：a+b*(c-d)-e/f 先序遍历的序列是：-+a*b-cd/ef 中序遍历的序列是：a+b*c-d-e/f 后序遍历的序列是：abcd-*+ef/-', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('564', '在深度优先级中，我们希望从根结点访问最远的结点。和图的深度优先搜索不同的是，不需记住访问过的每一个结点，因为树中不会有环。前序，中序和后序遍历都是深度优先遍历的特例。参见深度优先搜索。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('565', '和深度优先遍历不同，广度优先遍历会先访问离根节点最近的节点。参见广度优先搜索。 二叉树的广度优先遍历又称按层次遍历。算法借助队列实现。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('566', '一般有序树和二叉树之间有一一映射关系，能进行相互转换。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('567', 'n叉树转换为二叉树的方法：二叉树中结点x的左子结点为n叉树中结点x的左子结点；二叉树中结点x的右子结点为n叉树中结点x的第一个右边的同级结点y。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('568', '例如，在左边的树中，A有6个子结点{B,C,D,E,F,G}。它能被转换成右边的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('569', '在兄弟之间加一连接； 对每个结点，除了其左孩子外，去除其与其余孩子之间的联系； 以树的根结点为轴心，将整树顺时针转45度。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('570', '树的二叉链表标记法（孩子兄弟标记法）是树和二叉树转换的媒介。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('571', '/* 树的二叉链表(孩子—兄弟)存储表示 */\n typedef struct CSNode\n {\n   TElemType data;\n   struct CSNode *firstchild,*nextsibling;\n }CSNode,*CSTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('572', '树的二叉链表存储的基本操作[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('573', '基于C/C++的算法实现显示▼  /* 树的二叉链表(孩子—兄弟)存储的基本操作(17个) */\n #define ClearTree DestroyTree /* 二者操作相同 */\n #include\"func6-2.c\" /* 包括PreOrderTraverse() */\n void InitTree(CSTree *T)\n { /* 操作结果：构造空树T */\n   *T=NULL;\n }\n  void DestroyTree(CSTree *T)\n { /* 初始条件：树T存在。操作结果：销毁树T */\n   if(*T)\n   {\n     if((*T)->firstchild) /* T有长子 */\n       DestroyTree(&(*T)->firstchild); /* 销毁T的长子为根结点的子树 */\n     if((*T)->nextsibling) /* T有下一个兄弟 */\n       DestroyTree(&(*T)->nextsibling); /* 销毁T的下一个兄弟为根结点的子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL;\n   }\n }\n  typedef CSTree QElemType; /* 定义伫列元素类型 */\n #include\"c3-2.h\" /* 定义LinkQueue类型(链伫列) */\n #include\"bo3-2.c\" /* LinkQueue类型的基本操作 */\n void CreateTree(CSTree *T)\n { /* 构造树T */\n   char c[20]; /* 临时存放孩子结点(设不超过20个)的值 */\n   CSTree p,p1;\n   LinkQueue q;\n   int i,l;\n   InitQueue(&q);\n   printf(\"请输入根结点(字元型,空格为空): \");\n   scanf(\"%c%*c\",&c[0]);\n   if(c[0]!=Nil) /* 非空树 */\n   {\n     *T=(CSTree)malloc(sizeof(CSNode)); /* 建立根结点 */\n     (*T)->data=c[0];\n     (*T)->nextsibling=NULL;\n     EnQueue(&q,*T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       printf(\"请按长幼顺序输入结点%c的所有孩子: \",p->data);\n       gets(c);\n       l=strlen(c);\n       if(l>0) /* 有孩子 */\n       {\n         p1=p->firstchild=(CSTree)malloc(sizeof(CSNode)); /* 建立长子结点 */\n         p1->data=c[0];\n         for(i=1;i<l;i++)\n         {\n           p1->nextsibling=(CSTree)malloc(sizeof(CSNode)); /* 建立下一个兄弟结点 */\n           EnQueue(&q,p1); /* 入队上一个结点 */\n           p1=p1->nextsibling;\n           p1->data=c[i];\n         }\n         p1->nextsibling=NULL;\n         EnQueue(&q,p1); /* 入队最后一个结点 */\n       }\n       else\n         p->firstchild=NULL; /* 长子指针为空 */\n     }\n   }\n   else\n     *T=NULL; /* 空树 */\n }\n  Status TreeEmpty(CSTree T)\n { /* 初始条件：树T存在。操作结果：若T为空树，则返回TURE，否则返回FALSE */\n   if(T) /* T不空 */\n     return FALSE;\n   else\n     return TRUE;\n }\n  int TreeDepth(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的深度 */\n   CSTree p;\n   int depth,max=0;\n   if(!T) /* 树空 */\n     return 0;\n   if(!T->firstchild) /* 树无长子 */\n     return 1;\n   for(p=T->firstchild;p;p=p->nextsibling)\n   { /* 求子树深度的最大值 */\n     depth=TreeDepth(p);\n     if(depth>max)\n       max=depth;\n   }\n   return max+1; /* 树的深度=子树深度最大值+1 */\n }\n  TElemType Value(CSTree p)\n { /* 返回p所指结点的值 */\n   return p->data;\n }\n  TElemType Root(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的根 */\n   if(T)\n     return Value(T);\n   else\n     return Nil;\n }\n  CSTree Point(CSTree T,TElemType s)\n { /* 返回二叉链表(孩子—兄弟)树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队,伫列元素赋给a */\n       if(a->data==s)\n	 return a;\n       if(a->firstchild) /* 有长子 */\n         EnQueue(&q,a->firstchild); /* 入队长子 */\n       if(a->nextsibling) /* 有下一个兄弟 */\n         EnQueue(&q,a->nextsibling); /* 入队下一个兄弟 */\n     }\n   }\n   return NULL;\n }\n  Status Assign(CSTree *T,TElemType cur_e,TElemType value)\n { /* 初始条件：树T存在，cur_e是树T中结点的值。操作结果：改cur_e为value */\n   CSTree p;\n   if(*T) /* 非空树 */\n   {\n     p=Point(*T,cur_e); /* p为cur_e的指针 */\n     if(p) /* 找到cur_e */\n     {\n       p->data=value; /* 赋新值 */\n       return OK;\n     }\n   }\n   return ERROR; /* 树空或没找到 */\n }\n  TElemType Parent(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非根结点，则返回它的双亲，否则函数值为＂空＂*/\n   CSTree p,t;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T) /* 树非空 */\n   {\n     if(Value(T)==cur_e) /* 根结点值为cur_e */\n       return Nil;\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&p);\n       if(p->firstchild) /* p有长子 */\n       {\n         if(p->firstchild->data==cur_e) /* 长子为cur_e */\n           return Value(p); /* 返回双亲 */\n         t=p; /* 双亲指针赋给t */\n         p=p->firstchild; /* p指向长子 */\n         EnQueue(&q,p); /* 入队长子 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling; /* p指向下一个兄弟 */\n	 if(Value(p)==cur_e) /* 下一个兄弟为cur_e */\n	 return Value(t); /* 返回双亲 */\n	 EnQueue(&q,p); /* 入队下一个兄弟 */\n	 }\n       }\n     }\n   }\n   return Nil; /* 树空或没找到cur_e */\n }\n  TElemType LeftChild(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非叶子结点，则返回它的最左孩子，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->firstchild) /* 找到结点cur_e且结点cur_e有长子 */\n     return f->firstchild->data;\n   else\n     return Nil;\n }\n  TElemType RightSibling(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e有右兄弟，则返回它的右兄弟，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->nextsibling) /* 找到结点cur_e且结点cur_e有右兄弟 */\n     return f->nextsibling->data;\n   else\n     return Nil; /* 树空 */\n }\n  Status InsertChild(CSTree *T,CSTree p,int i,CSTree c)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度+1，非空树c与T不相交 */\n   /* 操作结果：插入c为T中p结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 插入c为p的长子 */\n     {\n       c->nextsibling=p->firstchild; /* p的原长子现是c的下一个兄弟(c本无兄弟) */\n       p->firstchild=c;\n     }\n     else /* 找插入点 */\n     {\n       p=p->firstchild; /* 指向p的长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到插入位置 */\n       {\n         c->nextsibling=p->nextsibling;\n         p->nextsibling=c;\n       }\n       else /* p原有孩子数小于i-1 */\n         return ERROR;\n     }\n     return OK;\n   }\n   else /* T空 */\n     return ERROR;\n }\n  Status DeleteChild(CSTree *T,CSTree p,int i)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度 */\n   /* 操作结果：删除T中p所指结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   CSTree b;\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 删除长子 */\n     {\n       b=p->firstchild;\n       p->firstchild=b->nextsibling; /* p的原次子现是长子 */\n       b->nextsibling=NULL;\n       DestroyTree(&b);\n     }\n     else /* 删除非长子 */\n     {\n       p=p->firstchild; /* p指向长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到第i棵子树 */\n       {\n         b=p->nextsibling;\n         p->nextsibling=b->nextsibling;\n         b->nextsibling=NULL;\n         DestroyTree(&b);\n       }\n       else /* p原有孩子数小于i */\n         return ERROR;\n     }\n     return OK;\n   }\n   else\n     return ERROR;\n }\n  void PostOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 后根遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   if(T)\n   {\n     if(T->firstchild) /* 有长子 */\n     {\n       PostOrderTraverse(T->firstchild,Visit); /* 后根遍历长子子树 */\n       p=T->firstchild->nextsibling; /* p指向长子的下一个兄弟 */\n       while(p)\n       {\n         PostOrderTraverse(p,Visit); /* 后根遍历下一个兄弟子树 */\n         p=p->nextsibling; /* p指向再下一个兄弟 */\n       }\n     }\n     Visit(Value(T)); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 层序遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T)\n   {\n     Visit(Value(T)); /* 先访问根结点 */\n     EnQueue(&q,T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       if(p->firstchild) /* 有长子 */\n       {\n         p=p->firstchild;\n         Visit(Value(p)); /* 访问长子结点 */\n         EnQueue(&q,p); /* 入队长子结点的指针 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling;\n           Visit(Value(p)); /* 访问下一个兄弟 */\n           EnQueue(&q,p); /* 入队兄弟结点的指针 */\n         }\n       }\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('574', '线索二叉树 (threaded binary tree)[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('575', '线索二叉树(保留遍历时结点在任一序列的前驱和后继的信息)：若结点有左子树，则其lchild域指示其左孩子，否则令lchild域指示其前驱；若结点有右子树，则其rchild域指示其右孩子，否则令rchild指示其后继。还需在结点结构中增加两个标志域LTag和RTag。LTag=0时，lchild域指示结点的左孩子，LTag=1时，lchild域指示结点的前驱；RTag=0时，rchild域指示结点的右孩子，RTag=1时，rchild域指示结点的后继。以这种结点结构构成的二叉链表作为二叉树的存储结构，叫做线索链表，其中指向结点前驱和后继的指针叫做线索，加上线索的二叉树称为线索二叉树。对二叉树以某种次序遍历使其变为线索二叉树的过程叫做线索化。若对二叉树进行中序遍历，则所得的线索二叉树称为中序线索二叉树，线索链表称为为中序线索链表。线索二叉树是一种物理结构。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('576', '在中序线索树找结点后继的规律是：若其右标志为1，则右链为线索，指示其后继，否则遍历其右子树时访问的第一个结点（右子树最左下的结点）为其后继；找结点前驱的规律是：若其左标志为1，则左链为线索，指示其前驱，否则遍历左子树时最后访问的一个结点（左子树中最右下的结点）为其前驱。 在后序线索树中找到结点的后继分三种情况：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('577', '若结点是二叉树的根，则其后继为空； 若结点是其双亲的右孩子，或是其双亲的左孩子且其双亲没有右子树，则其后继即为双亲结点； 若结点是其双亲的左孩子，且其双亲有右子树，则其后继为双亲右子树上按后序遍历列出的第一个结点。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('578', '二叉树的二叉线索存储表示：在线索链表上添加一个头结点，并令其lchild域的指针指向二叉树的根结点，其rchild域的指针指向中序遍历时访问的最后一个结点。令二叉树中序序列中的第一个结点的lchild域指针和最后一个结点的rchild域的指针均指向头结点，这样就创建了一个双向线索链表。二叉树常采用二叉链表方式存储。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('579', '/* 二叉树的二叉线索存储表示 */\n typedef enum{Link,Thread}PointerTag; /* Link(0)：指针，Thread(1)：线索 */\n typedef struct BiThrNode\n {\n   TElemType data;\n   struct BiThrNode *lchild,*rchild; /* 左右孩子指针 */\n   PointerTag LTag,RTag; /* 左右标志 */\n }BiThrNode,*BiThrTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('580', '基于C/C++的实现算法显示▼  /* 二叉树的三叉链表存储的基本操作(21个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n void InitBiTree(BiPTree *T)\n { /* 操作结果：构造空二叉树T */\n   *T=NULL;\n }\n  void DestroyBiTree(BiPTree *T)\n { /* 初始条件：二叉树T存在。操作结果：销毁二叉树T */\n   if(*T) /* 非空树 */\n   {\n     if((*T)->lchild) /* 有左孩子 */\n       DestroyBiTree(&(*T)->lchild); /* 销毁左孩子子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       DestroyBiTree(&(*T)->rchild); /* 销毁右孩子子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL; /* 空指针赋0 */\n   }\n }\n  void CreateBiTree(BiPTree *T)\n { /* 按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造三叉链表表示的二叉树T */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiPTree)malloc(sizeof(BiTPNode)); /* 动态生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch; /* 给根结点赋值 */\n     (*T)->parent=NULL; /* 根结点无双亲 */\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     if((*T)->lchild) /* 有左孩子 */\n       (*T)->lchild->parent=*T; /* 给左孩子的双亲域赋值 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       (*T)->rchild->parent=*T; /* 给右孩子的双亲域赋值 */\n   }\n }\n  Status BiTreeEmpty(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(!T)\n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(T)\n     return T->data;\n   else\n     return Nil;\n }\n  TElemType Value(BiPTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiPTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiPTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n  BiPTree Point(BiPTree T,TElemType e)\n { /* 返回二叉树T中指向元素值为e的结点的指标。加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==e)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType Parent(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T) /* T中存在结点e且e是非根结点 */\n       return a->parent->data; /* 返回e的双亲的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->lchild&&a->parent->lchild!=a) /* T中存在结点e且e存在左兄弟 */\n       return a->parent->lchild->data; /* 返回e的左兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->rchild&&a->parent->rchild!=a) /* T中存在结点e且e存在右兄弟 */\n       return a->parent->rchild->data; /* 返回e的右兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiPTree p,int LR,BiPTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点 */\n   /*           的原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       if(c->rchild) /* c有右孩子(p原有左孩子) */\n         c->rchild->parent=c;\n       p->lchild=c;\n       c->parent=p;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       if(c->rchild) /* c有右孩子(p原有右孩子) */\n         c->rchild->parent=c;\n       p->rchild=c;\n       c->parent=p;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiPTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  void PreOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 先序递回遍历二叉树T */\n   if(T)\n   {\n     Visit(T); /* 先访问根结点 */\n     PreOrderTraverse(T->lchild,Visit); /* 再先序遍历左子树 */\n     PreOrderTraverse(T->rchild,Visit); /* 最后先序遍历右子树 */\n   }\n }\n  void InOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 中序递回遍历二叉树T */\n   if(T)\n   {\n     InOrderTraverse(T->lchild,Visit); /* 中序遍历左子树 */\n     Visit(T); /* 再访问根结点 */\n     InOrderTraverse(T->rchild,Visit); /* 最后中序遍历右子树 */\n   }\n }\n  void PostOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 后序递回遍历二叉树T */\n   if(T)\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 后序遍历右子树 */\n     Visit(T); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 层序遍历二叉树T(利用伫列) */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q);\n     EnQueue(&q,T);\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&a);\n       Visit(a);\n       if(a->lchild!=NULL)\n         EnQueue(&q,a->lchild);\n       if(a->rchild!=NULL)\n         EnQueue(&q,a->rchild);\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('581', '我们经常希望访问树中的每一个结点并且查看它的值。有很多常见的顺序来访问所有的结点，而且每一种都有有用的性质。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:15', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('582', '遍历二叉树：L、D、R分别表示遍历左子树、访问根结点和遍历右子树，则先(根)序遍历二叉树的顺序是DLR，中(根)序遍历二叉树的顺序是LDR，后(根)序遍历二叉树的顺序是LRD。还有按层遍历二叉树。这些方法的时间复杂度都是O(n)，n为结点个数。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('583', '如果T2是由有序树T转换而来的二叉树，那么T中结点的前序就是T2中结点的前序，T中结点的后序就是T2中结点的中序。任何一棵二叉树的叶结点在先序、中序和后序遍历中的相对次序不发改变。设n,m为一棵二叉树上的两个结点，在中序遍历时，n在m前的条件是n在m的左方。前序序列和中序序列相同的二叉树为空树或任一结点均无左孩子的非空二叉树；中序序列和后序序列相同的二叉树为空树或任一结点均无右孩子的非空二叉树；前序序列和后序序列相同的二叉树为空树或仅有一个结点的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('584', '假设我们有一个包含值的value和指向两个子结点的left和right的树结点结构。我们可以写出这样的过程：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('585', 'visit(node)\n    print node.value\n    if node.left  != null then visit(node.left)\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('586', '这样会用前序打印出树中的值。在前序，每个结点在访问它的子结点之前访问。类似地，如果打印语句在最后，每个结点在访问他的子节点之后访问，树中的值会用后序来打印。在这两种情况中，左子树中的值比右子树中得值先打印。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('587', 'visit(node)\n    if node.left  != null then visit(node.left)\n    print node.value\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('588', '最后，上面的中序遍历，每个结点在访问左子树和右子树之间访问。这在遍历二叉搜索树时很常用，因为它能用递增的顺序来遍历所有的值。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('589', '为什么呢？如果n是二叉搜索树的结点，那么n的左子树的所有结点的值都比n的值要小，而且n的右子树的所有节点的值都比n的值要大。因此，如果我们顺序遍历左子树，然后访问n，然后顺序遍历右子树。我们就已经循序访问了整个树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('590', '在这个二叉树中， 前序遍历的结果：2, 7, 2, 6, 5, 11, 5, 9, 4 后序遍历的结果：2, 5, 11, 6, 7, 4, 9, 5, 2 中序遍历的结果：2, 7, 5, 6, 11, 2, 5, 4, 9', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('591', '以上的递归算法使用与树的高度成比例的栈空间。如果我们在每个结点中存储指向父结点的指针，那样可以使用反复运算算法，只使用常数空间实现所有这些遍历。然而，指向父结点的指针占用更多的空间。这只在需要指向父节点的指针或栈空间有限时才使用。例如， 这是一个中序遍历的反复运算算法：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('592', 'visit(root)\n    prev    := null\n    current := root\n    next    := null\n    \n    while current != null\n        if prev == current.parent\n            prev := current\n            next := current.left\n        if next == null or prev == current.left\n            print current.value\n            prev := current\n            next := current.right\n        if next == null or prev == current.right\n            prev := current\n            next := current.parent\n        current := next', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('593', '用二叉树表示下述表达式：a+b*(c-d)-e/f 先序遍历的序列是：-+a*b-cd/ef 中序遍历的序列是：a+b*c-d-e/f 后序遍历的序列是：abcd-*+ef/-', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('594', '在深度优先级中，我们希望从根结点访问最远的结点。和图的深度优先搜索不同的是，不需记住访问过的每一个结点，因为树中不会有环。前序，中序和后序遍历都是深度优先遍历的特例。参见深度优先搜索。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('595', '和深度优先遍历不同，广度优先遍历会先访问离根节点最近的节点。参见广度优先搜索。 二叉树的广度优先遍历又称按层次遍历。算法借助队列实现。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('596', '一般有序树和二叉树之间有一一映射关系，能进行相互转换。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('597', 'n叉树转换为二叉树的方法：二叉树中结点x的左子结点为n叉树中结点x的左子结点；二叉树中结点x的右子结点为n叉树中结点x的第一个右边的同级结点y。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('598', '例如，在左边的树中，A有6个子结点{B,C,D,E,F,G}。它能被转换成右边的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('599', '在兄弟之间加一连接； 对每个结点，除了其左孩子外，去除其与其余孩子之间的联系； 以树的根结点为轴心，将整树顺时针转45度。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('600', '树的二叉链表标记法（孩子兄弟标记法）是树和二叉树转换的媒介。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('601', '/* 树的二叉链表(孩子—兄弟)存储表示 */\n typedef struct CSNode\n {\n   TElemType data;\n   struct CSNode *firstchild,*nextsibling;\n }CSNode,*CSTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('602', '树的二叉链表存储的基本操作[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('603', '基于C/C++的算法实现显示▼  /* 树的二叉链表(孩子—兄弟)存储的基本操作(17个) */\n #define ClearTree DestroyTree /* 二者操作相同 */\n #include\"func6-2.c\" /* 包括PreOrderTraverse() */\n void InitTree(CSTree *T)\n { /* 操作结果：构造空树T */\n   *T=NULL;\n }\n  void DestroyTree(CSTree *T)\n { /* 初始条件：树T存在。操作结果：销毁树T */\n   if(*T)\n   {\n     if((*T)->firstchild) /* T有长子 */\n       DestroyTree(&(*T)->firstchild); /* 销毁T的长子为根结点的子树 */\n     if((*T)->nextsibling) /* T有下一个兄弟 */\n       DestroyTree(&(*T)->nextsibling); /* 销毁T的下一个兄弟为根结点的子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL;\n   }\n }\n  typedef CSTree QElemType; /* 定义伫列元素类型 */\n #include\"c3-2.h\" /* 定义LinkQueue类型(链伫列) */\n #include\"bo3-2.c\" /* LinkQueue类型的基本操作 */\n void CreateTree(CSTree *T)\n { /* 构造树T */\n   char c[20]; /* 临时存放孩子结点(设不超过20个)的值 */\n   CSTree p,p1;\n   LinkQueue q;\n   int i,l;\n   InitQueue(&q);\n   printf(\"请输入根结点(字元型,空格为空): \");\n   scanf(\"%c%*c\",&c[0]);\n   if(c[0]!=Nil) /* 非空树 */\n   {\n     *T=(CSTree)malloc(sizeof(CSNode)); /* 建立根结点 */\n     (*T)->data=c[0];\n     (*T)->nextsibling=NULL;\n     EnQueue(&q,*T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       printf(\"请按长幼顺序输入结点%c的所有孩子: \",p->data);\n       gets(c);\n       l=strlen(c);\n       if(l>0) /* 有孩子 */\n       {\n         p1=p->firstchild=(CSTree)malloc(sizeof(CSNode)); /* 建立长子结点 */\n         p1->data=c[0];\n         for(i=1;i<l;i++)\n         {\n           p1->nextsibling=(CSTree)malloc(sizeof(CSNode)); /* 建立下一个兄弟结点 */\n           EnQueue(&q,p1); /* 入队上一个结点 */\n           p1=p1->nextsibling;\n           p1->data=c[i];\n         }\n         p1->nextsibling=NULL;\n         EnQueue(&q,p1); /* 入队最后一个结点 */\n       }\n       else\n         p->firstchild=NULL; /* 长子指针为空 */\n     }\n   }\n   else\n     *T=NULL; /* 空树 */\n }\n  Status TreeEmpty(CSTree T)\n { /* 初始条件：树T存在。操作结果：若T为空树，则返回TURE，否则返回FALSE */\n   if(T) /* T不空 */\n     return FALSE;\n   else\n     return TRUE;\n }\n  int TreeDepth(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的深度 */\n   CSTree p;\n   int depth,max=0;\n   if(!T) /* 树空 */\n     return 0;\n   if(!T->firstchild) /* 树无长子 */\n     return 1;\n   for(p=T->firstchild;p;p=p->nextsibling)\n   { /* 求子树深度的最大值 */\n     depth=TreeDepth(p);\n     if(depth>max)\n       max=depth;\n   }\n   return max+1; /* 树的深度=子树深度最大值+1 */\n }\n  TElemType Value(CSTree p)\n { /* 返回p所指结点的值 */\n   return p->data;\n }\n  TElemType Root(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的根 */\n   if(T)\n     return Value(T);\n   else\n     return Nil;\n }\n  CSTree Point(CSTree T,TElemType s)\n { /* 返回二叉链表(孩子—兄弟)树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队,伫列元素赋给a */\n       if(a->data==s)\n	 return a;\n       if(a->firstchild) /* 有长子 */\n         EnQueue(&q,a->firstchild); /* 入队长子 */\n       if(a->nextsibling) /* 有下一个兄弟 */\n         EnQueue(&q,a->nextsibling); /* 入队下一个兄弟 */\n     }\n   }\n   return NULL;\n }\n  Status Assign(CSTree *T,TElemType cur_e,TElemType value)\n { /* 初始条件：树T存在，cur_e是树T中结点的值。操作结果：改cur_e为value */\n   CSTree p;\n   if(*T) /* 非空树 */\n   {\n     p=Point(*T,cur_e); /* p为cur_e的指针 */\n     if(p) /* 找到cur_e */\n     {\n       p->data=value; /* 赋新值 */\n       return OK;\n     }\n   }\n   return ERROR; /* 树空或没找到 */\n }\n  TElemType Parent(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非根结点，则返回它的双亲，否则函数值为＂空＂*/\n   CSTree p,t;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T) /* 树非空 */\n   {\n     if(Value(T)==cur_e) /* 根结点值为cur_e */\n       return Nil;\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&p);\n       if(p->firstchild) /* p有长子 */\n       {\n         if(p->firstchild->data==cur_e) /* 长子为cur_e */\n           return Value(p); /* 返回双亲 */\n         t=p; /* 双亲指针赋给t */\n         p=p->firstchild; /* p指向长子 */\n         EnQueue(&q,p); /* 入队长子 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling; /* p指向下一个兄弟 */\n	 if(Value(p)==cur_e) /* 下一个兄弟为cur_e */\n	 return Value(t); /* 返回双亲 */\n	 EnQueue(&q,p); /* 入队下一个兄弟 */\n	 }\n       }\n     }\n   }\n   return Nil; /* 树空或没找到cur_e */\n }\n  TElemType LeftChild(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非叶子结点，则返回它的最左孩子，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->firstchild) /* 找到结点cur_e且结点cur_e有长子 */\n     return f->firstchild->data;\n   else\n     return Nil;\n }\n  TElemType RightSibling(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e有右兄弟，则返回它的右兄弟，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->nextsibling) /* 找到结点cur_e且结点cur_e有右兄弟 */\n     return f->nextsibling->data;\n   else\n     return Nil; /* 树空 */\n }\n  Status InsertChild(CSTree *T,CSTree p,int i,CSTree c)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度+1，非空树c与T不相交 */\n   /* 操作结果：插入c为T中p结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 插入c为p的长子 */\n     {\n       c->nextsibling=p->firstchild; /* p的原长子现是c的下一个兄弟(c本无兄弟) */\n       p->firstchild=c;\n     }\n     else /* 找插入点 */\n     {\n       p=p->firstchild; /* 指向p的长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到插入位置 */\n       {\n         c->nextsibling=p->nextsibling;\n         p->nextsibling=c;\n       }\n       else /* p原有孩子数小于i-1 */\n         return ERROR;\n     }\n     return OK;\n   }\n   else /* T空 */\n     return ERROR;\n }\n  Status DeleteChild(CSTree *T,CSTree p,int i)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度 */\n   /* 操作结果：删除T中p所指结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   CSTree b;\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 删除长子 */\n     {\n       b=p->firstchild;\n       p->firstchild=b->nextsibling; /* p的原次子现是长子 */\n       b->nextsibling=NULL;\n       DestroyTree(&b);\n     }\n     else /* 删除非长子 */\n     {\n       p=p->firstchild; /* p指向长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到第i棵子树 */\n       {\n         b=p->nextsibling;\n         p->nextsibling=b->nextsibling;\n         b->nextsibling=NULL;\n         DestroyTree(&b);\n       }\n       else /* p原有孩子数小于i */\n         return ERROR;\n     }\n     return OK;\n   }\n   else\n     return ERROR;\n }\n  void PostOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 后根遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   if(T)\n   {\n     if(T->firstchild) /* 有长子 */\n     {\n       PostOrderTraverse(T->firstchild,Visit); /* 后根遍历长子子树 */\n       p=T->firstchild->nextsibling; /* p指向长子的下一个兄弟 */\n       while(p)\n       {\n         PostOrderTraverse(p,Visit); /* 后根遍历下一个兄弟子树 */\n         p=p->nextsibling; /* p指向再下一个兄弟 */\n       }\n     }\n     Visit(Value(T)); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 层序遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T)\n   {\n     Visit(Value(T)); /* 先访问根结点 */\n     EnQueue(&q,T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       if(p->firstchild) /* 有长子 */\n       {\n         p=p->firstchild;\n         Visit(Value(p)); /* 访问长子结点 */\n         EnQueue(&q,p); /* 入队长子结点的指针 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling;\n           Visit(Value(p)); /* 访问下一个兄弟 */\n           EnQueue(&q,p); /* 入队兄弟结点的指针 */\n         }\n       }\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('604', '线索二叉树 (threaded binary tree)[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('605', '线索二叉树(保留遍历时结点在任一序列的前驱和后继的信息)：若结点有左子树，则其lchild域指示其左孩子，否则令lchild域指示其前驱；若结点有右子树，则其rchild域指示其右孩子，否则令rchild指示其后继。还需在结点结构中增加两个标志域LTag和RTag。LTag=0时，lchild域指示结点的左孩子，LTag=1时，lchild域指示结点的前驱；RTag=0时，rchild域指示结点的右孩子，RTag=1时，rchild域指示结点的后继。以这种结点结构构成的二叉链表作为二叉树的存储结构，叫做线索链表，其中指向结点前驱和后继的指针叫做线索，加上线索的二叉树称为线索二叉树。对二叉树以某种次序遍历使其变为线索二叉树的过程叫做线索化。若对二叉树进行中序遍历，则所得的线索二叉树称为中序线索二叉树，线索链表称为为中序线索链表。线索二叉树是一种物理结构。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('606', '在中序线索树找结点后继的规律是：若其右标志为1，则右链为线索，指示其后继，否则遍历其右子树时访问的第一个结点（右子树最左下的结点）为其后继；找结点前驱的规律是：若其左标志为1，则左链为线索，指示其前驱，否则遍历左子树时最后访问的一个结点（左子树中最右下的结点）为其前驱。 在后序线索树中找到结点的后继分三种情况：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('607', '若结点是二叉树的根，则其后继为空； 若结点是其双亲的右孩子，或是其双亲的左孩子且其双亲没有右子树，则其后继即为双亲结点； 若结点是其双亲的左孩子，且其双亲有右子树，则其后继为双亲右子树上按后序遍历列出的第一个结点。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('608', '二叉树的二叉线索存储表示：在线索链表上添加一个头结点，并令其lchild域的指针指向二叉树的根结点，其rchild域的指针指向中序遍历时访问的最后一个结点。令二叉树中序序列中的第一个结点的lchild域指针和最后一个结点的rchild域的指针均指向头结点，这样就创建了一个双向线索链表。二叉树常采用二叉链表方式存储。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('609', '/* 二叉树的二叉线索存储表示 */\n typedef enum{Link,Thread}PointerTag; /* Link(0)：指针，Thread(1)：线索 */\n typedef struct BiThrNode\n {\n   TElemType data;\n   struct BiThrNode *lchild,*rchild; /* 左右孩子指针 */\n   PointerTag LTag,RTag; /* 左右标志 */\n }BiThrNode,*BiThrTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('610', '基于C/C++的实现算法显示▼  /* 二叉树的三叉链表存储的基本操作(21个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n void InitBiTree(BiPTree *T)\n { /* 操作结果：构造空二叉树T */\n   *T=NULL;\n }\n  void DestroyBiTree(BiPTree *T)\n { /* 初始条件：二叉树T存在。操作结果：销毁二叉树T */\n   if(*T) /* 非空树 */\n   {\n     if((*T)->lchild) /* 有左孩子 */\n       DestroyBiTree(&(*T)->lchild); /* 销毁左孩子子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       DestroyBiTree(&(*T)->rchild); /* 销毁右孩子子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL; /* 空指针赋0 */\n   }\n }\n  void CreateBiTree(BiPTree *T)\n { /* 按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造三叉链表表示的二叉树T */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiPTree)malloc(sizeof(BiTPNode)); /* 动态生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch; /* 给根结点赋值 */\n     (*T)->parent=NULL; /* 根结点无双亲 */\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     if((*T)->lchild) /* 有左孩子 */\n       (*T)->lchild->parent=*T; /* 给左孩子的双亲域赋值 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       (*T)->rchild->parent=*T; /* 给右孩子的双亲域赋值 */\n   }\n }\n  Status BiTreeEmpty(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(!T)\n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(T)\n     return T->data;\n   else\n     return Nil;\n }\n  TElemType Value(BiPTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiPTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiPTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n  BiPTree Point(BiPTree T,TElemType e)\n { /* 返回二叉树T中指向元素值为e的结点的指标。加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==e)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType Parent(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T) /* T中存在结点e且e是非根结点 */\n       return a->parent->data; /* 返回e的双亲的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->lchild&&a->parent->lchild!=a) /* T中存在结点e且e存在左兄弟 */\n       return a->parent->lchild->data; /* 返回e的左兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->rchild&&a->parent->rchild!=a) /* T中存在结点e且e存在右兄弟 */\n       return a->parent->rchild->data; /* 返回e的右兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiPTree p,int LR,BiPTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点 */\n   /*           的原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       if(c->rchild) /* c有右孩子(p原有左孩子) */\n         c->rchild->parent=c;\n       p->lchild=c;\n       c->parent=p;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       if(c->rchild) /* c有右孩子(p原有右孩子) */\n         c->rchild->parent=c;\n       p->rchild=c;\n       c->parent=p;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiPTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  void PreOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 先序递回遍历二叉树T */\n   if(T)\n   {\n     Visit(T); /* 先访问根结点 */\n     PreOrderTraverse(T->lchild,Visit); /* 再先序遍历左子树 */\n     PreOrderTraverse(T->rchild,Visit); /* 最后先序遍历右子树 */\n   }\n }\n  void InOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 中序递回遍历二叉树T */\n   if(T)\n   {\n     InOrderTraverse(T->lchild,Visit); /* 中序遍历左子树 */\n     Visit(T); /* 再访问根结点 */\n     InOrderTraverse(T->rchild,Visit); /* 最后中序遍历右子树 */\n   }\n }\n  void PostOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 后序递回遍历二叉树T */\n   if(T)\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 后序遍历右子树 */\n     Visit(T); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 层序遍历二叉树T(利用伫列) */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q);\n     EnQueue(&q,T);\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&a);\n       Visit(a);\n       if(a->lchild!=NULL)\n         EnQueue(&q,a->lchild);\n       if(a->rchild!=NULL)\n         EnQueue(&q,a->rchild);\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('611', '我们经常希望访问树中的每一个结点并且查看它的值。有很多常见的顺序来访问所有的结点，而且每一种都有有用的性质。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('612', '遍历二叉树：L、D、R分别表示遍历左子树、访问根结点和遍历右子树，则先(根)序遍历二叉树的顺序是DLR，中(根)序遍历二叉树的顺序是LDR，后(根)序遍历二叉树的顺序是LRD。还有按层遍历二叉树。这些方法的时间复杂度都是O(n)，n为结点个数。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('613', '如果T2是由有序树T转换而来的二叉树，那么T中结点的前序就是T2中结点的前序，T中结点的后序就是T2中结点的中序。任何一棵二叉树的叶结点在先序、中序和后序遍历中的相对次序不发改变。设n,m为一棵二叉树上的两个结点，在中序遍历时，n在m前的条件是n在m的左方。前序序列和中序序列相同的二叉树为空树或任一结点均无左孩子的非空二叉树；中序序列和后序序列相同的二叉树为空树或任一结点均无右孩子的非空二叉树；前序序列和后序序列相同的二叉树为空树或仅有一个结点的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:16', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('614', '假设我们有一个包含值的value和指向两个子结点的left和right的树结点结构。我们可以写出这样的过程：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('615', 'visit(node)\n    print node.value\n    if node.left  != null then visit(node.left)\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('616', '这样会用前序打印出树中的值。在前序，每个结点在访问它的子结点之前访问。类似地，如果打印语句在最后，每个结点在访问他的子节点之后访问，树中的值会用后序来打印。在这两种情况中，左子树中的值比右子树中得值先打印。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('617', 'visit(node)\n    if node.left  != null then visit(node.left)\n    print node.value\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('618', '最后，上面的中序遍历，每个结点在访问左子树和右子树之间访问。这在遍历二叉搜索树时很常用，因为它能用递增的顺序来遍历所有的值。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('619', '为什么呢？如果n是二叉搜索树的结点，那么n的左子树的所有结点的值都比n的值要小，而且n的右子树的所有节点的值都比n的值要大。因此，如果我们顺序遍历左子树，然后访问n，然后顺序遍历右子树。我们就已经循序访问了整个树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('620', '在这个二叉树中， 前序遍历的结果：2, 7, 2, 6, 5, 11, 5, 9, 4 后序遍历的结果：2, 5, 11, 6, 7, 4, 9, 5, 2 中序遍历的结果：2, 7, 5, 6, 11, 2, 5, 4, 9', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('621', '以上的递归算法使用与树的高度成比例的栈空间。如果我们在每个结点中存储指向父结点的指针，那样可以使用反复运算算法，只使用常数空间实现所有这些遍历。然而，指向父结点的指针占用更多的空间。这只在需要指向父节点的指针或栈空间有限时才使用。例如， 这是一个中序遍历的反复运算算法：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('622', 'visit(root)\n    prev    := null\n    current := root\n    next    := null\n    \n    while current != null\n        if prev == current.parent\n            prev := current\n            next := current.left\n        if next == null or prev == current.left\n            print current.value\n            prev := current\n            next := current.right\n        if next == null or prev == current.right\n            prev := current\n            next := current.parent\n        current := next', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('623', '用二叉树表示下述表达式：a+b*(c-d)-e/f 先序遍历的序列是：-+a*b-cd/ef 中序遍历的序列是：a+b*c-d-e/f 后序遍历的序列是：abcd-*+ef/-', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('624', '在深度优先级中，我们希望从根结点访问最远的结点。和图的深度优先搜索不同的是，不需记住访问过的每一个结点，因为树中不会有环。前序，中序和后序遍历都是深度优先遍历的特例。参见深度优先搜索。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('625', '和深度优先遍历不同，广度优先遍历会先访问离根节点最近的节点。参见广度优先搜索。 二叉树的广度优先遍历又称按层次遍历。算法借助队列实现。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('626', '一般有序树和二叉树之间有一一映射关系，能进行相互转换。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('627', 'n叉树转换为二叉树的方法：二叉树中结点x的左子结点为n叉树中结点x的左子结点；二叉树中结点x的右子结点为n叉树中结点x的第一个右边的同级结点y。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('628', '例如，在左边的树中，A有6个子结点{B,C,D,E,F,G}。它能被转换成右边的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('629', '在兄弟之间加一连接； 对每个结点，除了其左孩子外，去除其与其余孩子之间的联系； 以树的根结点为轴心，将整树顺时针转45度。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('630', '树的二叉链表标记法（孩子兄弟标记法）是树和二叉树转换的媒介。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('631', '/* 树的二叉链表(孩子—兄弟)存储表示 */\n typedef struct CSNode\n {\n   TElemType data;\n   struct CSNode *firstchild,*nextsibling;\n }CSNode,*CSTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('632', '树的二叉链表存储的基本操作[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('633', '基于C/C++的算法实现显示▼  /* 树的二叉链表(孩子—兄弟)存储的基本操作(17个) */\n #define ClearTree DestroyTree /* 二者操作相同 */\n #include\"func6-2.c\" /* 包括PreOrderTraverse() */\n void InitTree(CSTree *T)\n { /* 操作结果：构造空树T */\n   *T=NULL;\n }\n  void DestroyTree(CSTree *T)\n { /* 初始条件：树T存在。操作结果：销毁树T */\n   if(*T)\n   {\n     if((*T)->firstchild) /* T有长子 */\n       DestroyTree(&(*T)->firstchild); /* 销毁T的长子为根结点的子树 */\n     if((*T)->nextsibling) /* T有下一个兄弟 */\n       DestroyTree(&(*T)->nextsibling); /* 销毁T的下一个兄弟为根结点的子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL;\n   }\n }\n  typedef CSTree QElemType; /* 定义伫列元素类型 */\n #include\"c3-2.h\" /* 定义LinkQueue类型(链伫列) */\n #include\"bo3-2.c\" /* LinkQueue类型的基本操作 */\n void CreateTree(CSTree *T)\n { /* 构造树T */\n   char c[20]; /* 临时存放孩子结点(设不超过20个)的值 */\n   CSTree p,p1;\n   LinkQueue q;\n   int i,l;\n   InitQueue(&q);\n   printf(\"请输入根结点(字元型,空格为空): \");\n   scanf(\"%c%*c\",&c[0]);\n   if(c[0]!=Nil) /* 非空树 */\n   {\n     *T=(CSTree)malloc(sizeof(CSNode)); /* 建立根结点 */\n     (*T)->data=c[0];\n     (*T)->nextsibling=NULL;\n     EnQueue(&q,*T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       printf(\"请按长幼顺序输入结点%c的所有孩子: \",p->data);\n       gets(c);\n       l=strlen(c);\n       if(l>0) /* 有孩子 */\n       {\n         p1=p->firstchild=(CSTree)malloc(sizeof(CSNode)); /* 建立长子结点 */\n         p1->data=c[0];\n         for(i=1;i<l;i++)\n         {\n           p1->nextsibling=(CSTree)malloc(sizeof(CSNode)); /* 建立下一个兄弟结点 */\n           EnQueue(&q,p1); /* 入队上一个结点 */\n           p1=p1->nextsibling;\n           p1->data=c[i];\n         }\n         p1->nextsibling=NULL;\n         EnQueue(&q,p1); /* 入队最后一个结点 */\n       }\n       else\n         p->firstchild=NULL; /* 长子指针为空 */\n     }\n   }\n   else\n     *T=NULL; /* 空树 */\n }\n  Status TreeEmpty(CSTree T)\n { /* 初始条件：树T存在。操作结果：若T为空树，则返回TURE，否则返回FALSE */\n   if(T) /* T不空 */\n     return FALSE;\n   else\n     return TRUE;\n }\n  int TreeDepth(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的深度 */\n   CSTree p;\n   int depth,max=0;\n   if(!T) /* 树空 */\n     return 0;\n   if(!T->firstchild) /* 树无长子 */\n     return 1;\n   for(p=T->firstchild;p;p=p->nextsibling)\n   { /* 求子树深度的最大值 */\n     depth=TreeDepth(p);\n     if(depth>max)\n       max=depth;\n   }\n   return max+1; /* 树的深度=子树深度最大值+1 */\n }\n  TElemType Value(CSTree p)\n { /* 返回p所指结点的值 */\n   return p->data;\n }\n  TElemType Root(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的根 */\n   if(T)\n     return Value(T);\n   else\n     return Nil;\n }\n  CSTree Point(CSTree T,TElemType s)\n { /* 返回二叉链表(孩子—兄弟)树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队,伫列元素赋给a */\n       if(a->data==s)\n	 return a;\n       if(a->firstchild) /* 有长子 */\n         EnQueue(&q,a->firstchild); /* 入队长子 */\n       if(a->nextsibling) /* 有下一个兄弟 */\n         EnQueue(&q,a->nextsibling); /* 入队下一个兄弟 */\n     }\n   }\n   return NULL;\n }\n  Status Assign(CSTree *T,TElemType cur_e,TElemType value)\n { /* 初始条件：树T存在，cur_e是树T中结点的值。操作结果：改cur_e为value */\n   CSTree p;\n   if(*T) /* 非空树 */\n   {\n     p=Point(*T,cur_e); /* p为cur_e的指针 */\n     if(p) /* 找到cur_e */\n     {\n       p->data=value; /* 赋新值 */\n       return OK;\n     }\n   }\n   return ERROR; /* 树空或没找到 */\n }\n  TElemType Parent(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非根结点，则返回它的双亲，否则函数值为＂空＂*/\n   CSTree p,t;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T) /* 树非空 */\n   {\n     if(Value(T)==cur_e) /* 根结点值为cur_e */\n       return Nil;\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&p);\n       if(p->firstchild) /* p有长子 */\n       {\n         if(p->firstchild->data==cur_e) /* 长子为cur_e */\n           return Value(p); /* 返回双亲 */\n         t=p; /* 双亲指针赋给t */\n         p=p->firstchild; /* p指向长子 */\n         EnQueue(&q,p); /* 入队长子 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling; /* p指向下一个兄弟 */\n	 if(Value(p)==cur_e) /* 下一个兄弟为cur_e */\n	 return Value(t); /* 返回双亲 */\n	 EnQueue(&q,p); /* 入队下一个兄弟 */\n	 }\n       }\n     }\n   }\n   return Nil; /* 树空或没找到cur_e */\n }\n  TElemType LeftChild(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非叶子结点，则返回它的最左孩子，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->firstchild) /* 找到结点cur_e且结点cur_e有长子 */\n     return f->firstchild->data;\n   else\n     return Nil;\n }\n  TElemType RightSibling(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e有右兄弟，则返回它的右兄弟，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->nextsibling) /* 找到结点cur_e且结点cur_e有右兄弟 */\n     return f->nextsibling->data;\n   else\n     return Nil; /* 树空 */\n }\n  Status InsertChild(CSTree *T,CSTree p,int i,CSTree c)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度+1，非空树c与T不相交 */\n   /* 操作结果：插入c为T中p结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 插入c为p的长子 */\n     {\n       c->nextsibling=p->firstchild; /* p的原长子现是c的下一个兄弟(c本无兄弟) */\n       p->firstchild=c;\n     }\n     else /* 找插入点 */\n     {\n       p=p->firstchild; /* 指向p的长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到插入位置 */\n       {\n         c->nextsibling=p->nextsibling;\n         p->nextsibling=c;\n       }\n       else /* p原有孩子数小于i-1 */\n         return ERROR;\n     }\n     return OK;\n   }\n   else /* T空 */\n     return ERROR;\n }\n  Status DeleteChild(CSTree *T,CSTree p,int i)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度 */\n   /* 操作结果：删除T中p所指结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   CSTree b;\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 删除长子 */\n     {\n       b=p->firstchild;\n       p->firstchild=b->nextsibling; /* p的原次子现是长子 */\n       b->nextsibling=NULL;\n       DestroyTree(&b);\n     }\n     else /* 删除非长子 */\n     {\n       p=p->firstchild; /* p指向长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到第i棵子树 */\n       {\n         b=p->nextsibling;\n         p->nextsibling=b->nextsibling;\n         b->nextsibling=NULL;\n         DestroyTree(&b);\n       }\n       else /* p原有孩子数小于i */\n         return ERROR;\n     }\n     return OK;\n   }\n   else\n     return ERROR;\n }\n  void PostOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 后根遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   if(T)\n   {\n     if(T->firstchild) /* 有长子 */\n     {\n       PostOrderTraverse(T->firstchild,Visit); /* 后根遍历长子子树 */\n       p=T->firstchild->nextsibling; /* p指向长子的下一个兄弟 */\n       while(p)\n       {\n         PostOrderTraverse(p,Visit); /* 后根遍历下一个兄弟子树 */\n         p=p->nextsibling; /* p指向再下一个兄弟 */\n       }\n     }\n     Visit(Value(T)); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 层序遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T)\n   {\n     Visit(Value(T)); /* 先访问根结点 */\n     EnQueue(&q,T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       if(p->firstchild) /* 有长子 */\n       {\n         p=p->firstchild;\n         Visit(Value(p)); /* 访问长子结点 */\n         EnQueue(&q,p); /* 入队长子结点的指针 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling;\n           Visit(Value(p)); /* 访问下一个兄弟 */\n           EnQueue(&q,p); /* 入队兄弟结点的指针 */\n         }\n       }\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('634', '线索二叉树 (threaded binary tree)[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('635', '线索二叉树(保留遍历时结点在任一序列的前驱和后继的信息)：若结点有左子树，则其lchild域指示其左孩子，否则令lchild域指示其前驱；若结点有右子树，则其rchild域指示其右孩子，否则令rchild指示其后继。还需在结点结构中增加两个标志域LTag和RTag。LTag=0时，lchild域指示结点的左孩子，LTag=1时，lchild域指示结点的前驱；RTag=0时，rchild域指示结点的右孩子，RTag=1时，rchild域指示结点的后继。以这种结点结构构成的二叉链表作为二叉树的存储结构，叫做线索链表，其中指向结点前驱和后继的指针叫做线索，加上线索的二叉树称为线索二叉树。对二叉树以某种次序遍历使其变为线索二叉树的过程叫做线索化。若对二叉树进行中序遍历，则所得的线索二叉树称为中序线索二叉树，线索链表称为为中序线索链表。线索二叉树是一种物理结构。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('636', '在中序线索树找结点后继的规律是：若其右标志为1，则右链为线索，指示其后继，否则遍历其右子树时访问的第一个结点（右子树最左下的结点）为其后继；找结点前驱的规律是：若其左标志为1，则左链为线索，指示其前驱，否则遍历左子树时最后访问的一个结点（左子树中最右下的结点）为其前驱。 在后序线索树中找到结点的后继分三种情况：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('637', '若结点是二叉树的根，则其后继为空； 若结点是其双亲的右孩子，或是其双亲的左孩子且其双亲没有右子树，则其后继即为双亲结点； 若结点是其双亲的左孩子，且其双亲有右子树，则其后继为双亲右子树上按后序遍历列出的第一个结点。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('638', '二叉树的二叉线索存储表示：在线索链表上添加一个头结点，并令其lchild域的指针指向二叉树的根结点，其rchild域的指针指向中序遍历时访问的最后一个结点。令二叉树中序序列中的第一个结点的lchild域指针和最后一个结点的rchild域的指针均指向头结点，这样就创建了一个双向线索链表。二叉树常采用二叉链表方式存储。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('639', '/* 二叉树的二叉线索存储表示 */\n typedef enum{Link,Thread}PointerTag; /* Link(0)：指针，Thread(1)：线索 */\n typedef struct BiThrNode\n {\n   TElemType data;\n   struct BiThrNode *lchild,*rchild; /* 左右孩子指针 */\n   PointerTag LTag,RTag; /* 左右标志 */\n }BiThrNode,*BiThrTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('640', '基于C/C++的实现算法显示▼  /* 二叉树的三叉链表存储的基本操作(21个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n void InitBiTree(BiPTree *T)\n { /* 操作结果：构造空二叉树T */\n   *T=NULL;\n }\n  void DestroyBiTree(BiPTree *T)\n { /* 初始条件：二叉树T存在。操作结果：销毁二叉树T */\n   if(*T) /* 非空树 */\n   {\n     if((*T)->lchild) /* 有左孩子 */\n       DestroyBiTree(&(*T)->lchild); /* 销毁左孩子子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       DestroyBiTree(&(*T)->rchild); /* 销毁右孩子子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL; /* 空指针赋0 */\n   }\n }\n  void CreateBiTree(BiPTree *T)\n { /* 按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造三叉链表表示的二叉树T */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiPTree)malloc(sizeof(BiTPNode)); /* 动态生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch; /* 给根结点赋值 */\n     (*T)->parent=NULL; /* 根结点无双亲 */\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     if((*T)->lchild) /* 有左孩子 */\n       (*T)->lchild->parent=*T; /* 给左孩子的双亲域赋值 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       (*T)->rchild->parent=*T; /* 给右孩子的双亲域赋值 */\n   }\n }\n  Status BiTreeEmpty(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(!T)\n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(T)\n     return T->data;\n   else\n     return Nil;\n }\n  TElemType Value(BiPTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiPTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiPTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n  BiPTree Point(BiPTree T,TElemType e)\n { /* 返回二叉树T中指向元素值为e的结点的指标。加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==e)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType Parent(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T) /* T中存在结点e且e是非根结点 */\n       return a->parent->data; /* 返回e的双亲的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->lchild&&a->parent->lchild!=a) /* T中存在结点e且e存在左兄弟 */\n       return a->parent->lchild->data; /* 返回e的左兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->rchild&&a->parent->rchild!=a) /* T中存在结点e且e存在右兄弟 */\n       return a->parent->rchild->data; /* 返回e的右兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiPTree p,int LR,BiPTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点 */\n   /*           的原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       if(c->rchild) /* c有右孩子(p原有左孩子) */\n         c->rchild->parent=c;\n       p->lchild=c;\n       c->parent=p;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       if(c->rchild) /* c有右孩子(p原有右孩子) */\n         c->rchild->parent=c;\n       p->rchild=c;\n       c->parent=p;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiPTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  void PreOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 先序递回遍历二叉树T */\n   if(T)\n   {\n     Visit(T); /* 先访问根结点 */\n     PreOrderTraverse(T->lchild,Visit); /* 再先序遍历左子树 */\n     PreOrderTraverse(T->rchild,Visit); /* 最后先序遍历右子树 */\n   }\n }\n  void InOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 中序递回遍历二叉树T */\n   if(T)\n   {\n     InOrderTraverse(T->lchild,Visit); /* 中序遍历左子树 */\n     Visit(T); /* 再访问根结点 */\n     InOrderTraverse(T->rchild,Visit); /* 最后中序遍历右子树 */\n   }\n }\n  void PostOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 后序递回遍历二叉树T */\n   if(T)\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 后序遍历右子树 */\n     Visit(T); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 层序遍历二叉树T(利用伫列) */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q);\n     EnQueue(&q,T);\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&a);\n       Visit(a);\n       if(a->lchild!=NULL)\n         EnQueue(&q,a->lchild);\n       if(a->rchild!=NULL)\n         EnQueue(&q,a->rchild);\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('641', '我们经常希望访问树中的每一个结点并且查看它的值。有很多常见的顺序来访问所有的结点，而且每一种都有有用的性质。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('642', '遍历二叉树：L、D、R分别表示遍历左子树、访问根结点和遍历右子树，则先(根)序遍历二叉树的顺序是DLR，中(根)序遍历二叉树的顺序是LDR，后(根)序遍历二叉树的顺序是LRD。还有按层遍历二叉树。这些方法的时间复杂度都是O(n)，n为结点个数。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('643', '如果T2是由有序树T转换而来的二叉树，那么T中结点的前序就是T2中结点的前序，T中结点的后序就是T2中结点的中序。任何一棵二叉树的叶结点在先序、中序和后序遍历中的相对次序不发改变。设n,m为一棵二叉树上的两个结点，在中序遍历时，n在m前的条件是n在m的左方。前序序列和中序序列相同的二叉树为空树或任一结点均无左孩子的非空二叉树；中序序列和后序序列相同的二叉树为空树或任一结点均无右孩子的非空二叉树；前序序列和后序序列相同的二叉树为空树或仅有一个结点的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:17', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('644', '假设我们有一个包含值的value和指向两个子结点的left和right的树结点结构。我们可以写出这样的过程：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('645', 'visit(node)\n    print node.value\n    if node.left  != null then visit(node.left)\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('646', '这样会用前序打印出树中的值。在前序，每个结点在访问它的子结点之前访问。类似地，如果打印语句在最后，每个结点在访问他的子节点之后访问，树中的值会用后序来打印。在这两种情况中，左子树中的值比右子树中得值先打印。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('647', 'visit(node)\n    if node.left  != null then visit(node.left)\n    print node.value\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('648', '最后，上面的中序遍历，每个结点在访问左子树和右子树之间访问。这在遍历二叉搜索树时很常用，因为它能用递增的顺序来遍历所有的值。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('649', '为什么呢？如果n是二叉搜索树的结点，那么n的左子树的所有结点的值都比n的值要小，而且n的右子树的所有节点的值都比n的值要大。因此，如果我们顺序遍历左子树，然后访问n，然后顺序遍历右子树。我们就已经循序访问了整个树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('650', '在这个二叉树中， 前序遍历的结果：2, 7, 2, 6, 5, 11, 5, 9, 4 后序遍历的结果：2, 5, 11, 6, 7, 4, 9, 5, 2 中序遍历的结果：2, 7, 5, 6, 11, 2, 5, 4, 9', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('651', '以上的递归算法使用与树的高度成比例的栈空间。如果我们在每个结点中存储指向父结点的指针，那样可以使用反复运算算法，只使用常数空间实现所有这些遍历。然而，指向父结点的指针占用更多的空间。这只在需要指向父节点的指针或栈空间有限时才使用。例如， 这是一个中序遍历的反复运算算法：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('652', 'visit(root)\n    prev    := null\n    current := root\n    next    := null\n    \n    while current != null\n        if prev == current.parent\n            prev := current\n            next := current.left\n        if next == null or prev == current.left\n            print current.value\n            prev := current\n            next := current.right\n        if next == null or prev == current.right\n            prev := current\n            next := current.parent\n        current := next', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('653', '用二叉树表示下述表达式：a+b*(c-d)-e/f 先序遍历的序列是：-+a*b-cd/ef 中序遍历的序列是：a+b*c-d-e/f 后序遍历的序列是：abcd-*+ef/-', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('654', '在深度优先级中，我们希望从根结点访问最远的结点。和图的深度优先搜索不同的是，不需记住访问过的每一个结点，因为树中不会有环。前序，中序和后序遍历都是深度优先遍历的特例。参见深度优先搜索。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('655', '和深度优先遍历不同，广度优先遍历会先访问离根节点最近的节点。参见广度优先搜索。 二叉树的广度优先遍历又称按层次遍历。算法借助队列实现。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('656', '一般有序树和二叉树之间有一一映射关系，能进行相互转换。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('657', 'n叉树转换为二叉树的方法：二叉树中结点x的左子结点为n叉树中结点x的左子结点；二叉树中结点x的右子结点为n叉树中结点x的第一个右边的同级结点y。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('658', '例如，在左边的树中，A有6个子结点{B,C,D,E,F,G}。它能被转换成右边的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('659', '在兄弟之间加一连接； 对每个结点，除了其左孩子外，去除其与其余孩子之间的联系； 以树的根结点为轴心，将整树顺时针转45度。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('660', '树的二叉链表标记法（孩子兄弟标记法）是树和二叉树转换的媒介。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('661', '/* 树的二叉链表(孩子—兄弟)存储表示 */\n typedef struct CSNode\n {\n   TElemType data;\n   struct CSNode *firstchild,*nextsibling;\n }CSNode,*CSTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('662', '树的二叉链表存储的基本操作[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('663', '基于C/C++的算法实现显示▼  /* 树的二叉链表(孩子—兄弟)存储的基本操作(17个) */\n #define ClearTree DestroyTree /* 二者操作相同 */\n #include\"func6-2.c\" /* 包括PreOrderTraverse() */\n void InitTree(CSTree *T)\n { /* 操作结果：构造空树T */\n   *T=NULL;\n }\n  void DestroyTree(CSTree *T)\n { /* 初始条件：树T存在。操作结果：销毁树T */\n   if(*T)\n   {\n     if((*T)->firstchild) /* T有长子 */\n       DestroyTree(&(*T)->firstchild); /* 销毁T的长子为根结点的子树 */\n     if((*T)->nextsibling) /* T有下一个兄弟 */\n       DestroyTree(&(*T)->nextsibling); /* 销毁T的下一个兄弟为根结点的子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL;\n   }\n }\n  typedef CSTree QElemType; /* 定义伫列元素类型 */\n #include\"c3-2.h\" /* 定义LinkQueue类型(链伫列) */\n #include\"bo3-2.c\" /* LinkQueue类型的基本操作 */\n void CreateTree(CSTree *T)\n { /* 构造树T */\n   char c[20]; /* 临时存放孩子结点(设不超过20个)的值 */\n   CSTree p,p1;\n   LinkQueue q;\n   int i,l;\n   InitQueue(&q);\n   printf(\"请输入根结点(字元型,空格为空): \");\n   scanf(\"%c%*c\",&c[0]);\n   if(c[0]!=Nil) /* 非空树 */\n   {\n     *T=(CSTree)malloc(sizeof(CSNode)); /* 建立根结点 */\n     (*T)->data=c[0];\n     (*T)->nextsibling=NULL;\n     EnQueue(&q,*T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       printf(\"请按长幼顺序输入结点%c的所有孩子: \",p->data);\n       gets(c);\n       l=strlen(c);\n       if(l>0) /* 有孩子 */\n       {\n         p1=p->firstchild=(CSTree)malloc(sizeof(CSNode)); /* 建立长子结点 */\n         p1->data=c[0];\n         for(i=1;i<l;i++)\n         {\n           p1->nextsibling=(CSTree)malloc(sizeof(CSNode)); /* 建立下一个兄弟结点 */\n           EnQueue(&q,p1); /* 入队上一个结点 */\n           p1=p1->nextsibling;\n           p1->data=c[i];\n         }\n         p1->nextsibling=NULL;\n         EnQueue(&q,p1); /* 入队最后一个结点 */\n       }\n       else\n         p->firstchild=NULL; /* 长子指针为空 */\n     }\n   }\n   else\n     *T=NULL; /* 空树 */\n }\n  Status TreeEmpty(CSTree T)\n { /* 初始条件：树T存在。操作结果：若T为空树，则返回TURE，否则返回FALSE */\n   if(T) /* T不空 */\n     return FALSE;\n   else\n     return TRUE;\n }\n  int TreeDepth(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的深度 */\n   CSTree p;\n   int depth,max=0;\n   if(!T) /* 树空 */\n     return 0;\n   if(!T->firstchild) /* 树无长子 */\n     return 1;\n   for(p=T->firstchild;p;p=p->nextsibling)\n   { /* 求子树深度的最大值 */\n     depth=TreeDepth(p);\n     if(depth>max)\n       max=depth;\n   }\n   return max+1; /* 树的深度=子树深度最大值+1 */\n }\n  TElemType Value(CSTree p)\n { /* 返回p所指结点的值 */\n   return p->data;\n }\n  TElemType Root(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的根 */\n   if(T)\n     return Value(T);\n   else\n     return Nil;\n }\n  CSTree Point(CSTree T,TElemType s)\n { /* 返回二叉链表(孩子—兄弟)树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队,伫列元素赋给a */\n       if(a->data==s)\n	 return a;\n       if(a->firstchild) /* 有长子 */\n         EnQueue(&q,a->firstchild); /* 入队长子 */\n       if(a->nextsibling) /* 有下一个兄弟 */\n         EnQueue(&q,a->nextsibling); /* 入队下一个兄弟 */\n     }\n   }\n   return NULL;\n }\n  Status Assign(CSTree *T,TElemType cur_e,TElemType value)\n { /* 初始条件：树T存在，cur_e是树T中结点的值。操作结果：改cur_e为value */\n   CSTree p;\n   if(*T) /* 非空树 */\n   {\n     p=Point(*T,cur_e); /* p为cur_e的指针 */\n     if(p) /* 找到cur_e */\n     {\n       p->data=value; /* 赋新值 */\n       return OK;\n     }\n   }\n   return ERROR; /* 树空或没找到 */\n }\n  TElemType Parent(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非根结点，则返回它的双亲，否则函数值为＂空＂*/\n   CSTree p,t;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T) /* 树非空 */\n   {\n     if(Value(T)==cur_e) /* 根结点值为cur_e */\n       return Nil;\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&p);\n       if(p->firstchild) /* p有长子 */\n       {\n         if(p->firstchild->data==cur_e) /* 长子为cur_e */\n           return Value(p); /* 返回双亲 */\n         t=p; /* 双亲指针赋给t */\n         p=p->firstchild; /* p指向长子 */\n         EnQueue(&q,p); /* 入队长子 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling; /* p指向下一个兄弟 */\n	 if(Value(p)==cur_e) /* 下一个兄弟为cur_e */\n	 return Value(t); /* 返回双亲 */\n	 EnQueue(&q,p); /* 入队下一个兄弟 */\n	 }\n       }\n     }\n   }\n   return Nil; /* 树空或没找到cur_e */\n }\n  TElemType LeftChild(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非叶子结点，则返回它的最左孩子，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->firstchild) /* 找到结点cur_e且结点cur_e有长子 */\n     return f->firstchild->data;\n   else\n     return Nil;\n }\n  TElemType RightSibling(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e有右兄弟，则返回它的右兄弟，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->nextsibling) /* 找到结点cur_e且结点cur_e有右兄弟 */\n     return f->nextsibling->data;\n   else\n     return Nil; /* 树空 */\n }\n  Status InsertChild(CSTree *T,CSTree p,int i,CSTree c)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度+1，非空树c与T不相交 */\n   /* 操作结果：插入c为T中p结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 插入c为p的长子 */\n     {\n       c->nextsibling=p->firstchild; /* p的原长子现是c的下一个兄弟(c本无兄弟) */\n       p->firstchild=c;\n     }\n     else /* 找插入点 */\n     {\n       p=p->firstchild; /* 指向p的长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到插入位置 */\n       {\n         c->nextsibling=p->nextsibling;\n         p->nextsibling=c;\n       }\n       else /* p原有孩子数小于i-1 */\n         return ERROR;\n     }\n     return OK;\n   }\n   else /* T空 */\n     return ERROR;\n }\n  Status DeleteChild(CSTree *T,CSTree p,int i)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度 */\n   /* 操作结果：删除T中p所指结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   CSTree b;\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 删除长子 */\n     {\n       b=p->firstchild;\n       p->firstchild=b->nextsibling; /* p的原次子现是长子 */\n       b->nextsibling=NULL;\n       DestroyTree(&b);\n     }\n     else /* 删除非长子 */\n     {\n       p=p->firstchild; /* p指向长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到第i棵子树 */\n       {\n         b=p->nextsibling;\n         p->nextsibling=b->nextsibling;\n         b->nextsibling=NULL;\n         DestroyTree(&b);\n       }\n       else /* p原有孩子数小于i */\n         return ERROR;\n     }\n     return OK;\n   }\n   else\n     return ERROR;\n }\n  void PostOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 后根遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   if(T)\n   {\n     if(T->firstchild) /* 有长子 */\n     {\n       PostOrderTraverse(T->firstchild,Visit); /* 后根遍历长子子树 */\n       p=T->firstchild->nextsibling; /* p指向长子的下一个兄弟 */\n       while(p)\n       {\n         PostOrderTraverse(p,Visit); /* 后根遍历下一个兄弟子树 */\n         p=p->nextsibling; /* p指向再下一个兄弟 */\n       }\n     }\n     Visit(Value(T)); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 层序遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T)\n   {\n     Visit(Value(T)); /* 先访问根结点 */\n     EnQueue(&q,T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       if(p->firstchild) /* 有长子 */\n       {\n         p=p->firstchild;\n         Visit(Value(p)); /* 访问长子结点 */\n         EnQueue(&q,p); /* 入队长子结点的指针 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling;\n           Visit(Value(p)); /* 访问下一个兄弟 */\n           EnQueue(&q,p); /* 入队兄弟结点的指针 */\n         }\n       }\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('664', '线索二叉树 (threaded binary tree)[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:18', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('665', '线索二叉树(保留遍历时结点在任一序列的前驱和后继的信息)：若结点有左子树，则其lchild域指示其左孩子，否则令lchild域指示其前驱；若结点有右子树，则其rchild域指示其右孩子，否则令rchild指示其后继。还需在结点结构中增加两个标志域LTag和RTag。LTag=0时，lchild域指示结点的左孩子，LTag=1时，lchild域指示结点的前驱；RTag=0时，rchild域指示结点的右孩子，RTag=1时，rchild域指示结点的后继。以这种结点结构构成的二叉链表作为二叉树的存储结构，叫做线索链表，其中指向结点前驱和后继的指针叫做线索，加上线索的二叉树称为线索二叉树。对二叉树以某种次序遍历使其变为线索二叉树的过程叫做线索化。若对二叉树进行中序遍历，则所得的线索二叉树称为中序线索二叉树，线索链表称为为中序线索链表。线索二叉树是一种物理结构。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('666', '在中序线索树找结点后继的规律是：若其右标志为1，则右链为线索，指示其后继，否则遍历其右子树时访问的第一个结点（右子树最左下的结点）为其后继；找结点前驱的规律是：若其左标志为1，则左链为线索，指示其前驱，否则遍历左子树时最后访问的一个结点（左子树中最右下的结点）为其前驱。 在后序线索树中找到结点的后继分三种情况：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('667', '若结点是二叉树的根，则其后继为空； 若结点是其双亲的右孩子，或是其双亲的左孩子且其双亲没有右子树，则其后继即为双亲结点； 若结点是其双亲的左孩子，且其双亲有右子树，则其后继为双亲右子树上按后序遍历列出的第一个结点。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('668', '二叉树的二叉线索存储表示：在线索链表上添加一个头结点，并令其lchild域的指针指向二叉树的根结点，其rchild域的指针指向中序遍历时访问的最后一个结点。令二叉树中序序列中的第一个结点的lchild域指针和最后一个结点的rchild域的指针均指向头结点，这样就创建了一个双向线索链表。二叉树常采用二叉链表方式存储。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('669', '/* 二叉树的二叉线索存储表示 */\n typedef enum{Link,Thread}PointerTag; /* Link(0)：指针，Thread(1)：线索 */\n typedef struct BiThrNode\n {\n   TElemType data;\n   struct BiThrNode *lchild,*rchild; /* 左右孩子指针 */\n   PointerTag LTag,RTag; /* 左右标志 */\n }BiThrNode,*BiThrTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('670', '基于C/C++的实现算法显示▼  /* 二叉树的二叉链表存储的基本操作(22个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n #include\"func6-3.c\"\n /* 包括InitBiTree()、DestroyBiTree()、PreOrderTraverse()和InOrderTraverse()4函数 */\n  void CreateBiTree(BiTree *T)\n { /* 演算法6.4：按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造二叉链表表示的二叉树T。变数Nil表示空(子)树。有改动 */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiTree)malloc(sizeof(BiTNode)); /* 生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch;\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n   }\n }\n  Status BiTreeEmpty(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(T==NULL)  /*如果T=NULL,这样写便于理解，当然也可以写成if（!T）*/; \n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(BiTreeEmpty(T))\n     return Nil;\n   else\n     return T->data;\n }\n  TElemType Value(BiTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n TElemType Parent(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 树根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->lchild&&a->lchild->data==e||a->rchild&&a->rchild->data==e)\n       /* 找到e(是其左或右孩子) */\n         return a->data; /* 返回e的双亲的值 */\n       else /* 没找到e，则入队其左右孩子指针(如果非空) */\n       {\n         if(a->lchild)\n           EnQueue(&q,a->lchild);\n         if(a->rchild)\n           EnQueue(&q,a->rchild);\n       }\n     }\n   }\n   return Nil; /* 树空或没找到e */\n }\n  BiTree Point(BiTree T,TElemType s)\n { /* 返回二叉树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==s)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType LeftChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->rchild->data==e) /* p存在左右孩子且右孩子是e */\n         return p->lchild->data; /* 返回p的左孩子(e的左兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->lchild->data==e) /* p存在左右孩子且左孩子是e */\n         return p->rchild->data; /* 返回p的右孩子(e的右兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiTree p,int LR,BiTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点的 */\n   /*           原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       p->lchild=c;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       p->rchild=c;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  typedef BiTree SElemType; /* 设栈元素为二叉树的指针类型 */\n #include\"c3-1.h\" /* 顺序栈 */\n #include\"bo3-1.c\" /* 顺序栈的基本操作 */\n void InOrderTraverse1(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.3，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   InitStack(&S);\n   while(T||!StackEmpty(S))\n   {\n     if(T)\n     { /* 根指针进栈，遍历左子树 */\n       Push(&S,T);\n       T=T->lchild;\n     }\n     else\n     { /* 根指针退栈，访问根结点，遍历右子树 */\n       Pop(&S,&T);\n       Visit(T->data);\n       T=T->rchild;\n     }\n   }\n   printf(\"\\n\");\n }\n  void InOrderTraverse2(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.2，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   BiTree p;\n   InitStack(&S);\n   Push(&S,T); /* 根指针进栈 */\n   while(!StackEmpty(S))\n   {\n     while(GetTop(S,&p)&&p)\n       Push(&S,p->lchild); /* 向左走到尽头 */\n     Pop(&S,&p); /* 空指针退栈 */\n     if(!StackEmpty(S))\n     { /* 访问结点，向右一步 */\n       Pop(&S,&p);\n       Visit(p->data);\n       Push(&S,p->rchild);\n     }\n   }\n   printf(\"\\n\");\n }\n  void PostOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序递回遍历T，对每个结点调用函数Visit一次且仅一次 */\n   if(T) /* T不空 */\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 先后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 再后序遍历右子树 */\n     Visit(T->data); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：层序递回遍历T(利用伫列)，对每个结点调用函数Visit一次且仅一次 */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q); /* 初始化伫列q */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 伫列不空 */\n     {\n       DeQueue(&q,&a); /* 出队元素(指标),赋给a */\n       Visit(a->data); /* 访问a所指结点 */\n       if(a->lchild!=NULL) /* a有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队a的左孩子 */\n       if(a->rchild!=NULL) /* a有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队a的右孩子 */\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储表示', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('671', '改进于二叉链表，增加父节点的指引，能更好地实现节点间的访问，不过算法相对复杂。 当二叉树用三叉链表表示时，有N个结点，就会有N+2个空指针。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储表示', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('672', '/* 二叉树的三叉链表存储表示 */\n typedef struct BiTPNode\n {\n   TElemType data;\n   struct BiTPNode *parent,*lchild,*rchild; /* 父、左右孩子指针 */\n }BiTPNode,*BiPTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储表示', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('673', '基于C/C++的实现算法显示▼  /* 二叉树的三叉链表存储的基本操作(21个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n void InitBiTree(BiPTree *T)\n { /* 操作结果：构造空二叉树T */\n   *T=NULL;\n }\n  void DestroyBiTree(BiPTree *T)\n { /* 初始条件：二叉树T存在。操作结果：销毁二叉树T */\n   if(*T) /* 非空树 */\n   {\n     if((*T)->lchild) /* 有左孩子 */\n       DestroyBiTree(&(*T)->lchild); /* 销毁左孩子子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       DestroyBiTree(&(*T)->rchild); /* 销毁右孩子子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL; /* 空指针赋0 */\n   }\n }\n  void CreateBiTree(BiPTree *T)\n { /* 按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造三叉链表表示的二叉树T */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiPTree)malloc(sizeof(BiTPNode)); /* 动态生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch; /* 给根结点赋值 */\n     (*T)->parent=NULL; /* 根结点无双亲 */\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     if((*T)->lchild) /* 有左孩子 */\n       (*T)->lchild->parent=*T; /* 给左孩子的双亲域赋值 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       (*T)->rchild->parent=*T; /* 给右孩子的双亲域赋值 */\n   }\n }\n  Status BiTreeEmpty(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(!T)\n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(T)\n     return T->data;\n   else\n     return Nil;\n }\n  TElemType Value(BiPTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiPTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiPTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n  BiPTree Point(BiPTree T,TElemType e)\n { /* 返回二叉树T中指向元素值为e的结点的指标。加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==e)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType Parent(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T) /* T中存在结点e且e是非根结点 */\n       return a->parent->data; /* 返回e的双亲的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->lchild&&a->parent->lchild!=a) /* T中存在结点e且e存在左兄弟 */\n       return a->parent->lchild->data; /* 返回e的左兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->rchild&&a->parent->rchild!=a) /* T中存在结点e且e存在右兄弟 */\n       return a->parent->rchild->data; /* 返回e的右兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiPTree p,int LR,BiPTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点 */\n   /*           的原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       if(c->rchild) /* c有右孩子(p原有左孩子) */\n         c->rchild->parent=c;\n       p->lchild=c;\n       c->parent=p;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       if(c->rchild) /* c有右孩子(p原有右孩子) */\n         c->rchild->parent=c;\n       p->rchild=c;\n       c->parent=p;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiPTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  void PreOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 先序递回遍历二叉树T */\n   if(T)\n   {\n     Visit(T); /* 先访问根结点 */\n     PreOrderTraverse(T->lchild,Visit); /* 再先序遍历左子树 */\n     PreOrderTraverse(T->rchild,Visit); /* 最后先序遍历右子树 */\n   }\n }\n  void InOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 中序递回遍历二叉树T */\n   if(T)\n   {\n     InOrderTraverse(T->lchild,Visit); /* 中序遍历左子树 */\n     Visit(T); /* 再访问根结点 */\n     InOrderTraverse(T->rchild,Visit); /* 最后中序遍历右子树 */\n   }\n }\n  void PostOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 后序递回遍历二叉树T */\n   if(T)\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 后序遍历右子树 */\n     Visit(T); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 层序遍历二叉树T(利用伫列) */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q);\n     EnQueue(&q,T);\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&a);\n       Visit(a);\n       if(a->lchild!=NULL)\n         EnQueue(&q,a->lchild);\n       if(a->rchild!=NULL)\n         EnQueue(&q,a->rchild);\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('674', '我们经常希望访问树中的每一个结点并且查看它的值。有很多常见的顺序来访问所有的结点，而且每一种都有有用的性质。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('675', '遍历二叉树：L、D、R分别表示遍历左子树、访问根结点和遍历右子树，则先(根)序遍历二叉树的顺序是DLR，中(根)序遍历二叉树的顺序是LDR，后(根)序遍历二叉树的顺序是LRD。还有按层遍历二叉树。这些方法的时间复杂度都是O(n)，n为结点个数。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('676', '如果T2是由有序树T转换而来的二叉树，那么T中结点的前序就是T2中结点的前序，T中结点的后序就是T2中结点的中序。任何一棵二叉树的叶结点在先序、中序和后序遍历中的相对次序不发改变。设n,m为一棵二叉树上的两个结点，在中序遍历时，n在m前的条件是n在m的左方。前序序列和中序序列相同的二叉树为空树或任一结点均无左孩子的非空二叉树；中序序列和后序序列相同的二叉树为空树或任一结点均无右孩子的非空二叉树；前序序列和后序序列相同的二叉树为空树或仅有一个结点的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('677', '假设我们有一个包含值的value和指向两个子结点的left和right的树结点结构。我们可以写出这样的过程：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('678', 'visit(node)\n    print node.value\n    if node.left  != null then visit(node.left)\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('679', '这样会用前序打印出树中的值。在前序，每个结点在访问它的子结点之前访问。类似地，如果打印语句在最后，每个结点在访问他的子节点之后访问，树中的值会用后序来打印。在这两种情况中，左子树中的值比右子树中得值先打印。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('680', 'visit(node)\n    if node.left  != null then visit(node.left)\n    print node.value\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('681', '最后，上面的中序遍历，每个结点在访问左子树和右子树之间访问。这在遍历二叉搜索树时很常用，因为它能用递增的顺序来遍历所有的值。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('682', '为什么呢？如果n是二叉搜索树的结点，那么n的左子树的所有结点的值都比n的值要小，而且n的右子树的所有节点的值都比n的值要大。因此，如果我们顺序遍历左子树，然后访问n，然后顺序遍历右子树。我们就已经循序访问了整个树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('683', '在这个二叉树中， 前序遍历的结果：2, 7, 2, 6, 5, 11, 5, 9, 4 后序遍历的结果：2, 5, 11, 6, 7, 4, 9, 5, 2 中序遍历的结果：2, 7, 5, 6, 11, 2, 5, 4, 9', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('684', '以上的递归算法使用与树的高度成比例的栈空间。如果我们在每个结点中存储指向父结点的指针，那样可以使用反复运算算法，只使用常数空间实现所有这些遍历。然而，指向父结点的指针占用更多的空间。这只在需要指向父节点的指针或栈空间有限时才使用。例如， 这是一个中序遍历的反复运算算法：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('685', 'visit(root)\n    prev    := null\n    current := root\n    next    := null\n    \n    while current != null\n        if prev == current.parent\n            prev := current\n            next := current.left\n        if next == null or prev == current.left\n            print current.value\n            prev := current\n            next := current.right\n        if next == null or prev == current.right\n            prev := current\n            next := current.parent\n        current := next', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('686', '用二叉树表示下述表达式：a+b*(c-d)-e/f 先序遍历的序列是：-+a*b-cd/ef 中序遍历的序列是：a+b*c-d-e/f 后序遍历的序列是：abcd-*+ef/-', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('687', '在深度优先级中，我们希望从根结点访问最远的结点。和图的深度优先搜索不同的是，不需记住访问过的每一个结点，因为树中不会有环。前序，中序和后序遍历都是深度优先遍历的特例。参见深度优先搜索。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('688', '和深度优先遍历不同，广度优先遍历会先访问离根节点最近的节点。参见广度优先搜索。 二叉树的广度优先遍历又称按层次遍历。算法借助队列实现。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('689', '一般有序树和二叉树之间有一一映射关系，能进行相互转换。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('690', 'n叉树转换为二叉树的方法：二叉树中结点x的左子结点为n叉树中结点x的左子结点；二叉树中结点x的右子结点为n叉树中结点x的第一个右边的同级结点y。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:19', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('691', '例如，在左边的树中，A有6个子结点{B,C,D,E,F,G}。它能被转换成右边的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('692', '在兄弟之间加一连接； 对每个结点，除了其左孩子外，去除其与其余孩子之间的联系； 以树的根结点为轴心，将整树顺时针转45度。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('693', '树的二叉链表标记法（孩子兄弟标记法）是树和二叉树转换的媒介。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('694', '/* 树的二叉链表(孩子—兄弟)存储表示 */\n typedef struct CSNode\n {\n   TElemType data;\n   struct CSNode *firstchild,*nextsibling;\n }CSNode,*CSTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('695', '树的二叉链表存储的基本操作[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('696', '基于C/C++的算法实现显示▼  /* 树的二叉链表(孩子—兄弟)存储的基本操作(17个) */\n #define ClearTree DestroyTree /* 二者操作相同 */\n #include\"func6-2.c\" /* 包括PreOrderTraverse() */\n void InitTree(CSTree *T)\n { /* 操作结果：构造空树T */\n   *T=NULL;\n }\n  void DestroyTree(CSTree *T)\n { /* 初始条件：树T存在。操作结果：销毁树T */\n   if(*T)\n   {\n     if((*T)->firstchild) /* T有长子 */\n       DestroyTree(&(*T)->firstchild); /* 销毁T的长子为根结点的子树 */\n     if((*T)->nextsibling) /* T有下一个兄弟 */\n       DestroyTree(&(*T)->nextsibling); /* 销毁T的下一个兄弟为根结点的子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL;\n   }\n }\n  typedef CSTree QElemType; /* 定义伫列元素类型 */\n #include\"c3-2.h\" /* 定义LinkQueue类型(链伫列) */\n #include\"bo3-2.c\" /* LinkQueue类型的基本操作 */\n void CreateTree(CSTree *T)\n { /* 构造树T */\n   char c[20]; /* 临时存放孩子结点(设不超过20个)的值 */\n   CSTree p,p1;\n   LinkQueue q;\n   int i,l;\n   InitQueue(&q);\n   printf(\"请输入根结点(字元型,空格为空): \");\n   scanf(\"%c%*c\",&c[0]);\n   if(c[0]!=Nil) /* 非空树 */\n   {\n     *T=(CSTree)malloc(sizeof(CSNode)); /* 建立根结点 */\n     (*T)->data=c[0];\n     (*T)->nextsibling=NULL;\n     EnQueue(&q,*T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       printf(\"请按长幼顺序输入结点%c的所有孩子: \",p->data);\n       gets(c);\n       l=strlen(c);\n       if(l>0) /* 有孩子 */\n       {\n         p1=p->firstchild=(CSTree)malloc(sizeof(CSNode)); /* 建立长子结点 */\n         p1->data=c[0];\n         for(i=1;i<l;i++)\n         {\n           p1->nextsibling=(CSTree)malloc(sizeof(CSNode)); /* 建立下一个兄弟结点 */\n           EnQueue(&q,p1); /* 入队上一个结点 */\n           p1=p1->nextsibling;\n           p1->data=c[i];\n         }\n         p1->nextsibling=NULL;\n         EnQueue(&q,p1); /* 入队最后一个结点 */\n       }\n       else\n         p->firstchild=NULL; /* 长子指针为空 */\n     }\n   }\n   else\n     *T=NULL; /* 空树 */\n }\n  Status TreeEmpty(CSTree T)\n { /* 初始条件：树T存在。操作结果：若T为空树，则返回TURE，否则返回FALSE */\n   if(T) /* T不空 */\n     return FALSE;\n   else\n     return TRUE;\n }\n  int TreeDepth(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的深度 */\n   CSTree p;\n   int depth,max=0;\n   if(!T) /* 树空 */\n     return 0;\n   if(!T->firstchild) /* 树无长子 */\n     return 1;\n   for(p=T->firstchild;p;p=p->nextsibling)\n   { /* 求子树深度的最大值 */\n     depth=TreeDepth(p);\n     if(depth>max)\n       max=depth;\n   }\n   return max+1; /* 树的深度=子树深度最大值+1 */\n }\n  TElemType Value(CSTree p)\n { /* 返回p所指结点的值 */\n   return p->data;\n }\n  TElemType Root(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的根 */\n   if(T)\n     return Value(T);\n   else\n     return Nil;\n }\n  CSTree Point(CSTree T,TElemType s)\n { /* 返回二叉链表(孩子—兄弟)树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队,伫列元素赋给a */\n       if(a->data==s)\n	 return a;\n       if(a->firstchild) /* 有长子 */\n         EnQueue(&q,a->firstchild); /* 入队长子 */\n       if(a->nextsibling) /* 有下一个兄弟 */\n         EnQueue(&q,a->nextsibling); /* 入队下一个兄弟 */\n     }\n   }\n   return NULL;\n }\n  Status Assign(CSTree *T,TElemType cur_e,TElemType value)\n { /* 初始条件：树T存在，cur_e是树T中结点的值。操作结果：改cur_e为value */\n   CSTree p;\n   if(*T) /* 非空树 */\n   {\n     p=Point(*T,cur_e); /* p为cur_e的指针 */\n     if(p) /* 找到cur_e */\n     {\n       p->data=value; /* 赋新值 */\n       return OK;\n     }\n   }\n   return ERROR; /* 树空或没找到 */\n }\n  TElemType Parent(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非根结点，则返回它的双亲，否则函数值为＂空＂*/\n   CSTree p,t;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T) /* 树非空 */\n   {\n     if(Value(T)==cur_e) /* 根结点值为cur_e */\n       return Nil;\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&p);\n       if(p->firstchild) /* p有长子 */\n       {\n         if(p->firstchild->data==cur_e) /* 长子为cur_e */\n           return Value(p); /* 返回双亲 */\n         t=p; /* 双亲指针赋给t */\n         p=p->firstchild; /* p指向长子 */\n         EnQueue(&q,p); /* 入队长子 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling; /* p指向下一个兄弟 */\n	 if(Value(p)==cur_e) /* 下一个兄弟为cur_e */\n	 return Value(t); /* 返回双亲 */\n	 EnQueue(&q,p); /* 入队下一个兄弟 */\n	 }\n       }\n     }\n   }\n   return Nil; /* 树空或没找到cur_e */\n }\n  TElemType LeftChild(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非叶子结点，则返回它的最左孩子，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->firstchild) /* 找到结点cur_e且结点cur_e有长子 */\n     return f->firstchild->data;\n   else\n     return Nil;\n }\n  TElemType RightSibling(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e有右兄弟，则返回它的右兄弟，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->nextsibling) /* 找到结点cur_e且结点cur_e有右兄弟 */\n     return f->nextsibling->data;\n   else\n     return Nil; /* 树空 */\n }\n  Status InsertChild(CSTree *T,CSTree p,int i,CSTree c)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度+1，非空树c与T不相交 */\n   /* 操作结果：插入c为T中p结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 插入c为p的长子 */\n     {\n       c->nextsibling=p->firstchild; /* p的原长子现是c的下一个兄弟(c本无兄弟) */\n       p->firstchild=c;\n     }\n     else /* 找插入点 */\n     {\n       p=p->firstchild; /* 指向p的长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到插入位置 */\n       {\n         c->nextsibling=p->nextsibling;\n         p->nextsibling=c;\n       }\n       else /* p原有孩子数小于i-1 */\n         return ERROR;\n     }\n     return OK;\n   }\n   else /* T空 */\n     return ERROR;\n }\n  Status DeleteChild(CSTree *T,CSTree p,int i)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度 */\n   /* 操作结果：删除T中p所指结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   CSTree b;\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 删除长子 */\n     {\n       b=p->firstchild;\n       p->firstchild=b->nextsibling; /* p的原次子现是长子 */\n       b->nextsibling=NULL;\n       DestroyTree(&b);\n     }\n     else /* 删除非长子 */\n     {\n       p=p->firstchild; /* p指向长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到第i棵子树 */\n       {\n         b=p->nextsibling;\n         p->nextsibling=b->nextsibling;\n         b->nextsibling=NULL;\n         DestroyTree(&b);\n       }\n       else /* p原有孩子数小于i */\n         return ERROR;\n     }\n     return OK;\n   }\n   else\n     return ERROR;\n }\n  void PostOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 后根遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   if(T)\n   {\n     if(T->firstchild) /* 有长子 */\n     {\n       PostOrderTraverse(T->firstchild,Visit); /* 后根遍历长子子树 */\n       p=T->firstchild->nextsibling; /* p指向长子的下一个兄弟 */\n       while(p)\n       {\n         PostOrderTraverse(p,Visit); /* 后根遍历下一个兄弟子树 */\n         p=p->nextsibling; /* p指向再下一个兄弟 */\n       }\n     }\n     Visit(Value(T)); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 层序遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T)\n   {\n     Visit(Value(T)); /* 先访问根结点 */\n     EnQueue(&q,T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       if(p->firstchild) /* 有长子 */\n       {\n         p=p->firstchild;\n         Visit(Value(p)); /* 访问长子结点 */\n         EnQueue(&q,p); /* 入队长子结点的指针 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling;\n           Visit(Value(p)); /* 访问下一个兄弟 */\n           EnQueue(&q,p); /* 入队兄弟结点的指针 */\n         }\n       }\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('697', '线索二叉树 (threaded binary tree)[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('698', '线索二叉树(保留遍历时结点在任一序列的前驱和后继的信息)：若结点有左子树，则其lchild域指示其左孩子，否则令lchild域指示其前驱；若结点有右子树，则其rchild域指示其右孩子，否则令rchild指示其后继。还需在结点结构中增加两个标志域LTag和RTag。LTag=0时，lchild域指示结点的左孩子，LTag=1时，lchild域指示结点的前驱；RTag=0时，rchild域指示结点的右孩子，RTag=1时，rchild域指示结点的后继。以这种结点结构构成的二叉链表作为二叉树的存储结构，叫做线索链表，其中指向结点前驱和后继的指针叫做线索，加上线索的二叉树称为线索二叉树。对二叉树以某种次序遍历使其变为线索二叉树的过程叫做线索化。若对二叉树进行中序遍历，则所得的线索二叉树称为中序线索二叉树，线索链表称为为中序线索链表。线索二叉树是一种物理结构。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('699', '在中序线索树找结点后继的规律是：若其右标志为1，则右链为线索，指示其后继，否则遍历其右子树时访问的第一个结点（右子树最左下的结点）为其后继；找结点前驱的规律是：若其左标志为1，则左链为线索，指示其前驱，否则遍历左子树时最后访问的一个结点（左子树中最右下的结点）为其前驱。 在后序线索树中找到结点的后继分三种情况：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('700', '若结点是二叉树的根，则其后继为空； 若结点是其双亲的右孩子，或是其双亲的左孩子且其双亲没有右子树，则其后继即为双亲结点； 若结点是其双亲的左孩子，且其双亲有右子树，则其后继为双亲右子树上按后序遍历列出的第一个结点。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('701', '二叉树的二叉线索存储表示：在线索链表上添加一个头结点，并令其lchild域的指针指向二叉树的根结点，其rchild域的指针指向中序遍历时访问的最后一个结点。令二叉树中序序列中的第一个结点的lchild域指针和最后一个结点的rchild域的指针均指向头结点，这样就创建了一个双向线索链表。二叉树常采用二叉链表方式存储。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('702', '/* 二叉树的二叉线索存储表示 */\n typedef enum{Link,Thread}PointerTag; /* Link(0)：指针，Thread(1)：线索 */\n typedef struct BiThrNode\n {\n   TElemType data;\n   struct BiThrNode *lchild,*rchild; /* 左右孩子指针 */\n   PointerTag LTag,RTag; /* 左右标志 */\n }BiThrNode,*BiThrTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('703', '/* [[二元树]]的顺序存储表示 */\n #define MAX_TREE_SIZE 100 /* [[二元树]]的最大节点数 */\n typedef TElemType SqBiTree[MAX_TREE_SIZE]; /* 0号单元存储根节点 */\n\n typedef struct\n {\n   int level,order; /* 节点的层，本层序号(按[[满二元树]]计算) */\n }position;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('704', '基于C/C++的实现算法显示▼  /* [[二元树]]的顺序存储的基本操作(23个)*/\n #define ClearBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\\arccos{}\n #define DestroyBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\n void InitBiTree(SqBiTree T) －－－（SqBiTree & T）\n { /* 构造[[空二元树]]T。因为T是阵列名称，故不需要& */\n   int i;\n   for(i=0;i<MAX_TREE_SIZE;i++)\n     T[i]=Nil; /* 初值为空(Nil在主程中定义) */\n }\n  void CreateBiTree(SqBiTree T)\n { /* 按层序次序输入二叉树中结点的值(字元型或整型), 构造顺序存储的二叉树T */\n   int i=0;\n #if CHAR /* 结点类型为字元 */\n   int l;\n   char s[MAX_TREE_SIZE];\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入结点的值(字元)，空格表示空结点，节点数≦%d:\\n\",MAX_TREE_SIZE);\n   gets(s); /* 输入字串 */\n   l=strlen(s); /* 求字串的长度 */\n   for(;i<l;i++) /* 将字串赋值给T */\n     T[i]=s[i];\n #else  /* 节点类型为整型 */\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入节点的值(整型)，0表示空节点，输999结束。节点数≦%d:\\n\",MAX_TREE_SIZE);\n   while(1)\n   {\n     scanf(\"%d\",&T[i]);\n     if(T[i]==999)\n     {\n       T[i]=Nil;\n       break;\n     }\n     i++;\n   }\n #endif\n   for(i=1;i<MAX_TREE_SIZE;i++)\n     if(T[(i+1)/2-1]==Nil&&T[i]!=Nil) /* 此非根节点(不空)无双亲 */\n     {\n       printf(\"出现无双亲的非根节点\"form\"\\n\",T[i]);\n       exit(ERROR);\n     }\n }\n  int BiTreeDepth(SqBiTree T)\n { /* 初始条件：[二元树]T存在。操作结果：返回T的深度 */\n   int i,j=-1;\n   for(i=MAX_TREE_SIZE-1;i>=0;i--) /* 找到最后一个节点 */\n     if(T[i]!=Nil)\n       break;\n   i++; /* 为了便于计算 */\n   do\n     j++;\n   while(i>=pow(2,j));   /*pow是原型为double pow( double x, double y ),计算x的y次方,h = log<sub>2</sub>k + 1来计算[二元树]的深度*/\n   return j;\n }\n  Status Root(SqBiTree T,TElemType *e)\n { /* 初始条件：[二元树]T存在。操作结果：当T不空，用e返回T的根，返回OK；否则返回ERROR，e无定义 */\n   if(BiTreeEmpty(T)) /* T空 */\n     return ERROR;\n   else\n   {\n     *e=T[0];\n     return OK;\n   }\n }\n  TElemType Value(SqBiTree T,position e)\n { /* 初始条件：[二元树]T存在，e是T中某个结点(的位置) */\n   /* 操作结果：返回处于位置e(层,本层序号)的结点的值 */\n   return T[(int)pow(2,e.level-1)+e.order-2];\n }\n  Status Assign(SqBiTree T,position e,TElemType value)\n { /* 初始条件：二叉树T存在，e是T中某个结点(的位置) */\n   /* 操作结果：给处于位置e(层,本层序号)的结点赋新值value */\n   int i=(int)pow(2,e.level-1)+e.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(value!=Nil&&T[(i+1)/2-1]==Nil) /* 给叶子赋非空值但双亲为空 */\n     return ERROR;\n   else if(value==Nil&&(T[i*2+1]!=Nil||T[i*2+2]!=Nil)) /*  给双亲赋空值但有叶子(不空) */\n     return ERROR;\n   T[i]=value;\n   return OK;\n }\n  TElemType Parent(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[(i+1)/2-1];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+2];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2==0) /* 找到e且其序号为偶数(是右孩子) */\n       return T[i-1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2) /* 找到e且其序号为奇数(是左孩子) */\n       return T[i+1];\n   return Nil; /* 没找到e */\n }\n  void Move(SqBiTree q,int j,SqBiTree T,int i) /* InsertChild()用到。加 */\n { /* 把从q的j结点开始的子树移为从T的i结点开始的子树 */\n   if(q[2*j+1]!=Nil) /* q的左子树不空 */\n     Move(q,(2*j+1),T,(2*i+1)); /* 把q的j结点的左子树移为T的i结点的左子树 */\n   if(q[2*j+2]!=Nil) /* q的右子树不空 */\n     Move(q,(2*j+2),T,(2*i+2)); /* 把q的j结点的右子树移为T的i结点的右子树 */\n   T[i]=q[j]; /* 把q的j结点移为T的i结点 */\n   q[j]=Nil; /* 把q的j结点置空 */\n }\n  void InsertChild(SqBiTree T,TElemType p,int LR,SqBiTree c)\n { /* 初始条件：二叉树T存在，p是T中某个结点的值，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果: 根据LR为0或1,插入c为T中p结点的左或右子树。p结点的原有左或右子树则成为c的右子树 */\n   int j,k,i=0;\n   for(j=0;j<(int)pow(2,BiTreeDepth(T))-1;j++) /* 查找p的序号 */\n     if(T[j]==p) /* j为p的序号 */\n       break;\n   k=2*j+1+LR; /* k为p的左或右孩子的序号 */\n   if(T[k]!=Nil) /* p原来的左或右孩子不空 */\n     Move(T,k,T,2*k+2); /* 把从T的k结点开始的子树移为从k结点的右子树开始的子树 */\n   Move(c,i,T,k); /* 把从c的i结点开始的子树移为从T的k结点开始的子树 */\n }\n  typedef int QElemType; /* 设伫列元素类型为整型(序号) */\n #include \"c3-2.h\" /* 链伫列 */\n #include \"bo3-2.c\" /* 链伫列的基本操作 */\n Status DeleteChild(SqBiTree T,position p,int LR)\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为1或0 */\n   /* 操作结果：根据LR为1或0，删除T中p所指结点的左或右子树 */\n   int i;\n   Status k=OK; /* 伫列不空的标志 */\n   LinkQueue q;\n   InitQueue(&q); /* 初始化伫列，用于存放待删除的结点 */\n   i=(int)pow(2,p.level-1)+p.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(T[i]==Nil) /* 此结点空 */\n     return ERROR;\n   i=i*2+1+LR; /* 待删除子树的根结点在矩阵中的序号 */\n   while(k)\n   {\n     if(T[2*i+1]!=Nil) /* 左结点不空 */\n       EnQueue(&q,2*i+1); /* 入队左结点的序号 */\n     if(T[2*i+2]!=Nil) /* 右结点不空 */\n       EnQueue(&q,2*i+2); /* 入队右结点的序号 */\n     T[i]=Nil; /* 删除此结点 */\n     k=DeQueue(&q,&i); /* 伫列不空 */\n   }\n   return OK;\n }\n  void(*VisitFunc)(TElemType); /* 函数变数 */\n void PreTraverse(SqBiTree T,int e)\n { /* PreOrderTraverse()调用 */\n   VisitFunc(T[e]);\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PreTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PreTraverse(T,2*e+2);\n }\n  void PreOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：先序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PreTraverse(T,0);\n   printf(\"\\n\");\n }\n  void InTraverse(SqBiTree T,int e)\n { /* InOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     InTraverse(T,2*e+1);\n   VisitFunc(T[e]);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     InTraverse(T,2*e+2);\n }\n  void InOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：中序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     InTraverse(T,0);\n   printf(\"\\n\");\n }\n  void PostTraverse(SqBiTree T,int e)\n { /* PostOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PostTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PostTraverse(T,2*e+2);\n   VisitFunc(T[e]);\n }\n  void PostOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PostTraverse(T,0);\n   printf(\"\\n\");\n }\n  void LevelOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 层序遍历二叉树 */\n   int i=MAX_TREE_SIZE-1,j;\n   while(T[i]==Nil)\n     i--; /* 找到最后一个非空结点的序号 */\n   for(j=0;j<=i;j++) /* 从根结点起，按层序遍历二叉树 */\n     if(T[j]!=Nil)\n       Visit(T[j]); /* 只遍历非空的结点 */\n   printf(\"\\n\");\n }\n  void Print(SqBiTree T)\n { /* 逐层、按本层序号输出二叉树 */\n   int j,k;\n   position p;\n   TElemType e;\n   for(j=1;j<=BiTreeDepth(T);j++)\n   {\n     printf(\"第%d层: \",j);\n     for(k=1;k<=pow(2,j-1);k++)\n     {\n       p.level=j;\n       p.order=k;\n       e=Value(T,p);\n       if(e!=Nil)\n	 printf(\"%d:\"form\" \",k,e);\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('705', '在使用记录或存储器地址指针的程序设计语言中，二叉树通常用树结点结构来存储。有时也包含指向唯一的父节点的指针。如果一个结点的子结点个数小于2，一些子结点指针可能为空值，或者为特殊的哨兵结点。 使用链表能避免顺序存储浪费空间的问题，算法和结构相对简单，但使用二叉链表，由于缺乏父链的指引，在找回父节点时需要重新扫描树得知父节点的节点地址。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('706', '/* [[二元树]]的顺序存储表示 */\n #define MAX_TREE_SIZE 100 /* [[二元树]]的最大节点数 */\n typedef TElemType SqBiTree[MAX_TREE_SIZE]; /* 0号单元存储根节点 */\n\n typedef struct\n {\n   int level,order; /* 节点的层，本层序号(按[[满二元树]]计算) */\n }position;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('707', '基于C/C++的实现算法显示▼  /* [[二元树]]的顺序存储的基本操作(23个)*/\n #define ClearBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\\arccos{}\n #define DestroyBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\n void InitBiTree(SqBiTree T) －－－（SqBiTree & T）\n { /* 构造[[空二元树]]T。因为T是阵列名称，故不需要& */\n   int i;\n   for(i=0;i<MAX_TREE_SIZE;i++)\n     T[i]=Nil; /* 初值为空(Nil在主程中定义) */\n }\n  void CreateBiTree(SqBiTree T)\n { /* 按层序次序输入二叉树中结点的值(字元型或整型), 构造顺序存储的二叉树T */\n   int i=0;\n #if CHAR /* 结点类型为字元 */\n   int l;\n   char s[MAX_TREE_SIZE];\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入结点的值(字元)，空格表示空结点，节点数≦%d:\\n\",MAX_TREE_SIZE);\n   gets(s); /* 输入字串 */\n   l=strlen(s); /* 求字串的长度 */\n   for(;i<l;i++) /* 将字串赋值给T */\n     T[i]=s[i];\n #else  /* 节点类型为整型 */\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入节点的值(整型)，0表示空节点，输999结束。节点数≦%d:\\n\",MAX_TREE_SIZE);\n   while(1)\n   {\n     scanf(\"%d\",&T[i]);\n     if(T[i]==999)\n     {\n       T[i]=Nil;\n       break;\n     }\n     i++;\n   }\n #endif\n   for(i=1;i<MAX_TREE_SIZE;i++)\n     if(T[(i+1)/2-1]==Nil&&T[i]!=Nil) /* 此非根节点(不空)无双亲 */\n     {\n       printf(\"出现无双亲的非根节点\"form\"\\n\",T[i]);\n       exit(ERROR);\n     }\n }\n  int BiTreeDepth(SqBiTree T)\n { /* 初始条件：[二元树]T存在。操作结果：返回T的深度 */\n   int i,j=-1;\n   for(i=MAX_TREE_SIZE-1;i>=0;i--) /* 找到最后一个节点 */\n     if(T[i]!=Nil)\n       break;\n   i++; /* 为了便于计算 */\n   do\n     j++;\n   while(i>=pow(2,j));   /*pow是原型为double pow( double x, double y ),计算x的y次方,h = log<sub>2</sub>k + 1来计算[二元树]的深度*/\n   return j;\n }\n  Status Root(SqBiTree T,TElemType *e)\n { /* 初始条件：[二元树]T存在。操作结果：当T不空，用e返回T的根，返回OK；否则返回ERROR，e无定义 */\n   if(BiTreeEmpty(T)) /* T空 */\n     return ERROR;\n   else\n   {\n     *e=T[0];\n     return OK;\n   }\n }\n  TElemType Value(SqBiTree T,position e)\n { /* 初始条件：[二元树]T存在，e是T中某个结点(的位置) */\n   /* 操作结果：返回处于位置e(层,本层序号)的结点的值 */\n   return T[(int)pow(2,e.level-1)+e.order-2];\n }\n  Status Assign(SqBiTree T,position e,TElemType value)\n { /* 初始条件：二叉树T存在，e是T中某个结点(的位置) */\n   /* 操作结果：给处于位置e(层,本层序号)的结点赋新值value */\n   int i=(int)pow(2,e.level-1)+e.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(value!=Nil&&T[(i+1)/2-1]==Nil) /* 给叶子赋非空值但双亲为空 */\n     return ERROR;\n   else if(value==Nil&&(T[i*2+1]!=Nil||T[i*2+2]!=Nil)) /*  给双亲赋空值但有叶子(不空) */\n     return ERROR;\n   T[i]=value;\n   return OK;\n }\n  TElemType Parent(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[(i+1)/2-1];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+2];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2==0) /* 找到e且其序号为偶数(是右孩子) */\n       return T[i-1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2) /* 找到e且其序号为奇数(是左孩子) */\n       return T[i+1];\n   return Nil; /* 没找到e */\n }\n  void Move(SqBiTree q,int j,SqBiTree T,int i) /* InsertChild()用到。加 */\n { /* 把从q的j结点开始的子树移为从T的i结点开始的子树 */\n   if(q[2*j+1]!=Nil) /* q的左子树不空 */\n     Move(q,(2*j+1),T,(2*i+1)); /* 把q的j结点的左子树移为T的i结点的左子树 */\n   if(q[2*j+2]!=Nil) /* q的右子树不空 */\n     Move(q,(2*j+2),T,(2*i+2)); /* 把q的j结点的右子树移为T的i结点的右子树 */\n   T[i]=q[j]; /* 把q的j结点移为T的i结点 */\n   q[j]=Nil; /* 把q的j结点置空 */\n }\n  void InsertChild(SqBiTree T,TElemType p,int LR,SqBiTree c)\n { /* 初始条件：二叉树T存在，p是T中某个结点的值，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果: 根据LR为0或1,插入c为T中p结点的左或右子树。p结点的原有左或右子树则成为c的右子树 */\n   int j,k,i=0;\n   for(j=0;j<(int)pow(2,BiTreeDepth(T))-1;j++) /* 查找p的序号 */\n     if(T[j]==p) /* j为p的序号 */\n       break;\n   k=2*j+1+LR; /* k为p的左或右孩子的序号 */\n   if(T[k]!=Nil) /* p原来的左或右孩子不空 */\n     Move(T,k,T,2*k+2); /* 把从T的k结点开始的子树移为从k结点的右子树开始的子树 */\n   Move(c,i,T,k); /* 把从c的i结点开始的子树移为从T的k结点开始的子树 */\n }\n  typedef int QElemType; /* 设伫列元素类型为整型(序号) */\n #include \"c3-2.h\" /* 链伫列 */\n #include \"bo3-2.c\" /* 链伫列的基本操作 */\n Status DeleteChild(SqBiTree T,position p,int LR)\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为1或0 */\n   /* 操作结果：根据LR为1或0，删除T中p所指结点的左或右子树 */\n   int i;\n   Status k=OK; /* 伫列不空的标志 */\n   LinkQueue q;\n   InitQueue(&q); /* 初始化伫列，用于存放待删除的结点 */\n   i=(int)pow(2,p.level-1)+p.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(T[i]==Nil) /* 此结点空 */\n     return ERROR;\n   i=i*2+1+LR; /* 待删除子树的根结点在矩阵中的序号 */\n   while(k)\n   {\n     if(T[2*i+1]!=Nil) /* 左结点不空 */\n       EnQueue(&q,2*i+1); /* 入队左结点的序号 */\n     if(T[2*i+2]!=Nil) /* 右结点不空 */\n       EnQueue(&q,2*i+2); /* 入队右结点的序号 */\n     T[i]=Nil; /* 删除此结点 */\n     k=DeQueue(&q,&i); /* 伫列不空 */\n   }\n   return OK;\n }\n  void(*VisitFunc)(TElemType); /* 函数变数 */\n void PreTraverse(SqBiTree T,int e)\n { /* PreOrderTraverse()调用 */\n   VisitFunc(T[e]);\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PreTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PreTraverse(T,2*e+2);\n }\n  void PreOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：先序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PreTraverse(T,0);\n   printf(\"\\n\");\n }\n  void InTraverse(SqBiTree T,int e)\n { /* InOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     InTraverse(T,2*e+1);\n   VisitFunc(T[e]);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     InTraverse(T,2*e+2);\n }\n  void InOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：中序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     InTraverse(T,0);\n   printf(\"\\n\");\n }\n  void PostTraverse(SqBiTree T,int e)\n { /* PostOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PostTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PostTraverse(T,2*e+2);\n   VisitFunc(T[e]);\n }\n  void PostOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PostTraverse(T,0);\n   printf(\"\\n\");\n }\n  void LevelOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 层序遍历二叉树 */\n   int i=MAX_TREE_SIZE-1,j;\n   while(T[i]==Nil)\n     i--; /* 找到最后一个非空结点的序号 */\n   for(j=0;j<=i;j++) /* 从根结点起，按层序遍历二叉树 */\n     if(T[j]!=Nil)\n       Visit(T[j]); /* 只遍历非空的结点 */\n   printf(\"\\n\");\n }\n  void Print(SqBiTree T)\n { /* 逐层、按本层序号输出二叉树 */\n   int j,k;\n   position p;\n   TElemType e;\n   for(j=1;j<=BiTreeDepth(T);j++)\n   {\n     printf(\"第%d层: \",j);\n     for(k=1;k<=pow(2,j-1);k++)\n     {\n       p.level=j;\n       p.order=k;\n       e=Value(T,p);\n       if(e!=Nil)\n	 printf(\"%d:\"form\" \",k,e);\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('708', '在使用记录或存储器地址指针的程序设计语言中，二叉树通常用树结点结构来存储。有时也包含指向唯一的父节点的指针。如果一个结点的子结点个数小于2，一些子结点指针可能为空值，或者为特殊的哨兵结点。 使用链表能避免顺序存储浪费空间的问题，算法和结构相对简单，但使用二叉链表，由于缺乏父链的指引，在找回父节点时需要重新扫描树得知父节点的节点地址。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('709', '/* [[二元树]]的顺序存储表示 */\n #define MAX_TREE_SIZE 100 /* [[二元树]]的最大节点数 */\n typedef TElemType SqBiTree[MAX_TREE_SIZE]; /* 0号单元存储根节点 */\n\n typedef struct\n {\n   int level,order; /* 节点的层，本层序号(按[[满二元树]]计算) */\n }position;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('710', '基于C/C++的实现算法显示▼  /* [[二元树]]的顺序存储的基本操作(23个)*/\n #define ClearBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\\arccos{}\n #define DestroyBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\n void InitBiTree(SqBiTree T) －－－（SqBiTree & T）\n { /* 构造[[空二元树]]T。因为T是阵列名称，故不需要& */\n   int i;\n   for(i=0;i<MAX_TREE_SIZE;i++)\n     T[i]=Nil; /* 初值为空(Nil在主程中定义) */\n }\n  void CreateBiTree(SqBiTree T)\n { /* 按层序次序输入二叉树中结点的值(字元型或整型), 构造顺序存储的二叉树T */\n   int i=0;\n #if CHAR /* 结点类型为字元 */\n   int l;\n   char s[MAX_TREE_SIZE];\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入结点的值(字元)，空格表示空结点，节点数≦%d:\\n\",MAX_TREE_SIZE);\n   gets(s); /* 输入字串 */\n   l=strlen(s); /* 求字串的长度 */\n   for(;i<l;i++) /* 将字串赋值给T */\n     T[i]=s[i];\n #else  /* 节点类型为整型 */\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入节点的值(整型)，0表示空节点，输999结束。节点数≦%d:\\n\",MAX_TREE_SIZE);\n   while(1)\n   {\n     scanf(\"%d\",&T[i]);\n     if(T[i]==999)\n     {\n       T[i]=Nil;\n       break;\n     }\n     i++;\n   }\n #endif\n   for(i=1;i<MAX_TREE_SIZE;i++)\n     if(T[(i+1)/2-1]==Nil&&T[i]!=Nil) /* 此非根节点(不空)无双亲 */\n     {\n       printf(\"出现无双亲的非根节点\"form\"\\n\",T[i]);\n       exit(ERROR);\n     }\n }\n  int BiTreeDepth(SqBiTree T)\n { /* 初始条件：[二元树]T存在。操作结果：返回T的深度 */\n   int i,j=-1;\n   for(i=MAX_TREE_SIZE-1;i>=0;i--) /* 找到最后一个节点 */\n     if(T[i]!=Nil)\n       break;\n   i++; /* 为了便于计算 */\n   do\n     j++;\n   while(i>=pow(2,j));   /*pow是原型为double pow( double x, double y ),计算x的y次方,h = log<sub>2</sub>k + 1来计算[二元树]的深度*/\n   return j;\n }\n  Status Root(SqBiTree T,TElemType *e)\n { /* 初始条件：[二元树]T存在。操作结果：当T不空，用e返回T的根，返回OK；否则返回ERROR，e无定义 */\n   if(BiTreeEmpty(T)) /* T空 */\n     return ERROR;\n   else\n   {\n     *e=T[0];\n     return OK;\n   }\n }\n  TElemType Value(SqBiTree T,position e)\n { /* 初始条件：[二元树]T存在，e是T中某个结点(的位置) */\n   /* 操作结果：返回处于位置e(层,本层序号)的结点的值 */\n   return T[(int)pow(2,e.level-1)+e.order-2];\n }\n  Status Assign(SqBiTree T,position e,TElemType value)\n { /* 初始条件：二叉树T存在，e是T中某个结点(的位置) */\n   /* 操作结果：给处于位置e(层,本层序号)的结点赋新值value */\n   int i=(int)pow(2,e.level-1)+e.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(value!=Nil&&T[(i+1)/2-1]==Nil) /* 给叶子赋非空值但双亲为空 */\n     return ERROR;\n   else if(value==Nil&&(T[i*2+1]!=Nil||T[i*2+2]!=Nil)) /*  给双亲赋空值但有叶子(不空) */\n     return ERROR;\n   T[i]=value;\n   return OK;\n }\n  TElemType Parent(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[(i+1)/2-1];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+2];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2==0) /* 找到e且其序号为偶数(是右孩子) */\n       return T[i-1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2) /* 找到e且其序号为奇数(是左孩子) */\n       return T[i+1];\n   return Nil; /* 没找到e */\n }\n  void Move(SqBiTree q,int j,SqBiTree T,int i) /* InsertChild()用到。加 */\n { /* 把从q的j结点开始的子树移为从T的i结点开始的子树 */\n   if(q[2*j+1]!=Nil) /* q的左子树不空 */\n     Move(q,(2*j+1),T,(2*i+1)); /* 把q的j结点的左子树移为T的i结点的左子树 */\n   if(q[2*j+2]!=Nil) /* q的右子树不空 */\n     Move(q,(2*j+2),T,(2*i+2)); /* 把q的j结点的右子树移为T的i结点的右子树 */\n   T[i]=q[j]; /* 把q的j结点移为T的i结点 */\n   q[j]=Nil; /* 把q的j结点置空 */\n }\n  void InsertChild(SqBiTree T,TElemType p,int LR,SqBiTree c)\n { /* 初始条件：二叉树T存在，p是T中某个结点的值，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果: 根据LR为0或1,插入c为T中p结点的左或右子树。p结点的原有左或右子树则成为c的右子树 */\n   int j,k,i=0;\n   for(j=0;j<(int)pow(2,BiTreeDepth(T))-1;j++) /* 查找p的序号 */\n     if(T[j]==p) /* j为p的序号 */\n       break;\n   k=2*j+1+LR; /* k为p的左或右孩子的序号 */\n   if(T[k]!=Nil) /* p原来的左或右孩子不空 */\n     Move(T,k,T,2*k+2); /* 把从T的k结点开始的子树移为从k结点的右子树开始的子树 */\n   Move(c,i,T,k); /* 把从c的i结点开始的子树移为从T的k结点开始的子树 */\n }\n  typedef int QElemType; /* 设伫列元素类型为整型(序号) */\n #include \"c3-2.h\" /* 链伫列 */\n #include \"bo3-2.c\" /* 链伫列的基本操作 */\n Status DeleteChild(SqBiTree T,position p,int LR)\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为1或0 */\n   /* 操作结果：根据LR为1或0，删除T中p所指结点的左或右子树 */\n   int i;\n   Status k=OK; /* 伫列不空的标志 */\n   LinkQueue q;\n   InitQueue(&q); /* 初始化伫列，用于存放待删除的结点 */\n   i=(int)pow(2,p.level-1)+p.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(T[i]==Nil) /* 此结点空 */\n     return ERROR;\n   i=i*2+1+LR; /* 待删除子树的根结点在矩阵中的序号 */\n   while(k)\n   {\n     if(T[2*i+1]!=Nil) /* 左结点不空 */\n       EnQueue(&q,2*i+1); /* 入队左结点的序号 */\n     if(T[2*i+2]!=Nil) /* 右结点不空 */\n       EnQueue(&q,2*i+2); /* 入队右结点的序号 */\n     T[i]=Nil; /* 删除此结点 */\n     k=DeQueue(&q,&i); /* 伫列不空 */\n   }\n   return OK;\n }\n  void(*VisitFunc)(TElemType); /* 函数变数 */\n void PreTraverse(SqBiTree T,int e)\n { /* PreOrderTraverse()调用 */\n   VisitFunc(T[e]);\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PreTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PreTraverse(T,2*e+2);\n }\n  void PreOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：先序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PreTraverse(T,0);\n   printf(\"\\n\");\n }\n  void InTraverse(SqBiTree T,int e)\n { /* InOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     InTraverse(T,2*e+1);\n   VisitFunc(T[e]);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     InTraverse(T,2*e+2);\n }\n  void InOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：中序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     InTraverse(T,0);\n   printf(\"\\n\");\n }\n  void PostTraverse(SqBiTree T,int e)\n { /* PostOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PostTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PostTraverse(T,2*e+2);\n   VisitFunc(T[e]);\n }\n  void PostOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PostTraverse(T,0);\n   printf(\"\\n\");\n }\n  void LevelOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 层序遍历二叉树 */\n   int i=MAX_TREE_SIZE-1,j;\n   while(T[i]==Nil)\n     i--; /* 找到最后一个非空结点的序号 */\n   for(j=0;j<=i;j++) /* 从根结点起，按层序遍历二叉树 */\n     if(T[j]!=Nil)\n       Visit(T[j]); /* 只遍历非空的结点 */\n   printf(\"\\n\");\n }\n  void Print(SqBiTree T)\n { /* 逐层、按本层序号输出二叉树 */\n   int j,k;\n   position p;\n   TElemType e;\n   for(j=1;j<=BiTreeDepth(T);j++)\n   {\n     printf(\"第%d层: \",j);\n     for(k=1;k<=pow(2,j-1);k++)\n     {\n       p.level=j;\n       p.order=k;\n       e=Value(T,p);\n       if(e!=Nil)\n	 printf(\"%d:\"form\" \",k,e);\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('711', '在使用记录或存储器地址指针的程序设计语言中，二叉树通常用树结点结构来存储。有时也包含指向唯一的父节点的指针。如果一个结点的子结点个数小于2，一些子结点指针可能为空值，或者为特殊的哨兵结点。 使用链表能避免顺序存储浪费空间的问题，算法和结构相对简单，但使用二叉链表，由于缺乏父链的指引，在找回父节点时需要重新扫描树得知父节点的节点地址。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('712', '/* [[二元树]]的顺序存储表示 */\n #define MAX_TREE_SIZE 100 /* [[二元树]]的最大节点数 */\n typedef TElemType SqBiTree[MAX_TREE_SIZE]; /* 0号单元存储根节点 */\n\n typedef struct\n {\n   int level,order; /* 节点的层，本层序号(按[[满二元树]]计算) */\n }position;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('713', '基于C/C++的实现算法显示▼  /* [[二元树]]的顺序存储的基本操作(23个)*/\n #define ClearBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\\arccos{}\n #define DestroyBiTree InitBiTree /* 在顺序存储结构中，两函数完全一样 */\n void InitBiTree(SqBiTree T) －－－（SqBiTree & T）\n { /* 构造[[空二元树]]T。因为T是阵列名称，故不需要& */\n   int i;\n   for(i=0;i<MAX_TREE_SIZE;i++)\n     T[i]=Nil; /* 初值为空(Nil在主程中定义) */\n }\n  void CreateBiTree(SqBiTree T)\n { /* 按层序次序输入二叉树中结点的值(字元型或整型), 构造顺序存储的二叉树T */\n   int i=0;\n #if CHAR /* 结点类型为字元 */\n   int l;\n   char s[MAX_TREE_SIZE];\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入结点的值(字元)，空格表示空结点，节点数≦%d:\\n\",MAX_TREE_SIZE);\n   gets(s); /* 输入字串 */\n   l=strlen(s); /* 求字串的长度 */\n   for(;i<l;i++) /* 将字串赋值给T */\n     T[i]=s[i];\n #else  /* 节点类型为整型 */\n   InitBiTree(T); /* 构造[空二元树]T */\n   printf(\"请按层序输入节点的值(整型)，0表示空节点，输999结束。节点数≦%d:\\n\",MAX_TREE_SIZE);\n   while(1)\n   {\n     scanf(\"%d\",&T[i]);\n     if(T[i]==999)\n     {\n       T[i]=Nil;\n       break;\n     }\n     i++;\n   }\n #endif\n   for(i=1;i<MAX_TREE_SIZE;i++)\n     if(T[(i+1)/2-1]==Nil&&T[i]!=Nil) /* 此非根节点(不空)无双亲 */\n     {\n       printf(\"出现无双亲的非根节点\"form\"\\n\",T[i]);\n       exit(ERROR);\n     }\n }\n  int BiTreeDepth(SqBiTree T)\n { /* 初始条件：[二元树]T存在。操作结果：返回T的深度 */\n   int i,j=-1;\n   for(i=MAX_TREE_SIZE-1;i>=0;i--) /* 找到最后一个节点 */\n     if(T[i]!=Nil)\n       break;\n   i++; /* 为了便于计算 */\n   do\n     j++;\n   while(i>=pow(2,j));   /*pow是原型为double pow( double x, double y ),计算x的y次方,h = log<sub>2</sub>k + 1来计算[二元树]的深度*/\n   return j;\n }\n  Status Root(SqBiTree T,TElemType *e)\n { /* 初始条件：[二元树]T存在。操作结果：当T不空，用e返回T的根，返回OK；否则返回ERROR，e无定义 */\n   if(BiTreeEmpty(T)) /* T空 */\n     return ERROR;\n   else\n   {\n     *e=T[0];\n     return OK;\n   }\n }\n  TElemType Value(SqBiTree T,position e)\n { /* 初始条件：[二元树]T存在，e是T中某个结点(的位置) */\n   /* 操作结果：返回处于位置e(层,本层序号)的结点的值 */\n   return T[(int)pow(2,e.level-1)+e.order-2];\n }\n  Status Assign(SqBiTree T,position e,TElemType value)\n { /* 初始条件：二叉树T存在，e是T中某个结点(的位置) */\n   /* 操作结果：给处于位置e(层,本层序号)的结点赋新值value */\n   int i=(int)pow(2,e.level-1)+e.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(value!=Nil&&T[(i+1)/2-1]==Nil) /* 给叶子赋非空值但双亲为空 */\n     return ERROR;\n   else if(value==Nil&&(T[i*2+1]!=Nil||T[i*2+2]!=Nil)) /*  给双亲赋空值但有叶子(不空) */\n     return ERROR;\n   T[i]=value;\n   return OK;\n }\n  TElemType Parent(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[(i+1)/2-1];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightChild(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=0;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e) /* 找到e */\n       return T[i*2+2];\n   return Nil; /* 没找到e */\n }\n  TElemType LeftSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2==0) /* 找到e且其序号为偶数(是右孩子) */\n       return T[i-1];\n   return Nil; /* 没找到e */\n }\n  TElemType RightSibling(SqBiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂ */\n   int i;\n   if(T[0]==Nil) /* 空树 */\n     return Nil;\n   for(i=1;i<=MAX_TREE_SIZE-1;i++)\n     if(T[i]==e&&i%2) /* 找到e且其序号为奇数(是左孩子) */\n       return T[i+1];\n   return Nil; /* 没找到e */\n }\n  void Move(SqBiTree q,int j,SqBiTree T,int i) /* InsertChild()用到。加 */\n { /* 把从q的j结点开始的子树移为从T的i结点开始的子树 */\n   if(q[2*j+1]!=Nil) /* q的左子树不空 */\n     Move(q,(2*j+1),T,(2*i+1)); /* 把q的j结点的左子树移为T的i结点的左子树 */\n   if(q[2*j+2]!=Nil) /* q的右子树不空 */\n     Move(q,(2*j+2),T,(2*i+2)); /* 把q的j结点的右子树移为T的i结点的右子树 */\n   T[i]=q[j]; /* 把q的j结点移为T的i结点 */\n   q[j]=Nil; /* 把q的j结点置空 */\n }\n  void InsertChild(SqBiTree T,TElemType p,int LR,SqBiTree c)\n { /* 初始条件：二叉树T存在，p是T中某个结点的值，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果: 根据LR为0或1,插入c为T中p结点的左或右子树。p结点的原有左或右子树则成为c的右子树 */\n   int j,k,i=0;\n   for(j=0;j<(int)pow(2,BiTreeDepth(T))-1;j++) /* 查找p的序号 */\n     if(T[j]==p) /* j为p的序号 */\n       break;\n   k=2*j+1+LR; /* k为p的左或右孩子的序号 */\n   if(T[k]!=Nil) /* p原来的左或右孩子不空 */\n     Move(T,k,T,2*k+2); /* 把从T的k结点开始的子树移为从k结点的右子树开始的子树 */\n   Move(c,i,T,k); /* 把从c的i结点开始的子树移为从T的k结点开始的子树 */\n }\n  typedef int QElemType; /* 设伫列元素类型为整型(序号) */\n #include \"c3-2.h\" /* 链伫列 */\n #include \"bo3-2.c\" /* 链伫列的基本操作 */\n Status DeleteChild(SqBiTree T,position p,int LR)\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为1或0 */\n   /* 操作结果：根据LR为1或0，删除T中p所指结点的左或右子树 */\n   int i;\n   Status k=OK; /* 伫列不空的标志 */\n   LinkQueue q;\n   InitQueue(&q); /* 初始化伫列，用于存放待删除的结点 */\n   i=(int)pow(2,p.level-1)+p.order-2; /* 将层、本层序号转为矩阵的序号 */\n   if(T[i]==Nil) /* 此结点空 */\n     return ERROR;\n   i=i*2+1+LR; /* 待删除子树的根结点在矩阵中的序号 */\n   while(k)\n   {\n     if(T[2*i+1]!=Nil) /* 左结点不空 */\n       EnQueue(&q,2*i+1); /* 入队左结点的序号 */\n     if(T[2*i+2]!=Nil) /* 右结点不空 */\n       EnQueue(&q,2*i+2); /* 入队右结点的序号 */\n     T[i]=Nil; /* 删除此结点 */\n     k=DeQueue(&q,&i); /* 伫列不空 */\n   }\n   return OK;\n }\n  void(*VisitFunc)(TElemType); /* 函数变数 */\n void PreTraverse(SqBiTree T,int e)\n { /* PreOrderTraverse()调用 */\n   VisitFunc(T[e]);\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PreTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PreTraverse(T,2*e+2);\n }\n  void PreOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：先序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PreTraverse(T,0);\n   printf(\"\\n\");\n }\n  void InTraverse(SqBiTree T,int e)\n { /* InOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     InTraverse(T,2*e+1);\n   VisitFunc(T[e]);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     InTraverse(T,2*e+2);\n }\n  void InOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：中序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     InTraverse(T,0);\n   printf(\"\\n\");\n }\n  void PostTraverse(SqBiTree T,int e)\n { /* PostOrderTraverse()调用 */\n   if(T[2*e+1]!=Nil) /* 左子树不空 */\n     PostTraverse(T,2*e+1);\n   if(T[2*e+2]!=Nil) /* 右子树不空 */\n     PostTraverse(T,2*e+2);\n   VisitFunc(T[e]);\n }\n  void PostOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序遍历T，对每个结点调用函数Visit一次且仅一次 */\n   VisitFunc=Visit;\n   if(!BiTreeEmpty(T)) /* 树不空 */\n     PostTraverse(T,0);\n   printf(\"\\n\");\n }\n  void LevelOrderTraverse(SqBiTree T,void(*Visit)(TElemType))\n { /* 层序遍历二叉树 */\n   int i=MAX_TREE_SIZE-1,j;\n   while(T[i]==Nil)\n     i--; /* 找到最后一个非空结点的序号 */\n   for(j=0;j<=i;j++) /* 从根结点起，按层序遍历二叉树 */\n     if(T[j]!=Nil)\n       Visit(T[j]); /* 只遍历非空的结点 */\n   printf(\"\\n\");\n }\n  void Print(SqBiTree T)\n { /* 逐层、按本层序号输出二叉树 */\n   int j,k;\n   position p;\n   TElemType e;\n   for(j=1;j<=BiTreeDepth(T);j++)\n   {\n     printf(\"第%d层: \",j);\n     for(k=1;k<=pow(2,j-1);k++)\n     {\n       p.level=j;\n       p.order=k;\n       e=Value(T,p);\n       if(e!=Nil)\n	 printf(\"%d:\"form\" \",k,e);\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('714', '在使用记录或存储器地址指针的程序设计语言中，二叉树通常用树结点结构来存储。有时也包含指向唯一的父节点的指针。如果一个结点的子结点个数小于2，一些子结点指针可能为空值，或者为特殊的哨兵结点。 使用链表能避免顺序存储浪费空间的问题，算法和结构相对简单，但使用二叉链表，由于缺乏父链的指引，在找回父节点时需要重新扫描树得知父节点的节点地址。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('715', '/* 二叉树的二叉链表存储表示 */\n typedef struct BiTNode\n {\n   TElemType data;\n   struct BiTNode *lchild,*rchild; /* 左右孩子指针 */\n }BiTNode,*BiTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('716', '基于C/C++的实现算法显示▼  /* 二叉树的二叉链表存储的基本操作(22个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n #include\"func6-3.c\"\n /* 包括InitBiTree()、DestroyBiTree()、PreOrderTraverse()和InOrderTraverse()4函数 */\n  void CreateBiTree(BiTree *T)\n { /* 演算法6.4：按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造二叉链表表示的二叉树T。变数Nil表示空(子)树。有改动 */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiTree)malloc(sizeof(BiTNode)); /* 生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch;\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n   }\n }\n  Status BiTreeEmpty(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(T==NULL)  /*如果T=NULL,这样写便于理解，当然也可以写成if（!T）*/; \n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(BiTreeEmpty(T))\n     return Nil;\n   else\n     return T->data;\n }\n  TElemType Value(BiTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n TElemType Parent(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 树根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->lchild&&a->lchild->data==e||a->rchild&&a->rchild->data==e)\n       /* 找到e(是其左或右孩子) */\n         return a->data; /* 返回e的双亲的值 */\n       else /* 没找到e，则入队其左右孩子指针(如果非空) */\n       {\n         if(a->lchild)\n           EnQueue(&q,a->lchild);\n         if(a->rchild)\n           EnQueue(&q,a->rchild);\n       }\n     }\n   }\n   return Nil; /* 树空或没找到e */\n }\n  BiTree Point(BiTree T,TElemType s)\n { /* 返回二叉树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==s)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType LeftChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->rchild->data==e) /* p存在左右孩子且右孩子是e */\n         return p->lchild->data; /* 返回p的左孩子(e的左兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->lchild->data==e) /* p存在左右孩子且左孩子是e */\n         return p->rchild->data; /* 返回p的右孩子(e的右兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiTree p,int LR,BiTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点的 */\n   /*           原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       p->lchild=c;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       p->rchild=c;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  typedef BiTree SElemType; /* 设栈元素为二叉树的指针类型 */\n #include\"c3-1.h\" /* 顺序栈 */\n #include\"bo3-1.c\" /* 顺序栈的基本操作 */\n void InOrderTraverse1(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.3，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   InitStack(&S);\n   while(T||!StackEmpty(S))\n   {\n     if(T)\n     { /* 根指针进栈，遍历左子树 */\n       Push(&S,T);\n       T=T->lchild;\n     }\n     else\n     { /* 根指针退栈，访问根结点，遍历右子树 */\n       Pop(&S,&T);\n       Visit(T->data);\n       T=T->rchild;\n     }\n   }\n   printf(\"\\n\");\n }\n  void InOrderTraverse2(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.2，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   BiTree p;\n   InitStack(&S);\n   Push(&S,T); /* 根指针进栈 */\n   while(!StackEmpty(S))\n   {\n     while(GetTop(S,&p)&&p)\n       Push(&S,p->lchild); /* 向左走到尽头 */\n     Pop(&S,&p); /* 空指针退栈 */\n     if(!StackEmpty(S))\n     { /* 访问结点，向右一步 */\n       Pop(&S,&p);\n       Visit(p->data);\n       Push(&S,p->rchild);\n     }\n   }\n   printf(\"\\n\");\n }\n  void PostOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序递回遍历T，对每个结点调用函数Visit一次且仅一次 */\n   if(T) /* T不空 */\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 先后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 再后序遍历右子树 */\n     Visit(T->data); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：层序递回遍历T(利用伫列)，对每个结点调用函数Visit一次且仅一次 */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q); /* 初始化伫列q */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 伫列不空 */\n     {\n       DeQueue(&q,&a); /* 出队元素(指标),赋给a */\n       Visit(a->data); /* 访问a所指结点 */\n       if(a->lchild!=NULL) /* a有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队a的左孩子 */\n       if(a->rchild!=NULL) /* a有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队a的右孩子 */\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:20', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('717', '改进于二叉链表，增加父节点的指引，能更好地实现节点间的访问，不过算法相对复杂。 当二叉树用三叉链表表示时，有N个结点，就会有N+2个空指针。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('718', '/* 二叉树的三叉链表存储表示 */\n typedef struct BiTPNode\n {\n   TElemType data;\n   struct BiTPNode *parent,*lchild,*rchild; /* 父、左右孩子指针 */\n }BiTPNode,*BiPTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('719', '基于C/C++的实现算法显示▼  /* 二叉树的三叉链表存储的基本操作(21个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n void InitBiTree(BiPTree *T)\n { /* 操作结果：构造空二叉树T */\n   *T=NULL;\n }\n  void DestroyBiTree(BiPTree *T)\n { /* 初始条件：二叉树T存在。操作结果：销毁二叉树T */\n   if(*T) /* 非空树 */\n   {\n     if((*T)->lchild) /* 有左孩子 */\n       DestroyBiTree(&(*T)->lchild); /* 销毁左孩子子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       DestroyBiTree(&(*T)->rchild); /* 销毁右孩子子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL; /* 空指针赋0 */\n   }\n }\n  void CreateBiTree(BiPTree *T)\n { /* 按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造三叉链表表示的二叉树T */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiPTree)malloc(sizeof(BiTPNode)); /* 动态生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch; /* 给根结点赋值 */\n     (*T)->parent=NULL; /* 根结点无双亲 */\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     if((*T)->lchild) /* 有左孩子 */\n       (*T)->lchild->parent=*T; /* 给左孩子的双亲域赋值 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       (*T)->rchild->parent=*T; /* 给右孩子的双亲域赋值 */\n   }\n }\n  Status BiTreeEmpty(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(!T)\n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(T)\n     return T->data;\n   else\n     return Nil;\n }\n  TElemType Value(BiPTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiPTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiPTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n  BiPTree Point(BiPTree T,TElemType e)\n { /* 返回二叉树T中指向元素值为e的结点的指标。加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==e)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType Parent(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T) /* T中存在结点e且e是非根结点 */\n       return a->parent->data; /* 返回e的双亲的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->lchild&&a->parent->lchild!=a) /* T中存在结点e且e存在左兄弟 */\n       return a->parent->lchild->data; /* 返回e的左兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->rchild&&a->parent->rchild!=a) /* T中存在结点e且e存在右兄弟 */\n       return a->parent->rchild->data; /* 返回e的右兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiPTree p,int LR,BiPTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点 */\n   /*           的原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       if(c->rchild) /* c有右孩子(p原有左孩子) */\n         c->rchild->parent=c;\n       p->lchild=c;\n       c->parent=p;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       if(c->rchild) /* c有右孩子(p原有右孩子) */\n         c->rchild->parent=c;\n       p->rchild=c;\n       c->parent=p;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiPTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  void PreOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 先序递回遍历二叉树T */\n   if(T)\n   {\n     Visit(T); /* 先访问根结点 */\n     PreOrderTraverse(T->lchild,Visit); /* 再先序遍历左子树 */\n     PreOrderTraverse(T->rchild,Visit); /* 最后先序遍历右子树 */\n   }\n }\n  void InOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 中序递回遍历二叉树T */\n   if(T)\n   {\n     InOrderTraverse(T->lchild,Visit); /* 中序遍历左子树 */\n     Visit(T); /* 再访问根结点 */\n     InOrderTraverse(T->rchild,Visit); /* 最后中序遍历右子树 */\n   }\n }\n  void PostOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 后序递回遍历二叉树T */\n   if(T)\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 后序遍历右子树 */\n     Visit(T); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 层序遍历二叉树T(利用伫列) */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q);\n     EnQueue(&q,T);\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&a);\n       Visit(a);\n       if(a->lchild!=NULL)\n         EnQueue(&q,a->lchild);\n       if(a->rchild!=NULL)\n         EnQueue(&q,a->rchild);\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('720', '我们经常希望访问树中的每一个结点并且查看它的值。有很多常见的顺序来访问所有的结点，而且每一种都有有用的性质。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('721', '遍历二叉树：L、D、R分别表示遍历左子树、访问根结点和遍历右子树，则先(根)序遍历二叉树的顺序是DLR，中(根)序遍历二叉树的顺序是LDR，后(根)序遍历二叉树的顺序是LRD。还有按层遍历二叉树。这些方法的时间复杂度都是O(n)，n为结点个数。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('722', '如果T2是由有序树T转换而来的二叉树，那么T中结点的前序就是T2中结点的前序，T中结点的后序就是T2中结点的中序。任何一棵二叉树的叶结点在先序、中序和后序遍历中的相对次序不发改变。设n,m为一棵二叉树上的两个结点，在中序遍历时，n在m前的条件是n在m的左方。前序序列和中序序列相同的二叉树为空树或任一结点均无左孩子的非空二叉树；中序序列和后序序列相同的二叉树为空树或任一结点均无右孩子的非空二叉树；前序序列和后序序列相同的二叉树为空树或仅有一个结点的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('723', '假设我们有一个包含值的value和指向两个子结点的left和right的树结点结构。我们可以写出这样的过程：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('724', 'visit(node)\n    print node.value\n    if node.left  != null then visit(node.left)\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('725', '这样会用前序打印出树中的值。在前序，每个结点在访问它的子结点之前访问。类似地，如果打印语句在最后，每个结点在访问他的子节点之后访问，树中的值会用后序来打印。在这两种情况中，左子树中的值比右子树中得值先打印。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('726', 'visit(node)\n    if node.left  != null then visit(node.left)\n    print node.value\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('727', '最后，上面的中序遍历，每个结点在访问左子树和右子树之间访问。这在遍历二叉搜索树时很常用，因为它能用递增的顺序来遍历所有的值。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('728', '为什么呢？如果n是二叉搜索树的结点，那么n的左子树的所有结点的值都比n的值要小，而且n的右子树的所有节点的值都比n的值要大。因此，如果我们顺序遍历左子树，然后访问n，然后顺序遍历右子树。我们就已经循序访问了整个树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('729', '在这个二叉树中， 前序遍历的结果：2, 7, 2, 6, 5, 11, 5, 9, 4 后序遍历的结果：2, 5, 11, 6, 7, 4, 9, 5, 2 中序遍历的结果：2, 7, 5, 6, 11, 2, 5, 4, 9', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('730', '以上的递归算法使用与树的高度成比例的栈空间。如果我们在每个结点中存储指向父结点的指针，那样可以使用反复运算算法，只使用常数空间实现所有这些遍历。然而，指向父结点的指针占用更多的空间。这只在需要指向父节点的指针或栈空间有限时才使用。例如， 这是一个中序遍历的反复运算算法：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('731', 'visit(root)\n    prev    := null\n    current := root\n    next    := null\n    \n    while current != null\n        if prev == current.parent\n            prev := current\n            next := current.left\n        if next == null or prev == current.left\n            print current.value\n            prev := current\n            next := current.right\n        if next == null or prev == current.right\n            prev := current\n            next := current.parent\n        current := next', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('732', '用二叉树表示下述表达式：a+b*(c-d)-e/f 先序遍历的序列是：-+a*b-cd/ef 中序遍历的序列是：a+b*c-d-e/f 后序遍历的序列是：abcd-*+ef/-', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('733', '在深度优先级中，我们希望从根结点访问最远的结点。和图的深度优先搜索不同的是，不需记住访问过的每一个结点，因为树中不会有环。前序，中序和后序遍历都是深度优先遍历的特例。参见深度优先搜索。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('734', '和深度优先遍历不同，广度优先遍历会先访问离根节点最近的节点。参见广度优先搜索。 二叉树的广度优先遍历又称按层次遍历。算法借助队列实现。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('735', '一般有序树和二叉树之间有一一映射关系，能进行相互转换。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('736', 'n叉树转换为二叉树的方法：二叉树中结点x的左子结点为n叉树中结点x的左子结点；二叉树中结点x的右子结点为n叉树中结点x的第一个右边的同级结点y。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('737', '例如，在左边的树中，A有6个子结点{B,C,D,E,F,G}。它能被转换成右边的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('738', '在兄弟之间加一连接； 对每个结点，除了其左孩子外，去除其与其余孩子之间的联系； 以树的根结点为轴心，将整树顺时针转45度。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('739', '树的二叉链表标记法（孩子兄弟标记法）是树和二叉树转换的媒介。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('740', '/* 树的二叉链表(孩子—兄弟)存储表示 */\n typedef struct CSNode\n {\n   TElemType data;\n   struct CSNode *firstchild,*nextsibling;\n }CSNode,*CSTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('741', '树的二叉链表存储的基本操作[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:21', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('742', '基于C/C++的算法实现显示▼  /* 树的二叉链表(孩子—兄弟)存储的基本操作(17个) */\n #define ClearTree DestroyTree /* 二者操作相同 */\n #include\"func6-2.c\" /* 包括PreOrderTraverse() */\n void InitTree(CSTree *T)\n { /* 操作结果：构造空树T */\n   *T=NULL;\n }\n  void DestroyTree(CSTree *T)\n { /* 初始条件：树T存在。操作结果：销毁树T */\n   if(*T)\n   {\n     if((*T)->firstchild) /* T有长子 */\n       DestroyTree(&(*T)->firstchild); /* 销毁T的长子为根结点的子树 */\n     if((*T)->nextsibling) /* T有下一个兄弟 */\n       DestroyTree(&(*T)->nextsibling); /* 销毁T的下一个兄弟为根结点的子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL;\n   }\n }\n  typedef CSTree QElemType; /* 定义伫列元素类型 */\n #include\"c3-2.h\" /* 定义LinkQueue类型(链伫列) */\n #include\"bo3-2.c\" /* LinkQueue类型的基本操作 */\n void CreateTree(CSTree *T)\n { /* 构造树T */\n   char c[20]; /* 临时存放孩子结点(设不超过20个)的值 */\n   CSTree p,p1;\n   LinkQueue q;\n   int i,l;\n   InitQueue(&q);\n   printf(\"请输入根结点(字元型,空格为空): \");\n   scanf(\"%c%*c\",&c[0]);\n   if(c[0]!=Nil) /* 非空树 */\n   {\n     *T=(CSTree)malloc(sizeof(CSNode)); /* 建立根结点 */\n     (*T)->data=c[0];\n     (*T)->nextsibling=NULL;\n     EnQueue(&q,*T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       printf(\"请按长幼顺序输入结点%c的所有孩子: \",p->data);\n       gets(c);\n       l=strlen(c);\n       if(l>0) /* 有孩子 */\n       {\n         p1=p->firstchild=(CSTree)malloc(sizeof(CSNode)); /* 建立长子结点 */\n         p1->data=c[0];\n         for(i=1;i<l;i++)\n         {\n           p1->nextsibling=(CSTree)malloc(sizeof(CSNode)); /* 建立下一个兄弟结点 */\n           EnQueue(&q,p1); /* 入队上一个结点 */\n           p1=p1->nextsibling;\n           p1->data=c[i];\n         }\n         p1->nextsibling=NULL;\n         EnQueue(&q,p1); /* 入队最后一个结点 */\n       }\n       else\n         p->firstchild=NULL; /* 长子指针为空 */\n     }\n   }\n   else\n     *T=NULL; /* 空树 */\n }\n  Status TreeEmpty(CSTree T)\n { /* 初始条件：树T存在。操作结果：若T为空树，则返回TURE，否则返回FALSE */\n   if(T) /* T不空 */\n     return FALSE;\n   else\n     return TRUE;\n }\n  int TreeDepth(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的深度 */\n   CSTree p;\n   int depth,max=0;\n   if(!T) /* 树空 */\n     return 0;\n   if(!T->firstchild) /* 树无长子 */\n     return 1;\n   for(p=T->firstchild;p;p=p->nextsibling)\n   { /* 求子树深度的最大值 */\n     depth=TreeDepth(p);\n     if(depth>max)\n       max=depth;\n   }\n   return max+1; /* 树的深度=子树深度最大值+1 */\n }\n  TElemType Value(CSTree p)\n { /* 返回p所指结点的值 */\n   return p->data;\n }\n  TElemType Root(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的根 */\n   if(T)\n     return Value(T);\n   else\n     return Nil;\n }\n  CSTree Point(CSTree T,TElemType s)\n { /* 返回二叉链表(孩子—兄弟)树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队,伫列元素赋给a */\n       if(a->data==s)\n	 return a;\n       if(a->firstchild) /* 有长子 */\n         EnQueue(&q,a->firstchild); /* 入队长子 */\n       if(a->nextsibling) /* 有下一个兄弟 */\n         EnQueue(&q,a->nextsibling); /* 入队下一个兄弟 */\n     }\n   }\n   return NULL;\n }\n  Status Assign(CSTree *T,TElemType cur_e,TElemType value)\n { /* 初始条件：树T存在，cur_e是树T中结点的值。操作结果：改cur_e为value */\n   CSTree p;\n   if(*T) /* 非空树 */\n   {\n     p=Point(*T,cur_e); /* p为cur_e的指针 */\n     if(p) /* 找到cur_e */\n     {\n       p->data=value; /* 赋新值 */\n       return OK;\n     }\n   }\n   return ERROR; /* 树空或没找到 */\n }\n  TElemType Parent(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非根结点，则返回它的双亲，否则函数值为＂空＂*/\n   CSTree p,t;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T) /* 树非空 */\n   {\n     if(Value(T)==cur_e) /* 根结点值为cur_e */\n       return Nil;\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&p);\n       if(p->firstchild) /* p有长子 */\n       {\n         if(p->firstchild->data==cur_e) /* 长子为cur_e */\n           return Value(p); /* 返回双亲 */\n         t=p; /* 双亲指针赋给t */\n         p=p->firstchild; /* p指向长子 */\n         EnQueue(&q,p); /* 入队长子 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling; /* p指向下一个兄弟 */\n	 if(Value(p)==cur_e) /* 下一个兄弟为cur_e */\n	 return Value(t); /* 返回双亲 */\n	 EnQueue(&q,p); /* 入队下一个兄弟 */\n	 }\n       }\n     }\n   }\n   return Nil; /* 树空或没找到cur_e */\n }\n  TElemType LeftChild(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非叶子结点，则返回它的最左孩子，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->firstchild) /* 找到结点cur_e且结点cur_e有长子 */\n     return f->firstchild->data;\n   else\n     return Nil;\n }\n  TElemType RightSibling(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e有右兄弟，则返回它的右兄弟，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->nextsibling) /* 找到结点cur_e且结点cur_e有右兄弟 */\n     return f->nextsibling->data;\n   else\n     return Nil; /* 树空 */\n }\n  Status InsertChild(CSTree *T,CSTree p,int i,CSTree c)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度+1，非空树c与T不相交 */\n   /* 操作结果：插入c为T中p结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 插入c为p的长子 */\n     {\n       c->nextsibling=p->firstchild; /* p的原长子现是c的下一个兄弟(c本无兄弟) */\n       p->firstchild=c;\n     }\n     else /* 找插入点 */\n     {\n       p=p->firstchild; /* 指向p的长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到插入位置 */\n       {\n         c->nextsibling=p->nextsibling;\n         p->nextsibling=c;\n       }\n       else /* p原有孩子数小于i-1 */\n         return ERROR;\n     }\n     return OK;\n   }\n   else /* T空 */\n     return ERROR;\n }\n  Status DeleteChild(CSTree *T,CSTree p,int i)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度 */\n   /* 操作结果：删除T中p所指结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   CSTree b;\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 删除长子 */\n     {\n       b=p->firstchild;\n       p->firstchild=b->nextsibling; /* p的原次子现是长子 */\n       b->nextsibling=NULL;\n       DestroyTree(&b);\n     }\n     else /* 删除非长子 */\n     {\n       p=p->firstchild; /* p指向长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到第i棵子树 */\n       {\n         b=p->nextsibling;\n         p->nextsibling=b->nextsibling;\n         b->nextsibling=NULL;\n         DestroyTree(&b);\n       }\n       else /* p原有孩子数小于i */\n         return ERROR;\n     }\n     return OK;\n   }\n   else\n     return ERROR;\n }\n  void PostOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 后根遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   if(T)\n   {\n     if(T->firstchild) /* 有长子 */\n     {\n       PostOrderTraverse(T->firstchild,Visit); /* 后根遍历长子子树 */\n       p=T->firstchild->nextsibling; /* p指向长子的下一个兄弟 */\n       while(p)\n       {\n         PostOrderTraverse(p,Visit); /* 后根遍历下一个兄弟子树 */\n         p=p->nextsibling; /* p指向再下一个兄弟 */\n       }\n     }\n     Visit(Value(T)); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 层序遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T)\n   {\n     Visit(Value(T)); /* 先访问根结点 */\n     EnQueue(&q,T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       if(p->firstchild) /* 有长子 */\n       {\n         p=p->firstchild;\n         Visit(Value(p)); /* 访问长子结点 */\n         EnQueue(&q,p); /* 入队长子结点的指针 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling;\n           Visit(Value(p)); /* 访问下一个兄弟 */\n           EnQueue(&q,p); /* 入队兄弟结点的指针 */\n         }\n       }\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('743', '线索二叉树 (threaded binary tree)[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('744', '线索二叉树(保留遍历时结点在任一序列的前驱和后继的信息)：若结点有左子树，则其lchild域指示其左孩子，否则令lchild域指示其前驱；若结点有右子树，则其rchild域指示其右孩子，否则令rchild指示其后继。还需在结点结构中增加两个标志域LTag和RTag。LTag=0时，lchild域指示结点的左孩子，LTag=1时，lchild域指示结点的前驱；RTag=0时，rchild域指示结点的右孩子，RTag=1时，rchild域指示结点的后继。以这种结点结构构成的二叉链表作为二叉树的存储结构，叫做线索链表，其中指向结点前驱和后继的指针叫做线索，加上线索的二叉树称为线索二叉树。对二叉树以某种次序遍历使其变为线索二叉树的过程叫做线索化。若对二叉树进行中序遍历，则所得的线索二叉树称为中序线索二叉树，线索链表称为为中序线索链表。线索二叉树是一种物理结构。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('745', '在中序线索树找结点后继的规律是：若其右标志为1，则右链为线索，指示其后继，否则遍历其右子树时访问的第一个结点（右子树最左下的结点）为其后继；找结点前驱的规律是：若其左标志为1，则左链为线索，指示其前驱，否则遍历左子树时最后访问的一个结点（左子树中最右下的结点）为其前驱。 在后序线索树中找到结点的后继分三种情况：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('746', '若结点是二叉树的根，则其后继为空； 若结点是其双亲的右孩子，或是其双亲的左孩子且其双亲没有右子树，则其后继即为双亲结点； 若结点是其双亲的左孩子，且其双亲有右子树，则其后继为双亲右子树上按后序遍历列出的第一个结点。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('747', '二叉树的二叉线索存储表示：在线索链表上添加一个头结点，并令其lchild域的指针指向二叉树的根结点，其rchild域的指针指向中序遍历时访问的最后一个结点。令二叉树中序序列中的第一个结点的lchild域指针和最后一个结点的rchild域的指针均指向头结点，这样就创建了一个双向线索链表。二叉树常采用二叉链表方式存储。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('748', '/* 二叉树的二叉线索存储表示 */\n typedef enum{Link,Thread}PointerTag; /* Link(0)：指针，Thread(1)：线索 */\n typedef struct BiThrNode\n {\n   TElemType data;\n   struct BiThrNode *lchild,*rchild; /* 左右孩子指针 */\n   PointerTag LTag,RTag; /* 左右标志 */\n }BiThrNode,*BiThrTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('749', '基于C/C++的算法实现显示▼  /* 二叉树的二叉线索存储的基本操作 */\n void CreateBiThrTree(BiThrTree *T)\n { /* 按先序输入线索二叉树中结点的值，构造线索二叉树T。0(整型)/空格(字元型)表示空结点 */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil)\n     *T=NULL;\n   else\n   {\n     *T=(BiThrTree)malloc(sizeof(BiThrNode)); /* 生成根结点(先序) */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch; /* 给根结点赋植 */\n     CreateBiThrTree(&(*T)->lchild); /* 递回构造左子树 */\n     if((*T)->lchild) /* 有左孩子 */\n       (*T)->LTag=Link; /* 给左标志赋值(指标) */\n     CreateBiThrTree(&(*T)->rchild); /* 递回构造右子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       (*T)->RTag=Link; /* 给右标志赋值(指标) */\n   }\n }\n  BiThrTree pre; /* 全域变数，始终指向刚刚访问过的结点 */\n void InThreading(BiThrTree p)\n { /* 通过中序遍历进行中序线索化，线索化之后pre指向最后一个结点。演算法6.7 */\n   if(p) /* 线索二叉树不空 */\n   {\n     InThreading(p->lchild); /* 递回左子树线索化 */\n     if(!p->lchild) /* 没有左孩子 */\n     {\n       p->LTag=Thread; /* 左标志为线索(前驱) */\n       p->lchild=pre; /* 左孩子指标指向前驱 */\n     }\n     if(!pre->rchild) /* 前驱没有右孩子 */\n     {\n       pre->RTag=Thread; /* 前驱的右标志为线索(后继) */\n       pre->rchild=p; /* 前驱右孩子指标指向其后继(当前结点p) */\n     }\n     pre=p; /* 保持pre指向p的前驱 */\n     InThreading(p->rchild); /* 递回右子树线索化 */\n   }\n }\n  void InOrderThreading(BiThrTree *Thrt,BiThrTree T)\n { /* 中序遍历二叉树T，并将其中序线索化，Thrt指向头结点。演算法6.6 */\n   *Thrt=(BiThrTree)malloc(sizeof(BiThrNode));\n   if(!*Thrt) /* 生成头结点不成功 */\n     exit(OVERFLOW);\n   (*Thrt)->LTag=Link; /* 建头结点，左标志为指标 */\n   (*Thrt)->RTag=Thread; /* 右标志为线索 */\n   (*Thrt)->rchild=*Thrt; /* 右指针回指 */\n   if(!T) /* 若二叉树空，则左指针回指 */\n     (*Thrt)->lchild=*Thrt;\n   else\n   {\n     (*Thrt)->lchild=T; /* 头结点的左指标指向根结点 */\n     pre=*Thrt; /* pre(前驱)的初值指向头结点 */\n     InThreading(T); /* 中序遍历进行中序线索化，pre指向中序遍历的最后一个结点 */\n     pre->rchild=*Thrt; /* 最后一个结点的右指标指向头结点 */\n     pre->RTag=Thread; /* 最后一个结点的右标志为线索 */\n     (*Thrt)->rchild=pre; /* 头结点的右指标指向中序遍历的最后一个结点 */\n   }\n }\n  void InOrderTraverse_Thr(BiThrTree T,void(*Visit)(TElemType))\n { /* 中序遍历线索二叉树T(头结点)的非递回演算法。演算法6.5 */\n   BiThrTree p;\n   p=T->lchild; /* p指向根结点 */\n   while(p!=T)\n   { /* 空树或遍历结束时，p==T */\n     while(p->LTag==Link) /* 由根结点一直找到二叉树的最左结点 */\n       p=p->lchild;\n     Visit(p->data); /* 访问此结点 */\n     while(p->RTag==Thread&&p->rchild!=T) /* p->rchild是线索(后继)，且不是遍历的最后一个结点 */\n     {\n       p=p->rchild;\n       Visit(p->data); /* 访问后继结点 */\n     }\n     p=p->rchild; /* 若p->rchild不是线索(是右孩子)，p指向右孩子，返回回圈，*/\n   }              /* 找这棵子树中序遍历的第1个结点 */\n }\n  void PreThreading(BiThrTree p)\n { /* PreOrderThreading()调用的递回函数 */\n   if(!pre->rchild) /* p的前驱没有右孩子 */\n   {\n     pre->rchild=p; /* p前驱的后继指向p */\n     pre->RTag=Thread; /* pre的右孩子为线索 */\n   }\n   if(!p->lchild) /* p没有左孩子 */\n   {\n     p->LTag=Thread; /* p的左孩子为线索 */\n     p->lchild=pre; /* p的左孩子指向前驱 */\n   }\n   pre=p; /* 移动前驱 */\n   if(p->LTag==Link) /* p有左孩子 */\n     PreThreading(p->lchild); /* 对p的左孩子递回呼叫preThreading() */\n   if(p->RTag==Link) /* p有右孩子 */\n     PreThreading(p->rchild); /* 对p的右孩子递回呼叫preThreading() */\n }\n  void PreOrderThreading(BiThrTree *Thrt,BiThrTree T)\n { /* 先序线索化二叉树T，头结点的右指标指向先序遍历的最后1个结点 */\n   *Thrt=(BiThrTree)malloc(sizeof(BiThrNode));\n   if(!*Thrt) /* 生成头结点 */\n     exit(OVERFLOW);\n   (*Thrt)->LTag=Link; /* 头结点的左指针为孩子 */\n   (*Thrt)->RTag=Thread; /* 头结点的右指针为线索 */\n   (*Thrt)->rchild=*Thrt; /* 头结点的右指标指向自身 */\n   if(!T) /* 空树 */\n     (*Thrt)->lchild=*Thrt; /* 头结点的左指标也指向自身 */\n   else\n   { /* 非空树 */\n     (*Thrt)->lchild=T; /* 头结点的左指标指向根结点 */\n     pre=*Thrt; /* 前驱为头结点 */\n     PreThreading(T); /* 从头结点开始先序递回线索化 */\n     pre->rchild=*Thrt; /* 最后一个结点的后继指向头结点 */\n     pre->RTag=Thread;\n     (*Thrt)->rchild=pre; /* 头结点的后继指向最后一个结点 */\n   }\n }\n  void PreOrderTraverse_Thr(BiThrTree T,void(*Visit)(TElemType))\n { /* 先序遍历线索二叉树T(头结点)的非递回演算法 */\n   BiThrTree p=T->lchild; /* p指向根结点 */\n   while(p!=T) /* p没指向头结点(遍历的最后1个结点的后继指向头结点) */\n   {\n     Visit(p->data); /* 访问根结点 */\n     if(p->LTag==Link) /* p有左孩子 */\n       p=p->lchild; /* p指向左孩子(后继) */\n     else /* p无左孩子 */\n       p=p->rchild; /* p指向右孩子或后继 */\n   }\n }\n  void PostThreading(BiThrTree p)\n { /* PostOrderThreading()调用的递回函数 */\n   if(p) /* p不空 */\n   {\n     PostThreading(p->lchild); /* 对p的左孩子递回呼叫PostThreading() */\n     PostThreading(p->rchild); /* 对p的右孩子递回呼叫PostThreading() */\n     if(!p->lchild) /* p没有左孩子 */\n     {\n       p->LTag=Thread; /* p的左孩子为线索 */\n       p->lchild=pre; /* p的左孩子指向前驱 */\n     }\n     if(!pre->rchild) /* p的前驱没有右孩子 */\n     {\n       pre->RTag=Thread; /* p前驱的右孩子为线索 */\n       pre->rchild=p; /* p前驱的后继指向p */\n     }\n     pre=p; /* 移动前驱 */\n   }\n }\n  void PostOrderThreading(BiThrTree *Thrt,BiThrTree T)\n { /* 后序递回线索化二叉树 */\n   *Thrt=(BiThrTree)malloc(sizeof(BiThrNode));\n   if(!*Thrt) /* 生成头结点 */\n     exit(OVERFLOW);\n   (*Thrt)->LTag=Link; /* 头结点的左指针为孩子 */\n   (*Thrt)->RTag=Thread; /* 头结点的右指针为线索 */\n   if(!T) /* 空树 */\n     (*Thrt)->lchild=(*Thrt)->rchild=*Thrt; /* 头结点的左右指标指向自身 */\n   else\n   { /* 非空树 */\n     (*Thrt)->lchild=(*Thrt)->rchild=T; /* 头结点的左右指标指向根结点(最后一个结点) */\n     pre=*Thrt; /* 前驱为头结点 */\n     PostThreading(T); /* 从头结点开始后序递回线索化 */\n     if(pre->RTag!=Link) /* 最后一个结点没有右孩子 */\n     {\n       pre->rchild=*Thrt; /* 最后一个结点的后继指向头结点 */\n       pre->RTag=Thread;\n     }\n   }\n }\n  void DestroyBiTree(BiThrTree *T)\n { /* DestroyBiThrTree调用的递回函数，T指向根结点 */\n   if(*T) /* 非空树 */\n   {\n     if((*T)->LTag==0) /* 有左孩子 */\n       DestroyBiTree(&(*T)->lchild); /* 销毁左孩子子树 */\n     if((*T)->RTag==0) /* 有右孩子 */\n       DestroyBiTree(&(*T)->rchild); /* 销毁右孩子子树 */\n     free(*T); /* 释放根结点 */\n     T=NULL; /* 空指针赋0 */\n   }\n }\n  void DestroyBiThrTree(BiThrTree *Thrt)\n { /* 初始条件：线索二叉树Thrt存在。操作结果：销毁线索二叉树Thrt */\n   if(*Thrt) /* 头结点存在 */\n   {\n     if((*Thrt)->lchild) /* 根结点存在 */\n       DestroyBiTree(&(*Thrt)->lchild); /* 递回销毁头结点lchild所指二叉树 */\n     free(*Thrt); /* 释放头结点 */\n     *Thrt=NULL; /* 线索二叉树Thrt指针赋0 */\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('751', '/* 二叉树的二叉链表存储表示 */\n typedef struct BiTNode\n {\n   TElemType data;\n   struct BiTNode *lchild,*rchild; /* 左右孩子指针 */\n }BiTNode,*BiTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('752', '基于C/C++的实现算法显示▼  /* 二叉树的二叉链表存储的基本操作(22个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n #include\"func6-3.c\"\n /* 包括InitBiTree()、DestroyBiTree()、PreOrderTraverse()和InOrderTraverse()4函数 */\n  void CreateBiTree(BiTree *T)\n { /* 演算法6.4：按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造二叉链表表示的二叉树T。变数Nil表示空(子)树。有改动 */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiTree)malloc(sizeof(BiTNode)); /* 生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch;\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n   }\n }\n  Status BiTreeEmpty(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(T==NULL)  /*如果T=NULL,这样写便于理解，当然也可以写成if（!T）*/; \n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(BiTreeEmpty(T))\n     return Nil;\n   else\n     return T->data;\n }\n  TElemType Value(BiTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n TElemType Parent(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 树根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->lchild&&a->lchild->data==e||a->rchild&&a->rchild->data==e)\n       /* 找到e(是其左或右孩子) */\n         return a->data; /* 返回e的双亲的值 */\n       else /* 没找到e，则入队其左右孩子指针(如果非空) */\n       {\n         if(a->lchild)\n           EnQueue(&q,a->lchild);\n         if(a->rchild)\n           EnQueue(&q,a->rchild);\n       }\n     }\n   }\n   return Nil; /* 树空或没找到e */\n }\n  BiTree Point(BiTree T,TElemType s)\n { /* 返回二叉树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==s)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType LeftChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->rchild->data==e) /* p存在左右孩子且右孩子是e */\n         return p->lchild->data; /* 返回p的左孩子(e的左兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->lchild->data==e) /* p存在左右孩子且左孩子是e */\n         return p->rchild->data; /* 返回p的右孩子(e的右兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiTree p,int LR,BiTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点的 */\n   /*           原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       p->lchild=c;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       p->rchild=c;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  typedef BiTree SElemType; /* 设栈元素为二叉树的指针类型 */\n #include\"c3-1.h\" /* 顺序栈 */\n #include\"bo3-1.c\" /* 顺序栈的基本操作 */\n void InOrderTraverse1(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.3，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   InitStack(&S);\n   while(T||!StackEmpty(S))\n   {\n     if(T)\n     { /* 根指针进栈，遍历左子树 */\n       Push(&S,T);\n       T=T->lchild;\n     }\n     else\n     { /* 根指针退栈，访问根结点，遍历右子树 */\n       Pop(&S,&T);\n       Visit(T->data);\n       T=T->rchild;\n     }\n   }\n   printf(\"\\n\");\n }\n  void InOrderTraverse2(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.2，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   BiTree p;\n   InitStack(&S);\n   Push(&S,T); /* 根指针进栈 */\n   while(!StackEmpty(S))\n   {\n     while(GetTop(S,&p)&&p)\n       Push(&S,p->lchild); /* 向左走到尽头 */\n     Pop(&S,&p); /* 空指针退栈 */\n     if(!StackEmpty(S))\n     { /* 访问结点，向右一步 */\n       Pop(&S,&p);\n       Visit(p->data);\n       Push(&S,p->rchild);\n     }\n   }\n   printf(\"\\n\");\n }\n  void PostOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序递回遍历T，对每个结点调用函数Visit一次且仅一次 */\n   if(T) /* T不空 */\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 先后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 再后序遍历右子树 */\n     Visit(T->data); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：层序递回遍历T(利用伫列)，对每个结点调用函数Visit一次且仅一次 */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q); /* 初始化伫列q */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 伫列不空 */\n     {\n       DeQueue(&q,&a); /* 出队元素(指标),赋给a */\n       Visit(a->data); /* 访问a所指结点 */\n       if(a->lchild!=NULL) /* a有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队a的左孩子 */\n       if(a->rchild!=NULL) /* a有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队a的右孩子 */\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('753', '改进于二叉链表，增加父节点的指引，能更好地实现节点间的访问，不过算法相对复杂。 当二叉树用三叉链表表示时，有N个结点，就会有N+2个空指针。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('754', '/* 二叉树的三叉链表存储表示 */\n typedef struct BiTPNode\n {\n   TElemType data;\n   struct BiTPNode *parent,*lchild,*rchild; /* 父、左右孩子指针 */\n }BiTPNode,*BiPTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('755', '基于C/C++的实现算法显示▼  /* 二叉树的三叉链表存储的基本操作(21个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n void InitBiTree(BiPTree *T)\n { /* 操作结果：构造空二叉树T */\n   *T=NULL;\n }\n  void DestroyBiTree(BiPTree *T)\n { /* 初始条件：二叉树T存在。操作结果：销毁二叉树T */\n   if(*T) /* 非空树 */\n   {\n     if((*T)->lchild) /* 有左孩子 */\n       DestroyBiTree(&(*T)->lchild); /* 销毁左孩子子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       DestroyBiTree(&(*T)->rchild); /* 销毁右孩子子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL; /* 空指针赋0 */\n   }\n }\n  void CreateBiTree(BiPTree *T)\n { /* 按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造三叉链表表示的二叉树T */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiPTree)malloc(sizeof(BiTPNode)); /* 动态生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch; /* 给根结点赋值 */\n     (*T)->parent=NULL; /* 根结点无双亲 */\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     if((*T)->lchild) /* 有左孩子 */\n       (*T)->lchild->parent=*T; /* 给左孩子的双亲域赋值 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       (*T)->rchild->parent=*T; /* 给右孩子的双亲域赋值 */\n   }\n }\n  Status BiTreeEmpty(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(!T)\n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(T)\n     return T->data;\n   else\n     return Nil;\n }\n  TElemType Value(BiPTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiPTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiPTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n  BiPTree Point(BiPTree T,TElemType e)\n { /* 返回二叉树T中指向元素值为e的结点的指标。加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==e)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType Parent(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T) /* T中存在结点e且e是非根结点 */\n       return a->parent->data; /* 返回e的双亲的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->lchild&&a->parent->lchild!=a) /* T中存在结点e且e存在左兄弟 */\n       return a->parent->lchild->data; /* 返回e的左兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->rchild&&a->parent->rchild!=a) /* T中存在结点e且e存在右兄弟 */\n       return a->parent->rchild->data; /* 返回e的右兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiPTree p,int LR,BiPTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点 */\n   /*           的原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       if(c->rchild) /* c有右孩子(p原有左孩子) */\n         c->rchild->parent=c;\n       p->lchild=c;\n       c->parent=p;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       if(c->rchild) /* c有右孩子(p原有右孩子) */\n         c->rchild->parent=c;\n       p->rchild=c;\n       c->parent=p;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiPTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  void PreOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 先序递回遍历二叉树T */\n   if(T)\n   {\n     Visit(T); /* 先访问根结点 */\n     PreOrderTraverse(T->lchild,Visit); /* 再先序遍历左子树 */\n     PreOrderTraverse(T->rchild,Visit); /* 最后先序遍历右子树 */\n   }\n }\n  void InOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 中序递回遍历二叉树T */\n   if(T)\n   {\n     InOrderTraverse(T->lchild,Visit); /* 中序遍历左子树 */\n     Visit(T); /* 再访问根结点 */\n     InOrderTraverse(T->rchild,Visit); /* 最后中序遍历右子树 */\n   }\n }\n  void PostOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 后序递回遍历二叉树T */\n   if(T)\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 后序遍历右子树 */\n     Visit(T); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 层序遍历二叉树T(利用伫列) */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q);\n     EnQueue(&q,T);\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&a);\n       Visit(a);\n       if(a->lchild!=NULL)\n         EnQueue(&q,a->lchild);\n       if(a->rchild!=NULL)\n         EnQueue(&q,a->rchild);\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('756', '我们经常希望访问树中的每一个结点并且查看它的值。有很多常见的顺序来访问所有的结点，而且每一种都有有用的性质。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('757', '遍历二叉树：L、D、R分别表示遍历左子树、访问根结点和遍历右子树，则先(根)序遍历二叉树的顺序是DLR，中(根)序遍历二叉树的顺序是LDR，后(根)序遍历二叉树的顺序是LRD。还有按层遍历二叉树。这些方法的时间复杂度都是O(n)，n为结点个数。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('758', '如果T2是由有序树T转换而来的二叉树，那么T中结点的前序就是T2中结点的前序，T中结点的后序就是T2中结点的中序。任何一棵二叉树的叶结点在先序、中序和后序遍历中的相对次序不发改变。设n,m为一棵二叉树上的两个结点，在中序遍历时，n在m前的条件是n在m的左方。前序序列和中序序列相同的二叉树为空树或任一结点均无左孩子的非空二叉树；中序序列和后序序列相同的二叉树为空树或任一结点均无右孩子的非空二叉树；前序序列和后序序列相同的二叉树为空树或仅有一个结点的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('759', '假设我们有一个包含值的value和指向两个子结点的left和right的树结点结构。我们可以写出这样的过程：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('760', 'visit(node)\n    print node.value\n    if node.left  != null then visit(node.left)\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('761', '这样会用前序打印出树中的值。在前序，每个结点在访问它的子结点之前访问。类似地，如果打印语句在最后，每个结点在访问他的子节点之后访问，树中的值会用后序来打印。在这两种情况中，左子树中的值比右子树中得值先打印。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:22', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('762', 'visit(node)\n    if node.left  != null then visit(node.left)\n    print node.value\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('763', '最后，上面的中序遍历，每个结点在访问左子树和右子树之间访问。这在遍历二叉搜索树时很常用，因为它能用递增的顺序来遍历所有的值。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('764', '为什么呢？如果n是二叉搜索树的结点，那么n的左子树的所有结点的值都比n的值要小，而且n的右子树的所有节点的值都比n的值要大。因此，如果我们顺序遍历左子树，然后访问n，然后顺序遍历右子树。我们就已经循序访问了整个树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('765', '在这个二叉树中， 前序遍历的结果：2, 7, 2, 6, 5, 11, 5, 9, 4 后序遍历的结果：2, 5, 11, 6, 7, 4, 9, 5, 2 中序遍历的结果：2, 7, 5, 6, 11, 2, 5, 4, 9', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('766', '以上的递归算法使用与树的高度成比例的栈空间。如果我们在每个结点中存储指向父结点的指针，那样可以使用反复运算算法，只使用常数空间实现所有这些遍历。然而，指向父结点的指针占用更多的空间。这只在需要指向父节点的指针或栈空间有限时才使用。例如， 这是一个中序遍历的反复运算算法：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('767', 'visit(root)\n    prev    := null\n    current := root\n    next    := null\n    \n    while current != null\n        if prev == current.parent\n            prev := current\n            next := current.left\n        if next == null or prev == current.left\n            print current.value\n            prev := current\n            next := current.right\n        if next == null or prev == current.right\n            prev := current\n            next := current.parent\n        current := next', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('768', '用二叉树表示下述表达式：a+b*(c-d)-e/f 先序遍历的序列是：-+a*b-cd/ef 中序遍历的序列是：a+b*c-d-e/f 后序遍历的序列是：abcd-*+ef/-', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('769', '在深度优先级中，我们希望从根结点访问最远的结点。和图的深度优先搜索不同的是，不需记住访问过的每一个结点，因为树中不会有环。前序，中序和后序遍历都是深度优先遍历的特例。参见深度优先搜索。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('770', '和深度优先遍历不同，广度优先遍历会先访问离根节点最近的节点。参见广度优先搜索。 二叉树的广度优先遍历又称按层次遍历。算法借助队列实现。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('771', '一般有序树和二叉树之间有一一映射关系，能进行相互转换。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('772', 'n叉树转换为二叉树的方法：二叉树中结点x的左子结点为n叉树中结点x的左子结点；二叉树中结点x的右子结点为n叉树中结点x的第一个右边的同级结点y。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('773', '例如，在左边的树中，A有6个子结点{B,C,D,E,F,G}。它能被转换成右边的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('774', '在兄弟之间加一连接； 对每个结点，除了其左孩子外，去除其与其余孩子之间的联系； 以树的根结点为轴心，将整树顺时针转45度。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('775', '树的二叉链表标记法（孩子兄弟标记法）是树和二叉树转换的媒介。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('776', '/* 树的二叉链表(孩子—兄弟)存储表示 */\n typedef struct CSNode\n {\n   TElemType data;\n   struct CSNode *firstchild,*nextsibling;\n }CSNode,*CSTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('777', '树的二叉链表存储的基本操作[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('778', '基于C/C++的算法实现显示▼  /* 树的二叉链表(孩子—兄弟)存储的基本操作(17个) */\n #define ClearTree DestroyTree /* 二者操作相同 */\n #include\"func6-2.c\" /* 包括PreOrderTraverse() */\n void InitTree(CSTree *T)\n { /* 操作结果：构造空树T */\n   *T=NULL;\n }\n  void DestroyTree(CSTree *T)\n { /* 初始条件：树T存在。操作结果：销毁树T */\n   if(*T)\n   {\n     if((*T)->firstchild) /* T有长子 */\n       DestroyTree(&(*T)->firstchild); /* 销毁T的长子为根结点的子树 */\n     if((*T)->nextsibling) /* T有下一个兄弟 */\n       DestroyTree(&(*T)->nextsibling); /* 销毁T的下一个兄弟为根结点的子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL;\n   }\n }\n  typedef CSTree QElemType; /* 定义伫列元素类型 */\n #include\"c3-2.h\" /* 定义LinkQueue类型(链伫列) */\n #include\"bo3-2.c\" /* LinkQueue类型的基本操作 */\n void CreateTree(CSTree *T)\n { /* 构造树T */\n   char c[20]; /* 临时存放孩子结点(设不超过20个)的值 */\n   CSTree p,p1;\n   LinkQueue q;\n   int i,l;\n   InitQueue(&q);\n   printf(\"请输入根结点(字元型,空格为空): \");\n   scanf(\"%c%*c\",&c[0]);\n   if(c[0]!=Nil) /* 非空树 */\n   {\n     *T=(CSTree)malloc(sizeof(CSNode)); /* 建立根结点 */\n     (*T)->data=c[0];\n     (*T)->nextsibling=NULL;\n     EnQueue(&q,*T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       printf(\"请按长幼顺序输入结点%c的所有孩子: \",p->data);\n       gets(c);\n       l=strlen(c);\n       if(l>0) /* 有孩子 */\n       {\n         p1=p->firstchild=(CSTree)malloc(sizeof(CSNode)); /* 建立长子结点 */\n         p1->data=c[0];\n         for(i=1;i<l;i++)\n         {\n           p1->nextsibling=(CSTree)malloc(sizeof(CSNode)); /* 建立下一个兄弟结点 */\n           EnQueue(&q,p1); /* 入队上一个结点 */\n           p1=p1->nextsibling;\n           p1->data=c[i];\n         }\n         p1->nextsibling=NULL;\n         EnQueue(&q,p1); /* 入队最后一个结点 */\n       }\n       else\n         p->firstchild=NULL; /* 长子指针为空 */\n     }\n   }\n   else\n     *T=NULL; /* 空树 */\n }\n  Status TreeEmpty(CSTree T)\n { /* 初始条件：树T存在。操作结果：若T为空树，则返回TURE，否则返回FALSE */\n   if(T) /* T不空 */\n     return FALSE;\n   else\n     return TRUE;\n }\n  int TreeDepth(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的深度 */\n   CSTree p;\n   int depth,max=0;\n   if(!T) /* 树空 */\n     return 0;\n   if(!T->firstchild) /* 树无长子 */\n     return 1;\n   for(p=T->firstchild;p;p=p->nextsibling)\n   { /* 求子树深度的最大值 */\n     depth=TreeDepth(p);\n     if(depth>max)\n       max=depth;\n   }\n   return max+1; /* 树的深度=子树深度最大值+1 */\n }\n  TElemType Value(CSTree p)\n { /* 返回p所指结点的值 */\n   return p->data;\n }\n  TElemType Root(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的根 */\n   if(T)\n     return Value(T);\n   else\n     return Nil;\n }\n  CSTree Point(CSTree T,TElemType s)\n { /* 返回二叉链表(孩子—兄弟)树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队,伫列元素赋给a */\n       if(a->data==s)\n	 return a;\n       if(a->firstchild) /* 有长子 */\n         EnQueue(&q,a->firstchild); /* 入队长子 */\n       if(a->nextsibling) /* 有下一个兄弟 */\n         EnQueue(&q,a->nextsibling); /* 入队下一个兄弟 */\n     }\n   }\n   return NULL;\n }\n  Status Assign(CSTree *T,TElemType cur_e,TElemType value)\n { /* 初始条件：树T存在，cur_e是树T中结点的值。操作结果：改cur_e为value */\n   CSTree p;\n   if(*T) /* 非空树 */\n   {\n     p=Point(*T,cur_e); /* p为cur_e的指针 */\n     if(p) /* 找到cur_e */\n     {\n       p->data=value; /* 赋新值 */\n       return OK;\n     }\n   }\n   return ERROR; /* 树空或没找到 */\n }\n  TElemType Parent(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非根结点，则返回它的双亲，否则函数值为＂空＂*/\n   CSTree p,t;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T) /* 树非空 */\n   {\n     if(Value(T)==cur_e) /* 根结点值为cur_e */\n       return Nil;\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&p);\n       if(p->firstchild) /* p有长子 */\n       {\n         if(p->firstchild->data==cur_e) /* 长子为cur_e */\n           return Value(p); /* 返回双亲 */\n         t=p; /* 双亲指针赋给t */\n         p=p->firstchild; /* p指向长子 */\n         EnQueue(&q,p); /* 入队长子 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling; /* p指向下一个兄弟 */\n	 if(Value(p)==cur_e) /* 下一个兄弟为cur_e */\n	 return Value(t); /* 返回双亲 */\n	 EnQueue(&q,p); /* 入队下一个兄弟 */\n	 }\n       }\n     }\n   }\n   return Nil; /* 树空或没找到cur_e */\n }\n  TElemType LeftChild(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非叶子结点，则返回它的最左孩子，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->firstchild) /* 找到结点cur_e且结点cur_e有长子 */\n     return f->firstchild->data;\n   else\n     return Nil;\n }\n  TElemType RightSibling(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e有右兄弟，则返回它的右兄弟，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->nextsibling) /* 找到结点cur_e且结点cur_e有右兄弟 */\n     return f->nextsibling->data;\n   else\n     return Nil; /* 树空 */\n }\n  Status InsertChild(CSTree *T,CSTree p,int i,CSTree c)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度+1，非空树c与T不相交 */\n   /* 操作结果：插入c为T中p结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 插入c为p的长子 */\n     {\n       c->nextsibling=p->firstchild; /* p的原长子现是c的下一个兄弟(c本无兄弟) */\n       p->firstchild=c;\n     }\n     else /* 找插入点 */\n     {\n       p=p->firstchild; /* 指向p的长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到插入位置 */\n       {\n         c->nextsibling=p->nextsibling;\n         p->nextsibling=c;\n       }\n       else /* p原有孩子数小于i-1 */\n         return ERROR;\n     }\n     return OK;\n   }\n   else /* T空 */\n     return ERROR;\n }\n  Status DeleteChild(CSTree *T,CSTree p,int i)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度 */\n   /* 操作结果：删除T中p所指结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   CSTree b;\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 删除长子 */\n     {\n       b=p->firstchild;\n       p->firstchild=b->nextsibling; /* p的原次子现是长子 */\n       b->nextsibling=NULL;\n       DestroyTree(&b);\n     }\n     else /* 删除非长子 */\n     {\n       p=p->firstchild; /* p指向长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到第i棵子树 */\n       {\n         b=p->nextsibling;\n         p->nextsibling=b->nextsibling;\n         b->nextsibling=NULL;\n         DestroyTree(&b);\n       }\n       else /* p原有孩子数小于i */\n         return ERROR;\n     }\n     return OK;\n   }\n   else\n     return ERROR;\n }\n  void PostOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 后根遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   if(T)\n   {\n     if(T->firstchild) /* 有长子 */\n     {\n       PostOrderTraverse(T->firstchild,Visit); /* 后根遍历长子子树 */\n       p=T->firstchild->nextsibling; /* p指向长子的下一个兄弟 */\n       while(p)\n       {\n         PostOrderTraverse(p,Visit); /* 后根遍历下一个兄弟子树 */\n         p=p->nextsibling; /* p指向再下一个兄弟 */\n       }\n     }\n     Visit(Value(T)); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 层序遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T)\n   {\n     Visit(Value(T)); /* 先访问根结点 */\n     EnQueue(&q,T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       if(p->firstchild) /* 有长子 */\n       {\n         p=p->firstchild;\n         Visit(Value(p)); /* 访问长子结点 */\n         EnQueue(&q,p); /* 入队长子结点的指针 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling;\n           Visit(Value(p)); /* 访问下一个兄弟 */\n           EnQueue(&q,p); /* 入队兄弟结点的指针 */\n         }\n       }\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('779', '线索二叉树 (threaded binary tree)[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('780', '线索二叉树(保留遍历时结点在任一序列的前驱和后继的信息)：若结点有左子树，则其lchild域指示其左孩子，否则令lchild域指示其前驱；若结点有右子树，则其rchild域指示其右孩子，否则令rchild指示其后继。还需在结点结构中增加两个标志域LTag和RTag。LTag=0时，lchild域指示结点的左孩子，LTag=1时，lchild域指示结点的前驱；RTag=0时，rchild域指示结点的右孩子，RTag=1时，rchild域指示结点的后继。以这种结点结构构成的二叉链表作为二叉树的存储结构，叫做线索链表，其中指向结点前驱和后继的指针叫做线索，加上线索的二叉树称为线索二叉树。对二叉树以某种次序遍历使其变为线索二叉树的过程叫做线索化。若对二叉树进行中序遍历，则所得的线索二叉树称为中序线索二叉树，线索链表称为为中序线索链表。线索二叉树是一种物理结构。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('781', '在中序线索树找结点后继的规律是：若其右标志为1，则右链为线索，指示其后继，否则遍历其右子树时访问的第一个结点（右子树最左下的结点）为其后继；找结点前驱的规律是：若其左标志为1，则左链为线索，指示其前驱，否则遍历左子树时最后访问的一个结点（左子树中最右下的结点）为其前驱。 在后序线索树中找到结点的后继分三种情况：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('782', '若结点是二叉树的根，则其后继为空； 若结点是其双亲的右孩子，或是其双亲的左孩子且其双亲没有右子树，则其后继即为双亲结点； 若结点是其双亲的左孩子，且其双亲有右子树，则其后继为双亲右子树上按后序遍历列出的第一个结点。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('783', '二叉树的二叉线索存储表示：在线索链表上添加一个头结点，并令其lchild域的指针指向二叉树的根结点，其rchild域的指针指向中序遍历时访问的最后一个结点。令二叉树中序序列中的第一个结点的lchild域指针和最后一个结点的rchild域的指针均指向头结点，这样就创建了一个双向线索链表。二叉树常采用二叉链表方式存储。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('784', '/* 二叉树的二叉线索存储表示 */\n typedef enum{Link,Thread}PointerTag; /* Link(0)：指针，Thread(1)：线索 */\n typedef struct BiThrNode\n {\n   TElemType data;\n   struct BiThrNode *lchild,*rchild; /* 左右孩子指针 */\n   PointerTag LTag,RTag; /* 左右标志 */\n }BiThrNode,*BiThrTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('785', '基于C/C++的算法实现显示▼  /* 二叉树的二叉线索存储的基本操作 */\n void CreateBiThrTree(BiThrTree *T)\n { /* 按先序输入线索二叉树中结点的值，构造线索二叉树T。0(整型)/空格(字元型)表示空结点 */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil)\n     *T=NULL;\n   else\n   {\n     *T=(BiThrTree)malloc(sizeof(BiThrNode)); /* 生成根结点(先序) */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch; /* 给根结点赋植 */\n     CreateBiThrTree(&(*T)->lchild); /* 递回构造左子树 */\n     if((*T)->lchild) /* 有左孩子 */\n       (*T)->LTag=Link; /* 给左标志赋值(指标) */\n     CreateBiThrTree(&(*T)->rchild); /* 递回构造右子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       (*T)->RTag=Link; /* 给右标志赋值(指标) */\n   }\n }\n  BiThrTree pre; /* 全域变数，始终指向刚刚访问过的结点 */\n void InThreading(BiThrTree p)\n { /* 通过中序遍历进行中序线索化，线索化之后pre指向最后一个结点。演算法6.7 */\n   if(p) /* 线索二叉树不空 */\n   {\n     InThreading(p->lchild); /* 递回左子树线索化 */\n     if(!p->lchild) /* 没有左孩子 */\n     {\n       p->LTag=Thread; /* 左标志为线索(前驱) */\n       p->lchild=pre; /* 左孩子指标指向前驱 */\n     }\n     if(!pre->rchild) /* 前驱没有右孩子 */\n     {\n       pre->RTag=Thread; /* 前驱的右标志为线索(后继) */\n       pre->rchild=p; /* 前驱右孩子指标指向其后继(当前结点p) */\n     }\n     pre=p; /* 保持pre指向p的前驱 */\n     InThreading(p->rchild); /* 递回右子树线索化 */\n   }\n }\n  void InOrderThreading(BiThrTree *Thrt,BiThrTree T)\n { /* 中序遍历二叉树T，并将其中序线索化，Thrt指向头结点。演算法6.6 */\n   *Thrt=(BiThrTree)malloc(sizeof(BiThrNode));\n   if(!*Thrt) /* 生成头结点不成功 */\n     exit(OVERFLOW);\n   (*Thrt)->LTag=Link; /* 建头结点，左标志为指标 */\n   (*Thrt)->RTag=Thread; /* 右标志为线索 */\n   (*Thrt)->rchild=*Thrt; /* 右指针回指 */\n   if(!T) /* 若二叉树空，则左指针回指 */\n     (*Thrt)->lchild=*Thrt;\n   else\n   {\n     (*Thrt)->lchild=T; /* 头结点的左指标指向根结点 */\n     pre=*Thrt; /* pre(前驱)的初值指向头结点 */\n     InThreading(T); /* 中序遍历进行中序线索化，pre指向中序遍历的最后一个结点 */\n     pre->rchild=*Thrt; /* 最后一个结点的右指标指向头结点 */\n     pre->RTag=Thread; /* 最后一个结点的右标志为线索 */\n     (*Thrt)->rchild=pre; /* 头结点的右指标指向中序遍历的最后一个结点 */\n   }\n }\n  void InOrderTraverse_Thr(BiThrTree T,void(*Visit)(TElemType))\n { /* 中序遍历线索二叉树T(头结点)的非递回演算法。演算法6.5 */\n   BiThrTree p;\n   p=T->lchild; /* p指向根结点 */\n   while(p!=T)\n   { /* 空树或遍历结束时，p==T */\n     while(p->LTag==Link) /* 由根结点一直找到二叉树的最左结点 */\n       p=p->lchild;\n     Visit(p->data); /* 访问此结点 */\n     while(p->RTag==Thread&&p->rchild!=T) /* p->rchild是线索(后继)，且不是遍历的最后一个结点 */\n     {\n       p=p->rchild;\n       Visit(p->data); /* 访问后继结点 */\n     }\n     p=p->rchild; /* 若p->rchild不是线索(是右孩子)，p指向右孩子，返回回圈，*/\n   }              /* 找这棵子树中序遍历的第1个结点 */\n }\n  void PreThreading(BiThrTree p)\n { /* PreOrderThreading()调用的递回函数 */\n   if(!pre->rchild) /* p的前驱没有右孩子 */\n   {\n     pre->rchild=p; /* p前驱的后继指向p */\n     pre->RTag=Thread; /* pre的右孩子为线索 */\n   }\n   if(!p->lchild) /* p没有左孩子 */\n   {\n     p->LTag=Thread; /* p的左孩子为线索 */\n     p->lchild=pre; /* p的左孩子指向前驱 */\n   }\n   pre=p; /* 移动前驱 */\n   if(p->LTag==Link) /* p有左孩子 */\n     PreThreading(p->lchild); /* 对p的左孩子递回呼叫preThreading() */\n   if(p->RTag==Link) /* p有右孩子 */\n     PreThreading(p->rchild); /* 对p的右孩子递回呼叫preThreading() */\n }\n  void PreOrderThreading(BiThrTree *Thrt,BiThrTree T)\n { /* 先序线索化二叉树T，头结点的右指标指向先序遍历的最后1个结点 */\n   *Thrt=(BiThrTree)malloc(sizeof(BiThrNode));\n   if(!*Thrt) /* 生成头结点 */\n     exit(OVERFLOW);\n   (*Thrt)->LTag=Link; /* 头结点的左指针为孩子 */\n   (*Thrt)->RTag=Thread; /* 头结点的右指针为线索 */\n   (*Thrt)->rchild=*Thrt; /* 头结点的右指标指向自身 */\n   if(!T) /* 空树 */\n     (*Thrt)->lchild=*Thrt; /* 头结点的左指标也指向自身 */\n   else\n   { /* 非空树 */\n     (*Thrt)->lchild=T; /* 头结点的左指标指向根结点 */\n     pre=*Thrt; /* 前驱为头结点 */\n     PreThreading(T); /* 从头结点开始先序递回线索化 */\n     pre->rchild=*Thrt; /* 最后一个结点的后继指向头结点 */\n     pre->RTag=Thread;\n     (*Thrt)->rchild=pre; /* 头结点的后继指向最后一个结点 */\n   }\n }\n  void PreOrderTraverse_Thr(BiThrTree T,void(*Visit)(TElemType))\n { /* 先序遍历线索二叉树T(头结点)的非递回演算法 */\n   BiThrTree p=T->lchild; /* p指向根结点 */\n   while(p!=T) /* p没指向头结点(遍历的最后1个结点的后继指向头结点) */\n   {\n     Visit(p->data); /* 访问根结点 */\n     if(p->LTag==Link) /* p有左孩子 */\n       p=p->lchild; /* p指向左孩子(后继) */\n     else /* p无左孩子 */\n       p=p->rchild; /* p指向右孩子或后继 */\n   }\n }\n  void PostThreading(BiThrTree p)\n { /* PostOrderThreading()调用的递回函数 */\n   if(p) /* p不空 */\n   {\n     PostThreading(p->lchild); /* 对p的左孩子递回呼叫PostThreading() */\n     PostThreading(p->rchild); /* 对p的右孩子递回呼叫PostThreading() */\n     if(!p->lchild) /* p没有左孩子 */\n     {\n       p->LTag=Thread; /* p的左孩子为线索 */\n       p->lchild=pre; /* p的左孩子指向前驱 */\n     }\n     if(!pre->rchild) /* p的前驱没有右孩子 */\n     {\n       pre->RTag=Thread; /* p前驱的右孩子为线索 */\n       pre->rchild=p; /* p前驱的后继指向p */\n     }\n     pre=p; /* 移动前驱 */\n   }\n }\n  void PostOrderThreading(BiThrTree *Thrt,BiThrTree T)\n { /* 后序递回线索化二叉树 */\n   *Thrt=(BiThrTree)malloc(sizeof(BiThrNode));\n   if(!*Thrt) /* 生成头结点 */\n     exit(OVERFLOW);\n   (*Thrt)->LTag=Link; /* 头结点的左指针为孩子 */\n   (*Thrt)->RTag=Thread; /* 头结点的右指针为线索 */\n   if(!T) /* 空树 */\n     (*Thrt)->lchild=(*Thrt)->rchild=*Thrt; /* 头结点的左右指标指向自身 */\n   else\n   { /* 非空树 */\n     (*Thrt)->lchild=(*Thrt)->rchild=T; /* 头结点的左右指标指向根结点(最后一个结点) */\n     pre=*Thrt; /* 前驱为头结点 */\n     PostThreading(T); /* 从头结点开始后序递回线索化 */\n     if(pre->RTag!=Link) /* 最后一个结点没有右孩子 */\n     {\n       pre->rchild=*Thrt; /* 最后一个结点的后继指向头结点 */\n       pre->RTag=Thread;\n     }\n   }\n }\n  void DestroyBiTree(BiThrTree *T)\n { /* DestroyBiThrTree调用的递回函数，T指向根结点 */\n   if(*T) /* 非空树 */\n   {\n     if((*T)->LTag==0) /* 有左孩子 */\n       DestroyBiTree(&(*T)->lchild); /* 销毁左孩子子树 */\n     if((*T)->RTag==0) /* 有右孩子 */\n       DestroyBiTree(&(*T)->rchild); /* 销毁右孩子子树 */\n     free(*T); /* 释放根结点 */\n     T=NULL; /* 空指针赋0 */\n   }\n }\n  void DestroyBiThrTree(BiThrTree *Thrt)\n { /* 初始条件：线索二叉树Thrt存在。操作结果：销毁线索二叉树Thrt */\n   if(*Thrt) /* 头结点存在 */\n   {\n     if((*Thrt)->lchild) /* 根结点存在 */\n       DestroyBiTree(&(*Thrt)->lchild); /* 递回销毁头结点lchild所指二叉树 */\n     free(*Thrt); /* 释放头结点 */\n     *Thrt=NULL; /* 线索二叉树Thrt指针赋0 */\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:23', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('787', '/* 二叉树的二叉链表存储表示 */\n typedef struct BiTNode\n {\n   TElemType data;\n   struct BiTNode *lchild,*rchild; /* 左右孩子指针 */\n }BiTNode,*BiTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('788', '基于C/C++的实现算法显示▼  /* 二叉树的二叉链表存储的基本操作(22个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n #include\"func6-3.c\"\n /* 包括InitBiTree()、DestroyBiTree()、PreOrderTraverse()和InOrderTraverse()4函数 */\n  void CreateBiTree(BiTree *T)\n { /* 演算法6.4：按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造二叉链表表示的二叉树T。变数Nil表示空(子)树。有改动 */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiTree)malloc(sizeof(BiTNode)); /* 生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch;\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n   }\n }\n  Status BiTreeEmpty(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(T==NULL)  /*如果T=NULL,这样写便于理解，当然也可以写成if（!T）*/; \n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(BiTreeEmpty(T))\n     return Nil;\n   else\n     return T->data;\n }\n  TElemType Value(BiTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n TElemType Parent(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 树根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->lchild&&a->lchild->data==e||a->rchild&&a->rchild->data==e)\n       /* 找到e(是其左或右孩子) */\n         return a->data; /* 返回e的双亲的值 */\n       else /* 没找到e，则入队其左右孩子指针(如果非空) */\n       {\n         if(a->lchild)\n           EnQueue(&q,a->lchild);\n         if(a->rchild)\n           EnQueue(&q,a->rchild);\n       }\n     }\n   }\n   return Nil; /* 树空或没找到e */\n }\n  BiTree Point(BiTree T,TElemType s)\n { /* 返回二叉树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==s)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType LeftChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->rchild->data==e) /* p存在左右孩子且右孩子是e */\n         return p->lchild->data; /* 返回p的左孩子(e的左兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->lchild->data==e) /* p存在左右孩子且左孩子是e */\n         return p->rchild->data; /* 返回p的右孩子(e的右兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiTree p,int LR,BiTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点的 */\n   /*           原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       p->lchild=c;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       p->rchild=c;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  typedef BiTree SElemType; /* 设栈元素为二叉树的指针类型 */\n #include\"c3-1.h\" /* 顺序栈 */\n #include\"bo3-1.c\" /* 顺序栈的基本操作 */\n void InOrderTraverse1(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.3，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   InitStack(&S);\n   while(T||!StackEmpty(S))\n   {\n     if(T)\n     { /* 根指针进栈，遍历左子树 */\n       Push(&S,T);\n       T=T->lchild;\n     }\n     else\n     { /* 根指针退栈，访问根结点，遍历右子树 */\n       Pop(&S,&T);\n       Visit(T->data);\n       T=T->rchild;\n     }\n   }\n   printf(\"\\n\");\n }\n  void InOrderTraverse2(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.2，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   BiTree p;\n   InitStack(&S);\n   Push(&S,T); /* 根指针进栈 */\n   while(!StackEmpty(S))\n   {\n     while(GetTop(S,&p)&&p)\n       Push(&S,p->lchild); /* 向左走到尽头 */\n     Pop(&S,&p); /* 空指针退栈 */\n     if(!StackEmpty(S))\n     { /* 访问结点，向右一步 */\n       Pop(&S,&p);\n       Visit(p->data);\n       Push(&S,p->rchild);\n     }\n   }\n   printf(\"\\n\");\n }\n  void PostOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序递回遍历T，对每个结点调用函数Visit一次且仅一次 */\n   if(T) /* T不空 */\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 先后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 再后序遍历右子树 */\n     Visit(T->data); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：层序递回遍历T(利用伫列)，对每个结点调用函数Visit一次且仅一次 */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q); /* 初始化伫列q */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 伫列不空 */\n     {\n       DeQueue(&q,&a); /* 出队元素(指标),赋给a */\n       Visit(a->data); /* 访问a所指结点 */\n       if(a->lchild!=NULL) /* a有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队a的左孩子 */\n       if(a->rchild!=NULL) /* a有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队a的右孩子 */\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('789', '改进于二叉链表，增加父节点的指引，能更好地实现节点间的访问，不过算法相对复杂。 当二叉树用三叉链表表示时，有N个结点，就会有N+2个空指针。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('790', '/* 二叉树的三叉链表存储表示 */\n typedef struct BiTPNode\n {\n   TElemType data;\n   struct BiTPNode *parent,*lchild,*rchild; /* 父、左右孩子指针 */\n }BiTPNode,*BiPTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('791', '基于C/C++的实现算法显示▼  /* 二叉树的三叉链表存储的基本操作(21个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n void InitBiTree(BiPTree *T)\n { /* 操作结果：构造空二叉树T */\n   *T=NULL;\n }\n  void DestroyBiTree(BiPTree *T)\n { /* 初始条件：二叉树T存在。操作结果：销毁二叉树T */\n   if(*T) /* 非空树 */\n   {\n     if((*T)->lchild) /* 有左孩子 */\n       DestroyBiTree(&(*T)->lchild); /* 销毁左孩子子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       DestroyBiTree(&(*T)->rchild); /* 销毁右孩子子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL; /* 空指针赋0 */\n   }\n }\n  void CreateBiTree(BiPTree *T)\n { /* 按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造三叉链表表示的二叉树T */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiPTree)malloc(sizeof(BiTPNode)); /* 动态生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch; /* 给根结点赋值 */\n     (*T)->parent=NULL; /* 根结点无双亲 */\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     if((*T)->lchild) /* 有左孩子 */\n       (*T)->lchild->parent=*T; /* 给左孩子的双亲域赋值 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       (*T)->rchild->parent=*T; /* 给右孩子的双亲域赋值 */\n   }\n }\n  Status BiTreeEmpty(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(!T)\n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(T)\n     return T->data;\n   else\n     return Nil;\n }\n  TElemType Value(BiPTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiPTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiPTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n  BiPTree Point(BiPTree T,TElemType e)\n { /* 返回二叉树T中指向元素值为e的结点的指标。加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==e)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType Parent(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T) /* T中存在结点e且e是非根结点 */\n       return a->parent->data; /* 返回e的双亲的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->lchild&&a->parent->lchild!=a) /* T中存在结点e且e存在左兄弟 */\n       return a->parent->lchild->data; /* 返回e的左兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->rchild&&a->parent->rchild!=a) /* T中存在结点e且e存在右兄弟 */\n       return a->parent->rchild->data; /* 返回e的右兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiPTree p,int LR,BiPTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点 */\n   /*           的原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       if(c->rchild) /* c有右孩子(p原有左孩子) */\n         c->rchild->parent=c;\n       p->lchild=c;\n       c->parent=p;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       if(c->rchild) /* c有右孩子(p原有右孩子) */\n         c->rchild->parent=c;\n       p->rchild=c;\n       c->parent=p;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiPTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  void PreOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 先序递回遍历二叉树T */\n   if(T)\n   {\n     Visit(T); /* 先访问根结点 */\n     PreOrderTraverse(T->lchild,Visit); /* 再先序遍历左子树 */\n     PreOrderTraverse(T->rchild,Visit); /* 最后先序遍历右子树 */\n   }\n }\n  void InOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 中序递回遍历二叉树T */\n   if(T)\n   {\n     InOrderTraverse(T->lchild,Visit); /* 中序遍历左子树 */\n     Visit(T); /* 再访问根结点 */\n     InOrderTraverse(T->rchild,Visit); /* 最后中序遍历右子树 */\n   }\n }\n  void PostOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 后序递回遍历二叉树T */\n   if(T)\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 后序遍历右子树 */\n     Visit(T); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 层序遍历二叉树T(利用伫列) */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q);\n     EnQueue(&q,T);\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&a);\n       Visit(a);\n       if(a->lchild!=NULL)\n         EnQueue(&q,a->lchild);\n       if(a->rchild!=NULL)\n         EnQueue(&q,a->rchild);\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('792', '我们经常希望访问树中的每一个结点并且查看它的值。有很多常见的顺序来访问所有的结点，而且每一种都有有用的性质。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('793', '遍历二叉树：L、D、R分别表示遍历左子树、访问根结点和遍历右子树，则先(根)序遍历二叉树的顺序是DLR，中(根)序遍历二叉树的顺序是LDR，后(根)序遍历二叉树的顺序是LRD。还有按层遍历二叉树。这些方法的时间复杂度都是O(n)，n为结点个数。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('794', '如果T2是由有序树T转换而来的二叉树，那么T中结点的前序就是T2中结点的前序，T中结点的后序就是T2中结点的中序。任何一棵二叉树的叶结点在先序、中序和后序遍历中的相对次序不发改变。设n,m为一棵二叉树上的两个结点，在中序遍历时，n在m前的条件是n在m的左方。前序序列和中序序列相同的二叉树为空树或任一结点均无左孩子的非空二叉树；中序序列和后序序列相同的二叉树为空树或任一结点均无右孩子的非空二叉树；前序序列和后序序列相同的二叉树为空树或仅有一个结点的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('795', '假设我们有一个包含值的value和指向两个子结点的left和right的树结点结构。我们可以写出这样的过程：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('796', 'visit(node)\n    print node.value\n    if node.left  != null then visit(node.left)\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('797', '这样会用前序打印出树中的值。在前序，每个结点在访问它的子结点之前访问。类似地，如果打印语句在最后，每个结点在访问他的子节点之后访问，树中的值会用后序来打印。在这两种情况中，左子树中的值比右子树中得值先打印。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('798', 'visit(node)\n    if node.left  != null then visit(node.left)\n    print node.value\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('799', '最后，上面的中序遍历，每个结点在访问左子树和右子树之间访问。这在遍历二叉搜索树时很常用，因为它能用递增的顺序来遍历所有的值。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('800', '为什么呢？如果n是二叉搜索树的结点，那么n的左子树的所有结点的值都比n的值要小，而且n的右子树的所有节点的值都比n的值要大。因此，如果我们顺序遍历左子树，然后访问n，然后顺序遍历右子树。我们就已经循序访问了整个树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('801', '在这个二叉树中， 前序遍历的结果：2, 7, 2, 6, 5, 11, 5, 9, 4 后序遍历的结果：2, 5, 11, 6, 7, 4, 9, 5, 2 中序遍历的结果：2, 7, 5, 6, 11, 2, 5, 4, 9', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('802', '以上的递归算法使用与树的高度成比例的栈空间。如果我们在每个结点中存储指向父结点的指针，那样可以使用反复运算算法，只使用常数空间实现所有这些遍历。然而，指向父结点的指针占用更多的空间。这只在需要指向父节点的指针或栈空间有限时才使用。例如， 这是一个中序遍历的反复运算算法：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('803', 'visit(root)\n    prev    := null\n    current := root\n    next    := null\n    \n    while current != null\n        if prev == current.parent\n            prev := current\n            next := current.left\n        if next == null or prev == current.left\n            print current.value\n            prev := current\n            next := current.right\n        if next == null or prev == current.right\n            prev := current\n            next := current.parent\n        current := next', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('804', '用二叉树表示下述表达式：a+b*(c-d)-e/f 先序遍历的序列是：-+a*b-cd/ef 中序遍历的序列是：a+b*c-d-e/f 后序遍历的序列是：abcd-*+ef/-', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('805', '在深度优先级中，我们希望从根结点访问最远的结点。和图的深度优先搜索不同的是，不需记住访问过的每一个结点，因为树中不会有环。前序，中序和后序遍历都是深度优先遍历的特例。参见深度优先搜索。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('806', '和深度优先遍历不同，广度优先遍历会先访问离根节点最近的节点。参见广度优先搜索。 二叉树的广度优先遍历又称按层次遍历。算法借助队列实现。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('807', '一般有序树和二叉树之间有一一映射关系，能进行相互转换。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('808', 'n叉树转换为二叉树的方法：二叉树中结点x的左子结点为n叉树中结点x的左子结点；二叉树中结点x的右子结点为n叉树中结点x的第一个右边的同级结点y。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('809', '例如，在左边的树中，A有6个子结点{B,C,D,E,F,G}。它能被转换成右边的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('810', '在兄弟之间加一连接； 对每个结点，除了其左孩子外，去除其与其余孩子之间的联系； 以树的根结点为轴心，将整树顺时针转45度。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('811', '树的二叉链表标记法（孩子兄弟标记法）是树和二叉树转换的媒介。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('812', '/* 树的二叉链表(孩子—兄弟)存储表示 */\n typedef struct CSNode\n {\n   TElemType data;\n   struct CSNode *firstchild,*nextsibling;\n }CSNode,*CSTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:24', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('813', '树的二叉链表存储的基本操作[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('814', '基于C/C++的算法实现显示▼  /* 树的二叉链表(孩子—兄弟)存储的基本操作(17个) */\n #define ClearTree DestroyTree /* 二者操作相同 */\n #include\"func6-2.c\" /* 包括PreOrderTraverse() */\n void InitTree(CSTree *T)\n { /* 操作结果：构造空树T */\n   *T=NULL;\n }\n  void DestroyTree(CSTree *T)\n { /* 初始条件：树T存在。操作结果：销毁树T */\n   if(*T)\n   {\n     if((*T)->firstchild) /* T有长子 */\n       DestroyTree(&(*T)->firstchild); /* 销毁T的长子为根结点的子树 */\n     if((*T)->nextsibling) /* T有下一个兄弟 */\n       DestroyTree(&(*T)->nextsibling); /* 销毁T的下一个兄弟为根结点的子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL;\n   }\n }\n  typedef CSTree QElemType; /* 定义伫列元素类型 */\n #include\"c3-2.h\" /* 定义LinkQueue类型(链伫列) */\n #include\"bo3-2.c\" /* LinkQueue类型的基本操作 */\n void CreateTree(CSTree *T)\n { /* 构造树T */\n   char c[20]; /* 临时存放孩子结点(设不超过20个)的值 */\n   CSTree p,p1;\n   LinkQueue q;\n   int i,l;\n   InitQueue(&q);\n   printf(\"请输入根结点(字元型,空格为空): \");\n   scanf(\"%c%*c\",&c[0]);\n   if(c[0]!=Nil) /* 非空树 */\n   {\n     *T=(CSTree)malloc(sizeof(CSNode)); /* 建立根结点 */\n     (*T)->data=c[0];\n     (*T)->nextsibling=NULL;\n     EnQueue(&q,*T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       printf(\"请按长幼顺序输入结点%c的所有孩子: \",p->data);\n       gets(c);\n       l=strlen(c);\n       if(l>0) /* 有孩子 */\n       {\n         p1=p->firstchild=(CSTree)malloc(sizeof(CSNode)); /* 建立长子结点 */\n         p1->data=c[0];\n         for(i=1;i<l;i++)\n         {\n           p1->nextsibling=(CSTree)malloc(sizeof(CSNode)); /* 建立下一个兄弟结点 */\n           EnQueue(&q,p1); /* 入队上一个结点 */\n           p1=p1->nextsibling;\n           p1->data=c[i];\n         }\n         p1->nextsibling=NULL;\n         EnQueue(&q,p1); /* 入队最后一个结点 */\n       }\n       else\n         p->firstchild=NULL; /* 长子指针为空 */\n     }\n   }\n   else\n     *T=NULL; /* 空树 */\n }\n  Status TreeEmpty(CSTree T)\n { /* 初始条件：树T存在。操作结果：若T为空树，则返回TURE，否则返回FALSE */\n   if(T) /* T不空 */\n     return FALSE;\n   else\n     return TRUE;\n }\n  int TreeDepth(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的深度 */\n   CSTree p;\n   int depth,max=0;\n   if(!T) /* 树空 */\n     return 0;\n   if(!T->firstchild) /* 树无长子 */\n     return 1;\n   for(p=T->firstchild;p;p=p->nextsibling)\n   { /* 求子树深度的最大值 */\n     depth=TreeDepth(p);\n     if(depth>max)\n       max=depth;\n   }\n   return max+1; /* 树的深度=子树深度最大值+1 */\n }\n  TElemType Value(CSTree p)\n { /* 返回p所指结点的值 */\n   return p->data;\n }\n  TElemType Root(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的根 */\n   if(T)\n     return Value(T);\n   else\n     return Nil;\n }\n  CSTree Point(CSTree T,TElemType s)\n { /* 返回二叉链表(孩子—兄弟)树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队,伫列元素赋给a */\n       if(a->data==s)\n	 return a;\n       if(a->firstchild) /* 有长子 */\n         EnQueue(&q,a->firstchild); /* 入队长子 */\n       if(a->nextsibling) /* 有下一个兄弟 */\n         EnQueue(&q,a->nextsibling); /* 入队下一个兄弟 */\n     }\n   }\n   return NULL;\n }\n  Status Assign(CSTree *T,TElemType cur_e,TElemType value)\n { /* 初始条件：树T存在，cur_e是树T中结点的值。操作结果：改cur_e为value */\n   CSTree p;\n   if(*T) /* 非空树 */\n   {\n     p=Point(*T,cur_e); /* p为cur_e的指针 */\n     if(p) /* 找到cur_e */\n     {\n       p->data=value; /* 赋新值 */\n       return OK;\n     }\n   }\n   return ERROR; /* 树空或没找到 */\n }\n  TElemType Parent(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非根结点，则返回它的双亲，否则函数值为＂空＂*/\n   CSTree p,t;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T) /* 树非空 */\n   {\n     if(Value(T)==cur_e) /* 根结点值为cur_e */\n       return Nil;\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&p);\n       if(p->firstchild) /* p有长子 */\n       {\n         if(p->firstchild->data==cur_e) /* 长子为cur_e */\n           return Value(p); /* 返回双亲 */\n         t=p; /* 双亲指针赋给t */\n         p=p->firstchild; /* p指向长子 */\n         EnQueue(&q,p); /* 入队长子 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling; /* p指向下一个兄弟 */\n	 if(Value(p)==cur_e) /* 下一个兄弟为cur_e */\n	 return Value(t); /* 返回双亲 */\n	 EnQueue(&q,p); /* 入队下一个兄弟 */\n	 }\n       }\n     }\n   }\n   return Nil; /* 树空或没找到cur_e */\n }\n  TElemType LeftChild(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非叶子结点，则返回它的最左孩子，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->firstchild) /* 找到结点cur_e且结点cur_e有长子 */\n     return f->firstchild->data;\n   else\n     return Nil;\n }\n  TElemType RightSibling(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e有右兄弟，则返回它的右兄弟，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->nextsibling) /* 找到结点cur_e且结点cur_e有右兄弟 */\n     return f->nextsibling->data;\n   else\n     return Nil; /* 树空 */\n }\n  Status InsertChild(CSTree *T,CSTree p,int i,CSTree c)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度+1，非空树c与T不相交 */\n   /* 操作结果：插入c为T中p结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 插入c为p的长子 */\n     {\n       c->nextsibling=p->firstchild; /* p的原长子现是c的下一个兄弟(c本无兄弟) */\n       p->firstchild=c;\n     }\n     else /* 找插入点 */\n     {\n       p=p->firstchild; /* 指向p的长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到插入位置 */\n       {\n         c->nextsibling=p->nextsibling;\n         p->nextsibling=c;\n       }\n       else /* p原有孩子数小于i-1 */\n         return ERROR;\n     }\n     return OK;\n   }\n   else /* T空 */\n     return ERROR;\n }\n  Status DeleteChild(CSTree *T,CSTree p,int i)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度 */\n   /* 操作结果：删除T中p所指结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   CSTree b;\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 删除长子 */\n     {\n       b=p->firstchild;\n       p->firstchild=b->nextsibling; /* p的原次子现是长子 */\n       b->nextsibling=NULL;\n       DestroyTree(&b);\n     }\n     else /* 删除非长子 */\n     {\n       p=p->firstchild; /* p指向长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到第i棵子树 */\n       {\n         b=p->nextsibling;\n         p->nextsibling=b->nextsibling;\n         b->nextsibling=NULL;\n         DestroyTree(&b);\n       }\n       else /* p原有孩子数小于i */\n         return ERROR;\n     }\n     return OK;\n   }\n   else\n     return ERROR;\n }\n  void PostOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 后根遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   if(T)\n   {\n     if(T->firstchild) /* 有长子 */\n     {\n       PostOrderTraverse(T->firstchild,Visit); /* 后根遍历长子子树 */\n       p=T->firstchild->nextsibling; /* p指向长子的下一个兄弟 */\n       while(p)\n       {\n         PostOrderTraverse(p,Visit); /* 后根遍历下一个兄弟子树 */\n         p=p->nextsibling; /* p指向再下一个兄弟 */\n       }\n     }\n     Visit(Value(T)); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 层序遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T)\n   {\n     Visit(Value(T)); /* 先访问根结点 */\n     EnQueue(&q,T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       if(p->firstchild) /* 有长子 */\n       {\n         p=p->firstchild;\n         Visit(Value(p)); /* 访问长子结点 */\n         EnQueue(&q,p); /* 入队长子结点的指针 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling;\n           Visit(Value(p)); /* 访问下一个兄弟 */\n           EnQueue(&q,p); /* 入队兄弟结点的指针 */\n         }\n       }\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('815', '线索二叉树 (threaded binary tree)[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('816', '线索二叉树(保留遍历时结点在任一序列的前驱和后继的信息)：若结点有左子树，则其lchild域指示其左孩子，否则令lchild域指示其前驱；若结点有右子树，则其rchild域指示其右孩子，否则令rchild指示其后继。还需在结点结构中增加两个标志域LTag和RTag。LTag=0时，lchild域指示结点的左孩子，LTag=1时，lchild域指示结点的前驱；RTag=0时，rchild域指示结点的右孩子，RTag=1时，rchild域指示结点的后继。以这种结点结构构成的二叉链表作为二叉树的存储结构，叫做线索链表，其中指向结点前驱和后继的指针叫做线索，加上线索的二叉树称为线索二叉树。对二叉树以某种次序遍历使其变为线索二叉树的过程叫做线索化。若对二叉树进行中序遍历，则所得的线索二叉树称为中序线索二叉树，线索链表称为为中序线索链表。线索二叉树是一种物理结构。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('817', '在中序线索树找结点后继的规律是：若其右标志为1，则右链为线索，指示其后继，否则遍历其右子树时访问的第一个结点（右子树最左下的结点）为其后继；找结点前驱的规律是：若其左标志为1，则左链为线索，指示其前驱，否则遍历左子树时最后访问的一个结点（左子树中最右下的结点）为其前驱。 在后序线索树中找到结点的后继分三种情况：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('818', '若结点是二叉树的根，则其后继为空； 若结点是其双亲的右孩子，或是其双亲的左孩子且其双亲没有右子树，则其后继即为双亲结点； 若结点是其双亲的左孩子，且其双亲有右子树，则其后继为双亲右子树上按后序遍历列出的第一个结点。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('819', '二叉树的二叉线索存储表示：在线索链表上添加一个头结点，并令其lchild域的指针指向二叉树的根结点，其rchild域的指针指向中序遍历时访问的最后一个结点。令二叉树中序序列中的第一个结点的lchild域指针和最后一个结点的rchild域的指针均指向头结点，这样就创建了一个双向线索链表。二叉树常采用二叉链表方式存储。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('820', '/* 二叉树的二叉线索存储表示 */\n typedef enum{Link,Thread}PointerTag; /* Link(0)：指针，Thread(1)：线索 */\n typedef struct BiThrNode\n {\n   TElemType data;\n   struct BiThrNode *lchild,*rchild; /* 左右孩子指针 */\n   PointerTag LTag,RTag; /* 左右标志 */\n }BiThrNode,*BiThrTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('821', '基于C/C++的算法实现显示▼  /* 二叉树的二叉线索存储的基本操作 */\n void CreateBiThrTree(BiThrTree *T)\n { /* 按先序输入线索二叉树中结点的值，构造线索二叉树T。0(整型)/空格(字元型)表示空结点 */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil)\n     *T=NULL;\n   else\n   {\n     *T=(BiThrTree)malloc(sizeof(BiThrNode)); /* 生成根结点(先序) */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch; /* 给根结点赋植 */\n     CreateBiThrTree(&(*T)->lchild); /* 递回构造左子树 */\n     if((*T)->lchild) /* 有左孩子 */\n       (*T)->LTag=Link; /* 给左标志赋值(指标) */\n     CreateBiThrTree(&(*T)->rchild); /* 递回构造右子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       (*T)->RTag=Link; /* 给右标志赋值(指标) */\n   }\n }\n  BiThrTree pre; /* 全域变数，始终指向刚刚访问过的结点 */\n void InThreading(BiThrTree p)\n { /* 通过中序遍历进行中序线索化，线索化之后pre指向最后一个结点。演算法6.7 */\n   if(p) /* 线索二叉树不空 */\n   {\n     InThreading(p->lchild); /* 递回左子树线索化 */\n     if(!p->lchild) /* 没有左孩子 */\n     {\n       p->LTag=Thread; /* 左标志为线索(前驱) */\n       p->lchild=pre; /* 左孩子指标指向前驱 */\n     }\n     if(!pre->rchild) /* 前驱没有右孩子 */\n     {\n       pre->RTag=Thread; /* 前驱的右标志为线索(后继) */\n       pre->rchild=p; /* 前驱右孩子指标指向其后继(当前结点p) */\n     }\n     pre=p; /* 保持pre指向p的前驱 */\n     InThreading(p->rchild); /* 递回右子树线索化 */\n   }\n }\n  void InOrderThreading(BiThrTree *Thrt,BiThrTree T)\n { /* 中序遍历二叉树T，并将其中序线索化，Thrt指向头结点。演算法6.6 */\n   *Thrt=(BiThrTree)malloc(sizeof(BiThrNode));\n   if(!*Thrt) /* 生成头结点不成功 */\n     exit(OVERFLOW);\n   (*Thrt)->LTag=Link; /* 建头结点，左标志为指标 */\n   (*Thrt)->RTag=Thread; /* 右标志为线索 */\n   (*Thrt)->rchild=*Thrt; /* 右指针回指 */\n   if(!T) /* 若二叉树空，则左指针回指 */\n     (*Thrt)->lchild=*Thrt;\n   else\n   {\n     (*Thrt)->lchild=T; /* 头结点的左指标指向根结点 */\n     pre=*Thrt; /* pre(前驱)的初值指向头结点 */\n     InThreading(T); /* 中序遍历进行中序线索化，pre指向中序遍历的最后一个结点 */\n     pre->rchild=*Thrt; /* 最后一个结点的右指标指向头结点 */\n     pre->RTag=Thread; /* 最后一个结点的右标志为线索 */\n     (*Thrt)->rchild=pre; /* 头结点的右指标指向中序遍历的最后一个结点 */\n   }\n }\n  void InOrderTraverse_Thr(BiThrTree T,void(*Visit)(TElemType))\n { /* 中序遍历线索二叉树T(头结点)的非递回演算法。演算法6.5 */\n   BiThrTree p;\n   p=T->lchild; /* p指向根结点 */\n   while(p!=T)\n   { /* 空树或遍历结束时，p==T */\n     while(p->LTag==Link) /* 由根结点一直找到二叉树的最左结点 */\n       p=p->lchild;\n     Visit(p->data); /* 访问此结点 */\n     while(p->RTag==Thread&&p->rchild!=T) /* p->rchild是线索(后继)，且不是遍历的最后一个结点 */\n     {\n       p=p->rchild;\n       Visit(p->data); /* 访问后继结点 */\n     }\n     p=p->rchild; /* 若p->rchild不是线索(是右孩子)，p指向右孩子，返回回圈，*/\n   }              /* 找这棵子树中序遍历的第1个结点 */\n }\n  void PreThreading(BiThrTree p)\n { /* PreOrderThreading()调用的递回函数 */\n   if(!pre->rchild) /* p的前驱没有右孩子 */\n   {\n     pre->rchild=p; /* p前驱的后继指向p */\n     pre->RTag=Thread; /* pre的右孩子为线索 */\n   }\n   if(!p->lchild) /* p没有左孩子 */\n   {\n     p->LTag=Thread; /* p的左孩子为线索 */\n     p->lchild=pre; /* p的左孩子指向前驱 */\n   }\n   pre=p; /* 移动前驱 */\n   if(p->LTag==Link) /* p有左孩子 */\n     PreThreading(p->lchild); /* 对p的左孩子递回呼叫preThreading() */\n   if(p->RTag==Link) /* p有右孩子 */\n     PreThreading(p->rchild); /* 对p的右孩子递回呼叫preThreading() */\n }\n  void PreOrderThreading(BiThrTree *Thrt,BiThrTree T)\n { /* 先序线索化二叉树T，头结点的右指标指向先序遍历的最后1个结点 */\n   *Thrt=(BiThrTree)malloc(sizeof(BiThrNode));\n   if(!*Thrt) /* 生成头结点 */\n     exit(OVERFLOW);\n   (*Thrt)->LTag=Link; /* 头结点的左指针为孩子 */\n   (*Thrt)->RTag=Thread; /* 头结点的右指针为线索 */\n   (*Thrt)->rchild=*Thrt; /* 头结点的右指标指向自身 */\n   if(!T) /* 空树 */\n     (*Thrt)->lchild=*Thrt; /* 头结点的左指标也指向自身 */\n   else\n   { /* 非空树 */\n     (*Thrt)->lchild=T; /* 头结点的左指标指向根结点 */\n     pre=*Thrt; /* 前驱为头结点 */\n     PreThreading(T); /* 从头结点开始先序递回线索化 */\n     pre->rchild=*Thrt; /* 最后一个结点的后继指向头结点 */\n     pre->RTag=Thread;\n     (*Thrt)->rchild=pre; /* 头结点的后继指向最后一个结点 */\n   }\n }\n  void PreOrderTraverse_Thr(BiThrTree T,void(*Visit)(TElemType))\n { /* 先序遍历线索二叉树T(头结点)的非递回演算法 */\n   BiThrTree p=T->lchild; /* p指向根结点 */\n   while(p!=T) /* p没指向头结点(遍历的最后1个结点的后继指向头结点) */\n   {\n     Visit(p->data); /* 访问根结点 */\n     if(p->LTag==Link) /* p有左孩子 */\n       p=p->lchild; /* p指向左孩子(后继) */\n     else /* p无左孩子 */\n       p=p->rchild; /* p指向右孩子或后继 */\n   }\n }\n  void PostThreading(BiThrTree p)\n { /* PostOrderThreading()调用的递回函数 */\n   if(p) /* p不空 */\n   {\n     PostThreading(p->lchild); /* 对p的左孩子递回呼叫PostThreading() */\n     PostThreading(p->rchild); /* 对p的右孩子递回呼叫PostThreading() */\n     if(!p->lchild) /* p没有左孩子 */\n     {\n       p->LTag=Thread; /* p的左孩子为线索 */\n       p->lchild=pre; /* p的左孩子指向前驱 */\n     }\n     if(!pre->rchild) /* p的前驱没有右孩子 */\n     {\n       pre->RTag=Thread; /* p前驱的右孩子为线索 */\n       pre->rchild=p; /* p前驱的后继指向p */\n     }\n     pre=p; /* 移动前驱 */\n   }\n }\n  void PostOrderThreading(BiThrTree *Thrt,BiThrTree T)\n { /* 后序递回线索化二叉树 */\n   *Thrt=(BiThrTree)malloc(sizeof(BiThrNode));\n   if(!*Thrt) /* 生成头结点 */\n     exit(OVERFLOW);\n   (*Thrt)->LTag=Link; /* 头结点的左指针为孩子 */\n   (*Thrt)->RTag=Thread; /* 头结点的右指针为线索 */\n   if(!T) /* 空树 */\n     (*Thrt)->lchild=(*Thrt)->rchild=*Thrt; /* 头结点的左右指标指向自身 */\n   else\n   { /* 非空树 */\n     (*Thrt)->lchild=(*Thrt)->rchild=T; /* 头结点的左右指标指向根结点(最后一个结点) */\n     pre=*Thrt; /* 前驱为头结点 */\n     PostThreading(T); /* 从头结点开始后序递回线索化 */\n     if(pre->RTag!=Link) /* 最后一个结点没有右孩子 */\n     {\n       pre->rchild=*Thrt; /* 最后一个结点的后继指向头结点 */\n       pre->RTag=Thread;\n     }\n   }\n }\n  void DestroyBiTree(BiThrTree *T)\n { /* DestroyBiThrTree调用的递回函数，T指向根结点 */\n   if(*T) /* 非空树 */\n   {\n     if((*T)->LTag==0) /* 有左孩子 */\n       DestroyBiTree(&(*T)->lchild); /* 销毁左孩子子树 */\n     if((*T)->RTag==0) /* 有右孩子 */\n       DestroyBiTree(&(*T)->rchild); /* 销毁右孩子子树 */\n     free(*T); /* 释放根结点 */\n     T=NULL; /* 空指针赋0 */\n   }\n }\n  void DestroyBiThrTree(BiThrTree *Thrt)\n { /* 初始条件：线索二叉树Thrt存在。操作结果：销毁线索二叉树Thrt */\n   if(*Thrt) /* 头结点存在 */\n   {\n     if((*Thrt)->lchild) /* 根结点存在 */\n       DestroyBiTree(&(*Thrt)->lchild); /* 递回销毁头结点lchild所指二叉树 */\n     free(*Thrt); /* 释放头结点 */\n     *Thrt=NULL; /* 线索二叉树Thrt指针赋0 */\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('823', '/* 二叉树的二叉链表存储表示 */\n typedef struct BiTNode\n {\n   TElemType data;\n   struct BiTNode *lchild,*rchild; /* 左右孩子指针 */\n }BiTNode,*BiTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('824', '基于C/C++的实现算法显示▼  /* 二叉树的二叉链表存储的基本操作(22个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n #include\"func6-3.c\"\n /* 包括InitBiTree()、DestroyBiTree()、PreOrderTraverse()和InOrderTraverse()4函数 */\n  void CreateBiTree(BiTree *T)\n { /* 演算法6.4：按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造二叉链表表示的二叉树T。变数Nil表示空(子)树。有改动 */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiTree)malloc(sizeof(BiTNode)); /* 生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch;\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n   }\n }\n  Status BiTreeEmpty(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(T==NULL)  /*如果T=NULL,这样写便于理解，当然也可以写成if（!T）*/; \n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(BiTreeEmpty(T))\n     return Nil;\n   else\n     return T->data;\n }\n  TElemType Value(BiTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n TElemType Parent(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 树根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->lchild&&a->lchild->data==e||a->rchild&&a->rchild->data==e)\n       /* 找到e(是其左或右孩子) */\n         return a->data; /* 返回e的双亲的值 */\n       else /* 没找到e，则入队其左右孩子指针(如果非空) */\n       {\n         if(a->lchild)\n           EnQueue(&q,a->lchild);\n         if(a->rchild)\n           EnQueue(&q,a->rchild);\n       }\n     }\n   }\n   return Nil; /* 树空或没找到e */\n }\n  BiTree Point(BiTree T,TElemType s)\n { /* 返回二叉树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==s)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType LeftChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->rchild->data==e) /* p存在左右孩子且右孩子是e */\n         return p->lchild->data; /* 返回p的左孩子(e的左兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   TElemType a;\n   BiTree p;\n   if(T) /* 非空树 */\n   {\n     a=Parent(T,e); /* a为e的双亲 */\n     if(a!=Nil) /* 找到e的双亲 */\n     {\n       p=Point(T,a); /* p为指向结点a的指标 */\n       if(p->lchild&&p->rchild&&p->lchild->data==e) /* p存在左右孩子且左孩子是e */\n         return p->rchild->data; /* 返回p的右孩子(e的右兄弟) */\n     }\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiTree p,int LR,BiTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点的 */\n   /*           原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       p->lchild=c;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       p->rchild=c;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  typedef BiTree SElemType; /* 设栈元素为二叉树的指针类型 */\n #include\"c3-1.h\" /* 顺序栈 */\n #include\"bo3-1.c\" /* 顺序栈的基本操作 */\n void InOrderTraverse1(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.3，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   InitStack(&S);\n   while(T||!StackEmpty(S))\n   {\n     if(T)\n     { /* 根指针进栈，遍历左子树 */\n       Push(&S,T);\n       T=T->lchild;\n     }\n     else\n     { /* 根指针退栈，访问根结点，遍历右子树 */\n       Pop(&S,&T);\n       Visit(T->data);\n       T=T->rchild;\n     }\n   }\n   printf(\"\\n\");\n }\n  void InOrderTraverse2(BiTree T,void(*Visit)(TElemType))\n { /* 采用二叉链表存储结构，Visit是对资料元素操作的应用函数。演算法6.2，有改动 */\n   /* 中序遍历二叉树T的非递回演算法(利用栈)，对每个资料元素调用函数Visit */\n   SqStack S;\n   BiTree p;\n   InitStack(&S);\n   Push(&S,T); /* 根指针进栈 */\n   while(!StackEmpty(S))\n   {\n     while(GetTop(S,&p)&&p)\n       Push(&S,p->lchild); /* 向左走到尽头 */\n     Pop(&S,&p); /* 空指针退栈 */\n     if(!StackEmpty(S))\n     { /* 访问结点，向右一步 */\n       Pop(&S,&p);\n       Visit(p->data);\n       Push(&S,p->rchild);\n     }\n   }\n   printf(\"\\n\");\n }\n  void PostOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：后序递回遍历T，对每个结点调用函数Visit一次且仅一次 */\n   if(T) /* T不空 */\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 先后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 再后序遍历右子树 */\n     Visit(T->data); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiTree T,void(*Visit)(TElemType))\n { /* 初始条件：二叉树T存在，Visit是对结点操作的应用函数 */\n   /* 操作结果：层序递回遍历T(利用伫列)，对每个结点调用函数Visit一次且仅一次 */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q); /* 初始化伫列q */\n     EnQueue(&q,T); /* 根指针入队 */\n     while(!QueueEmpty(q)) /* 伫列不空 */\n     {\n       DeQueue(&q,&a); /* 出队元素(指标),赋给a */\n       Visit(a->data); /* 访问a所指结点 */\n       if(a->lchild!=NULL) /* a有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队a的左孩子 */\n       if(a->rchild!=NULL) /* a有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队a的右孩子 */\n     }\n     printf(\"\\n\");\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('825', '改进于二叉链表，增加父节点的指引，能更好地实现节点间的访问，不过算法相对复杂。 当二叉树用三叉链表表示时，有N个结点，就会有N+2个空指针。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('826', '/* 二叉树的三叉链表存储表示 */\n typedef struct BiTPNode\n {\n   TElemType data;\n   struct BiTPNode *parent,*lchild,*rchild; /* 父、左右孩子指针 */\n }BiTPNode,*BiPTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('827', '基于C/C++的实现算法显示▼  /* 二叉树的三叉链表存储的基本操作(21个) */\n #define ClearBiTree DestroyBiTree /* 清空二叉树和销毁二叉树的操作一样 */\n void InitBiTree(BiPTree *T)\n { /* 操作结果：构造空二叉树T */\n   *T=NULL;\n }\n  void DestroyBiTree(BiPTree *T)\n { /* 初始条件：二叉树T存在。操作结果：销毁二叉树T */\n   if(*T) /* 非空树 */\n   {\n     if((*T)->lchild) /* 有左孩子 */\n       DestroyBiTree(&(*T)->lchild); /* 销毁左孩子子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       DestroyBiTree(&(*T)->rchild); /* 销毁右孩子子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL; /* 空指针赋0 */\n   }\n }\n  void CreateBiTree(BiPTree *T)\n { /* 按先序次序输入二叉树中结点的值(可为字元型或整型，在主程中定义)，*/\n   /* 构造三叉链表表示的二叉树T */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil) /* 空 */\n     *T=NULL;\n   else\n   {\n     *T=(BiPTree)malloc(sizeof(BiTPNode)); /* 动态生成根结点 */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch; /* 给根结点赋值 */\n     (*T)->parent=NULL; /* 根结点无双亲 */\n     CreateBiTree(&(*T)->lchild); /* 构造左子树 */\n     if((*T)->lchild) /* 有左孩子 */\n       (*T)->lchild->parent=*T; /* 给左孩子的双亲域赋值 */\n     CreateBiTree(&(*T)->rchild); /* 构造右子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       (*T)->rchild->parent=*T; /* 给右孩子的双亲域赋值 */\n   }\n }\n  Status BiTreeEmpty(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：若T为空二叉树，则返回TRUE，否则FALSE */\n   if(T)\n     return FALSE;\n   else\n     return TRUE;\n }\n  int BiTreeDepth(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的深度 */\n   int i,j;\n   if(!T)\n     return 0; /* 空树深度为0 */\n   if(T->lchild)\n     i=BiTreeDepth(T->lchild); /* i为左子树的深度 */\n   else\n     i=0;\n   if(T->rchild)\n     j=BiTreeDepth(T->rchild); /* j为右子树的深度 */\n   else\n     j=0;\n   return i>j?i+1:j+1; /* T的深度为其左右子树的深度中的大者+1 */\n }\n  TElemType Root(BiPTree T)\n { /* 初始条件：二叉树T存在。操作结果：返回T的根 */\n   if(T)\n     return T->data;\n   else\n     return Nil;\n }\n  TElemType Value(BiPTree p)\n { /* 初始条件：二叉树T存在，p指向T中某个结点。操作结果：返回p所指结点的值 */\n   return p->data;\n }\n  void Assign(BiPTree p,TElemType value)\n { /* 给p所指结点赋值为value */\n   p->data=value;\n }\n  typedef BiPTree QElemType; /* 设伫列元素为二叉树的指针类型 */\n #include\"c3-2.h\" /* 链伫列 */\n #include\"bo3-2.c\" /* 链伫列的基本操作 */\n  BiPTree Point(BiPTree T,TElemType e)\n { /* 返回二叉树T中指向元素值为e的结点的指标。加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队，伫列元素赋给a */\n       if(a->data==e)\n         return a;\n       if(a->lchild) /* 有左孩子 */\n         EnQueue(&q,a->lchild); /* 入队左孩子 */\n       if(a->rchild) /* 有右孩子 */\n         EnQueue(&q,a->rchild); /* 入队右孩子 */\n     }\n   }\n   return NULL;\n }\n  TElemType Parent(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：若e是T的非根结点，则返回它的双亲，否则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T) /* T中存在结点e且e是非根结点 */\n       return a->parent->data; /* 返回e的双亲的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的左孩子。若e无左孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->lchild) /* T中存在结点e且e存在左孩子 */\n       return a->lchild->data; /* 返回e的左孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightChild(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点。操作结果：返回e的右孩子。若e无右孩子,则返回\"空\" */\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a->rchild) /* T中存在结点e且e存在右孩子 */\n       return a->rchild->data; /* 返回e的右孩子的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType LeftSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的左兄弟。若e是T的左孩子或无左兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->lchild&&a->parent->lchild!=a) /* T中存在结点e且e存在左兄弟 */\n       return a->parent->lchild->data; /* 返回e的左兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  TElemType RightSibling(BiPTree T,TElemType e)\n { /* 初始条件：二叉树T存在，e是T中某个结点 */\n   /* 操作结果：返回e的右兄弟。若e是T的右孩子或无右兄弟，则返回＂空＂*/\n   BiPTree a;\n   if(T) /* 非空树 */\n   {\n     a=Point(T,e); /* a是结点e的指针 */\n     if(a&&a!=T&&a->parent->rchild&&a->parent->rchild!=a) /* T中存在结点e且e存在右兄弟 */\n       return a->parent->rchild->data; /* 返回e的右兄弟的值 */\n   }\n   return Nil; /* 其余情况返回空 */\n }\n  Status InsertChild(BiPTree p,int LR,BiPTree c) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1，非空二叉树c与T不相交且右子树为空 */\n   /* 操作结果：根据LR为0或1，插入c为T中p所指结点的左或右子树。p所指结点 */\n   /*           的原有左或右子树则成为c的右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0)\n     {\n       c->rchild=p->lchild;\n       if(c->rchild) /* c有右孩子(p原有左孩子) */\n         c->rchild->parent=c;\n       p->lchild=c;\n       c->parent=p;\n     }\n     else /* LR==1 */\n     {\n       c->rchild=p->rchild;\n       if(c->rchild) /* c有右孩子(p原有右孩子) */\n         c->rchild->parent=c;\n       p->rchild=c;\n       c->parent=p;\n     }\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  Status DeleteChild(BiPTree p,int LR) /* 形参T无用 */\n { /* 初始条件：二叉树T存在，p指向T中某个结点，LR为0或1 */\n   /* 操作结果：根据LR为0或1，删除T中p所指结点的左或右子树 */\n   if(p) /* p不空 */\n   {\n     if(LR==0) /* 删除左子树 */\n       ClearBiTree(&p->lchild);\n     else /* 删除右子树 */\n       ClearBiTree(&p->rchild);\n     return OK;\n   }\n   return ERROR; /* p空 */\n }\n  void PreOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 先序递回遍历二叉树T */\n   if(T)\n   {\n     Visit(T); /* 先访问根结点 */\n     PreOrderTraverse(T->lchild,Visit); /* 再先序遍历左子树 */\n     PreOrderTraverse(T->rchild,Visit); /* 最后先序遍历右子树 */\n   }\n }\n  void InOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 中序递回遍历二叉树T */\n   if(T)\n   {\n     InOrderTraverse(T->lchild,Visit); /* 中序遍历左子树 */\n     Visit(T); /* 再访问根结点 */\n     InOrderTraverse(T->rchild,Visit); /* 最后中序遍历右子树 */\n   }\n }\n  void PostOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 后序递回遍历二叉树T */\n   if(T)\n   {\n     PostOrderTraverse(T->lchild,Visit); /* 后序遍历左子树 */\n     PostOrderTraverse(T->rchild,Visit); /* 后序遍历右子树 */\n     Visit(T); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(BiPTree T,void(*Visit)(BiPTree))\n { /* 层序遍历二叉树T(利用伫列) */\n   LinkQueue q;\n   QElemType a;\n   if(T)\n   {\n     InitQueue(&q);\n     EnQueue(&q,T);\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&a);\n       Visit(a);\n       if(a->lchild!=NULL)\n         EnQueue(&q,a->lchild);\n       if(a->rchild!=NULL)\n         EnQueue(&q,a->rchild);\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('828', '我们经常希望访问树中的每一个结点并且查看它的值。有很多常见的顺序来访问所有的结点，而且每一种都有有用的性质。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('829', '遍历二叉树：L、D、R分别表示遍历左子树、访问根结点和遍历右子树，则先(根)序遍历二叉树的顺序是DLR，中(根)序遍历二叉树的顺序是LDR，后(根)序遍历二叉树的顺序是LRD。还有按层遍历二叉树。这些方法的时间复杂度都是O(n)，n为结点个数。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('830', '如果T2是由有序树T转换而来的二叉树，那么T中结点的前序就是T2中结点的前序，T中结点的后序就是T2中结点的中序。任何一棵二叉树的叶结点在先序、中序和后序遍历中的相对次序不发改变。设n,m为一棵二叉树上的两个结点，在中序遍历时，n在m前的条件是n在m的左方。前序序列和中序序列相同的二叉树为空树或任一结点均无左孩子的非空二叉树；中序序列和后序序列相同的二叉树为空树或任一结点均无右孩子的非空二叉树；前序序列和后序序列相同的二叉树为空树或仅有一个结点的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('831', '假设我们有一个包含值的value和指向两个子结点的left和right的树结点结构。我们可以写出这样的过程：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('832', 'visit(node)\n    print node.value\n    if node.left  != null then visit(node.left)\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('833', '这样会用前序打印出树中的值。在前序，每个结点在访问它的子结点之前访问。类似地，如果打印语句在最后，每个结点在访问他的子节点之后访问，树中的值会用后序来打印。在这两种情况中，左子树中的值比右子树中得值先打印。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('834', 'visit(node)\n    if node.left  != null then visit(node.left)\n    print node.value\n    if node.right != null then visit(node.right)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('835', '最后，上面的中序遍历，每个结点在访问左子树和右子树之间访问。这在遍历二叉搜索树时很常用，因为它能用递增的顺序来遍历所有的值。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('836', '为什么呢？如果n是二叉搜索树的结点，那么n的左子树的所有结点的值都比n的值要小，而且n的右子树的所有节点的值都比n的值要大。因此，如果我们顺序遍历左子树，然后访问n，然后顺序遍历右子树。我们就已经循序访问了整个树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:25', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('837', '在这个二叉树中， 前序遍历的结果：2, 7, 2, 6, 5, 11, 5, 9, 4 后序遍历的结果：2, 5, 11, 6, 7, 4, 9, 5, 2 中序遍历的结果：2, 7, 5, 6, 11, 2, 5, 4, 9', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('838', '以上的递归算法使用与树的高度成比例的栈空间。如果我们在每个结点中存储指向父结点的指针，那样可以使用反复运算算法，只使用常数空间实现所有这些遍历。然而，指向父结点的指针占用更多的空间。这只在需要指向父节点的指针或栈空间有限时才使用。例如， 这是一个中序遍历的反复运算算法：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('839', 'visit(root)\n    prev    := null\n    current := root\n    next    := null\n    \n    while current != null\n        if prev == current.parent\n            prev := current\n            next := current.left\n        if next == null or prev == current.left\n            print current.value\n            prev := current\n            next := current.right\n        if next == null or prev == current.right\n            prev := current\n            next := current.parent\n        current := next', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('840', '用二叉树表示下述表达式：a+b*(c-d)-e/f 先序遍历的序列是：-+a*b-cd/ef 中序遍历的序列是：a+b*c-d-e/f 后序遍历的序列是：abcd-*+ef/-', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('841', '在深度优先级中，我们希望从根结点访问最远的结点。和图的深度优先搜索不同的是，不需记住访问过的每一个结点，因为树中不会有环。前序，中序和后序遍历都是深度优先遍历的特例。参见深度优先搜索。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('842', '和深度优先遍历不同，广度优先遍历会先访问离根节点最近的节点。参见广度优先搜索。 二叉树的广度优先遍历又称按层次遍历。算法借助队列实现。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('843', '一般有序树和二叉树之间有一一映射关系，能进行相互转换。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('844', 'n叉树转换为二叉树的方法：二叉树中结点x的左子结点为n叉树中结点x的左子结点；二叉树中结点x的右子结点为n叉树中结点x的第一个右边的同级结点y。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('845', '例如，在左边的树中，A有6个子结点{B,C,D,E,F,G}。它能被转换成右边的二叉树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('846', '在兄弟之间加一连接； 对每个结点，除了其左孩子外，去除其与其余孩子之间的联系； 以树的根结点为轴心，将整树顺时针转45度。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('847', '树的二叉链表标记法（孩子兄弟标记法）是树和二叉树转换的媒介。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('848', '/* 树的二叉链表(孩子—兄弟)存储表示 */\n typedef struct CSNode\n {\n   TElemType data;\n   struct CSNode *firstchild,*nextsibling;\n }CSNode,*CSTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('849', '树的二叉链表存储的基本操作[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('850', '基于C/C++的算法实现显示▼  /* 树的二叉链表(孩子—兄弟)存储的基本操作(17个) */\n #define ClearTree DestroyTree /* 二者操作相同 */\n #include\"func6-2.c\" /* 包括PreOrderTraverse() */\n void InitTree(CSTree *T)\n { /* 操作结果：构造空树T */\n   *T=NULL;\n }\n  void DestroyTree(CSTree *T)\n { /* 初始条件：树T存在。操作结果：销毁树T */\n   if(*T)\n   {\n     if((*T)->firstchild) /* T有长子 */\n       DestroyTree(&(*T)->firstchild); /* 销毁T的长子为根结点的子树 */\n     if((*T)->nextsibling) /* T有下一个兄弟 */\n       DestroyTree(&(*T)->nextsibling); /* 销毁T的下一个兄弟为根结点的子树 */\n     free(*T); /* 释放根结点 */\n     *T=NULL;\n   }\n }\n  typedef CSTree QElemType; /* 定义伫列元素类型 */\n #include\"c3-2.h\" /* 定义LinkQueue类型(链伫列) */\n #include\"bo3-2.c\" /* LinkQueue类型的基本操作 */\n void CreateTree(CSTree *T)\n { /* 构造树T */\n   char c[20]; /* 临时存放孩子结点(设不超过20个)的值 */\n   CSTree p,p1;\n   LinkQueue q;\n   int i,l;\n   InitQueue(&q);\n   printf(\"请输入根结点(字元型,空格为空): \");\n   scanf(\"%c%*c\",&c[0]);\n   if(c[0]!=Nil) /* 非空树 */\n   {\n     *T=(CSTree)malloc(sizeof(CSNode)); /* 建立根结点 */\n     (*T)->data=c[0];\n     (*T)->nextsibling=NULL;\n     EnQueue(&q,*T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       printf(\"请按长幼顺序输入结点%c的所有孩子: \",p->data);\n       gets(c);\n       l=strlen(c);\n       if(l>0) /* 有孩子 */\n       {\n         p1=p->firstchild=(CSTree)malloc(sizeof(CSNode)); /* 建立长子结点 */\n         p1->data=c[0];\n         for(i=1;i<l;i++)\n         {\n           p1->nextsibling=(CSTree)malloc(sizeof(CSNode)); /* 建立下一个兄弟结点 */\n           EnQueue(&q,p1); /* 入队上一个结点 */\n           p1=p1->nextsibling;\n           p1->data=c[i];\n         }\n         p1->nextsibling=NULL;\n         EnQueue(&q,p1); /* 入队最后一个结点 */\n       }\n       else\n         p->firstchild=NULL; /* 长子指针为空 */\n     }\n   }\n   else\n     *T=NULL; /* 空树 */\n }\n  Status TreeEmpty(CSTree T)\n { /* 初始条件：树T存在。操作结果：若T为空树，则返回TURE，否则返回FALSE */\n   if(T) /* T不空 */\n     return FALSE;\n   else\n     return TRUE;\n }\n  int TreeDepth(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的深度 */\n   CSTree p;\n   int depth,max=0;\n   if(!T) /* 树空 */\n     return 0;\n   if(!T->firstchild) /* 树无长子 */\n     return 1;\n   for(p=T->firstchild;p;p=p->nextsibling)\n   { /* 求子树深度的最大值 */\n     depth=TreeDepth(p);\n     if(depth>max)\n       max=depth;\n   }\n   return max+1; /* 树的深度=子树深度最大值+1 */\n }\n  TElemType Value(CSTree p)\n { /* 返回p所指结点的值 */\n   return p->data;\n }\n  TElemType Root(CSTree T)\n { /* 初始条件：树T存在。操作结果：返回T的根 */\n   if(T)\n     return Value(T);\n   else\n     return Nil;\n }\n  CSTree Point(CSTree T,TElemType s)\n { /* 返回二叉链表(孩子—兄弟)树T中指向元素值为s的结点的指标。另加 */\n   LinkQueue q;\n   QElemType a;\n   if(T) /* 非空树 */\n   {\n     InitQueue(&q); /* 初始化伫列 */\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&a); /* 出队,伫列元素赋给a */\n       if(a->data==s)\n	 return a;\n       if(a->firstchild) /* 有长子 */\n         EnQueue(&q,a->firstchild); /* 入队长子 */\n       if(a->nextsibling) /* 有下一个兄弟 */\n         EnQueue(&q,a->nextsibling); /* 入队下一个兄弟 */\n     }\n   }\n   return NULL;\n }\n  Status Assign(CSTree *T,TElemType cur_e,TElemType value)\n { /* 初始条件：树T存在，cur_e是树T中结点的值。操作结果：改cur_e为value */\n   CSTree p;\n   if(*T) /* 非空树 */\n   {\n     p=Point(*T,cur_e); /* p为cur_e的指针 */\n     if(p) /* 找到cur_e */\n     {\n       p->data=value; /* 赋新值 */\n       return OK;\n     }\n   }\n   return ERROR; /* 树空或没找到 */\n }\n  TElemType Parent(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非根结点，则返回它的双亲，否则函数值为＂空＂*/\n   CSTree p,t;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T) /* 树非空 */\n   {\n     if(Value(T)==cur_e) /* 根结点值为cur_e */\n       return Nil;\n     EnQueue(&q,T); /* 根结点入队 */\n     while(!QueueEmpty(q))\n     {\n       DeQueue(&q,&p);\n       if(p->firstchild) /* p有长子 */\n       {\n         if(p->firstchild->data==cur_e) /* 长子为cur_e */\n           return Value(p); /* 返回双亲 */\n         t=p; /* 双亲指针赋给t */\n         p=p->firstchild; /* p指向长子 */\n         EnQueue(&q,p); /* 入队长子 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling; /* p指向下一个兄弟 */\n	 if(Value(p)==cur_e) /* 下一个兄弟为cur_e */\n	 return Value(t); /* 返回双亲 */\n	 EnQueue(&q,p); /* 入队下一个兄弟 */\n	 }\n       }\n     }\n   }\n   return Nil; /* 树空或没找到cur_e */\n }\n  TElemType LeftChild(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e是T的非叶子结点，则返回它的最左孩子，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->firstchild) /* 找到结点cur_e且结点cur_e有长子 */\n     return f->firstchild->data;\n   else\n     return Nil;\n }\n  TElemType RightSibling(CSTree T,TElemType cur_e)\n { /* 初始条件：树T存在，cur_e是T中某个结点 */\n   /* 操作结果：若cur_e有右兄弟，则返回它的右兄弟，否则返回＂空＂*/\n   CSTree f;\n   f=Point(T,cur_e); /* f指向结点cur_e */\n   if(f&&f->nextsibling) /* 找到结点cur_e且结点cur_e有右兄弟 */\n     return f->nextsibling->data;\n   else\n     return Nil; /* 树空 */\n }\n  Status InsertChild(CSTree *T,CSTree p,int i,CSTree c)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度+1，非空树c与T不相交 */\n   /* 操作结果：插入c为T中p结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 插入c为p的长子 */\n     {\n       c->nextsibling=p->firstchild; /* p的原长子现是c的下一个兄弟(c本无兄弟) */\n       p->firstchild=c;\n     }\n     else /* 找插入点 */\n     {\n       p=p->firstchild; /* 指向p的长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到插入位置 */\n       {\n         c->nextsibling=p->nextsibling;\n         p->nextsibling=c;\n       }\n       else /* p原有孩子数小于i-1 */\n         return ERROR;\n     }\n     return OK;\n   }\n   else /* T空 */\n     return ERROR;\n }\n  Status DeleteChild(CSTree *T,CSTree p,int i)\n { /* 初始条件：树T存在，p指向T中某个结点，1≦i≦p所指结点的度 */\n   /* 操作结果：删除T中p所指结点的第i棵子树 */\n   /* 因为p所指结点的位址不会改变，故p不需是参考类型 */\n   CSTree b;\n   int j;\n   if(*T) /* T不空 */\n   {\n     if(i==1) /* 删除长子 */\n     {\n       b=p->firstchild;\n       p->firstchild=b->nextsibling; /* p的原次子现是长子 */\n       b->nextsibling=NULL;\n       DestroyTree(&b);\n     }\n     else /* 删除非长子 */\n     {\n       p=p->firstchild; /* p指向长子 */\n       j=2;\n       while(p&&i>j)\n       {\n         p=p->nextsibling;\n         j++;\n       }\n       if(j==i) /* 找到第i棵子树 */\n       {\n         b=p->nextsibling;\n         p->nextsibling=b->nextsibling;\n         b->nextsibling=NULL;\n         DestroyTree(&b);\n       }\n       else /* p原有孩子数小于i */\n         return ERROR;\n     }\n     return OK;\n   }\n   else\n     return ERROR;\n }\n  void PostOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 后根遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   if(T)\n   {\n     if(T->firstchild) /* 有长子 */\n     {\n       PostOrderTraverse(T->firstchild,Visit); /* 后根遍历长子子树 */\n       p=T->firstchild->nextsibling; /* p指向长子的下一个兄弟 */\n       while(p)\n       {\n         PostOrderTraverse(p,Visit); /* 后根遍历下一个兄弟子树 */\n         p=p->nextsibling; /* p指向再下一个兄弟 */\n       }\n     }\n     Visit(Value(T)); /* 最后访问根结点 */\n   }\n }\n  void LevelOrderTraverse(CSTree T,void(*Visit)(TElemType))\n { /* 层序遍历孩子—兄弟二叉链表结构的树T */\n   CSTree p;\n   LinkQueue q;\n   InitQueue(&q);\n   if(T)\n   {\n     Visit(Value(T)); /* 先访问根结点 */\n     EnQueue(&q,T); /* 入队根结点的指针 */\n     while(!QueueEmpty(q)) /* 队不空 */\n     {\n       DeQueue(&q,&p); /* 出队一个结点的指标 */\n       if(p->firstchild) /* 有长子 */\n       {\n         p=p->firstchild;\n         Visit(Value(p)); /* 访问长子结点 */\n         EnQueue(&q,p); /* 入队长子结点的指针 */\n         while(p->nextsibling) /* 有下一个兄弟 */\n         {\n           p=p->nextsibling;\n           Visit(Value(p)); /* 访问下一个兄弟 */\n           EnQueue(&q,p); /* 入队兄弟结点的指针 */\n         }\n       }\n     }\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('851', '线索二叉树 (threaded binary tree)[编辑]', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('852', '线索二叉树(保留遍历时结点在任一序列的前驱和后继的信息)：若结点有左子树，则其lchild域指示其左孩子，否则令lchild域指示其前驱；若结点有右子树，则其rchild域指示其右孩子，否则令rchild指示其后继。还需在结点结构中增加两个标志域LTag和RTag。LTag=0时，lchild域指示结点的左孩子，LTag=1时，lchild域指示结点的前驱；RTag=0时，rchild域指示结点的右孩子，RTag=1时，rchild域指示结点的后继。以这种结点结构构成的二叉链表作为二叉树的存储结构，叫做线索链表，其中指向结点前驱和后继的指针叫做线索，加上线索的二叉树称为线索二叉树。对二叉树以某种次序遍历使其变为线索二叉树的过程叫做线索化。若对二叉树进行中序遍历，则所得的线索二叉树称为中序线索二叉树，线索链表称为为中序线索链表。线索二叉树是一种物理结构。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('853', '在中序线索树找结点后继的规律是：若其右标志为1，则右链为线索，指示其后继，否则遍历其右子树时访问的第一个结点（右子树最左下的结点）为其后继；找结点前驱的规律是：若其左标志为1，则左链为线索，指示其前驱，否则遍历左子树时最后访问的一个结点（左子树中最右下的结点）为其前驱。 在后序线索树中找到结点的后继分三种情况：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('854', '若结点是二叉树的根，则其后继为空； 若结点是其双亲的右孩子，或是其双亲的左孩子且其双亲没有右子树，则其后继即为双亲结点； 若结点是其双亲的左孩子，且其双亲有右子树，则其后继为双亲右子树上按后序遍历列出的第一个结点。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('855', '二叉树的二叉线索存储表示：在线索链表上添加一个头结点，并令其lchild域的指针指向二叉树的根结点，其rchild域的指针指向中序遍历时访问的最后一个结点。令二叉树中序序列中的第一个结点的lchild域指针和最后一个结点的rchild域的指针均指向头结点，这样就创建了一个双向线索链表。二叉树常采用二叉链表方式存储。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('856', '/* 二叉树的二叉线索存储表示 */\n typedef enum{Link,Thread}PointerTag; /* Link(0)：指针，Thread(1)：线索 */\n typedef struct BiThrNode\n {\n   TElemType data;\n   struct BiThrNode *lchild,*rchild; /* 左右孩子指针 */\n   PointerTag LTag,RTag; /* 左右标志 */\n }BiThrNode,*BiThrTree;', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('857', '基于C/C++的算法实现显示▼  /* 二叉树的二叉线索存储的基本操作 */\n void CreateBiThrTree(BiThrTree *T)\n { /* 按先序输入线索二叉树中结点的值，构造线索二叉树T。0(整型)/空格(字元型)表示空结点 */\n   TElemType ch;\n   scanf(form,&ch);\n   if(ch==Nil)\n     *T=NULL;\n   else\n   {\n     *T=(BiThrTree)malloc(sizeof(BiThrNode)); /* 生成根结点(先序) */\n     if(!*T)\n       exit(OVERFLOW);\n     (*T)->data=ch; /* 给根结点赋植 */\n     CreateBiThrTree(&(*T)->lchild); /* 递回构造左子树 */\n     if((*T)->lchild) /* 有左孩子 */\n       (*T)->LTag=Link; /* 给左标志赋值(指标) */\n     CreateBiThrTree(&(*T)->rchild); /* 递回构造右子树 */\n     if((*T)->rchild) /* 有右孩子 */\n       (*T)->RTag=Link; /* 给右标志赋值(指标) */\n   }\n }\n  BiThrTree pre; /* 全域变数，始终指向刚刚访问过的结点 */\n void InThreading(BiThrTree p)\n { /* 通过中序遍历进行中序线索化，线索化之后pre指向最后一个结点。演算法6.7 */\n   if(p) /* 线索二叉树不空 */\n   {\n     InThreading(p->lchild); /* 递回左子树线索化 */\n     if(!p->lchild) /* 没有左孩子 */\n     {\n       p->LTag=Thread; /* 左标志为线索(前驱) */\n       p->lchild=pre; /* 左孩子指标指向前驱 */\n     }\n     if(!pre->rchild) /* 前驱没有右孩子 */\n     {\n       pre->RTag=Thread; /* 前驱的右标志为线索(后继) */\n       pre->rchild=p; /* 前驱右孩子指标指向其后继(当前结点p) */\n     }\n     pre=p; /* 保持pre指向p的前驱 */\n     InThreading(p->rchild); /* 递回右子树线索化 */\n   }\n }\n  void InOrderThreading(BiThrTree *Thrt,BiThrTree T)\n { /* 中序遍历二叉树T，并将其中序线索化，Thrt指向头结点。演算法6.6 */\n   *Thrt=(BiThrTree)malloc(sizeof(BiThrNode));\n   if(!*Thrt) /* 生成头结点不成功 */\n     exit(OVERFLOW);\n   (*Thrt)->LTag=Link; /* 建头结点，左标志为指标 */\n   (*Thrt)->RTag=Thread; /* 右标志为线索 */\n   (*Thrt)->rchild=*Thrt; /* 右指针回指 */\n   if(!T) /* 若二叉树空，则左指针回指 */\n     (*Thrt)->lchild=*Thrt;\n   else\n   {\n     (*Thrt)->lchild=T; /* 头结点的左指标指向根结点 */\n     pre=*Thrt; /* pre(前驱)的初值指向头结点 */\n     InThreading(T); /* 中序遍历进行中序线索化，pre指向中序遍历的最后一个结点 */\n     pre->rchild=*Thrt; /* 最后一个结点的右指标指向头结点 */\n     pre->RTag=Thread; /* 最后一个结点的右标志为线索 */\n     (*Thrt)->rchild=pre; /* 头结点的右指标指向中序遍历的最后一个结点 */\n   }\n }\n  void InOrderTraverse_Thr(BiThrTree T,void(*Visit)(TElemType))\n { /* 中序遍历线索二叉树T(头结点)的非递回演算法。演算法6.5 */\n   BiThrTree p;\n   p=T->lchild; /* p指向根结点 */\n   while(p!=T)\n   { /* 空树或遍历结束时，p==T */\n     while(p->LTag==Link) /* 由根结点一直找到二叉树的最左结点 */\n       p=p->lchild;\n     Visit(p->data); /* 访问此结点 */\n     while(p->RTag==Thread&&p->rchild!=T) /* p->rchild是线索(后继)，且不是遍历的最后一个结点 */\n     {\n       p=p->rchild;\n       Visit(p->data); /* 访问后继结点 */\n     }\n     p=p->rchild; /* 若p->rchild不是线索(是右孩子)，p指向右孩子，返回回圈，*/\n   }              /* 找这棵子树中序遍历的第1个结点 */\n }\n  void PreThreading(BiThrTree p)\n { /* PreOrderThreading()调用的递回函数 */\n   if(!pre->rchild) /* p的前驱没有右孩子 */\n   {\n     pre->rchild=p; /* p前驱的后继指向p */\n     pre->RTag=Thread; /* pre的右孩子为线索 */\n   }\n   if(!p->lchild) /* p没有左孩子 */\n   {\n     p->LTag=Thread; /* p的左孩子为线索 */\n     p->lchild=pre; /* p的左孩子指向前驱 */\n   }\n   pre=p; /* 移动前驱 */\n   if(p->LTag==Link) /* p有左孩子 */\n     PreThreading(p->lchild); /* 对p的左孩子递回呼叫preThreading() */\n   if(p->RTag==Link) /* p有右孩子 */\n     PreThreading(p->rchild); /* 对p的右孩子递回呼叫preThreading() */\n }\n  void PreOrderThreading(BiThrTree *Thrt,BiThrTree T)\n { /* 先序线索化二叉树T，头结点的右指标指向先序遍历的最后1个结点 */\n   *Thrt=(BiThrTree)malloc(sizeof(BiThrNode));\n   if(!*Thrt) /* 生成头结点 */\n     exit(OVERFLOW);\n   (*Thrt)->LTag=Link; /* 头结点的左指针为孩子 */\n   (*Thrt)->RTag=Thread; /* 头结点的右指针为线索 */\n   (*Thrt)->rchild=*Thrt; /* 头结点的右指标指向自身 */\n   if(!T) /* 空树 */\n     (*Thrt)->lchild=*Thrt; /* 头结点的左指标也指向自身 */\n   else\n   { /* 非空树 */\n     (*Thrt)->lchild=T; /* 头结点的左指标指向根结点 */\n     pre=*Thrt; /* 前驱为头结点 */\n     PreThreading(T); /* 从头结点开始先序递回线索化 */\n     pre->rchild=*Thrt; /* 最后一个结点的后继指向头结点 */\n     pre->RTag=Thread;\n     (*Thrt)->rchild=pre; /* 头结点的后继指向最后一个结点 */\n   }\n }\n  void PreOrderTraverse_Thr(BiThrTree T,void(*Visit)(TElemType))\n { /* 先序遍历线索二叉树T(头结点)的非递回演算法 */\n   BiThrTree p=T->lchild; /* p指向根结点 */\n   while(p!=T) /* p没指向头结点(遍历的最后1个结点的后继指向头结点) */\n   {\n     Visit(p->data); /* 访问根结点 */\n     if(p->LTag==Link) /* p有左孩子 */\n       p=p->lchild; /* p指向左孩子(后继) */\n     else /* p无左孩子 */\n       p=p->rchild; /* p指向右孩子或后继 */\n   }\n }\n  void PostThreading(BiThrTree p)\n { /* PostOrderThreading()调用的递回函数 */\n   if(p) /* p不空 */\n   {\n     PostThreading(p->lchild); /* 对p的左孩子递回呼叫PostThreading() */\n     PostThreading(p->rchild); /* 对p的右孩子递回呼叫PostThreading() */\n     if(!p->lchild) /* p没有左孩子 */\n     {\n       p->LTag=Thread; /* p的左孩子为线索 */\n       p->lchild=pre; /* p的左孩子指向前驱 */\n     }\n     if(!pre->rchild) /* p的前驱没有右孩子 */\n     {\n       pre->RTag=Thread; /* p前驱的右孩子为线索 */\n       pre->rchild=p; /* p前驱的后继指向p */\n     }\n     pre=p; /* 移动前驱 */\n   }\n }\n  void PostOrderThreading(BiThrTree *Thrt,BiThrTree T)\n { /* 后序递回线索化二叉树 */\n   *Thrt=(BiThrTree)malloc(sizeof(BiThrNode));\n   if(!*Thrt) /* 生成头结点 */\n     exit(OVERFLOW);\n   (*Thrt)->LTag=Link; /* 头结点的左指针为孩子 */\n   (*Thrt)->RTag=Thread; /* 头结点的右指针为线索 */\n   if(!T) /* 空树 */\n     (*Thrt)->lchild=(*Thrt)->rchild=*Thrt; /* 头结点的左右指标指向自身 */\n   else\n   { /* 非空树 */\n     (*Thrt)->lchild=(*Thrt)->rchild=T; /* 头结点的左右指标指向根结点(最后一个结点) */\n     pre=*Thrt; /* 前驱为头结点 */\n     PostThreading(T); /* 从头结点开始后序递回线索化 */\n     if(pre->RTag!=Link) /* 最后一个结点没有右孩子 */\n     {\n       pre->rchild=*Thrt; /* 最后一个结点的后继指向头结点 */\n       pre->RTag=Thread;\n     }\n   }\n }\n  void DestroyBiTree(BiThrTree *T)\n { /* DestroyBiThrTree调用的递回函数，T指向根结点 */\n   if(*T) /* 非空树 */\n   {\n     if((*T)->LTag==0) /* 有左孩子 */\n       DestroyBiTree(&(*T)->lchild); /* 销毁左孩子子树 */\n     if((*T)->RTag==0) /* 有右孩子 */\n       DestroyBiTree(&(*T)->rchild); /* 销毁右孩子子树 */\n     free(*T); /* 释放根结点 */\n     T=NULL; /* 空指针赋0 */\n   }\n }\n  void DestroyBiThrTree(BiThrTree *Thrt)\n { /* 初始条件：线索二叉树Thrt存在。操作结果：销毁线索二叉树Thrt */\n   if(*Thrt) /* 头结点存在 */\n   {\n     if((*Thrt)->lchild) /* 根结点存在 */\n       DestroyBiTree(&(*Thrt)->lchild); /* 递回销毁头结点lchild所指二叉树 */\n     free(*Thrt); /* 释放头结点 */\n     *Thrt=NULL; /* 线索二叉树Thrt指针赋0 */\n   }\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:26', '42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('859', 'Judy array是一个计算机科学和软件工程学中的名词，是一种高性能、低内存消耗的数据结构，实现了关联数组的功能。与普通数组不同，Judy array可以是稀疏的，这一点更像是散列表，而非数组。Judy array可以用整形或字符串作为键值来存储、查询数据，它最大的优势是可动态自动扩展，高性能，节省内存并且易于使用。', 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('860', '由于Judy array在操作速度和内存使用上都非常高效，同时并不需要特殊配置或初始化，使得它可以用来替换掉多种常见数据结构，例如跳跃列表,链表,二叉树,B树,散列表，而且judy array在海量数据集上的表现比那些数据结构更好。', 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('861', '粗略地讲，Judy array像是一个高度优化了的256叉树，为了节省内存，它使用了超过20种不同的压缩技术来压缩树节点。.[1]', 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('862', 'Judy array 是Douglas Baskins发明的，他用自己妹妹的名字命名了这种数据结构。[2]', 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('863', '容量、用量、密度 这三个概念是传统树形结构中很少使用，但在Judy array中反复使用的。 这个的概念的定义如下：', 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '术语', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('864', '容量 可以理解为Judy Array在不扩展内存使用的情况下所能维护的数据量，也可以是某个节点的，视乎上下文。 用量 已经存储的数据量，既可以描述整个Judy Array的数据量，也可以是某个节点下的。 密度 用来描述数据存储的密集程度， 密度 = 用量/容量', 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '术语', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('865', '从Judy array的发明者所撰写的简介以及其他一些相关的中文论文中看，设计中使用了多种的压缩思想与压缩算法，根据不同的密度情况，选择不同的压缩方式，以期尽可能节省内存，降低实际存储中的稀疏情况，我猜测，这能够在缓存命中率上带来不少提升，进而提升效率。', 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('866', '对于密度很高，空洞很少的节点，使用位图（bitmap）来存储。 对于密度很低的情况，只存储出现的键值 对于密度极低的情况，使用类似于字典树的结构，跨层压缩数据。', 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('867', '^ Alan Silverstein, \"Judy IV Shop Manual\", 2002 ^ http://judy.sourceforge.net/ ^ Advances in databases: concepts, systems and applications : By Kotagiri Ramamohanarao', 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('868', 'Main Judy arrays site How Judy arrays work and why they are so fast A complete technical description of Judy arrays An independent performance comparison of Judy to Hash Tables A compact implementation of Judy arrays in 1K lines of C code', 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('869', 'Judy array是没有容量限制的，所以也不用事先分配好存储空间，它可以根据用量动态决定生长或收缩内存使用，来支撑海量数据存储。其存储能力仅受到计算机内存容量的限制。[3] Judy array的内存用量与其存储的数据用量基本呈线性关系。', 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '内存分配', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('870', 'Judy array在设计上就力争保持尽可能高的CPU缓存命中率，为了达到这个目标，其内部算法十分复杂。由于有了这些针对性的优化，使得Judy array在运行速度上十分高效，有时甚至超过散列表，尤其是在处理大数据集的时候。由于Judy array是依托树 (数据结构)形结构设计的，其内存消耗比散列表小很多，同样是拜树形结构所赐，使得它可以完成键值的顺序遍历，这一点在散列表中是不可能的。', 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '速度', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('871', '译者注：我完全没搞明白Judy array是如何提高缓存命中率的，希望有高人在此补充', 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:44', '43', '朱迪矩阵', '速度', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('872', '在编程语言中，数组数据结构（英语：array data structure），简称数组（英语：Array），是一种数据结构，是数据元素（elements）的集合。它十分类似数学上的“矩阵”，但是在电脑编程语言上，表示方法和意义上略有不同。', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('873', '数学上的矩阵看起来像这样： a = [ 3 6 2 0 1 − 4 2 − 1 0 ] {\\displaystyle a={\\begin{bmatrix}3&6&2\\\\0&1&-4\\\\2&-1&0\\end{bmatrix}}}', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('874', '而电脑上的数组看起来像这样，例如C语言中的数组：', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('875', 'int a[3][3]={ \n                    { 3,  6,  2 },\n                    { 0,  1, -4 },\n                    { 2, -1,  0 }\n                 };', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('876', '虽然数组在各种电脑编程语言中的表示式略有不同，但是几乎每一种编程语言都有这种结构和观念，它已经不只是一种编程专用的术语，而是电脑运作中非常重要的技术和概念。当前电脑能够显示、打印中文字，都是数组的观念应用；字符串也是基于数组的一种重要数据结构。数据库也是数组概念的一种扩充和延伸。', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('877', '普通数组采用一个整数来作下标。多维数组的概念特别是在数值计算和图形应用方面非常有用。我们在多维数组之中采用一系列有序的整数来标注，如在[ 3,1,5 ] 。这种整数列表之中整数的个数始终相同，且被称为数组的“维度”。关于每个数组维度的边界称为“维”。维度为k的数组通常被称为k维。', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '多维数组', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('878', '多维数组的数组名字，在表达式中自动转换为数组首元素地址值，但这个首元素实际上是去除数组下标第一维之后的数组剩余部分。例如：', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '多维数组', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('879', 'int a[10][15];\n int (*p)[15]=a;  // a在表达式中自动转换为指向具有15个int的数组的指针值。', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '多维数组', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('880', 'C99引入了可变长数组（variable length array，简称VLA），只能定义在块作用域或函数原型作用域，必须无链接性。其数组长度在编译期可变，但在运行期该数组对象一旦生成就不可改变数组长度了。例如：', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '可变长数组', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('881', 'void foo(int m，int n)\n{\n    int v[m][n]; \n    int *p[n];\n}', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '可变长数组', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('882', '数组设计之初是在形式上依赖内存分配而成的，所以必须在使用前预先请求空间。这使得数组有以下特性：', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '程序设计', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('883', '请求空间以后大小固定，不能再改变（数据溢出问题）； 在内存中有空间连续性的表现，中间不会存在其他程序需要调用的数据，为此数组的专用内存空间； 在旧式编程语言中（如有中阶语言之称的C），程序不会对数组的操作做下界判断，也就有潜在的越界操作的风险（比如会把数据写在运行中程序需要调用的核心部分的内存上）。', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '程序设计', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('884', '因为简单数组强烈倚赖电脑硬件之内存，所以不适用于现代的程序设计。欲使用可变大小、硬件无关性的数据类型，Java等程序设计语言均提供了更高级的数据结构：ArrayList、Vector等动态数组。', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '程序设计', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('885', '^ C99语言标准6.2.5节中规定：An array type describes a contiguously allocated nonempty set of objects with a particular member object type, called the element type. Array types are characterized by their element type and by the number of elements in the array. An array type is said to be derived from its element type, and if its element type is T, the array type is sometimes called “array of T”. The construction of an array type from an element type is called “array type derivation”. ^ C99标准中的第“6.3.2.1 Lvalues, arrays, and function designators”小节中规定：Except when it is the operand of the sizeof operator or the unary & operator, or is a string literal used to initialize an array, an expression that has type “array of type” is converted to an expression with type “pointer to type” that points to the initial element of the array object and is not an lvalue. If the array object has register storage class, the behavior is undefined. ^ 只能对具有左值的数组名执行取地址的&操作。对右值数组，例如函数调用结果是一个数组类型时，对该数组取地址&则会编译报错：taking address of temporary ^ C++98标准中规定：An lvalue or rvalue of type “array of N T” or “array of unknown bound of T” can be converted to an rvalue of type “pointer to T.” The result is a pointer to the first element of the array. ^ C99语言标准“6.5.2.1 Array subscripting”中有：Constraints One of the expressions shall have type ‘‘pointer to object type’’, the other expression shall have integer type, and the result has type ‘‘type’’.', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '程序设计', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('886', 'NIST\'s Dictionary of Algorithms and Data Structures: Array', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '程序设计', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('888', 'C99规定，struct的最后一个成员可以是不完整的数组类型。例如：', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '柔性数组成员', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('889', 'struct test\n{\n      int a;\n      double b;\n      char c[];\n};', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '柔性数组成员', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('890', 'C语言标准中定义，数组下标运算（Array subscripting）有两个运算数，一个为到类型type的指针表达式，另一个运算符为整数表达式，结果为类型type。但没有规定两个运算数的先后次序[注 5]。因此，有以下推论：', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '数组下标运算符', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('891', '两个运算数可以交换顺序，即 p[N] 与 N[p] 是等价的，为 *(p+N) ； 数组下标运算，既可以适用于数组名（实际上隐式把数组名转换为指向数组首元素的指针表达式），也可以适用于指针表达式； 整型表达式可以取负值。', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:53', '44', '数组', '数组下标运算符', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('892', 'int a[10], *p = a;\np[0] = 10;\n( p + 1 )[0] = 20;\n0[p + 1] = 10;', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:53', '44', '数组', '数组下标运算符', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('893', '一个三维k-d树。第一次划分（红色）把根节点（白色）划分成两个节点，然后它们分别再次被划分（绿色）为两个子节点。最后这四个子节点的每一个都被划分（蓝色）为两个子节点。因为没有更进一步的划分，最后得到的八个节点称为叶子节点。', 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:03', '45', 'K-d树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('894', '在计算机科学里，k-d树（ k-维树的缩写）是在k维欧几里德空间组织点的数据结构。k-d树可以使用在多种应用场合，如多维键值搜索（例：范围搜寻及最邻近搜索）。k-d树是空间二分树（Binary space partitioning ）的一种特殊情况。', 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:03', '45', 'K-d树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('895', 'k-d树是每个节点都为k维点的二叉树。所有非叶子节点可以视作用一个超平面把空间分区成两个半空间( Half-space )。节点左边的子树代表在超平面左边的点，节点右边的子树代表在超平面右边的点。选择超平面的方法如下：每个节点都与k维中垂直于超平面的那一维有关。因此，如果选择按照x轴划分，所有x值小于指定值的节点都会出现在左子树，所有x值大于指定值的节点都会出现在右子树。这样，超平面可以用该x值来确定，其法矢为x轴的单位向量。', 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:03', '45', 'K-d树', '简介', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('896', '有很多种方法可以选择轴垂直分区面（ axis-aligned splitting planes ），所以有很多种创建k-d树的方法。 最典型的方法如下：', 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:03', '45', 'K-d树', '创建k-d树', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('897', '随着树的深度轮流选择轴当作分区面。（例如：在三维空间中根节点是 x 轴垂直分区面，其子节点皆为 y 轴垂直分区面，其孙节点皆为 z 轴垂直分区面，其曾孙节点则皆为 x 轴垂直分区面，依此类推。） 点由垂直分区面之轴座标的中位数区分并放入子树', 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:03', '45', 'K-d树', '创建k-d树', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('898', '这个方法产生一个平衡的k-d树。每个叶节点的高度都十分接近。然而，平衡的树不一定对每个应用都是最佳的。', 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:03', '45', 'K-d树', '创建k-d树', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('899', 'function kdtree (list of points pointList, int depth)\n{\n    // Select axis based on depth so that axis cycles through all valid values\n    var int axis := depth mod k;\n        \n    // Sort point list and choose median as pivot element\n    select median by axis from pointList;\n        \n    // Create node and construct subtrees\n    var tree_node node;\n    node.location := median;\n    node.leftChild := kdtree(points in pointList before median, depth+1);\n    node.rightChild := kdtree(points in pointList after median, depth+1);\n    return node;\n}', 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:03', '45', 'K-d树', '创建k-d树', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('900', '最邻近搜索用来找出在树中与输入点最接近的点。', 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:03', '45', 'K-d树', '最邻近搜索', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('901', '从根节点开始，递归的往下移。往左还是往右的决定方法与插入元素的方法一样(如果输入点在分区面的左边则进入左子节点，在右边则进入右子节点)。 一旦移动到叶节点，将该节点当作\"目前最佳点\"。 解开递归，并对每个经过的节点运行下列步骤： 如果目前所在点比目前最佳点更靠近输入点，则将其变为目前最佳点。 检查另一边子树有没有更近的点，如果有则从该节点往下找 当根节点搜索完毕后完成最邻近搜索', 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:03', '45', 'K-d树', '最邻近搜索', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('902', 'libkdtree++, an open-source STL-like implementation of k-d trees in C++. A tutorial on KD Trees A C++ implementation of k-d trees for 3D point clouds, part of the Mobile Robot Programming Toolkit (MRPT) kdtree A simple C library for working with KD-Trees K-D Tree Demo, Java applet libANN Approximate Nearest Neighbour Library includes a k-d tree implementation Caltech Large Scale Image Search Toolbox: a Matlab toolbox implementing randomized k-d tree for fast approximate nearest neighbour search, in addition to LSH, Hierarchical K-Means, and Inverted File search algorithms.', 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:03', '45', 'K-d树', '最邻近搜索', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('904', '字符串（String），是由零个或多个字符组成的有限序列。一般记为 s = a 1 a 2 … a n {\\displaystyle s=a_{1}a_{2}\\dots a_{n}} （ 0 ≤ n ⪇ ∞ {\\displaystyle 0\\leq n\\lneq \\infty } ）。它是编程语言中表示文本的数据类型。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('905', '通常以串的整体作为操作对象，如：在串中查找某个子串、求取一个子串、在串的某个位置上插入一个子串以及删除一个子串等。两个字符串相等的充要条件是：长度相等，并且各个对应位置上的字符都相等。设p、q是两个串，求q在p中首次出现的位置的运算叫做模式匹配。串的两种最基本的存储方式是顺序存储方式和链接存储方式。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('906', '一些编程语言设计为编写字符串处理程序更容易编写。这是一些例子：', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '字符串实用程序', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('907', '很多UNIX实用程序进行简单的字符串处理，并能用于简单地编写一些强大的字符串处理算法。文件和有限流可以像字符串一样查看。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '字符串实用程序', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('908', '一些新的编程语言，包括Perl、Python和Ruby，借助正则表达式来帮助文字处理。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '字符串实用程序', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('909', '一个简单的字符串操作是“连接”：也就是说先写一个字符串S，随后在后面再写一个T得到ST这样一个过程。 其它的常见操作包括在一个长字符串中搜索一个子串，排列一组字符串以及分析一个字符串。因为存在如此多的字符串应用方式，所以相应地有许多权衡了不同应用的相关算法。 高级的字符串算法通常使用包括后向树和有限状态机在内的复杂机制和数据结构。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '字符串操作', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('910', '这是一些字符串处理算法，在字符串上进行不同的处理：', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('911', '字符串查找算法 正则表达式算法 模式匹配', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('912', '[显示] 查 论 编 数据类型 无解释的 比特 字节 三进制 Tryte Word 数值 整数 符号性（英语：Signedness） 有符号数 无符号数 定点数 浮点数 双精度 扩展精度 半精度 迷你浮点数 八倍精度 四倍精度 单精度 Rational 复数 任意精度算术 Interval 文本 字符 字符串 指针 存储器地址 物理地址 虚拟地址 引用 组合 代数类型 generalized 数组 关联数组 类 串列 对象 Option type Product 记录 集合 联合体 tagged 其他 布尔型 Bottom type 容器 枚举类型 异常 一等函数 Opaque data type 递归类型 信号标 字符串流 Top type Type class Unit type Void 不定类型 相关议题 抽象资料类型 数据结构 接口 Kind 原始类型 子类型 C++模板 类型构造器 参数多态', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('913', '[显示] 查 论 编 数据结构 类型 集合 容器 抽象类型 关联数组 多重关连数组 列表 堆栈 队列 双端队列 优先队列 双端优先队列 集合 多重集 并查集 数组 字符串 位数组 环形缓冲器 动态数组 哈希表 哈希数组树 稀疏数组 列表 双端队列 队列 堆栈 循环队列 关联表 链表 跳跃列表 松散链表 异或链表 树 线段树 自平衡二叉查找树 B树 二叉树 AA树 AVL树 红黑树 平衡树 伸展树 二叉查找树 堆 二叉堆 二项堆 斐波那契堆 R树 R*树 R+树 Hilbert R树 前缀树 哈希树 图 有向图 有向无环图 二元决策图 无向图 确定性非循环有限自动机 数据结构列表', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('914', '“串接”是Σ*上的重要二元运算。对于Σ*中的两个字符串s和t，它们的串接被定义为在s中的字符序列之后跟随着t中的字符序列，并被指示为st。例如，Σ = {a, b,…, z}，并且s = bear且t = hug，则st = bearhug而ts = hugbear。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '串接和子串', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('915', '字符串串接是结合性的，但非交换性运算。空串充当单比特；对于任何字符串s，有εs = sε = s。所以，集合Σ*和串接运算形成了么半群，就是从Σ生成的自由么半群。此外，长度函数定义从Σ*到非负整数的么半群同态。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '串接和子串', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('916', '字符串s被称为是字符串t的“子串”或“因子”，如果存在（可能为空）字符串u和v使得t = usv。“是其子串”关系定义了在Σ*上的偏序，其最小元是空串。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '串接和子串', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('917', '经常需要定义在字符串集合上的次序。如果字符表Σ有一个全序（cf. 字母序），则可以定义在Σ*上的叫做词典序的全序。注意因为Σ是有限的，总是可以定义在Σ继而在Σ*上的良好次序。例如，如果Σ = {0, 1}并且0 < 1，则Σ*的词典次序是ε < 0 < 00 < 000 <…< 011 < 0110 <…< 01111 <…< 1 < 10 < 100 <…< 101 <…< 111…', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '词典排序', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('918', '在形式理论中经常出现一些在字符串上的额外运算。它们在条目字符串运算中给出。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '字符串运算', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('919', '尽管形式字符串可以有任意（但有限）的长度，实际语言的字符串的长度经常被限制到一个人工极大值。一般的说，有两种类型的字符串数据类型：“定长字符串”，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和“变长字符串”，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存。在现代编程语言中的多数字符串是变长字符串。尽管叫这个名字，所有变长字符串还是在长度上有个极限，一般的说这个极限只依赖于可获得的内存的数量。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '字符串长度', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('920', '历史上，字符串数据类型为每个字符分配一个字节，尽管精确的字符集随着区域而改变，字符编码足够类似得程序员可以忽略它—同一个系统在不同的区域中使用的字符集组要么让一个字符在同样位置，要么根本就没有它。这些字符集典型的基于ASCII码或EBCDIC码。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '字符编码', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('921', '意音文字的语言比如汉语、日语和朝鲜语（合称为CJK）的合理表示需要多于256个字符（每字符一个字节编码的极限）。常规的解决涉及：保持对ASCII码的单字节表示，并使用双字节来表示CJK字形。现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '字符编码', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('922', '某些编码比如EUC家族保证在ASCII码范围内的字节值只表示ASCII字符，使得使用这些字符作为字段分隔符的系统得到编码安全。其他编码如ISO-2022和Shift-JIS不做这种担保，使得基于字节的代码做的匹配不安全。 另一个问题是如果一个字符串的开头被删除了，对解码器的重要指示或关于在多字节序列中的位置的信息可能就丢失了。 另一个问题是如果字符串被连接到一起（特别是在被不知道这个编码的代码截断了它们的结尾之后），第一个字符串可能不能导致编码器进入适合处理第二个字符串的状态中。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '字符编码', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('923', 'Unicode也有些复杂的问题。多数语言有Unicode字符串数据类型（通常是UTF-16，因为它在Unicode补充位面介入之前就被增加了）。在Unicode和本地编码之间转换要求理解本地编码，这对于现存系统要一起传输各种编码的字符串而又没有实际标记出它们用了什么编码就是个问题。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '字符编码', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('924', '某些语言如C++把字符串实现为可以用于任何基本类型的模版，但这是个例外而不是规则。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '实现', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('925', '如果一个面向对象语言把字符串表示为对象，它们叫做“可变的”（mutable），如果值可以在进行时间变更，叫做“不变的”（immutable），如果这个值在创建后就冻结了。例如，Ruby有可变字符串，而Python的字符串是不可变的。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '实现', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('926', '其他语言，最著名的有Prolog和Erlang，避免实现字符串数据类型，转而采用把字符串表示为字符代码的列表的约定。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '实现', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('927', '一种常用的表示法是使用一个字符代码的数组，每个字符占用一个字节（如在ASCII代码中）或两个字节（如在unicode中）。它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）。或者在前面加入一个整数值来表示它的长度（在Pascal语言中使用这种方法）。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '表示法', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('928', '这是一个用NUL结束的字符串的例子，它用10个byte存储，用ASCII表示法：', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '表示法', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('929', 'F R A N K NUL k e f w 46 52 41 4E 4B 00 6B 66 66 77', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '表示法', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('930', '上面的字符串的长度为5个字符，但注意它占用6个字节。结束符后的字符没有任何意义。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '表示法', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('931', 'length F R A N K k e f w 05 46 52 41 4E 4B 6B 66 66 77', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '表示法', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('932', '当然，可能还有其它的表示法。使用树和列表可以使得一些字符串操作（如插入和删除）更高效。', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:14', '46', '字符串', '表示法', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('933', '建议将散列并入本条目或章节。（讨论）', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('934', '散列函数（或散列算法，又称哈希函数，英语：Hash Function）是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值（hash values，hash codes，hash sums，或hashes）的指纹。散列值通常用一个短的随机字母和数字组成的字符串来代表。好的散列函数在输入域中很少出现散列冲突。在散列表和数据处理中，不抑制冲突来区别数据，会使得数据库记录更难找到。', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('935', '所有散列函数都有如下一个基本特性：如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。这个特性是散列函数具有确定性的结果，具有这种性质的散列函数称为单向散列函数。但另一方面，散列函数的输入和输出不是唯一对应关系的，如果两个散列值相同，两个输入值很可能是相同的，但也可能不同，这种情况称为“哈希碰撞”，这通常是两个不同长度的输入值，刻意计算出相同的输出值。输入一些数据计算出散列值，然后部分改变输入值，一个具有强混淆特性的散列函数会产生一个完全不同的散列值。', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '散列函数的性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('936', '典型的散列函数都有非常大的定义域，比如SHA-2最高接受(264-1)/8长度的字节字符串。同时散列函数一定有着有限的值域，比如固定长度的比特串。在某些情况下，散列函数可以设计成具有相同大小的定义域和值域间的单射。散列函数必须不具有可逆性。', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '散列函数的性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('937', 'Robust Audio Hashing for Content Identification', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '参阅', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('938', 'Hash和Bloom Filter介绍 General purpose hash function algorithms C/C++/Pascal/Java/Ruby Hash Functions for Hash Table Lookup by Bob Jenkins 散列函数by Paul Hsieh 什么是散列函数? from RSA Laboratories Online Char（ASCII）,HEX, Binary, Base64, etc... Encoder/Decoder with MD2, MD4, MD5, SHA1+2, etc. hashing algorithms Crypto-Toolbox - Online cryptography, hashing and PIN block sanity checking for EftPos developers. Hash值在线计算 Online Hash Generator', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '参阅', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('939', '一个典型的加密单向函数是“非对称”的，并且由一个高效的散列函数构成；一个典型的加密暗门函数是“对称”的，并且由一个高效的随机函数构成。', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '加密', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('940', '消息或数据的接受者确认消息是否被篡改的性质叫数据的真实性，也称为完整性。发信人通过将原消息和散列值一起发送，可以保证真实性。', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '确保传递真实的信息', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('941', '散列表是散列函数的一个主要应用，使用散列表能够快速的按照关键字查找数据记录。（注意：关键字不是像在加密中所使用的那样是秘密的，但它们都是用来“解锁”或者访问数据的。）例如，在英语字典中的关键字是英文单词，和它们相关的记录包含这些单词的定义。在这种情况下，散列函数必须把按照字母顺序排列的字符串映射到为散列表的内部数组所创建的索引上。', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '散列表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('942', '散列表散列函数的几乎不可能/不切实际的理想是把每个关键字映射到唯一的索引上（参考完美散列），因为这样能够保证直接访问表中的每一个数据。', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '散列表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('943', '一个好的散列函数（包括大多数加密散列函数）具有均匀的真正随机输出，因而平均只需要一两次探测（依赖于装填因子）就能找到目标。同样重要的是，随机散列函数不太会出现非常高的冲突率。但是，少量的可以估计的冲突在实际状况下是不可避免的（参考生日悖论或鸽洞原理）。', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '散列表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('944', '在很多情况下，heuristic散列函数所产生的冲突比随机散列函数少的多。Heuristic函数利用了相似关键字的相似性。例如，可以设计一个heuristic函数使得像FILE0000.CHK, FILE0001.CHK, FILE0002.CHK，等等这样的文件名映射到表的连续指针上，也就是说这样的序列不会发生冲突。相比之下，对于一组好的关键字性能出色的随机散列函数，对于一组坏的关键字经常性能很差，这种坏的关键字会自然产生而不仅仅在攻击中才出现。性能不佳的散列函数表意味着查找操作会退化为费时的线性搜索。', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:26', '47', '散列函数', '散列表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('945', '使用一个散列函数可以很直观的检测出数据在传输时发生的错误。在数据的发送方，对将要发送的数据应用散列函数，并将计算的结果同原始数据一同发送。在数据的接收方，同样的散列函数被再一次应用到接收到的数据上，如果两次散列函数计算出来的结果不一致，那么就说明数据在传输的过程中某些地方有错误了。这就叫做冗余校验。', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:26', '47', '散列函数', '错误校正', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('946', '校正错误时，至少会对可能出现的扰动大致假定一个分布模式。对于一个信息串的微扰可以被分为两类，大的（不可能的）错误和小的（可能的）错误。我们对于第二类错误重新定义如下，假如给定H（x）和x+s，那么只要s足够小，我们就能有效的计算出x。那样的散列函数被称作错误校正编码。这些错误校正编码有两个重要的分类：循环冗余校验和里德-所罗门码。', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:26', '47', '散列函数', '错误校正', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('947', '对于像从一个已知列表中匹配一个MP3文件这样的应用，一种可能的方案是使用传统的散列函数——例如MD5，但是这种方案会对时间平移、CD读取错误、不同的音频压缩算法或者音量调整的实现机制等情况非常敏感。使用一些类似于MD5的方法有利于迅速找到那些严格相同（从音频文件的二进制数据来看）的音频文件，但是要找到全部相同（从音频文件的内容来看）的音频文件就需要使用其他更高级的算法了。', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:26', '47', '散列函数', '语音识别', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('948', '那些并不紧随IT工业潮流的人往往能反其道而行之，对于那些微小差异足够健壮的散列函数确实存在。现存的绝大多数散列算法都是不够健壮的，但是有少数散列算法能够达到辨别从嘈杂房间里的扬声器里播放出来的音乐的健壮性。有一个实际的例子是Shazam[1] 服务。用户可以用电话机拨打一个特定的号码，并将电话机的话筒靠近用于播放音乐的扬声器。该项服务会分析正在播放的音乐，并将它于存储在数据库中的已知的散列值进行比较。用户就能够收到被识别的音乐的曲名（需要收取一定的费用）。', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:26', '47', '散列函数', '语音识别', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('949', 'Rabin-Karp字符串搜索算法是一个相对快速的字符串搜索算法，它所需要的平均搜索时间是O(n).这个算法是创建在使用散列来比较字符串的基础上的。', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:26', '47', '散列函数', 'Rabin-Karp字符串搜索算法', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('950', '布隆过滤器（英语：Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。', 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('951', '如果想判断一个元素是不是在一个集合里，一般想到的是将集合中所有元素保存起来，然后通过比较确定。链表、树、散列表（又叫哈希表，Hash table）等等数据结构都是这种思路。但是随着集合中元素的增加，我们需要的存储空间越来越大。同时检索速度也越来越慢，上述三种结构的检索时间复杂度分别为 O ( n ) , O ( log ⁡ n ) , O ( n / k ) {\\displaystyle O(n),O(\\log n),O(n/k)} 。', 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '基本概念', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('952', '布隆过滤器的原理是，当一个元素被加入集合时，通过K个散列函数将这个元素映射成一个位数组中的K个点，把它们置为1。检索时，我们只要看看这些点是不是都是1就（大约）知道集合中有没有它了：如果这些点有任何一个0，则被检元素一定不在；如果都是1，则被检元素很可能在。这就是布隆过滤器的基本思想。', 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '基本概念', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('953', '相比于其它的数据结构，布隆过滤器在空间和时间方面都有巨大的优势。布隆过滤器存储空间和插入/查询时间都是常数（ O ( k ) {\\displaystyle O(k)} ）。另外，散列函数相互之间没有关系，方便由硬件并行实现。布隆过滤器不需要存储元素本身，在某些对保密要求非常严格的场合有优势。', 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '优点', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('954', '布隆过滤器可以表示全集，其它任何数据结构都不能；', 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '优点', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('955', 'k {\\displaystyle k} 和 m {\\displaystyle m} 相同，使用同一组散列函数的两个布隆过滤器的交并差运算可以使用位操作进行。', 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '优点', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('956', '但是布隆过滤器的缺点和优点一样明显。误算率是其中之一。随着存入的元素数量增加，误算率随之增加。但是如果元素数量太少，则使用散列表足矣。', 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '缺点', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('957', '另外，一般情况下不能从布隆过滤器中删除元素。我们很容易想到把位数组变成整数数组，每插入一个元素相应的计数器加1, 这样删除元素时将计数器减掉就可以了。然而要保证安全地删除元素并非如此简单。首先我们必须保证删除的元素的确在布隆过滤器里面。这一点单凭这个过滤器是无法保证的。另外计数器回绕也会造成问题。', 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '缺点', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('958', '在降低误算率方面，有不少工作，使得出现了很多布隆过滤器的变种。', 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '缺点', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('959', 'Hash和Bloom Filter介绍 Bloom Filter——大规模数据处理利器（解决空查问题）', 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '缺点', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('960', '本条目部分链接不符合格式手册规范。跨语言链接及章节标题等处的链接可能需要清理。（2016年10月31日） 请协助改善此条目。参见WP:LINKSTYLE、WP:MOSIW以了解细节。突出显示跨语言链接可以便于检查。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:42', '49', '二分图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('962', '二分图又称双分图、二部图、偶图，指顶点可以分成两个不相交的集 U {\\displaystyle U} 和 V {\\displaystyle V} （ ( U {\\displaystyle U} and V {\\displaystyle V} 皆为独立集independent sets)，使得在同一个集内的顶点不相邻（没有共同边）的图。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:43', '49', '二分图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('963', '二分图又称作二部图，是图论中的一种特殊模型。 设G=(V,E)是一个无向图，如果顶点V可分割为两个互不相交的子集(U,V)，并且图中的每条边（i，j）所关联的两个顶点i和j分别属于这两个不同的顶点集(i in U,j in V)，则称图G为一个二分图。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:43', '49', '二分图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('964', '无向图G为二分图的充分必要条件是，G至少有两个顶点，且其所有回路的长度均为偶数。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:43', '49', '二分图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('965', '可以将 U {\\displaystyle U} 和 V {\\displaystyle V} 当做 着色图： U {\\displaystyle U} 中所有节点为蓝色， V {\\displaystyle V} 中所有节点着绿色，每条边的两个端点的颜色不同，符合图着色问题的要求[1][2]。相反，用这样的着色方式对非二分图是行不通的，根据triangle：其中一个顶点着蓝色并且另一个着绿色后，三角形的第三个顶点与上述具有两个颜色的顶点相连，无法再对其着蓝色或绿色。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:43', '49', '二分图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('966', '二分图的一种描述方式为： G = ( U , V , E ) {\\displaystyle G=(U,V,E)} ，表示有独立顶点集 U {\\displaystyle U} 和 V {\\displaystyle V} ，以及边 E {\\displaystyle E} 组成的图。假如一个二分图不是连通图，其可能包含多个二分图；[3]这种情况下， ( U , V , E ) {\\displaystyle (U,V,E)} 有利于指定应用中一个特定的二分图。如果 | U | = | V | {\\displaystyle |U|=|V|} （这两个子集有相同的势），那么 G {\\displaystyle G} 称为平衡二分图。[1]如果二分图同一侧的顶点有相同的 degree，那么 G {\\displaystyle G} 是一个biregular。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:43', '49', '二分图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('967', '给定一个二分图G，在G的一个子图M中，M的边集中的任意两条边都不依附于同一个顶点，则称M是一个匹配。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:43', '49', '二分图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('968', '^ 1.0 1.1 Asratian， Denley & Häggkvist (1998), p. 7. ^ Scheinerman, Edward R., Mathematics: A Discrete Introduction 3rd, Cengage Learning: 363, 2012, ISBN 9780840049421 . ^ Chartrand, Gary; Zhang, Ping, Chromatic Graph Theory, Discrete Mathematics And Its Applications 53, CRC Press: 223, 2008, ISBN 9781584888000 .', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:43', '49', '二分图', '图为二分图当且仅当', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('969', '完全二分图 因子图 Tanner图 Petri网', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:43', '49', '二分图', '图为二分图当且仅当', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('971', '抽象数据类型（Abstract Data Type，ADT）是计算机科学中具有类似行为的特定类别的数据结构的数学模型；或者具有类似语义的一种或多种程序设计语言的数据类型。抽象数据类型是间接定义的，通过其上的可执行的操作以及这些操作的效果的数学约束（与可能的代价）。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('972', '例如，抽象的堆栈（stack）由3个操作定义：推入push，弹出pop（接受约束：每次弹出返回的是最新被推入且没有被弹出的数据，也就是后进先出），查看堆栈顶端数据peek。当分析使用堆栈算法的效率，所有这3个操作用时相同，无论堆栈中包含多少项数据；并且对每项数据栈使用了常量大小的存储。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('973', '抽象数据类型（ADT）是纯粹理论实体，用于简化描述抽象算法，分类与评价数据结构，形式描述程序设计语言的类型系统。一个ADT可以用特定数据类型或数据结构实现，在许多程序设计语言中有许多种实现方式；或者用形式规范语言描述。ADT常实现为模块（module）：模块的接口声明了对应于ADT操作的例程（procedure），有时用注释描述了约束。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('974', '在编程语言（或库）和教科书中，常见的几个抽象数据类型如下：', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '示例', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('975', '关联数组 复数 容器 双端队列 列表 Multimap 优先队列 队列 集合 堆栈 字符串 树', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '示例', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('976', '实现于程序时，抽象数据类型只显现出其接口，并将实现加以隐藏。用户只需关心它的接口，而不是如何实现。未来更可以改变实现的方式。（其支持信息隐藏原理，或保护程序免受变化的冲击。）', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '接口和实现的分离', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('977', '抽象数据类型的强处在于对用户隐藏了实现细节，仅公开其接口。这表示抽象数据类型可以用各种方法来实现，只要遵循其接口，就不会影响到用户。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '接口和实现的分离', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('978', '在抽象数据类型和数据结构之间，有一个实现上的微妙差别。例如，列表的抽象数据类型可以数组为基础、或者使用链表来实现。列表即是一种具良好运算（加入元素、移除元素等等）定义的抽象数据类型。链表是以指针为基础的数据结构，且可用来创建一个列表。链表常用于列表的抽象数据类型。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '接口和实现的分离', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('979', '同样地，二叉树搜索法的抽象数据结构可以几个方式实现：二叉树、AVL树、红黑树、数组等等。且无须关心其实现，二叉树搜索法总是有相同的运算（插入、移除、查找等等）。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '接口和实现的分离', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('980', '从实现中分离出接口，并不表示用户不该知道实现的方法，而是用户不能依赖于实现细节。例如，一个抽象数据类型可以用脚本语言创建，或其它可以被反编译的语言（如 C语言）。即使用户可发现实现的方法，只要所有客户端程序遵循该接口，且改变实现方式时不会产生影响，那就仍是抽象数据类型。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:54', '50', '抽象资料型别', '接口和实现的分离', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('981', '在面向对象的用语中，抽象数据类型相当于类别；抽象数据类型的实体就相当于对象。某些语言包含了用于宣告抽象数据类型的构造函数。例如，C++ 和 Java 为此提供了类的构造函数。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:54', '50', '抽象资料型别', '接口和实现的分离', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('982', '抽象数据结构即根据所要运算的数据以及其计算复杂性所定义的抽象存储区，而不关心具体的数据结构的实现。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:54', '50', '抽象资料型别', '抽象数据结构', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('983', '就实现高效率的算法而言，对数据结构的选择相当重要。抽象数据结构的选择，决定了高效率的算法的设计，和估计其计算复杂性。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:54', '50', '抽象资料型别', '抽象数据结构', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('984', '这个概念与编程语言理论中所使用的抽象数据类型非常接近，大致上抽象数据结构和抽象数据类型的名称，和具体的数据结构的名称一致。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:54', '50', '抽象资料型别', '抽象数据结构', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('985', '一部分抽象数据类型在程序设计中相当普遍且实用，所以在某些编程语言中，成为原生类型、或加进标准库中。例如，Perl 的数组可以用列表或双端队列之类的抽象数据类型来实现，散列表也可以用 Map 或 Table 来做。C++ 标准库和 Java 库也提供了列表、堆栈、队列、Map、优先权队列和字符串。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:54', '50', '抽象资料型别', '内置抽象数据类型', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('986', '有理数（可以 a/b 格式表示的数，且 a 和 b 都是整数）本来是不能在电脑中表示出来。不过可以合理的抽象数据类型来定义，如下。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:54', '50', '抽象资料型别', '作为抽象数据类型的有理数', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('987', '构造：使用两个整数 a 与 b 创建实体，其中 a 为分子，b 为分母。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:54', '50', '抽象资料型别', '作为抽象数据类型的有理数', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('988', '运算：加法、减法、乘法、除法、乘幕、比较、约分，转成实数（浮点数）。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:54', '50', '抽象资料型别', '作为抽象数据类型的有理数', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('989', '要完成整个规格，就要根据数据来定义所有的运算。例如，当两个有理数 a/b 和 c/d 相乘时，相乘的结果就要定义为 ( a c ) / ( b d )。还有输入、输出、先决条件、后置条件，以及对抽象数据类型的各种假定。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:54', '50', '抽象资料型别', '作为抽象数据类型的有理数', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('990', '堆栈的抽象数据类型接口，以 C 语法编写：', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:54', '50', '抽象资料型别', '接口', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('991', 'long stack_create(); /* 建立新的堆叠实体 */\nvoid stack_push(long stack, void *item); /* 将一个项目堆入堆叠 */\nvoid *stack_pop(long stack); /* 从堆叠顶部取得项目 */\nvoid stack_delete(long stack); /* 删除堆叠 */', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:54', '50', '抽象资料型别', '接口', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('992', 'long stack;\nstruct foo *f;\n\nstack = stack_create(); /* 建立堆叠 */\n\nstack_push(stack, f); /* 将 foo 结构加入堆叠 */\n\nf = stack_pop(stack); /* 从堆叠取得顶部的结构 */', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:54', '50', '抽象资料型别', '用法', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('993', '上述堆栈的抽象数据类型，一开始可以使用数组来实现，然后改用链表，而不会伤到任何用户的代码。有多少方法可以实现抽象数据类型，取决于编程语言。例如，上述示例可使用 C 编写一个结构，以及随同的一组数据结构，可使用数组或链表来存放记录；当构造函数函数返回一个抽象句柄时，就对用户隐藏了真实的实现过程。', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:54', '50', '抽象资料型别', '各种实现', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('994', '本条目的语调或风格可能不适合百科全书的写作方式。（2013年11月19日） 请根据指南协助改善这篇条目，请在讨论页讨论问题所在及加以改善。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('995', '提示：本条目的主题不是二叉树（binary tree）。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('996', 'B树 型态 树 时间 1972 作者 Rudolf Bayer, Edward M. McCreight 大O符号 的时间复杂度 平均 最差 空间 O(n) O(n) 搜寻 O(log n) O(log n) 插入 O(log n) O(log n) 删除 O(log n) O(log n)', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('997', '在计算机科学中，B树（英语：B-tree）是一种自平衡的树，能够保持数据有序。这种数据结构能够让查找数据、顺序访问、插入数据及删除的动作，都在对数时间内完成。B树，概括来说是一个一般化的二叉查找树（binary search tree），可以拥有多于2个子节点。与自平衡二叉查找树不同，B树为系统大块数据的读写操作做了优化。B树减少定位记录时所经历的中间过程，从而加快存取速度。B树这种数据结构可以用来描述外部存储。这种数据结构常被应用在数据库和文件系统的实作上。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('998', '术语Ｂ树可以指一个特定的方案，也可以指大体上一类方案。狭义上，一个Ｂ树在它内部节点中存储键值，但不需在叶子节点上存储这些键值的记录。大体上的一类包含一些变体，如B+树和Ｂ*树。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '变体', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('999', '在Ｂ+树，这些键值的拷贝被存储在内部节点；键值和记录存储在叶子节点；另外，一个叶子节点可以包含一个指针，指向另一个叶子节点以加速顺序存取。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '变体', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1000', 'B*树分支出更多的内部邻居节点以保持内部节点更密集地填充。此变体要求非根节点至少2/3填充，而不是1/2。为了维持这样的结构，当一个节点填满之后将不会再立即分割节点，而是将它的键值与下一个节点共享。当两个节点都填满之后，分割成3个节点。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '变体', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1001', '计数B树存储，每一树都带有一个指针和其指向子树的节点数目。这就允许了以键值为序快速查找第N笔记录，或是统计2笔记录之间的记录数目，还有其他很多相关的操作。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '变体', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1002', 'Rudolf Bayer 和 Ed McCreight 于1972年，在Boeing Research Labs 工作时发明了B 树，但是他们没有解释B 代表什么意义（如果有的话）。Douglas Comer 解释说: 两位作者从来都没解释过B树的原始意义。正如我们所见，“balanced”， “broad” 或 “bushy” 可能适合。其他人建议字母“B”代表 Boeing。源自于他的赞助，不过，看起来把B树当作“Bayer”树更合适些', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '名字取义', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1003', 'Donald Knuth 在他1980年5月发表的题为“CS144C classroom lecture about disk storage and B-trees”的论文中推测了B树的名字取义，提出“B”可能意味Boeing 或者Bayer 的名字。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '名字取义', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1004', '通常，排序和查找算法会被通过大O符号，刻画为比较级别的数值。对一个有N笔记录的已排序表进行二叉查找，打个比方说，可以在O（log2N）比较级完成。如果表有1,000,000笔记录,那么定位其中一笔记录，将在20 个比较级内完成。 log21,000,000 = 19.931...', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '已排序文件的查找时间', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1005', '大数据库一直以来被存储在磁盘。从磁盘上读取一笔记录，与之后的比较键值操作相比，在花费的运行时间上前者处于支配地位。从磁盘读取记录的时间涉及到一个 寻道时间 和 旋转延迟。寻道时间可能是从0到20或者更多毫秒，旋转延迟平均下来约是旋转周期的一半。对于一个7200 转每分钟的磁盘，旋转周期大约是8.33毫秒。像希捷ST3500320NS这样的磁盘,磁道至磁道的寻道时间为 0.8毫秒，平均读取寻道时间为8.5毫秒。为了简化，假设从磁盘读取花费10毫秒。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '已排序文件的查找时间', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1006', '乐观来说，如此，在一百万中定位一笔记录将会话花费20次磁盘读取乘上10毫秒每次读取时间，总共是0.2秒。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '已排序文件的查找时间', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1007', '时间花费没有那么糟糕的原因是，独立的记录被成组地记录在磁盘块上。一个磁盘块可能为16 千字节。如果每笔记录大小为160 字节，那么一个块可以存储100 笔记录。上面假设的磁盘读取时间确切地说是读取一个完整块的时间。一旦磁头到达位置，一个或者更多的磁盘块可以以较小的延迟来完成读取。对于100笔记录每块，最后差不多6个比较级是不需要任何磁盘读取的————都在上次读取操作中完成了。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '已排序文件的查找时间', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1008', '为进一步加速查找，开始的13或14个比较级（每个需要一次磁盘访问）必须要提速。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '已排序文件的查找时间', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1009', '较大程度上的提升是通过索引来做到的。在上面的例子中，初始磁盘读取从2个因素限制了查找范围。这基本上可以通过创建一个辅助索引来改善，这个索引包含每块磁盘块上的首笔记录（有时称为稀疏索引）。这个辅助索引可能只有原始数据库的1%大小，但是它可以更快速地被检索。在辅助索引中查找入口可以告诉我们在主数据库中要读去哪一块;查找辅助索引之后，我们只需要读取主数据库中的特定的某一个磁盘分块————通过一次磁盘读取开销。索引可以提供10,000入口，所以，这样最多需要14个比较级。就像主数据库，辅助索引中最后6个左右的比较级可能在相同的磁盘分块上。索引可以在大约8次磁盘读取中完成查找，目标记录会在9次磁盘读取后获得。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '提升查找的索引', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1010', '创建辅助索引的窍门是可以重复地给辅助索引创建辅助索引。那样可以实现一个只拥有100 入口，能填满一整个磁盘块的辅助-辅助索引。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '提升查找的索引', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1011', '要找到想要的记录，我们只需要读取3次磁盘分块，而不是14次。读取和查找辅助-辅助索引中第一个（而且是唯一的）块，标记了相应的辅助索引中的分块。读取和查找辅助索引的分块，标记了主数据库中相应的分块。我们只需要30毫秒，而不是150毫秒就能获取记录。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '提升查找的索引', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1012', '辅助的索引，使得查找问题从约为log2N 磁盘读取开销的二分查找，变成logbN 磁盘读取开销的查找，其中b为分块因素（每分块的入口数目：b = 100 入口每分块;logb1,000,000 = 3 次读取）。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '提升查找的索引', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1013', '在实际中，如果主数据库被频繁查找，辅助-辅助索引和大部分的辅助索引可能会存储在磁盘缓存中，所以它们不会产生磁盘读取。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '提升查找的索引', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1014', '如果数据库不会改变，那么编制索引就很简单，而且索引永远不需要改变。如果他们会改变，那么管理数据库及其索引就变得非常麻烦。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:22', '53', 'B树', '插入和删除带来的麻烦', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1015', '从数据库中删除记录不会引起太大问题。索引可以保持不变，记录只需要标记为已删除。数据库仍然保持有序状态。如果会有很多删除，之后查找和存储就不再那么高效了。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:22', '53', 'B树', '插入和删除带来的麻烦', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1016', '在一个有序文件中进行插入将是个灾难，因为需要给插入的记录制造空间。在文件中第一笔记录后插入记录需要把所有记录向后偏移一个位置。如此的操作在实际中实在太过昂贵。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:22', '53', 'B树', '插入和删除带来的麻烦', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1017', '一种做法是预留一些空间给插入操作。磁盘块有一些空闲空间允许后来的插入，而不是高密度地填充。这些记录可以被标记为像是已删除的记录。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:22', '53', 'B树', '插入和删除带来的麻烦', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1018', '现在，只要块中存在空间，插入和删除都可以很快速。如果一个插入操作在一个块上找不到合适的空间，就在临近的块中寻找，且要调整辅助索引。期望是临近存在足够的空间，以免重新调整大量的块。作为可选方案，可以使用一些非排序的块。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:22', '53', 'B树', '插入和删除带来的麻烦', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1019', 'B树使用了以上所有的想法。特别是：', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:22', '53', 'B树', 'B树运用的理念', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1020', '保持键值有序，以顺序遍历 使用层次化的索引来最小化磁盘读取 使用不完全填充的块来加速插入和删除 通过优雅的遍历算法来保持索引平衡', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:22', '53', 'B树', 'B树运用的理念', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1021', '另外，B树通过保证内部节点至少半满来最小化空间浪费。一棵B树可以处理任意数目的插入和删除。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:22', '53', 'B树', 'B树运用的理念', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1022', '除非完全重建数据库，否则无法改变键值的最大长度。这使得许多数据库系统将人名截断到70字符之内。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:22', '53', 'B树', 'B树的弊端', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1023', '（其他关联数组的实现，例如三元搜索树或者开散列哈希表，可以动态适应任意长度的键值）。', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:22', '53', 'B树', 'B树的弊端', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1025', '在计算机科学中，二项堆（binomial heap）是一种类似于二叉堆的堆结构。与二叉堆相比，其优势是可以快速合并两个堆，因此它属于可合并堆（mergeable heap）抽象数据类型的一种。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1026', '度数为0的二项树只包含一个结点 度数为k的二项树有一个根结点，根结点下有 k {\\displaystyle k} 个子女，每个子女分别是度数分别为 k − 1 , k − 2 , . . . , 2 , 1 , 0 {\\displaystyle k-1,k-2,...,2,1,0} 的二项树的根', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '二项树', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1027', '度数为k的二项树共有 2 k {\\displaystyle 2^{k}} 个结点，高度为 k {\\displaystyle k} 。在深度d处有 ( k d ) {\\displaystyle {\\tbinom {k}{d}}} （二项式系数）个结点。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '二项树', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1028', '度数为k的二项树可以很容易从两颗度数为k-1的二项树合并得到：把一颗度数为k-1的二项树作为另一颗原度数为k-1的二项树的最左子树。这一性质是二项堆用于堆合并的基础。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '二项树', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1029', '二项堆是指满足以下性质的二项树的集合：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '二项堆', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1030', '每棵二项树都满足最小堆性质，即结点关键字大于等于其父结点的关键字 不能有两棵或以上的二项树有相同度数（包括度数为0）。换句话说，具有度数k的二项树有0个或1个。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '二项堆', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1031', '以上第一个性质保证了二项树的根结点包含了最小的关键字。第二个性质则说明结点数为 n {\\displaystyle n} 的二项堆最多只有 log ⁡ n {\\displaystyle \\log {n}} 棵二项树。实际上，包含n个节点的二项堆的构成情况，由n的二进制表示唯一确定，其中每一位对应于一颗二项树。例如，13的二进制表示为1101, 2 3 + 2 2 + 2 0 {\\displaystyle 2^{3}+2^{2}+2^{0}} , 因此具有13个节点的二项堆由度数为3, 2, 0的三棵二项树组成：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '二项堆', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1032', '以下对于二项堆操作的运行时间都为 O ( log ⁡ n ) {\\displaystyle {O}(\\log n)} （结点数为 n {\\displaystyle n} ）：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '运行时间', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1033', '在二项堆中插入新结点 查找最小关键字所在结点 从二项堆中删除最小关键字所在结点 减小给定结点关键字的值 删除给定结点 合并两个二项堆', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '运行时间', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1034', 'Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein（潘金贵等译）. 《算法导论》. 机械工业出版社.  Vuillemin, J. (1978). A data structure for manipulating priority queues. Communications of the ACM 21, 309–314.', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '运行时间', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1035', '（英文）二项堆的Java applet摸拟 （英文）二项堆的Python实现 （英文）二项堆的C实现 （英文）二项堆的Java实现', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '运行时间', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1036', '合并两个二项堆示例，实际上把两棵度数为1的二项树合并为一棵度数为2的二项树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:33', '54', '二项堆', '合并', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1037', '最基本的为二个度数相同的二项树的合并。由于二项树根结点包含最小的关键字，因此在二颗树合并时，只需比较二个根结点关键字的大小，其中含小关键字的结点成为结果树的根结点，另一棵树则变成结果树的子树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:33', '54', '二项堆', '合并', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1038', 'function mergeTree(p, q)\n    if p.root <= q.root\n        return p.addSubTree(q)\n    else\n        return q.addSubTree(p)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:33', '54', '二项堆', '合并', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1039', '两个二项堆的合并则可按如下步骤进行：度数 j {\\displaystyle j} 从小取到大，在两个二项堆中如果其中只有一棵树的度数为 j {\\displaystyle j} ，即将此树移动到结果堆，而如果只两棵树的度数都为 j {\\displaystyle j} ，则根据以上方法合并为一个度数为 j + 1 {\\displaystyle j+1} 的二项树。此后这个度数为 j + 1 {\\displaystyle j+1} 的树将可能会和其他度数为 j + 1 {\\displaystyle j+1} 的二项树进行合并。因此，对于任何度数j，可能最多需要合并3棵二项树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:33', '54', '二项堆', '合并', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1040', '此操作的时间复杂度为 O ( log ⁡ n ) {\\displaystyle {O}(\\log n)} 。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:33', '54', '二项堆', '合并', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1041', 'function merge(p, q)\n    while not (p.end() and q.end())\n        tree = mergeTree(p.currentTree(), q.currentTree())\n        \n        if not heap.currentTree().empty()\n            tree = mergeTree(tree, heap.currentTree())\n        \n        heap.addTree(tree)\n        heap.next(); p.next(); q.next()', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:33', '54', '二项堆', '合并', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1042', '创建一个只包含要插入元素的二项堆，再将此堆与原先的二项堆进行合并，即可得到插入后的堆。由于需要合并，插入操作需要 O ( log ⁡ n ) {\\displaystyle {O}(\\log n)} 的时间。实际上需要 O ( 1 ) {\\displaystyle {O}(1)} 的时间', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:33', '54', '二项堆', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1043', '由于满足最小堆性质，只需查找二项树的的根结点即可，因为一共有 log ⁡ n {\\displaystyle \\log n} 棵子树，所以用所时间为 O ( log ⁡ n ) {\\displaystyle {O}(\\log n)} 。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:33', '54', '二项堆', '查找最小关键字所在结点', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1044', '可以保存一个指向最小元素的指针，使得查找最小关键字所在结点需要 O ( 1 ) {\\displaystyle {O}(1)} 的时间。在执行其他操作时，需要修改该指针。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:33', '54', '二项堆', '查找最小关键字所在结点', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1045', '先找到最小关键字所在结点，然后将它从其所在的二项树中删除，并获得其子树。将这些子树看作（合并为）一个独立的二项堆，再将此堆合并到原先的堆中即可。由于每棵树最多有 log ⁡ n {\\displaystyle \\log n} 棵子树，创建新堆的时间为 O ( log ⁡ n ) {\\displaystyle {O}(\\log n)} 。同时合并堆的时间也为 O ( log ⁡ n ) {\\displaystyle {O}(\\log n)} ，故整个操作所需时间为 O ( log ⁡ n ) {\\displaystyle {O}(\\log n)} 。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:33', '54', '二项堆', '删除最小关键字所在结点', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1046', 'function deleteMin(heap)\n    min = heap.trees().first()\n    for each current in heap.trees()\n        if current.root < min then min = current\n    for each tree in min.subTrees()\n        tmp.addTree(tree)\n    heap.removeTree(min)\n    merge(heap, tmp)', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:33', '54', '二项堆', '删除最小关键字所在结点', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1047', '在减小关键字的值后，可能会不满足最小堆性质。此时，将其所在结点与父结点交换关键字，如还不满足最小堆性质则再与祖父结点交换关键字……直到最小堆性质得到满足。操作所需时间为 O ( log ⁡ n ) {\\displaystyle {O}(\\log n)} 。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:33', '54', '二项堆', '减小关键字的值', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1048', '将需要删除的结点的关键字的值减小到负无穷大（比二项堆中的其他所有关键字的值都小即可），执行“减小关键字的值”算法，使其调整到当前二项树的根节点位置，再删除最小关键字的根结点即可。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:33', '54', '二项堆', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1049', '本条目需要精通或熟悉相关主题的编者参与及协助编辑。（2012年6月20日） 请邀请适合的人士改善本条目。更多的细节与详情请参见讨论页。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%9D%82%E5%87%91', '2016-02-02 19:01:00', '2016-12-20 09:46:43', '55', '线性杂凑', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1050', '线性散列（英语：Linear Hashing）是一种散列方法，它有几项特点：', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%9D%82%E5%87%91', '2016-02-02 19:01:00', '2016-12-20 09:46:43', '55', '线性杂凑', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1051', '没有目录。 可借由控制负荷因子来延迟分裂。 分裂指标 ：指向下一个要分裂的资料栏，在完整扩张后要重设分裂指标。 档案等级 ：在完整扩张后要档案等级。 区块数目 ：区块数目会线性增加。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%9D%82%E5%87%91', '2016-02-02 19:01:00', '2016-12-20 09:46:43', '55', '线性杂凑', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1052', '输入资料先放入同一资料栏内，每次输入资料都要运算负荷因子，以便检查负荷因子是否超过门槛，如果超过负荷因子，则要针对分裂指标所指的资料栏进行完整扩张。 如果完整扩张则要重设分裂指标，完整扩张会使分裂因子所指的资料栏分裂为原来的两倍。 持续输入资料直到资料输入完毕。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%9D%82%E5%87%91', '2016-02-02 19:01:00', '2016-12-20 09:46:43', '55', '线性杂凑', '算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1053', '输入资料先放入同一资料栏内，每次输入资料都要运算负荷因子，以便检查负荷因子是否超过门槛，如果超过负荷因子，则要针对分裂指标所指的资料栏进行完整扩张。 如果完整扩张则要重设分裂指标，完整扩张会使分裂因子所指的资料栏分裂为原来的两倍。 持续输入资料直到资料输入完毕。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%9D%82%E5%87%91', '2016-02-02 19:01:00', '2016-12-20 09:46:43', '55', '线性杂凑', '插入', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1055', '本条目需要精通或熟悉相关主题的编者参与及协助编辑。（2013年5月1日） 请邀请适合的人士改善本条目。更多的细节与详情请参见讨论页。', 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:09', '58', '深度优先搜索', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1056', '深度优先搜索 节点进行深度优先搜索的顺序 概况 类别： 搜索算法 数据结构： 图 时间复杂度： O ( b m ) {\\displaystyle O(b^{m})} 空间复杂度： O ( b m ) {\\displaystyle O(bm)} 最佳解： 否 完全性： 是 其他： b - 分支系数 m - 图的最大深度', 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:09', '58', '深度优先搜索', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1057', '图与树 搜索算法 α–β A* B* 回溯 集束 贝尔曼-福特 最佳优先 双向 Borůvka 分支限界 BFS 大英博物馆 D* DFS 深度限制 迪杰斯特拉 Edmonds Floyd–Warshall 边缘搜索 爬山 IDA* 迭代加深 Johnson 跳点 克鲁斯克尔 字典序BFS 普里姆 SMA* 分类 图算法 搜索算法 相关主题 动态规划 图的遍历 树的遍历 查 论 编', 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:09', '58', '深度优先搜索', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1058', '深度优先搜索算法（英语：Depth-First-Search，简称DFS）是一种用于遍历或搜索树或图的算法。沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所在边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。属于盲目搜索。', 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:09', '58', '深度优先搜索', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1059', '深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等。', 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:09', '58', '深度优先搜索', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1060', '因发明“深度优先搜索算法”，约翰·霍普克洛夫特与罗伯特·塔扬共同获得计算机领域的最高奖：图灵奖。[来源请求]', 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:09', '58', '深度优先搜索', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1061', '定义一个结构体来表达一个NODE的结构：', 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:09', '58', '深度优先搜索', 'C++的实现', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1062', 'struct Node \n{\n   int self; //数据 \n   Node *left; //左节点 \n   Node *right; //右节点 \n};', 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:09', '58', '深度优先搜索', 'C++的实现', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1063', '那么我们在搜索一个树的时候，从一个节点开始，能首先获取的是它的两个子节点。例如：', 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:09', '58', '深度优先搜索', 'C++的实现', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1064', '“                  A\n           B           C\n      D   E          F   G\n ”', 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:09', '58', '深度优先搜索', 'C++的实现', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1065', 'A是第一个访问的，然后顺序是B和D、然后是E。然后再是C、F、G。那么我们怎么来保证这个顺序呢？', 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:09', '58', '深度优先搜索', 'C++的实现', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1066', '这里就应该用堆叠的结构，因为堆叠是一个先进后出的顺序。通过使用C++的STL，下面的程序能帮助理解：', 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:09', '58', '深度优先搜索', 'C++的实现', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1067', 'const int TREE_SIZE = 9;\nstd::stack<Node*> unvisited; \nNode nodes[TREE_SIZE]; \nNode* current;\n\n//初始化树\nfor(int i=0; i<TREE_SIZE; i++)\n{\n  nodes[i].self = i;\n  int child = i*2+1;\n  if(child<TREE_SIZE) // Left child\n    nodes[i].left = &nodes[child];\n  else\n    nodes[i].left = NULL;\n  child++;\n  if(child<TREE_SIZE) // Right child    \n    nodes[i].right = &nodes[child];\n  else\n    nodes[i].right = NULL;\n}           \n\nunvisited.push(&nodes[0]); //先把0放入UNVISITED stack\n\n// 只有UNVISITED不空\nwhile(!unvisited.empty())\n{\n  current=(unvisited.top()); //当前应该访问的\n  unvisited.pop(); \n  if(current->right!=NULL) \n    unvisited.push(current->right); // 把右边压入 因为右边的访问次序是在左边之后\n  if(current->left!=NULL) \n    unvisited.push(current->left);\n  cout<<current->self<<endl;\n}', 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:09', '58', '深度优先搜索', 'C++的实现', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1068', '在计算机科学中，关联数组（英语：Associative Array），又称映射（Map）、字典（Dictionary）是一个抽象的数据结构，它包含着类似于（键，值）的有序对。一个关联数组中的有序对可以重复（如C++中的multimap）也可以不重复（如C++中的map）。', 'https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84', '2016-09-24 03:47:00', '2016-12-20 09:47:19', '59', '关联数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1069', '这种数据结构包含以下几种常见的操作：', 'https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84', '2016-09-24 03:47:00', '2016-12-20 09:47:19', '59', '关联数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1070', '向关联数组添加配对 从关联数组内删除配对 修改关联数组内的配对 根据已知的键寻找配对[1][2]', 'https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84', '2016-09-24 03:47:00', '2016-12-20 09:47:19', '59', '关联数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1071', '字典问题是设计一种能够具备关联数组特性的数据结构。解决字典问题的常用方法，是利用散列表，但有些情况下，也可以直接使用二叉查找树或其他结构。[1][2][3]', 'https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84', '2016-09-24 03:47:00', '2016-12-20 09:47:19', '59', '关联数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1072', '许多程序设计语言内置基本的数据类型，提供对关联数组的支持。而Content-addressable memory则是硬件层面上实现对关联数组的支持。', 'https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84', '2016-09-24 03:47:00', '2016-12-20 09:47:19', '59', '关联数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1073', 'C++语言的标准模板库提供了8个关联数组容器模板：', 'https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84', '2016-09-24 03:47:00', '2016-12-20 09:47:19', '59', '关联数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1074', 'std::map std::multimap std::set std::multiset std::unordered_map std::unordered_set std::unordered_multimap std::unordered_multiset', 'https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84', '2016-09-24 03:47:00', '2016-12-20 09:47:19', '59', '关联数组', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1075', '在程式设计的类型系统中，数据类型(Data type)是用来约束数据的解释。在编程语言中，常见的数据类型包括原始类型（如：整数、浮点数或字元）、多元组、记录单元、代数数据类型、抽象数据类型、参考类型、类以及函式类型。数据类型描述了数值的表示法、解释和结构，并以算法操作，或是物件在内存中的储存区，或者其它储存装置。', 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1076', '所有在电脑中，基于数位电子学的底层数据，都是以位元（0 或 1）表示。其中数据的最小的定址单位，称为字节（通常是八位元，以八个位元为一组）。机器码指令处理的单位，称作字长（至 2007 年止，一般为 32 或 64 位元）大部分对字长的指令解译，主要以二进制为主，如一个 32 位元的字长，可以表示从 0 至 2 32 − 1 {\\displaystyle 2^{32}-1} 的无符号整数值，或者表示从 − 2 31 {\\displaystyle -2^{31}} 至 2 31 − 1 {\\displaystyle 2^{31}-1} 的有符号整数值。由于有了二的补数，机器语言和机器大多不需要区分无符号和有符号数据类型。存在着特殊的算术指令，对字长中的位元使用不同的解释，以此作为浮点数。', 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '机器中的数据类型', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1077', '编程语言提供若干原始数据类型，以作为程式以及专用化复合类型的建立基础。典型的原始数据类型包含各种整数、浮点数以及字串类型。尽管这些建立基础：阵列、记录单元以及参考所联系的数据，可能未包括在基本类型，但仍可将其视为若干原始值的聚集。', 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '原始数据类型', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1078', '这部分可包括以下内容（最终仍取决于编程语言）：', 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '复合类型', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1079', '一组变数类型，例子：数据库表格中的一行', 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '复合类型', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1080', '同一类型变数、且固定大小的收集处', 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '复合类型', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1081', '每一个数据类型都有一个数值上的最大和最小值，称作数值范围。了解数值的范围是很重要的，尤其是当使用较小的类型时，你就只能储存范围之内的数值。试图储存一个超出其范围的数值，可能会导致编译或执行错误，或者不正确的计算结果（因为被截断）。', 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '数值范围', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1082', '一个变数的范围，是基于用以保存数值的字节数目，而且整数数据类型通常[1]能够储存 2 n {\\displaystyle 2^{n}} 数值（此处的 n {\\displaystyle n} 是指位元）。对于其它的数据类型（例如，浮点数），其数值范围更为复杂，且几乎取决于所使用的储存方法。还有一些不用完全部的位元，例如，布尔只需一个位元，且表示一个二进制值（虽然在实践中，通常会用完剩余的 7 个位元）。某些编程语言[2]也允许反向决定，程式设计者定义解决问题所需的范围和精度，然后由编译器自动选择合适的整数或浮点数。', 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '数值范围', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1083', '下表列出常见的数据类型，及其数值范围：[3]', 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '数值范围', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1084', '数据类型 大小 范围 整数类型 Boolean 1bit 0 至 1 Byte 8bit 0 至 255 Word 2 字节 0 至 65535 Double Word 4 字节，32bit 0 至 4,294,967,295 Integer 4 字节，32bit –2,147,483,648 至 2,147,483,647 Double Integer 8 字节，64bit –9,223,372,036,854,775,808 至 9,223,372,036,854,775,807 浮点数类型 浮点数 4 字节 1E-37 至 1E+37 (6 个小数位数) Double Float 8 字节 1E-307 至 1E+308 (15 个小数位数)', 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '数值范围', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1085', '类型理论，关于类型的数学模型。 类型系统，关于在编程语言类型中的选择差异。', 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '参阅', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1086', '^ 有一个情况将一个或多个位元保留作其它用途，例如：奇偶校验。 ^ Ada、Pascal。 ^ 注意，在平台和语言之间，数据类型的大小可能有所变化。表中列出的数值，是目前所使用且最常见的大小。', 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '参阅', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1087', 'Luca Cardelli, Peter Wegner. On Understanding Types, Data Abstraction, and Polymorphism, [1] from Computing Surveys, (December, 1985)', 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '参阅', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1089', '对话树是许多冒险游戏[1][2][3][4][5][6]（含动作冒险游戏[7]）、电子角色扮演游戏贯穿使用的游戏机制[8]。当和非玩家角色互动时，玩家需要选择在对话中说什么，并选择直到对话结束[8]。视觉小说和恋爱模拟游戏等某些电子游戏类型，几乎完全围绕此类角色交互和分支对话[9]。', 'https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%AF%9D%E6%A0%91', '2016-12-05 14:24:00', '2016-12-20 09:47:39', '61', '对话树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1090', '^ IGN: Escape From Monkey Island Review ^ Adventure Game Design Patterns at God Patterns ^ Strange Things in Sierra\'s Adventure Game Demos ^ Dreamfall: The Longest Journey Hands-On - Yahoo! Video Games ^ GameDev.net - NPC Conversation Techniques ^ Adventure Gamers : Callahan\'s Crosstime Saloon ^ The Pages of Now & Forever - All About Star Control ^ 8.0 8.1 Rollings, Andrew; Ernest Adams. Fundamentals of Game Design. Prentice Hall. 2006.  ^ Brent Ellison. Defining Dialogue Systems. Gamasutra. July 8, 2008 [2011-03-30]. ', 'https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%AF%9D%E6%A0%91', '2016-12-05 14:24:00', '2016-12-20 09:47:39', '61', '对话树', '脚注', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1091', '这是一篇冒险游戏小作品。你可以通过编辑或修订扩充其内容。', 'https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%AF%9D%E6%A0%91', '2016-12-05 14:24:00', '2016-12-20 09:47:39', '61', '对话树', '脚注', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1092', '广度优先搜索 节点进行广度优先搜索的顺序 概况 类别： 搜索算法 数据结构： 图 时间复杂度： O ( | V | + | E | ) = O ( b d ) {\\displaystyle O(|V|+|E|)=O(b^{d})} 空间复杂度： O ( | V | + | E | ) = O ( b d ) {\\displaystyle O(|V|+|E|)=O(b^{d})} 最佳解： 是 完全性： 是', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1093', '图与树 搜索算法 α–β A* B* 回溯 集束 贝尔曼-福特 最佳优先 双向 Borůvka 分支限界 BFS 大英博物馆 D* DFS 深度限制 迪杰斯特拉 Edmonds Floyd–Warshall 边缘搜索 爬山 IDA* 迭代加深 Johnson 跳点 克鲁斯克尔 字典序BFS 普里姆 SMA* 分类 图算法 搜索算法 相关主题 动态规划 图的遍历 树的遍历 查 论 编', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1094', '广度优先搜索算法（英语：Breadth-First-Search，缩写为BFS），又译作宽度优先搜索，或横向优先搜索，是一种图形搜索算法。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。广度优先搜索的实现一般采用open-closed表。', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1095', 'BFS是一种盲目搜寻法，目的是系统地展开并检查图中的所有节点，以找寻结果。换句话说，它并不考虑结果的可能位址，彻底地搜索整张图，直到找到结果为止。BFS并不使用经验法则算法。', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '作法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1096', '从算法的观点，所有因为展开节点而得到的子节点都会被加进一个先进先出的队列中。一般的实现里，其邻居节点尚未被检验过的节点会被放置在一个被称为 open 的容器中（例如伫列或是链表），而被检验过的节点则被放置在被称为 closed 的容器中。（open-closed表）', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '作法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1097', '以德国城市为范例的地图。城市间有数条道路相连接。 从法兰克福开始执行广度优先搜索算法，所产生的广度优先搜索算法树。 广度优先搜索算法的动画范例', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '作法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1098', '/**\n* ADDQ (Q, p) - p PUSH 入 Q\n* DELQ (Q) - POP Q 并返回 Q 顶\n* FIRSTADJ (G,v) - v 的第一个邻接点，找不到则返回 -1\n* NEXTADJ (G,v) - v 的下一个邻接点，找不到则返回 -1\n* VISIT (v) - 访问 v\n* visited [] - 是否已访问\n*/\n\n/* 广度优先搜索算法 */\nvoid BFS(VLink G[], int v) {\n  int w;\n  /* 访问 v 并入队 */\n  VISIT(v);\n  visited[v]=1;\n  ADDQ(Q,v);\n  /* 对队列 Q 的各元素 */\n  while(!EMPTYQ(Q)) {\n    v=DELQ(Q);\n    w=FIRSTADJ(G,v);\n    /* 的各邻接点 */\n    do {\n      /* 进行访问和入队 */\n      if(visited[w] == 0) {\n        VISIT(w);\n        ADDQ(Q,w);\n        visited[w]=1;\n      }\n    } while (w=NEXTADJ(G,v)) != -1)\n  }\n}\n\n/* 对图G=(V,E)进行广度优先搜索的主算法 */\nvoid TRAVEL_BFS(VLink G[], bool visited[], int n) {\n  int i;\n  // 清零标记数组\n  for(i = 0; i < n; i ++)\n    visited[i] = 0;\n  for(i = 0; i < n; i ++)\n    if(visited[i] == 0)\n      BFS(G,i);\n}', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', 'C 的实现', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1099', '(这个例子仅针对Binary Search Tree) 定义一个结构体来表达一个节点的结构：', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', 'C++ 的实现', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1100', 'struct node\n {\n    int self; //数据\n    node *left; //左节点\n    node *right; //右节点\n };', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', 'C++ 的实现', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1101', '那么，我们在搜索一个树的时候，从一个节点开始，能首先获取的是它的两个子节点。例如：', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', 'C++ 的实现', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1102', 'A是第一个访问的，然后顺序是B和C；然后再是B的子节点，C的子节点。那么我们怎么来保证这个顺序呢？', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', 'C++ 的实现', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1103', '这里就应该用queue数据结构，因为queue采用先进先出( first-in-first-out )的顺序。', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', 'C++ 的实现', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1104', '使用C++的STL函式库，下面的程序能帮助理解：', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', 'C++ 的实现', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1105', 'std::queue<node*> visited, unvisited; \n node nodes[9];\n node* current;\n \n unvisited.push(&nodes[0]); //先把root放入unvisited queue\n \n while(!unvisited.empty()) //只有unvisited不空\n {\n    current = (unvisited.front()); //目前应该检验的\n \n    if(current -> left != NULL)\n       unvisited.push(current -> left); //把左边放入queue中\n \n    if(current -> right != NULL) //右边压入。因为QUEUE是一个先进先出的结构构，所以即使后面再压其他东西，依然会先访问这个。\n       unvisited.push(current -> right);\n \n    visited.push(current);\n \n    cout << current -> self << endl;\n \n    unvisited.pop();\n }', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', 'C++ 的实现', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1106', '因为所有节点都必须被储存，因此BFS的空间复杂度为O(|V| + |E|)，其中|V|是节点的数目，而|E|是图中边的数目。注：另一种说法称BFS的空间复杂度为 O ( B M ) {\\displaystyle O(B^{M})} ，其中B是最大分支系数，而M是树的最长路径长度。由于对空间的大量需求，因此BFS并不适合解非常大的问题。', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '空间复杂度', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1107', '最差情形下，BFS必须寻找所有到可能节点的所有路径，因此其时间复杂度为O(|V| + |E|)，其中|V|是节点的数目，而|E|是图中边的数目。', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '时间复杂度', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1108', '广度优先搜索算法具有完全性。这意指无论图形的种类如何，只要目标存在，则BFS一定会找到。然而，若目标不存在，且图为无限大，则BFS将不收敛（不会结束）。', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '完全性', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1109', '若所有边的长度相等，广度优先搜索算法是最佳解——亦即它找到的第一个解，距离根节点的边数目一定最少；但对一般的图来说，BFS并不一定回传最佳解。这是因为当图形为加权图（亦即各边长度不同）时，BFS仍然回传从根节点开始，经过边数目最少的解；而这个解距离根节点的距离不一定最短。这个问题可以使用考虑各边权值，BFS的改良算法成本一致搜寻法来解决。然而，若非加权图形，则所有边的长度相等，BFS就能找到最近的最佳解。', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '最佳解', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1110', '由起点开始，执行广度优先搜索算法后所经过的所有节点，即为包含起点的一个连接元件。', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '寻找连接元件', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1111', 'BFS可以用以测试二分图。从任一节点开始搜寻，并在搜寻过程中给节点不同的标签。例如，给开始点标签0，开始点的所有邻居标签1，开始点所有邻居的邻居标签0……以此类推。若在搜寻过程中，任一节点有跟其相同标签的邻居，则此图就不是二分图。若搜寻结束时这种情形未发生，则此图为一二分图。', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '测试是否二分图', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1112', 'BFS可用来解决电脑游戏（例如即时策略游戏）中找寻路径的问题。在这个应用中，使用平面网格来代替图形，而一个格子即是图中的一个节点。所有节点都与它的邻居（上、下、左、右、左上、右上、左下、右下）相接。', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '应用于电脑游戏中平面网格', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1113', '值得一提的是，当这样使用BFS算法时，首先要先检验上、下、左、右的邻居节点，再检验左上、右上、左下、右下的邻居节点。这是因为BFS趋向于先寻找斜向邻居节点，而不是四方的邻居节点，因此找到的路径将不正确。BFS应该先寻找四方邻居节点，接着才寻找斜向邻居节点1。', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '应用于电脑游戏中平面网格', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1114', 'Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein], Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Section 22.2: Breadth-first search, pp. 531–539.', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '应用于电脑游戏中平面网格', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1115', '（英文） 数据结构与算法字典：广度优先搜索 （英文） C++ Boost Graph函式库：广度优先搜索 （英文） 深度与广度优先搜索：解释与源代码 （英文） BFS 动画说明', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '应用于电脑游戏中平面网格', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1116', '本条目部分链接不符合格式手册规范。跨语言链接及章节标题等处的链接可能需要清理。（2015年12月11日） 请协助改善此条目。参见WP:LINKSTYLE、WP:MOSIW以了解细节。突出显示跨语言链接可以便于检查。', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1117', 'AVL树 型态 树 时间 1962 作者 格奥尔吉·阿杰尔松-韦利斯基及E. M. Landis 大O符号 的时间复杂度 平均 最差 空间 O(n) O(n) 搜寻 O(log n) O(log n) 插入 O(log n) O(log n) 删除 O(log n) O(log n)', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1118', '在计算机科学中，AVL树是最先发明的自平衡二叉查找树。在AVL树中任何节点的两个子树的高度最大差别为一，所以它也被称为高度平衡树。查找、插入和删除在平均和最坏情况下都是O（log n）。增加和删除可能需要通过一次或多次树旋转来重新平衡这个树。AVL树得名于它的发明者G.M. Adelson-Velsky和E.M. Landis，他们在1962年的论文《An algorithm for the organization of information》中发表了它。', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1119', '节点的平衡因子是它的左子树的高度减去它的右子树的高度（有时相反）。带有平衡因子1、0或 -1的节点被认为是平衡的。带有平衡因子 -2或2的节点被认为是不平衡的，并需要重新平衡这个树。平衡因子可以直接存储在每个节点中，或从可能存储在节点中的子树高度计算出来。', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1120', '假设平衡因子是左子树的高度减去右子树的高度所得到的值，又假设由于在二叉排序树上插入节点而失去平衡的最小子树根节点的指针为a（即a是离插入点最近，且平衡因子绝对值超过1的祖先节点），则失去平衡后进行的规律可归纳为下列四种情况：', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '实现描述', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1121', '单向右旋平衡处理LL：由于在*a的左子树根节点的左子树上插入节点，*a的平衡因子由1增至2，致使以*a为根的子树失去平衡，则需进行一次右旋转操作； 单向左旋平衡处理RR：由于在*a的右子树根节点的右子树上插入节点，*a的平衡因子由-1变为-2，致使以*a为根的子树失去平衡，则需进行一次左旋转操作； 双向旋转（先左后右）平衡处理LR：由于在*a的左子树根节点的右子树上插入节点，*a的平衡因子由1增至2，致使以*a为根的子树失去平衡，则需进行两次旋转（先左旋后右旋）操作。 双向旋转（先右后左）平衡处理RL：由于在*a的右子树根节点的左子树上插入节点，*a的平衡因子由-1变为-2，致使以*a为根的子树失去平衡，则需进行两次旋转（先右旋后左旋）操作。', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:58', '63', 'AVL树', '实现描述', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1122', '在平衡的二叉排序树BBST (Balancing Binary Search Tree)上插入一个新的数据元素e的递归算法可描述如下：', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:58', '63', 'AVL树', '实现描述', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1123', '若BBST为空树，则插入一个数据元素为e的新节点作为BBST的根节点，树的深度增1； 若e的关键字和BBST的根节点的关键字相等，则不进行； 若e的关键字小于BBST的根节点的关键字，而且在BBST的左子树中不存在和e有相同关键字的节点，则将e插入在BBST的左子树上，并且当插入之后的左子树深度增加（+1）时，分别就下列不同情况处理之： BBST的根节点的平衡因子为-1（右子树的深度大于左子树的深度，则将根节点的平衡因子更改为0，BBST的深度不变； BBST的根节点的平衡因子为0（左、右子树的深度相等）：则将根节点的平衡因子更改为1，BBST的深度增1； BBST的根节点的平衡因子为1（左子树的深度大于右子树的深度）：则若BBST的左子树根节点的平衡因子为1：则需进行单向右旋平衡处理，并且在右旋处理之后，将根节点和其右子树根节点的平衡因子更改为0，树的深度不变； 若e的关键字大于BBST的根节点的关键字，而且在BBST的右子树中不存在和e有相同关键字的节点，则将e插入在BBST的右子树上，并且当插入之后的右子树深度增加（+1）时，分别就不同情况处理之。', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:58', '63', 'AVL树', '实现描述', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1124', 'balance(null) -> null;\nbalance({null, _, null}=Tree) -> Tree;\nbalance({Left, Value, Right}=Tree) ->\n	Diff = count(Left)-count(Right),\n	if (Diff < 2) and (Diff > -2)	->	{balance(Left), Value, balance(Right)};\n	   (Diff > 1)				->	balance(rotate_right(Tree));\n	   (Diff< -1)				->	balance(rotate_left(Tree));\n	   true					->	exit(\'This is impossible!\')\n	end.\n\nrotate_right({Left, Value, Right}) ->\n	merge_max(Left, {null, Value, Right}).\n\nrotate_left({Left, Value, Right}) ->\n	merge_min(Right, {Left, Value, null}).\n\nmerge_min({null, Value, Right}, Tree2) ->\n	{Tree2, Value, Right};\nmerge_min({Left, _, _}, Tree2) ->\n	merge_min(Left, Tree2).\n\nmerge_max({Left , Value, null}, Tree2) ->\n	{Left, Value, Tree2};\nmerge_max({_, _, Right}, Tree2) ->\n	merge_max(Right, Tree2).', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:58', '63', 'AVL树', '实现描述', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1125', '高度为h的AVL树，节点数N最多 2 h − 1 {\\displaystyle 2^{h}-1} ； 最少 Φ h + 2 5 − 1 {\\displaystyle {\\frac {\\Phi ^{h+2}}{\\sqrt {5}}}-1} ( 其中 Φ = 1 + 5 2 = 1.618 {\\displaystyle \\Phi ={\\frac {1+{\\sqrt {5}}}{2}}=1.618} )。 最少节点数n如以费伯纳西数列可以用数学归纳法证明： N h {\\displaystyle N_{h}} = F h + 2 {\\displaystyle F_{h+2}} - 1 ( F h + 2 {\\displaystyle F_{h+2}} 是Fibonacci polynomial)。 即: N 0 {\\displaystyle N_{0}} = 0 (表示AVL Tree高度为0的节点总数) N 1 {\\displaystyle N_{1}} = 1 (表示AVL Tree高度为1的节点总数) N 2 {\\displaystyle N_{2}} = 2 (表示AVL Tree高度为2的节点总数) N h {\\displaystyle N_{h}} = N h − 1 {\\displaystyle N_{h-1}} + N h − 2 {\\displaystyle N_{h-2}} + 1 (表示AVL Tree高度为h的节点总数) 换句话说，当节点数为N时，高度h最多为 l o g Φ ( 5 ∗ ( N + 1 ) ) − 2 {\\displaystyle log_{\\Phi }({\\sqrt {5}}*(N+1))-2} 。', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:58', '63', 'AVL树', 'AVL节点数计算', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1126', 'G. Adelson-Velskii and E.M. Landis, \"An algorithm for the organization of information.\" Doklady Akademii Nauk SSSR, 146:263–266, 1962（Russian）. English translation by Myron J. Ricci in Soviet Math. Doklady, 3:1259–1263, 1962.', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:58', '63', 'AVL树', '引用', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1127', 'Description from the Dictionary of Algorithms and Data Structures AVL Tree Traversal Linked AVL tree C++ AVL Tree Template and C AVL TREE \"Generic Package\" by Walt Karas A Visual Basic AVL Tree Container Class by Jim Harris AVL Trees: Tutorial and C++ Implementation by Brad Appleton Ulm\'s Oberon Library: AVLTrees The AVL TREE Data Type CNAVLTree Class Reference GNU libavl AVL-trees - balanced binary trees by Alex Konshin Simulation of AVL Trees AVL tree applet Simulation of AVL Trees (DYNAMIC) AVL, Splay and Red/Black Applet', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:58', '63', 'AVL树', '引用', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1129', '从AVL树中删除，可以透过把要删除的节点向下旋转成一个叶子节点，接着直接移除这个叶子节点来完成。因为在旋转成叶子节点期间最多有log n个节点被旋转，而每次AVL旋转耗费固定的时间，所以删除处理在整体上耗费O(log n) 时间。', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:58', '63', 'AVL树', '删除', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1130', '可以像普通二叉查找树一样的进行，所以耗费O(log n)时间，因为AVL树总是保持平衡的。不需要特殊的准备，树的结构不会由于查找而改变。（这是与伸展树搜寻相对立的，它会因为搜寻而变更树结构。）', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:58', '63', 'AVL树', '搜寻', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1131', '2-3树 型态 树 时间 1970 作者 约翰·霍普克洛夫特 大O符号 的时间复杂度 平均 最差 空间 O(n) O(n) 搜寻 O(log n) O(log n) 插入 O(log n) O(log n) 删除 O(log n) O(log n)', 'https://zh.wikipedia.org/wiki/2-3%E6%A0%91', '2015-04-13 07:42:00', '2016-12-20 09:48:07', '64', '2-3树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1132', '2–3树是一个这样的一棵树， 它的每个节点要么有2个孩子和1个数据元素，要么有3个孩子和2个数据元素，叶子节点没有孩子，并且有1个或2个数据元素。', 'https://zh.wikipedia.org/wiki/2-3%E6%A0%91', '2015-04-13 07:42:00', '2016-12-20 09:48:07', '64', '2-3树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1133', '2–3树和AA树是等距同构的，意味着它们是同一种数据结构。换句话说，对于每个2–3树，都至少有1个AA树和它的元素排列是相同的。2–3树是平衡树，意味着右边，左边，中间的子树的元素数量都是相同或接近的。', 'https://zh.wikipedia.org/wiki/2-3%E6%A0%91', '2015-04-13 07:42:00', '2016-12-20 09:48:07', '64', '2-3树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1134', '2–3 Trees Complete Description 2–3 Tree Java Applet 2–3 Tree In-depth description 2–3 Tree in F# 2–3 Tree in Python', 'https://zh.wikipedia.org/wiki/2-3%E6%A0%91', '2015-04-13 07:42:00', '2016-12-20 09:48:07', '64', '2-3树', '链接', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1135', '[显示] 查 论 编 计算机科学中的树 二叉树 二叉查找树（BST） 笛卡尔树 MVP树 Top tree T树 自平衡二叉查找树 AA树 AVL树 左倾红黑树 红黑树 替罪羊树 伸展树 树堆 加权平衡树 B树 B+树 B*树 Bx树 UB树 2-3树 2-3-4树 (a,b)-树 Dancing tree H树 堆 二叉堆 二项堆 斐波那契堆 左偏树 Pairing heap 斜堆 Van Emde Boas tree Trie 后缀树 基数树 三叉查找树 X-快速前缀树 Y-快速前缀树 二叉空间分割（BSP）树 四叉树 八叉树 k-d树 隐式k-d树 VP树 非二叉树 指数树 融合树 区间树 PQ树 Range tree SPQR树 空间数据分割树 R树 R*树 R+树 X树 M树 线段树 希尔伯特R树 优先R树 其他树 散列日历 散列树 Finger tree Order statistic tree Metric tree Cover tree BK树 Doubly chained tree iDistance Link-cut tree Fenwick tree Log-structured merge-tree 树状数组', 'https://zh.wikipedia.org/wiki/2-3%E6%A0%91', '2015-04-13 07:42:00', '2016-12-20 09:48:07', '64', '2-3树', '链接', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1136', '[显示] 查 论 编 数据结构 类型 集合 容器 抽象类型 关联数组 多重关连数组 列表 堆栈 队列 双端队列 优先队列 双端优先队列 集合 多重集 并查集 数组 字串 位数组 环形缓冲器 动态数组 哈希表 哈希数组树 稀疏数组 列表 双端队列 队列 堆栈 循环队列 关联表 链表 跳跃列表 松散链表 异或链表 树 线段树 自平衡二叉查找树 B树 二叉树 AA树 AVL树 红黑树 平衡树 伸展树 二叉查找树 堆 二叉堆 二项堆 斐波那契堆 R树 R*树 R+树 Hilbert R树 前缀树 哈希树 图 有向图 有向无环图 二元决策图 无向图 确定性非循环有限自动机 数据结构列表', 'https://zh.wikipedia.org/wiki/2-3%E6%A0%91', '2015-04-13 07:42:00', '2016-12-20 09:48:07', '64', '2-3树', '链接', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1137', '堆栈（英语：stack），也可直接称栈（港澳台作堆叠），在计算机科学中，是一种特殊的串列形式的数据结构，它的特殊之处在于只能允许在链接串列或阵列的一端（称为堆叠顶端指标，英语：top）进行加入数据（英语：push）和输出数据（英语：pop）的运算。另外栈也可以用一维数组或连结串列的形式来完成。堆叠的另外一个相对的操作方式称为伫列。', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1138', '由于堆叠数据结构只允许在一端进行操作，因而按照后进先出（LIFO, Last In First Out）的原理运作。', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1139', '堆叠数据结构使用两种基本操作：推入（push）和弹出（pop）：', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '操作', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1140', '推入：将数据放入堆叠的顶端（阵列形式或串列形式），堆叠顶端top指标加一。 弹出：将顶端数据资料输出（回传），堆叠顶端资料减一。', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '操作', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1141', '先入后出，后入先出。 除头尾节点之外，每个元素有一个前驱，一个后继。', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '特点', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1142', '以下是堆栈的VDM（Vienna Development Method（英语：Vienna Development Method））：[1]', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '抽象定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1143', 'init: -> Stack\n  push: N x Stack -> Stack\n  top: Stack -> (N U ERROR)\n  pop: Stack -> Stack\n  isempty: Stack -> Boolean', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '抽象定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1144', '此处的N代表某个元素（如自然数），而U表示集合求交。', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '抽象定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1145', 'top(init()) = ERROR\n  top(push(i,s)) = i\n  pop(init()) = init()\n  pop(push(i, s)) = s\n  isempty(init()) = true\n  isempty(push(i, s)) = false', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '抽象定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1146', '^ Jones: \"Systematic Software Development Using VDM\"', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '堆叠的应用', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1148', '堆栈可以用链表和数组两种方式实现，一般为一个堆栈预先分配一个大小固定且较合适的空间并非难事，所以较流行的做法是Stack结构下含一个数组。如果空间实在紧张，也可用链表实现，且去掉表头。这里的例程是以数组实现的。', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '阵列堆叠', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1149', '#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#define stack struct Stack\n#define STACK_POP_ERR 42\n/* 堆叠资料结构 堆栈数据结构 */\nstruct Stack\n{\n  int val[10]; // 阵列空间\n  int top;     // 堆叠顶端指标（栈顶）\n};\n/* 检查堆叠是否为空 */\nbool empty(stack *stk) { return stk->top == 0; }\n/* 推入资料 */\nvoid push(stack *stk, int x)\n{\n  stk->top=stk->top+1;\n  stk->val[stk->top]=x;\n}\n/* 弹出并返回资料 */\nint pop(stack *stk) \n{\n  if(empty(stk)) \n    return STACK_POP_ERR; // 不能弹出\n  else\n  {\n    stk->top=stk->top-1;\n    return stk->val[stk->top+1];\n  }\n}\nint main()\n{\n  // 宣告并初始化资料结构空间\n  stack stk;\n  stk.top=0;\n  // 推入四个\n  push(&stk, 3);\n  push(&stk, 4);\n  push(&stk, 1);\n  push(&stk, 9);\n  // 弹出三个\n  printf(\"%d \", pop(&stk));\n  printf(\"%d \", pop(&stk));\n  printf(\"%d \", pop(&stk));\n  return 0;\n}', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '阵列堆叠', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1150', '/* 链栈的结构定义 */\ntypedef struct {\n  SLink top; 　 　// 栈顶指针\n  int len​​gth; 　 // 栈中元素个数\n} Stack;\n\n// 构造空栈 S\nvoid InitStack (Stack &S)\n{\n  S.top = NULL; 　　// 设栈顶指针的初值为\"空\"\n  S.length = 0; 　　// 空栈中元素个数为0\n}\n// 如果指针反过来从栈底到栈顶的话，删除栈顶元素时，为修改其前驱指针，需要从栈底一直找到栈顶。\n\n// 在栈顶S 之上插入元素e为新的栈顶元素，并返回成功与否\nbool Push (Stack &S, ElemType e) {\n p = new LNode; 　　// 建新的结点\n if(!p)\n   return false;　　// 存储分配失败\n p -> data = e;\n p -> next = S.top;// 链接到原来的栈顶\n S.top = p; 　　 　// 移动栈顶指针\n ++S.length;　　 　 // 栈的长度增1\n}\n// 在链栈的类型定义中设立“栈中元素个数”的成员是为了便于求得栈的长度。\n\n// 删除S 栈顶且以e 返回其数值，返回成功与否\nbool Pop (Stack &S, SElemType &e)\n{\n  if (!S.top)\n    return false;\n  else\n  {\n     e = S.top -> data; 　　 // 返回栈顶元素\n     q = S.top;\n     S.top = S.top -> next; // 修改栈顶指针\n     --S.length; 　　　　　 // 栈的长度减1\n     delete q;　　　　　 　// 释放被删除的结点空间\n     return true;\n   }\n}', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '串列堆叠', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1151', '大多数CPU都有用作堆栈指针的寄存器。', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '硬件支持', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1152', '关于用以储存区间或线段的数据结构，详见“线段树 (储存区间)”。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1153', '线段树是一种二叉树，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1154', '对于线段树中的每一个非叶子节点[a,b]，它的左子树表示的区间为[a,(a+b)/2]，右子树表示的区间为[(a+b)/2+1,b]。因此线段树是平衡二叉树。叶节点数目为N，即整个线段区间的长度。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1155', 'zkw线段树是一种自底向上的线段树，由清华大学的张昆玮提出。它相对于传统线段树的优势体现在减少了递归操作和增加了位运算等操作以减少常数[1]。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '变种', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1156', 'http://dongxicheng.org/structure/segment-tree/', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '相关链接', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1157', '^ 张昆玮. 统计的力量——线段树全接触. ', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '相关链接', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1158', '/* 对于区间求和 */\nvoid push_up(int rt) {\n    tree[rt] = tree[rt << 1] + tree[rt << 1 | 1];\n}\n\n/* 对于区间求最大值 */\nvoid push_up(int rt) {\n    tree[rt] = max(tree[rt << 1], tree[rt << 1 | 1]);\n}', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '节点数据向上更新', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1159', '对于区间求和, 原子数组值需要加上lazy标记乘以子树所统计的区间长度。 len为父节点统计的区间长度, 则len - (len >> 1)为左子树区间长度, len >> 1为右子树区间长度。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '节点懒惰标记下推', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1160', 'void push_down(int rt, int len) {\n    tree[rt << 1] += lazy[rt] * (len - (len >> 1));\n    lazy[rt << 1] += lazy[rt];\n    tree[rt << 1 | 1] += lazy[rt] * (len >> 1);\n    lazy[rt << 1 | 1] += lazy[rt];\n    lazy[rt] = 0;\n}', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '节点懒惰标记下推', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1161', '对于区间求最大值, 子树的值不需要乘以长度, 所以不需要传递参数len。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '节点懒惰标记下推', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1162', 'void push_down(int rt) {\n    tree[rt << 1] += lazy[rt];\n    lazy[rt << 1] += lazy[rt];\n    tree[rt << 1 | 1] += lazy[rt];\n    lazy[rt << 1 | 1] += lazy[rt];\n    lazy[rt] = 0;\n}', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '节点懒惰标记下推', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1163', '#define lchild rt << 1, l, m\n#define rchild rt << 1 | 1, m + 1, r\nvoid build(int rt = 1, int l = 1, int r = N) {\n    if (l == r) { std::cin >> tree[rt]; return; }\n    int m = (l + r) >> 1;\n    build(lchild); build(rchild);\n    push_up(rt);\n}', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '建树', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1164', '#define lchild rt << 1, l, m\n#define rchild rt << 1 | 1, m + 1, r\nvoid update(int p, int delta, int rt = 1, int l = 1, int r = N) {\n    if (l == r) {\n        tree[rt] += delta;\n        return;\n    }\n    int m = (l + r) >> 1;\n    if (p <= m) update(p, delta, lchild);\n    else update(p, delta, rchild);\n    push_up(rt);\n}', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '更新', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1165', '成段更新, 需要用到lazy标记来提高时间效率', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '更新', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1166', '#define lchild rt << 1, l, m\n#define rchild rt << 1 | 1, m + 1, r\nvoid update(int L, int R, int delta, int rt = 1, int l = 1, int r = N) {\n    if (L <= l && r <= R) {\n        tree[rt] += delta * (r - l + 1);\n        lazy[rt] += delta;\n        return;\n    }\n    if (lazy[rt]) push_down(rt, r - l + 1);\n    int m = (l + r) >> 1;\n    if (L <= m) update(L, R, delta, lchild);\n    if (R > m)  update(L, R, delta, rchild);\n    push_up(rt);\n}', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '更新', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1167', '#define lchild rt << 1, l, m\n#define rchild rt << 1 | 1, m + 1, r\nint query(int L, int R, int rt = 1, int l = 1, int r = N) {\n    if (L <= l && r <= R) return tree[rt];\n    if (lazy[rt]) push_down(rt, r - l + 1);\n    int m = (l + r) >> 1, ret = 0;\n    if (L <= m) ret += query(L, R, lchild);\n    if (R > m)  ret += query(L, R, rchild);\n    return ret;\n}', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '区间查询', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1168', '笛卡尔树是一种特定的二叉树数据结构，可由数列构造，在范围最值查询、范围top k查询（range top k queries）等问题上有广泛应用。它具有堆的有序性，中序遍历可以输出原数列。笛卡尔树结构由Vuillmin(1980)[1]在解决范围搜索的几何数据结构问题时提出。从数列中构造一棵笛卡尔树可以线性时间完成，需要采用基于栈的算法来找到在该数列中的所有最近小数。', 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:45', '68', '笛卡尔树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1169', '无相同元素的数列构造出的笛卡尔树具有下列性质：', 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:45', '68', '笛卡尔树', '定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1170', '结点一一对应于数列元素。即数列中的每个元素都对应于树中某个唯一结点，树结点也对应于数列中的某个唯一元素 中序遍历（in-order traverse）笛卡尔树即可得到原数列。即任意树结点的左子树结点所对应的数列元素下标比该结点所对应元素的下标小，右子树结点所对应数列元素下标比该结点所对应元素下标大。 树结构存在堆序性质，即任意树结点所对应数值大／小于其左、右子树内任意结点对应数值', 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:45', '68', '笛卡尔树', '定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1171', '根据堆序性质，笛卡尔树根结点为数列中的最大／小值，树本身也可以通过这一性质递归地定义：根结点为序列的最大／小值，左、右子树则对应于左右两个子序列，其结点同样为两个子序列的最大/小值。因此，上述三条性质唯一地定义了笛卡尔树。若数列中存在重复值，则可用其它排序原则为数列中相同元素排定序列，例如以下标较小的数为较小，便能为含重复值的数列构造笛卡尔树。', 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:45', '68', '笛卡尔树', '定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1172', '笛卡尔树是二叉树，对于数列而言将其作为二叉搜索树是自然的。若将二叉搜索树结点关联上一个权值，并且保证此权值在树结构中遵循堆中的序关系，即父结点权值比子结点权值大，则此二叉搜索树又被称为Treap. 其名称来源于树与堆两英文词的组合（tree ＋ heap -> treap）。Treap与笛卡尔树在结构上是相同的，只是两者的应用不同。', 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:45', '68', '笛卡尔树', 'treap', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1173', '^ Vuillmin 1980. \"A unifying look at data structures\", Commun. ACM (New York, NY, USA: ACM) 23 (4): 229–239, doi:10.1145/358841.358852 ^ Bender, Michael A.; Farach-Colton, Martin (2000), \"The LCA problem revisited\", Proceedings of the 4th Latin American Symposium on Theoretical Informatics, Springer-Verlag, Lecture Notes in Computer Science 1776, pp. 88–94.', 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:45', '68', '笛卡尔树', 'treap', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1175', '笛卡尔树可以有效地处理范围最值查询（range minimum queries），通过将定义在数列上的RMQ问题转化为定义在树结构上的最低公共祖先（lowest common ancestor）问题。数列以线性时间构造出笛卡尔树，笛卡尔树则能以常数时间处理最低公共祖先查询，因此在线性时间的预处理后，范围最值查询能以常数时间完成。', 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:45', '68', '笛卡尔树', '范围最值查询与最低公共祖先', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1176', 'Bender & Farach-Colton (2000)[2]则提出了RMQ与LCA问题的新联系，他们通过不基于树的算法处理RMQ问题从而有效地解决LCA问题。其使用欧拉路径的技巧将树结构转化为数列，此数列具有特定性质（相邻数值代表树中的相邻顶点，即在树中高度差为1的顶点），利用这一性质RMQ问题可以很高效地得到解决。通常的数列则不具备此性质，为了将一般的数列转化为具有上述性质的数列，需要应用到笛卡尔树，具体过程为在普通数列上构造笛卡尔树，在笛卡尔树上使用欧拉路径转化的方法将树转化为具有上述性质的新数列。', 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:45', '68', '笛卡尔树', '范围最值查询与最低公共祖先', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1177', '范围最值查询问题也可以解释为二维范围查询问题，或者三边范围查询问题（three sided range queries），笛卡尔平面上的有限点集可以用来构造笛卡尔树，首先将这些点按照x取值排序，然后将y值作为数列中元素的值，以此数列建立笛卡尔树。若 S 为有限点集中满足 L ≤ x ≤ R {\\displaystyle L\\leq x\\leq R} 条件的点集，设 p 是 S 中x值最小的点，q 是 S 中 x 值最大的点，则笛卡尔树中 p 与 q的最低公共祖先即为该点集中处于该x值范围内y值最高／低的点 b。三边范围查询问题，即给定条件 L ≤ x ≤ R , y ≤ T {\\displaystyle L\\leq x\\leq R,y\\leq T} ，取出所有满足条件的点。其解决是以笛卡尔树找到b 点，若b点的y 值满足条件，则递归地在 p, b 所约束的子树以及b, q 所约束的子树内重复这一过程，这一查询可以使每个被报告的点都在常数时间内找到，总体的时间复杂度为 O ( k ) {\\displaystyle O(k)} ，k即为满足条件的点数。', 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:45', '68', '笛卡尔树', '范围最值查询与最低公共祖先', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1178', '笛卡尔树同样可以应用于以常数时间查询超度量空间内点对的距离。超度量空间内距离的定义与最宽路径问题中的权重相同。从最小生成树上可以构造一个笛卡尔树，根结点表示最小生成树中的权值最大的边，撤去此边会将最小生成树分割为两个子树，笛卡尔树递归地从这两棵子树上构造。笛卡尔树的叶结点表示度量空间内的点，两个叶结点的最低公共祖先则是这两个点在最小生成树中最重的边，代表这两点间的距离。获得了最小生成树及将边按照权值排序后，笛卡尔树即可在线性时间内构造出来。', 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:45', '68', '笛卡尔树', '范围最值查询与最低公共祖先', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1179', '本条目需要编修，以确保文法、用词、语气、格式、标点等使用恰当。（2011年10月13日） 请按照校对指引，帮助编辑这个条目。（帮助、讨论）', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1180', '在离散数学中，树旋转（英语：Tree rotation）是在二叉树中的一种子树调整操作, 每一次旋转并不影响对该二叉树进行中序遍历的结果. 树旋转通常应用于需要调整树的局部平衡性的场合。', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1181', '树旋转包括两个不同的方式，分别是左旋转（以P为转轴）和右旋转（以Q为转轴）。两种旋转呈镜像，而且互为逆操作。', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '图示', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1182', '下图示意了两种树旋转过程中, 子树的初态和终态', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '图示', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1183', '+---+                          +---+\n        | Q |                          | P |\n        +---+                          +---+\n       /     \\     right rotation     /     \\\n    +---+   +---+  ------------->  +---+   +---+\n    | P |   | Z |                  | X |   | Q |\n    +---+   +---+  <-------------  +---+   +---+\n   /     \\          left rotation         /     \\\n+---+   +---+                          +---+   +---+\n| X |   | Y |                          | Y |   | Z |\n+---+   +---+                          +---+   +---+', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '图示', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1184', '其中, 右旋转详细步骤如下图 R0, R1, R2 三个步骤所示, 左旋转则如 L0, L1, L2 三个步骤所示.', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '图示', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1185', '__\n                                                                 /  \\\n                                     +---+                      /  +---+\n                                     | Q |                     /   | Q |\n                           +---+     +---+              +---+ /    +---+\n        +---+              | P |    /     \\      R1     | P |/    /     \\              +---+\n        | Q |     R0       +---+   /     +---+ ----->   +---+    /     +---+   R2      | P |\n        +---+   ----->    /     \\ /      | Z |         /        /      | Z | ----->    +---+\n       /     \\         +---+   +---+     +---+      +---+    +---+     +---+          /     \\\n    +---+   +---+      | X |   | Y |                | X |    | Y |                 +---+   +---+\n    | P |   | Z |      +---+   +---+                +---+    +---+                 | X |   | Q |\n    +---+   +---+              __                                                  +---+   +---+\n   /     \\                    /  \\                                                        /     \\\n+---+   +---+     L2       +---+  \\                       +---+                L0      +---+   +---+\n| X |   | Y |   <-----     | P |   \\                      | P |              <-----    | Y |   | Z |\n+---+   +---+              +---+    \\ +---+      L1       +---+     +---+              +---+   +---+\n                          /     \\    \\| Q |    <-----    /     \\    | Q |\n                       +---+     \\    +---+           +---+     \\   +---+\n                       | X |      \\        \\          | X |      \\ /     \\\n                       +---+     +---+    +---+       +---+     +---+   +---+\n                                 | Y |    | Z |                 | Y |   | Z |\n                                 +---+    +---+                 +---+   +---+', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '图示', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1186', '上面的图示仅描述了如何进行局部变换, 在实际应用中, 还需要将原有父节点的父节点纳入考虑范围. 以上述右旋转为例, 如果 Q 是其父节点 root 的左子节点, 则在旋转完后 root 的左子节点需要修改指向节点 P. 但这一点并没有体现在上面的图示中.', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '实现', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1187', '在接下来的实现中, 假设从树中任一节点 N 能够借由 N.left 访问其左子节点, N.right 访问其右子节点, N.parent 访问其父节点. 此外, 称旋转后变为父亲的节点为转轴 pivot, 称 pivot 在旋转前的父节点为 parent, 而 parent 在旋转前的父节点为 root. 则右旋转过程可用伪代码表示为', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '实现', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1188', 'func rotate_right(pivot):\n  let parent = pivot.parent\n  let root = parent.parent\n  // R0\n  parent.left = pivot.right\n  if pivot.right != nil: pivot.right.parent = parent\n  // R1\n  pivot.parent = root\n  if parent == root.left:\n    root.left = pivot\n  else:\n    root.right = pivot\n  pivot.right = parent\n  parent.parent = pivot', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '实现', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1189', 'func rotate_left(pivot):\n  let parent = pivot.parent\n  let root = parent.parent\n  // L0\n  parent.right = pivot.left\n  if pivot.left != nil: pivot.left.parent = parent\n  // L1\n  pivot.parent = root\n  if parent == root.left:\n    root.left = pivot\n  else:\n    root.right = pivot\n  pivot.left = parent\n  parent.parent = pivot', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '实现', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1190', '上述过程并不适用于当 parent 节点本身就是树的根节点的情况. 这种情况下, 需要以其它方式重设树的根节点为 pivot. 一种无需在根节点的某一子节点为转轴时进行特殊处理的替代方案是让树的实际的根节点是一个特殊入口节点, 而逻辑上的根节点作为该入口节点的某个子节点存在, 并避免任何以逻辑根节点为转轴的旋转.', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '实现', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1191', '如果从节点出发, 只能访问其两个子节点, 而无法访问其父节点, 那么上述方法也不适用. 这种情况下, root 节点亦是旋转的必要参数之一. 旋转过程的伪代码表示如下', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '实现', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1192', 'func rotate_right(root, parent):\n  assert root.left == parent || root.right == parent\n  let pivot = parent.left\n  // R0\n  parent.left = pivot.right\n  // R1\n  if parent == root.left:\n    root.left = pivot\n  else:\n    root.right = pivot\n  pivot.right = parent', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '实现', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1193', 'func rotate_left(root, parent):\n  assert root.left == parent || root.right == parent\n  let pivot = parent.right\n  // L0\n  parent.right = pivot.left\n  // L1\n  if parent == root.left:\n    root.left = pivot\n  else:\n    root.right = pivot\n  pivot.left = parent', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '实现', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1194', '两棵二叉树之间的旋转距离指的是, 其中一棵树通过尽可能少的树旋转变换到另一棵树, 此过程中所使用的旋转次数. 对于一个包含相同个数节点的二叉树集合, 它们两两之间的距离可以构成一个度量空间. 是否存在一个算法, 能在多项式时间内计算两个二叉树之间的旋转距离, 目前还是一个未决问题.', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '旋转距离', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1195', 'Cormen, Leiserson, Rivest, Stein. Introduction to Algorithms. Massachusetts: The MIT Press, 2002. pp273-77. ISBN 0-07-013151-1', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '旋转距离', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1196', '链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1197', '使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1198', '在计算机科学中，链表作为一种基础的数据结构可以用来生成其它类型的数据结构。链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（\"links\"）。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的访问往往要在不同的排列顺序中转换。而链表是一种自我指示数据类型，因为它包含指向另一个相同类型的数据的指针（链接）。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表，双向链表以及循环链表。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1199', '链表可以在多种编程语言中实现。像Lisp和Scheme这样的语言的内建数据类型中就包含了链表的访问和操作。程序语言或面向对象语言，如C/C++和Java依靠易变工具来生成链表。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1200', '链表开发于1955-56，由当时所属于兰德公司（英语：RAND Corporation）的艾伦纽维尔（Allen Newell），克里夫肖（Cliff Shaw）和赫伯特西蒙（Herbert Simon）在他们编写的信息处理语言（IPL）中做为原始数据类型所编写。IPL被作者们用来开发几种早期的人工智能程序，包括逻辑推理机，通用问题解算器和一个计算机象棋程序。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '历史', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1201', '链表用来构建许多其它数据结构，如堆栈，队列和他们的派生。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '链表的应用', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1202', '节点的数据域也可以成为另一个链表。通过这种手段，我们可以用列表来构建许多链性数据结构；这个实例产生于Lisp编程语言，在Lisp中链表是初级数据结构，并且现在成为了常见的基础编程模式。 有时候，链表用来生成联合数组，在这种情况下我们称之为联合数列。这种情况下用链表会优于其它数据结构，如自平对分查找树（self-balancing binary search trees）甚至是一些小的数据集合。不管怎样，一些时候一个链表在这样一个树中创建一个节点子集，并且以此来更有效率地转换这个集合。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '链表的应用', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1203', '以下代码摘自Linux内核2.6.21.5源码(部分)，展示了链表的另一种实现思路，未采用ANSI C标准，采用GNU C标准，遵从GPL版权许可。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', 'C宏实例', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1204', 'struct list_head {\n        struct list_head *next, *prev;\n};\n\n#define LIST_HEAD_INIT(name) { &(name), &(name) }\n\n#define LIST_HEAD(name) \\\n        struct list_head name = LIST_HEAD_INIT(name)\n\nstatic inline void INIT_LIST_HEAD(struct list_head *list)\n{\n        list->next = list;\n        list->prev = list;\n}\n\nstatic inline void __list_add(struct list_head *new,\n                              struct list_head *prev,\n                              struct list_head *next)\n{\n        next->prev = new;\n        new->next = next;\n        new->prev = prev;\n        prev->next = new;\n}\n\nstatic inline void list_add(struct list_head *new, struct list_head *head)\n{\n        __list_add(new, head, head->next);\n}\n\nstatic inline void __list_del(struct list_head * prev, struct list_head * next)\n{\n        next->prev = prev;\n        prev->next = next;\n}\n\n\nstatic inline void list_del(struct list_head *entry)\n{\n        __list_del(entry->prev, entry->next);\n        entry->next = NULL;\n        entry->prev = NULL;\n}\n\n#define __list_for_each(pos, head) \\\n        for (pos = (head)->next; pos != (head); pos = pos->next)\n\n#define list_for_each_entry(pos, head, member)                          \\\n        for (pos = list_entry((head)->next, typeof(*pos), member);      \\\n             prefetch(pos->member.next), &pos->member != (head);        \\\n             pos = list_entry(pos->member.next, typeof(*pos), member))', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', 'C宏实例', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1205', '常用于组织删除、检索较少，而添加、遍历较多的数据。 如果与上述情形相反，应采用其他数据结构或者与其他数据结构组合使用。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '常见用途', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1206', '线性表 顺序表 基本数据结构 树 (数据结构)', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '常见用途', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1208', '链表中最简单的一种是单向链表，它包含两个域，一个信息域和一个指针域。这个链接指向列表中的下一个节点，而最后一个节点则指向一个空值。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '单向链表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1209', '一个单向链表包含两个值: 当前节点的值和一个指向下一个节点的链接', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '单向链表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1210', '一个单向链表的节点被分成两个部分。第一个部分保存或者显示关于节点的信息，第二个部分存储下一个节点的地址。单向链表只可向一个方向遍历。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '单向链表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1211', '链表最基本的结构是在每个节点保存数据和到下一个节点的地址，在最后一个节点保存一个特殊的结束标记，另外在一个固定的位置保存指向第一个节点的指针，有的时候也会同时储存指向最后一个节点的指针。一般查找一个节点的时候需要从第一个节点开始每次访问下一个节点，一直访问到需要的位置。但是也可以提前把一个节点的位置另外保存起来，然后直接访问。当然如果只是访问数据就没必要了，不如在链表上储存指向实际数据的指针。这样一般是为了访问链表中的下一个或者前一个（需要储存反向的指针，见下面的双向链表）节点。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '单向链表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1212', '相对于下面的双向链表，这种普通的，每个节点只有一个指针的链表也叫单向链表，或者单链表，通常用在每次都只会按顺序遍历这个链表的时候（例如图的邻接表，通常都是按固定顺序访问的）。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '单向链表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1213', '一种更复杂的链表是“双向链表”或“双面链表”。每个节点有两个连接：一个指向前一个节点，（当此“连接”为第一个“连接”时，指向空值或者空列表）；而另一个指向下一个节点，（当此“连接”为最后一个“连接”时，指向空值或者空列表）', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '双向链表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1214', '一个双向链表有三个整数值: 数值, 向后的节点链接, 向前的节点链接', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '双向链表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1215', '在一些低级语言中, XOR-linking 提供一种在双向链表中通过用一个词来表示两个链接（前后），我们通常不提倡这种做法。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '双向链表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1216', '双向链表也叫双链表。双向链表中不仅有指向后一个节点的指针，还有指向前一个节点的指针。这样可以从任何一个节点访问前一个节点，当然也可以访问后一个节点，以至整个链表。一般是在需要大批量的另外储存数据在链表中的位置的时候用。双向链表也可以配合下面的其他链表的扩展使用。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '双向链表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1217', '由于另外储存了指向链表内容的指针，并且可能会修改相邻的节点，有的时候第一个节点可能会被删除或者在之前添加一个新的节点。这时候就要修改指向首个节点的指针。有一种方便的可以消除这种特殊情况的方法是在最后一个节点之后、第一个节点之前储存一个永远不会被删除或者移动的虚拟节点，形成一个下面说的循环链表。这个虚拟节点之后的节点就是真正的第一个节点。这种情况通常可以用这个虚拟节点直接表示这个链表，对于把链表单独的存在数组里的情况，也可以直接用这个数组表示链表并用第0个或者第-1个（如果编译器支持）节点固定的表示这个虚拟节点。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '双向链表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1218', '在一个 循环链表中, 首节点和末节点被连接在一起。这种方式在单向和双向链表中皆可实现。要转换一个循环链表，你开始于任意一个节点然后沿着列表的任一方向直到返回开始的节点。再来看另一种方法，循环链表可以被视为“无头无尾”。这种列表很利于节约数据存储缓存， 假定你在一个列表中有一个对象并且希望所有其他对象迭代在一个非特殊的排列下。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '循环链表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1219', '指向整个列表的指针可以被称作访问指针。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '循环链表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1220', '循环链表中第一个节点之前就是最后一个节点，反之亦然。循环链表的无边界使得在这样的链表上设计算法会比普通链表更加容易。对于新加入的节点应该是在第一个节点之前还是最后一个节点之后可以根据实际要求灵活处理，区别不大(详见下面实例代码)。当然，如果只会在最后插入数据（或者只会在之前），处理也是很容易的。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '循环链表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1221', '另外有一种模拟的循环链表，就是在访问到最后一个节点之后的时候，手工的跳转到第一个节点。访问到第一个节点之前的时候也一样。这样也可以实现循环链表的功能，在直接用循环链表比较麻烦或者可能会出现问题的时候可以用。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '循环链表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1222', '块状链表本身是一个链表，但是链表储存的并不是一般的数据，而是由这些数据组成的顺序表。每一个块状链表的节点，也就是顺序表，可以被叫做一个块。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '块状链表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1223', '块状链表通过使用可变的顺序表的长度和特殊的插入、删除方式，可以在达到 O ( n ) {\\displaystyle O({\\sqrt {n}})} 的复杂度。块状链表另一个特点是相对于普通链表来说节省内存，因为不用保存指向每一个数据节点的指针。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '块状链表', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1224', '根据情况，也可以自己设计链表的其它扩展。但是一般不会在边上附加数据，因为链表的点和边基本上是一一对应的（除了第一个或者最后一个节点，但是也不会产生特殊情况）。不过有一个特例是如果链表支持在链表的一段中把前和后指针反向，反向标记加在边上可能会更方便。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '其它扩展', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1225', '对于非线性的链表，可以参见相关的其他数据结构，例如树、图。另外有一种基于多个线性链表的数据结构：跳表，插入、删除和查找等基本操作的速度可以达到O(nlogn)，和平衡树一样。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '其它扩展', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1226', '链表中的节点不需要以特定的方式存储，但是集中存储也是可以的，主要分下面这几种具体的存储方法：', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '存储结构', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1227', '共用存储空间 链表的节点和其它的数据共用存储空间，优点是可以存储无限多的内容（不过要处理器支持这个大小，并且存储空间足够的情况下），不需要提前分配内存；缺点是由于内容分散，有时候可能不方便调试。 独立存储空间 一个链表或者多个链表使用独立的存储空间，一般用数组或者类似结构实现，优点是可以自动获得一个附加数据：唯一的编号，并且方便调试；缺点是不能动态的分配内存。当然，另外的在上面加一层块状链表用来分配内存也是可以的，这样就解决了这个问题。这种方法有时候被叫做数组模拟链表，但是事实上只是用表示在数组中的位置的下标索引代替了指向内存地址的指针，这种下标索引其实也是逻辑上的指针，整个结构还是链表，并不算是被模拟的（但是可以说成是用数组实现的链表）。', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '存储结构', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1228', '#ifndef LLIST_H\n#define LLIST_H\n\ntypedef void node_proc_fun_t(void*);\ntypedef int node_comp_fun_t(const void*, const void*);\n\ntypedef void LLIST_T;\n\nLLIST_T *llist_new(int elmsize);\nint llist_delete(LLIST_T *ptr);\n \nint llist_node_append(LLIST_T *ptr, const void *datap);\nint llist_node_prepend(LLIST_T *ptr, const void *datap);\n\nint llist_travel(LLIST_T *ptr, node_proc_fun_t *proc);\n \nvoid llist_node_delete(LLIST_T *ptr, node_comp_fun_t *comp, const void *key); \nvoid *llist_node_find(LLIST_T *ptr, node_comp_fun_t *comp, const void *key);\n\n#endif', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '接口声明', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1229', '线性表 顺序表 基本数据结构 树 (数据结构)', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '其他数据结构', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1231', 'struct node_st {\n        void *datap;\n        struct node_st *next, *prev;\n};\n\nstruct llist_st {\n        struct node_st head;\n        int elmsize;\n        int elmnr;\n};', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '类型确定', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('1232', 'LLIST_T*\nllist_new(int elmsize)\n{\n        struct llist_st *newlist;\n        newlist = malloc(sizeof(struct llist_st));\n        if (newlist == NULL) {\n                return NULL;\n        }\n\n        newlist->head.datap = NULL;\n        newlist->head.next = &newlist->head;\n        newlist->head.prev = &newlist->head;\n\n        newlist->elmsize = elmsize;\n\n        return (void*)newlist;\n}\n\nint\nllist_delete(LLIST_T *ptr)\n{\n        struct llist_st *me=ptr;\n        struct node_st *curr, *save;\n\n        for (curr=me->head.next ; curr!=&me->head ; curr=save) {\n                save=curr->next;\n                free(curr->datap);\n                free(curr);\n        }\n\n        free(me);\n\n        return 0;\n}', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '初始化和销毁', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('1233', 'int\nllist_node_append(LLIST_T *ptr, const void *datap)\n{\n        struct llist_st *me=ptr;\n        struct node_st *newnodep;\n\n        newnodep = malloc(sizeof(struct node_st));\n        if (newnodep == NULL) {\n                return -1;\n        }\n        newnodep->datap = malloc(me->elmsize);\n        if (newnodep->datap == NULL) {\n                free(newnodep);\n                return -1;\n        }\n\n        memcpy(newnodep->datap, datap, me->elmsize);\n\n        me->head.prev->next = newnodep;\n        newnodep->prev = me->head.prev;\n        me->head.prev = newnodep;\n        newnodep->next = &me->head;\n\n        return 0;\n}\n\nint \nllist_node_prepend(LLIST_T *ptr, const void *datap){\n    struct llist_st *me=ptr;\n    struct node_st *newnodep;\n \n    newnodep = malloc(sizeof(struct node_st));\n    if (newnodep == NULL) {\n        return -1;\n    }\n    newnodep->datap = malloc(me->elmsize);\n    if (newnodep->datap == NULL) {\n        free(newnodep);\n        return -1;\n    }\n \n    memcpy(newnodep->datap, datap, me->elmsize);\n \n    me->head.next->prev = newnodep;\n    newnodep->next = me->head.next;\n    me->head.next = newnodep;\n    newnodep->prev = &me->head;\n\n    return 0;\n}', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '节点插入', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('1234', 'int \nllist_travel(LLIST_T *ptr, node_proc_fun_t *proc){\n    struct llist_st *me=ptr;\n    struct node_st *curr;\n \n    for (curr=me->head.next ; curr!=&me->head ; curr=curr->next)\n        proc(curr->datap);/* proc(something you like)*/\n\n    return 0;\n}', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '遍历', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('1235', 'void\nllist_node_delete(LLIST_T *ptr, node_comp_fun_t *comp, const void *key){\n    struct llist_st *me=ptr;\n    struct node_st *curr;\n \n    for (curr=me->head.next;curr!=&me->head;curr=curr->next) {\n        if ( (*comp)(curr->datap, key) == 0 ) {\n            struct node_st *_next,*_prev;\n            _prev = curr->prev,_next = curr->next;\n            _prev->next = _next,_next->prev = _prev;\n\n            free(curr->datap);\n            free(curr);\n            break;\n        }\n    }\n    return; \n}\n\nvoid*\nllist_node_find(LLIST_T *ptr, node_comp_fun_t *comp, const void *key)\n{\n        struct llist_st *me=ptr;\n        struct node_st *curr;\n\n        for (curr=me->head.next;curr!=&me->head;curr=curr->next) {\n                if ( (*comp)(curr->datap, key) == 0 ) {\n                        return curr->datap;\n                }\n        }\n        return NULL;\n}', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:08', '70', '链表', '删除和查找', '3', '数据结构');
INSERT INTO `assemble_text` VALUES ('1236', '二叉查找树（英语：Binary Search Tree），也称二叉搜索树、有序二叉树（英语：ordered binary tree），排序二叉树（英语：sorted binary tree），是指一棵空树或者具有下列性质的二叉树：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:18', '71', '二元搜寻树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1237', '任意节点的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 任意节点的左、右子树也分别为二叉查找树； 没有键值相等的节点。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:18', '71', '二元搜寻树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1238', '二叉查找树相比于其他数据结构的优势在于查找、插入的时间复杂度较低。为O(log n)。二叉查找树是基础性数据结构，用于构建更为抽象的数据结构，如集合、multiset、关联数组等。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:19', '71', '二元搜寻树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1239', '二叉查找树的查找过程和次优二叉树类似，通常采取二叉链表作为二叉查找树的存储结构。中序遍历二叉查找树可得到一个关键字的有序序列，一个无序序列可以通过构造一棵二叉查找树变成一个有序序列，构造树的过程即为对无序序列进行查找的过程。每次插入的新的结点都是二叉查找树上新的叶子结点，在进行插入操作时，不必移动其它结点，只需改动某个结点的指针，由空变为非空即可。搜索、插入、删除的复杂度等于树高，期望 O ( log ⁡ n ) {\\displaystyle O(\\log n)} ，最坏 O ( n ) {\\displaystyle O(n)} （数列有序，树退化成线性表）。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:19', '71', '二元搜寻树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1240', '虽然二叉查找树的最坏效率是O(n),但它支持动态查询，且有很多改进版的二叉查找树可以使树高为 O ( log ⁡ n ) {\\displaystyle O(\\log n)} ,如SBT,AVL树，红黑树等。故不失为一种好的动态查找方法。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:19', '71', '二元搜寻树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1241', '若b是空树，则搜索失败，否则： 若x等于b的根节点的数据域之值，则查找成功；否则： 若x小于b的根节点的数据域之值，则搜索左子树；否则： 查找右子树。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:19', '71', '二元搜寻树', '二叉搜索树的查找算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1242', '/* 以下代码为C++写成，下同*/\nStatus SearchBST(BiTree T, KeyType key, BiTree f, BiTree &p){\n  //在根指针T所指二元查找树中递归地查找其关键字等于key的数据元素，若查找成功，\n  //则指针p指向该数据元素节点，并返回TRUE，否则指针指向查找路径上访问的最后\n  //一个节点并返回FALSE，指针f指向T的双亲，其初始调用值为NULL\n  if(!T) { //查找不成功\n    p=f;\n    return false;\n  }\n  else if (key == T->data.key) { //查找成功\n    p=T;\n    return true;\n  }\n  else if (key < T->data.key) //在左子树中继续查找\n    return SearchBST(T->lchild, key, T, p);\n  else //在右子树中继续查找\n    return SearchBST(T->rchild, key, T, p);\n}', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:19', '71', '二元搜寻树', '二叉搜索树的查找算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1243', '向一个二叉搜索树b中插入一个节点s的算法，过程为：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:19', '71', '二元搜寻树', '在二叉搜索树插入节点的算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1244', '若b是空树，则将s所指结点作为根节点插入，否则： 若s->data等于b的根节点的数据域之值，则返回，否则： 若s->data小于b的根节点的数据域之值，则把s所指节点插入到左子树中，否则： 把s所指节点插入到右子树中。（新插入节点总是叶子节点）', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:19', '71', '二元搜寻树', '在二叉搜索树插入节点的算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1245', '/*当二元搜寻树T中不存在关键字等于e.key的数据元素时，插入e并返回TRUE，否则返回FALSE*/\nStatus InsertBST(BiTree *T, ElemType e){  \n      if(!T)  \n        {	    \n            s = new BiTNode;\n            s->data = e; s->lchild = s->rchild = NULL;\n            T=s;	//被插节点*s为新的根结点\n        }\n      else if(e.key == T->data.key)\n        return false;//关键字等于e.key的数据元素，返回错误\n      if (e.key < T->data.key)\n	InsertBST(T->lchild, e);	//将e插入左子树\n      else \n	InsertBST(T->rchild, e);	//将e插入右子树\n      return true;\n }', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:19', '71', '二元搜寻树', '在二叉搜索树插入节点的算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1246', '在二叉查找树删去一个结点，分三种情况讨论：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:19', '71', '二元搜寻树', '在二叉查找树删除结点的算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1247', '若*p结点为叶子结点，即PL（左子树）和PR（右子树）均为空树。由于删去叶子结点不破坏整棵树的结构，则只需修改其双亲结点的指针即可。 若*p结点只有左子树PL或右子树PR，此时只要令PL或PR直接成为其双亲结点*f的左子树（当*p是左子树）或右子树（当*p是右子树）即可，作此修改也不破坏二叉查找树的特性。 若*p结点的左子树和右子树均不空。在删去*p之后，为保持其它元素之间的相对位置不变，可按中序遍历保持有序进行调整，可以有两种做法：其一是令*p的左子树为*f的左/右（依*p是*f的左子树还是右子树而定）子树，*s为*p左子树的最右下的结点，而*p的右子树为*s的右子树；其二是令*p的直接前驱（in-order predecessor）或直接后继（in-order successor）替代*p，然后再从二叉查找树中删去它的直接前驱（或直接后继）。', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:19', '71', '二元搜寻树', '在二叉查找树删除结点的算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1248', '在二叉查找树上删除一个结点的算法如下：', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:19', '71', '二元搜寻树', '在二叉查找树删除结点的算法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1346', '因为AA树有严格的条件(红节点只能为右节点)，故只需考虑2种情形:', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1347', '平衡一颗红黑树需要记录其颜色，而AA树是在每个节点记录其\"level\"这相当于红黑树节点的黑高度', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '旋转平衡', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1348', '所有叶节点的level都是1 每个左孩子的level恰好为其父亲的level减一 每个右孩子的level等于其父亲的level或为其父亲的level减一 每个右孙子的level严格小于其祖父节点的level 每一个level大于1的节点有两个子节点', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '旋转平衡', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1349', '两个level相同的点之间的边水平边，也就是红黑树上的红边。往右的水平边是允许的，但不可连续(红黑树性质)；不能有向左的水平边(AA树性质)。因为AA树的条件比红黑树严格，所以重新平衡一颗AA树会比重新平衡一颗红黑树容易。', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '旋转平衡', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1350', '插入和删除会让AA树变的不平衡(即违反它的性质)。恢复平衡只需两种操作:\"skew\"和\"split\". Skew是一个右旋转使得子树中向左的水平边变成向右的水平边；Split是一个左旋并增加子树根节点的level(请看范例)使得连续向右的水平边消失。平衡插入和删除操作的实现是由skew及split决定是否旋转，而不是在主程式中判断。', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '旋转平衡', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1351', 'function skew is\n    input: T, a node representing an AA tree that needs to be rebalanced.\n    output: Another node representing the rebalanced AA tree.\n\n    if nil(T) then\n        return Nil\n    else if nil(left(T)) then\n        return T\n    else if level(left(T)) == level(T) then\n        Swap the pointers of horizontal left links.\n        L = left(T)\n        left(T) := right(L)\n        right(L) := T\n        return L\n    else\n        return T\n    end if\nend function', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '旋转平衡', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1352', 'function split is\n    input: T, a node representing an AA tree that needs to be rebalanced.\n    output: Another node representing the rebalanced AA tree.\n\n    if nil(T) then\n        return Nil\n    else if nil(right(T)) or  nil(right(right(T))) then\n        return T\n    else if level(T) == level(right(right(T))) then\n        We have two horizontal right links.  Take the middle node, elevate it, and return it.\n        R = right(T)\n        right(T) := left(R)\n        left(R) := T\n        level(R) := level(R) + 1\n        return R\n    else\n        return T\n    end if\nend function', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '旋转平衡', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1353', '在递回的实做中，除了叶节点之外，在每次的递回结束后呼叫skew和split及可', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '插入', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1354', 'function insert is\n    input: X, the value to be inserted, and T, the root of the tree to insert it into.\n    output: A balanced version T including X.\n\n    Do the normal binary tree insertion procedure. Set the result of the\n    recursive call to the correct child in case a new node was created or the\n    root of the subtree changes.\n    if nil(T) then\n        Create a new leaf node with X.\n        return node(X, 1, Nil, Nil)\n    else if X < value(T) then\n        left(T) := insert(X, left(T))\n    else if X > value(T) then\n        right(T) := insert(X, right(T))\n    end if\n    Note that the case of X == value(T) is unspecified. As given, an insert\n    will have no effect. The implementor may desire different behavior.\n\n    Perform skew and then split. The conditionals that determine whether or\n    not a rotation will occur or not are inside of the procedures, as given\n    above.\n    T := skew(T)\n    T := split(T)\n\n    return T\nend function', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '插入', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1355', '在大部分的二叉查找树，删除一个内部节点可以转换成交换内部节点及其最接近的前驱或后继节点，这取决于使用者。 为了平衡这颗树，有几中方法，Andersson教授描述的original paper是最基本的，尽管它还能再被优化。删除后第一件事是降低其level(如果可以)，于是，整个level必须skew和split，这个方法最受到欢迎的，因为它的概念易懂，可以列举成下列三个简单步骤:', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '删除', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1356', '如果可以的话，减少其level Skew其level. Split其level.', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '删除', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1357', 'function delete is\n    input: X, the value to delete, and T, the root of the tree from which it should be deleted.\n    output: T, balanced, without the value X.\n   \n    if nil(T) then\n        return T\n    else if X > value(T) then\n        right(T) := delete(X, right(T))\n    else if X < value(T) then\n        left(T) := delete(X, left(T))\n    else\n        If we\'re a leaf, easy, otherwise reduce to leaf case. \n        if leaf(T) then\n            return Nil\n        else if nil(left(T)) then\n            L := successor(T)\n            right(T) := delete(value(L), right(T))\n            value(T) := value(L)\n        else\n            L := predecessor(T)\n            left(T) := delete(value(L), left(T))\n            value(T) := value(L)\n        end if\n    end if\n\n    Rebalance the tree. Decrease the level of all nodes in this level if\n    necessary, and then skew and split all nodes in the new level.\n    T := decrease_level(T)\n    T := skew(T)\n    right(T) := skew(right(T))\n    if not nil(right(T))\n        right(right(T)) := skew(right(right(T)))\n    end if\n    T := split(T)\n    right(T) := split(right(T))\n    return T\nend function', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '删除', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1358', 'function decrease_level is\n    input: T, a tree for which we want to remove links that skip levels.\n    output: T with its level decreased.\n\n    should_be = min(level(left(T)), level(right(T))) + 1\n    if should_be < level(T) then\n        level(T) := should_be\n        if should_be < level(right(T)) then\n            level(right(T)) := should_be\n        end if\n    end if\n    return T\nend function', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '删除', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1359', '这个网站展示了良好的删除示范Andersson paper.', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '删除', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1360', 'AA树的性能和红黑树是很类似的(其实很慢)。因为AA树比红黑树做较多次旋转，所以较容易实做。虽然红黑树效能较为平均，但是AA树高度较浅故查找时间较快[1]', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '效能', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1361', '^ A Disquisition on The Performance Behavior of Binary Search Tree Data Structures (pages 67-75) (PDF). ', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '引用', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1362', '日月卦长的模板库 AA树模板 A. Andersson. Balanced search trees made simple A. Andersson. A note on searching in a binary search tree AA-Tree Applet by Kubo Kovac BSTlib - Open source AA tree library for C by trijezdci AA Visual 2007 1.5 - OpenSource Delphi program for educating AA tree structures Thorough tutorial Julienne Walker with lots of code, including a practical implementation Object Oriented implementation with tests A Disquisition on The Performance Behavior of Binary Search Tree Data Structures (pages 67-75) - Comparison of AA trees, red-black trees, treaps, skip lists, and radix trees An example C implementation An Objective-C implementation', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '引用', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1363', '[显示] 查 论 编 数据结构 类型 集合 容器 抽象类型 关联数组 多重关连数组 列表 堆栈 队列 双端队列 优先队列 双端优先队列 集合 多重集 并查集 数组 字串 位数组 环形缓冲器 动态数组 哈希表 哈希数组树 稀疏数组 列表 双端队列 队列 堆栈 循环队列 关联表 链表 跳跃列表 松散链表 异或链表 树 线段树 自平衡二叉查找树 B树 二叉树 AA树 AVL树 红黑树 平衡树 伸展树 二叉查找树 堆 二叉堆 二项堆 斐波那契堆 R树 R*树 R+树 Hilbert R树 前缀树 哈希树 图 有向图 有向无环图 二元决策图 无向图 确定性非循环有限自动机 数据结构列表', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '引用', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1364', '[显示] 查 论 编 计算机科学中的树 二叉树 二叉查找树（BST） 笛卡尔树 MVP树 Top tree T树 自平衡二叉查找树 AA树 AVL树 左倾红黑树 红黑树 替罪羊树 伸展树 树堆 加权平衡树 B树 B+树 B*树 Bx树 UB树 2-3树 2-3-4树 (a,b)-树 Dancing tree H树 堆 二叉堆 二项堆 斐波那契堆 左偏树 Pairing heap 斜堆 Van Emde Boas tree Trie 后缀树 基数树 三叉查找树 X-快速前缀树 Y-快速前缀树 二叉空间分割（BSP）树 四叉树 八叉树 k-d树 隐式k-d树 VP树 非二叉树 指数树 融合树 区间树 PQ树 Range tree SPQR树 空间数据分割树 R树 R*树 R+树 X树 M树 线段树 希尔伯特R树 优先R树 其他树 散列日历 散列树 Finger tree Order statistic tree Metric tree Cover tree BK树 Doubly chained tree iDistance Link-cut tree Fenwick tree Log-structured merge-tree 树状数组', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '引用', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1365', '在图论里面，一个图G的补图（complement）或者反面（inverse）是一个图有着跟G相同的点，而且这些点之间有边相连当且仅当在G里面他们没有边相连。在制作图的时候，你可以先建立一个有G所有点的完全图，然后清除G里面已经有的边来得到补图。这里的补图并不是图本身的补集；因为只有边的部分合乎补集的概念。', 'https://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', '2016-01-12 18:44:00', '2016-12-20 09:50:54', '80', '补图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1366', '令G = (V, E)是一个图，K包含所有V的二元子集（2-element subset）。则图H = (V, K \\ E) 是G的补图。', 'https://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', '2016-01-12 18:44:00', '2016-12-20 09:50:54', '80', '补图', '正式建立法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1367', '许多图论的概念都互相以补图的关系连接：', 'https://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', '2016-01-12 18:44:00', '2016-12-20 09:50:54', '80', '补图', '应用与范例', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1368', '无边图的补图是完全图，反之亦然。 独立集的补图是套团，反之亦然。 triangle-free graph的补图是claw-free graph。 self-complementary graph是一个与自己的补图同构的图。 Cograph是由不交并（可参考集合论的的不交并）以及补集建立起来图的集合。而且，这个集合是self-complementary；也就是说，任何cograph的补图也必然是cograph（虽然可能不是同构的图）。', 'https://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', '2016-01-12 18:44:00', '2016-12-20 09:50:54', '80', '补图', '应用与范例', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1369', 'Bondy, John Adrian; Murty, U. S. R., Graph Theory with Applications, North-Holland, 1976, ISBN 0-444-19451-7 , pages 6 and 29.', 'https://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', '2016-01-12 18:44:00', '2016-12-20 09:50:54', '80', '补图', '应用与范例', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1370', 'Diestel, Reinhard, Graph Theory 3rd, Springer, 2005, ISBN 3-540-26182-6 . Electronic edition, page 4.', 'https://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', '2016-01-12 18:44:00', '2016-12-20 09:50:54', '80', '补图', '应用与范例', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1371', '这是一篇小作品。你可以通过编辑或修订扩充其内容。', 'https://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', '2016-01-12 18:44:00', '2016-12-20 09:50:55', '80', '补图', '应用与范例', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1373', '在两个生成元a和b上的自由群的凯莱图', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1374', '在数学中，凯莱图也叫做凯莱着色图是编码离散群的图。它的定义是凯莱定理（以阿瑟·凯莱命名）所暗含的，并使用这个群的特定的通常有限的生成元集合。它是组合群论与几何群论的中心工具。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1375', '假设 G {\\displaystyle G} ，是群而 S {\\displaystyle S} ，是生成集。凯莱图 Γ = Γ ( G , S ) {\\displaystyle \\Gamma =\\Gamma (G,S)} ，是如下构造的着色的有向图。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1376', 'G {\\displaystyle G} ，每个元素 g {\\displaystyle g} ，指派一个顶点： Γ {\\displaystyle \\Gamma } ，的顶点集合 V ( Γ ) {\\displaystyle V(\\Gamma )} ，同一于 G {\\displaystyle G} ，。 S {\\displaystyle S} ，的每个生成元 s {\\displaystyle s} ，指派一种颜色 c s {\\displaystyle c_{s}} ，。 对于任何 g ∈ G , s ∈ S {\\displaystyle g\\in G,s\\in S} ，对应于元素 g {\\displaystyle g} ，和 g s {\\displaystyle gs} ，的顶点用颜色 c s {\\displaystyle c_{s}} ，的有向边连接。因此边集合 E ( Γ ) {\\displaystyle E(\\Gamma )} ，由形如 ( g , g s ) {\\displaystyle (g,gs)} ，的有序对构成，带着 s ∈ S {\\displaystyle s\\in S} 提供的颜色。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1377', '在几何群论中，集合 S {\\displaystyle S} ，通常被假定为有限的、“对称的”也就是 S = S − 1 {\\displaystyle S=S^{-1}} ，并且不包含这个群的单位元。在这种情况下，凯莱图是正常的图：它的边没有方向并且不包含环路。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1378', '假设G = Z是无限循环群而集合S有标准生成元1和它的逆元（用加法符号为−1）构成，则它的凯莱图是无穷链。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '例子', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1379', '类似的，如果G = Zn是n阶循环群而S由两个元素构成，G的标准生成元和它的逆元，则凯莱图是环图Cn。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '例子', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1380', '群的直积的凯莱图是对应的凯莱图的笛卡尔积。因此带有四个元素（±1, ±1）组成的生成集的阿贝尔群Z2的凯莱图是在平面R2上无穷网格，而带有类似的生成集的直积Zn×Zm的凯莱图是在环面上n乘m有限网格。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '例子', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1381', '二面体群D4在两个生成元a和b上的凯莱图。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '例子', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1382', '二面体群D4在两个生成元a和b上的凯莱图列于右侧。红色箭头表示左乘元素a。因此元素b是自我逆转的，表示左乘元素b蓝色线是无方向的。因此这个图是混合的：它有8个顶点，8个有向边，4个边。群D4的凯莱表可以从群展示得出：', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '例子', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1383', '⟨ a , b | a 4 = b 2 = e , a b = b a 3 ⟩ {\\displaystyle \\langle a,b|a^{4}=b^{2}=e,ab=ba^{3}\\rangle } 。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '例子', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1384', '在对应于集合S = {a, b, a−1, b−1}的两个生成元a, b上的自由群的凯莱图列出在文章开头，这里的e表示单位元。沿着边向右走表示右乘a，而沿着变向上走表示乘以b。因为自由群没有关系，它的凯莱图中没有环。这个凯莱图是证明巴拿赫-塔斯基悖论的关键因素。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '例子', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1385', '群 G {\\displaystyle G} 通过左乘作用在自身上（参见凯莱定理）。这个作用可以看作 G {\\displaystyle G} 作用在它的凯莱图上。明显的，一个元素 h ∈ G {\\displaystyle h\\in G} 映射一个顶点 g ∈ V ( Γ ) {\\displaystyle g\\in V(\\Gamma )} 到顶点 h g ∈ V ( Γ ) {\\displaystyle hg\\in V(\\Gamma )} 。凯莱图的边集合被这个作用所保存：边 ( g , g s ) {\\displaystyle (g,gs)} 变换成边 ( h g , h g s ) {\\displaystyle (hg,hgs)} 。任何群在自身上的左乘作用是简单传递的，特别是凯莱图是顶点传递的。这导致了凯莱图的下列特征：', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '特征', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1386', '图 Γ {\\displaystyle \\Gamma } 是群 G {\\displaystyle G} 的凯莱图，当且仅当它通过图自同构许可 G {\\displaystyle G} 的简单传递作用（就是保存边的集合）。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '特征', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1387', '要从一个凯莱图 Γ = Γ ( G , S ) {\\displaystyle \\Gamma =\\Gamma (G,S)} 恢复群 G {\\displaystyle G} 和生成集 S {\\displaystyle S} ，选择一个顶点 v 1 ∈ V ( Γ ) {\\displaystyle v_{1}\\in V(\\Gamma )} 并标记上这个群的单位元。接着对每个 Γ {\\displaystyle \\Gamma } 的顶点 v {\\displaystyle v} 标记上变换 v 1 {\\displaystyle v_{1}} 到 v {\\displaystyle v} 的 G {\\displaystyle G} 的唯一元素。产生 Γ {\\displaystyle \\Gamma } 为凯莱图的 G {\\displaystyle G} 的生成元的集合 S {\\displaystyle S} 是毗连到选择的顶点的顶点的标记的集合。生成集合是有限（这是凯莱图的共同假定）当且仅当这个图是局部有限的（就是说每个顶点毗连与有限多个边）。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '特征', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1388', '如果生成集合的成员 s {\\displaystyle s} 是自身的逆元，即 s = s − 1 {\\displaystyle s=s^{-1}} ，则它一般被表示为无向边。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '基本性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1389', '凯莱图 Γ ( G , S ) {\\displaystyle \\Gamma (G,S)} 本质上依赖于生成元的集合 S {\\displaystyle S} 的选择方式。例如，如果生成集合 S {\\displaystyle S} 有 k {\\displaystyle k} 个元素，则凯莱图的每个顶点都有 k {\\displaystyle k} 个进入和 k {\\displaystyle k} 个外出的有向边。在有 r {\\displaystyle r} 个元素的对称生成集合 S {\\displaystyle S} 的情况下，凯莱图是 r {\\displaystyle r} 度的正则图。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '基本性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1390', '在凯莱图中的环（“闭合路径”）指示在 S {\\displaystyle S} 的两个元素之间的关系。在群的凯莱复形的更精细构造中，对应于关系的闭合路径被用多边形“填充”。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '基本性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1391', '如果 f : G ′ → G {\\displaystyle f:G\'\\to G} 是满射群同态并且 G ′ {\\displaystyle G\'} 的生成集合 S ′ {\\displaystyle S\'} 的元素的像是不同的，则它引发一个图的覆盖', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '基本性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1392', 'f ¯ : Γ ( G ′ , S ′ ) → Γ ( G , S ) , {\\displaystyle {\\bar {f}}:\\Gamma (G\',S\')\\to \\Gamma (G,S),\\quad } 这里的 S = f ( S ′ ) {\\displaystyle S=f(S\')} ，。 特别是，如果群 G {\\displaystyle G} 有 k {\\displaystyle k} 个生成元，都有不是2的阶，并且这些生成元和它们的逆元构成集合 S {\\displaystyle S} ，则凯莱图 Γ ( G , S ) {\\displaystyle \\Gamma (G,S)} 由对应于在相同生成集合的自由群的 2 k {\\displaystyle 2k} 度无限正则树所覆盖。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '基本性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1393', '图 Γ ( G , S ) {\\displaystyle \\Gamma (G,S)} 可以被构造即使集合 S {\\displaystyle S} 不生成群 G {\\displaystyle G} 。但是，它是连通的并不被认为是凯莱图。在这种情况下，这个图的每个连通部件表示一个 S {\\displaystyle S} 生成子群的陪集。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '基本性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1394', '对于被认为是无向的凯莱图，顶点连通性等于这个图的度。[1]', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '基本性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1395', '如果转而把顶点作为固定子群 H {\\displaystyle H} 的右陪集，就得到了一个有关的构造Schreier陪集图，它是陪集枚举或Todd-Coxeter算法的基础。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', 'Schreier陪集图', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1396', '研究图的邻接矩阵特别是应用谱图理论的定理能洞察群的结构。', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '与群论的关系', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1397', '^ Babai, L. Technical Report TR-94-10. University of Chicago. 1996. [1]', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '与群论的关系', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1398', '在计算机科学中，复合类型是一种数据类型，它可以原始类型和其它的复合类型所构成。构成一个复合类型的动作，又称作组合。', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1399', 'struct是 C 和 C++ 的复合类型概念，是一个将字段或成员以一定组合方式所组成的数据类型。因为在宣告时，使用了关键字 struct，所以它简称为结构，或者更精确地说用户定义的数据结构。', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1400', '在 C++ 里，struct 与class的唯一区别是默认的访问档次，class是私有的，struct 则是公有的。', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1401', '注意尽管类的概念和关键字class是C++新引入的，C语言也已具备粗糙的 struct 类型。对于所有的意图和目的， C++ 的struct是 C struct 的超集：几乎所有合法的 C struct 也是合法的 C++ struct，并有着相同的语义。', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1402', 'struct 宣告组成一个字段清单，其中的每一个可以是任意类型。对于 struct 对象所需的存储区，即为全部字段的总合，再加上内部的补白。', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1403', 'struct Account {\n    int account_number;\n    char *first_name;\n    char *last_name;\n    float balance;\n };', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1404', '定义一个称为 struct Account 的类型。若要创建此类型的新变量，可以写为 struct Account myAccount;，它有一个以 myAccount.account_number 访问的整数组件，且有一个以 myAccount.balance 访问的浮点数组件，以及 first_name 和 last_name 组件。myAccount 包含这四个数值，且这四个字段可各自改变。由于 struct account 的写法有些累赘，在 C 代码中，typedef 语句并不罕见，其为 struct 提供一个更简便的同义词。例如：', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1405', 'typedef struct Account_ {\n    int    account_number;\n    char   *first_name;\n    char   *last_name;\n    float  balance;\n } Account;', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1406', '在 C++ 中，并不需要 typedef，因为使用了 struct 的类型定义，已是名字空间的一部分，所以该类型可称作 struct Account 或较简单的 Account。', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:16', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1407', '其它例子，一个使用了浮点数数据类型的三维向量复合类型，可如此创建：', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:16', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1408', 'struct Vector {\n   float x;\n   float y;\n   float z;\n };', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:16', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1409', '一个以 Vector 复合类型为类型的变量名 velocity，可以宣告为 Vector velocity;，可以用点运算符(.)访问 velocity 的成员。例如，velocity.x = 5;，会使 velocity 的组件 x 等于 5。', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:16', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1410', '同样地，一个颜色结构可如此创建：', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:16', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1411', 'struct Color {\n   int red;\n   int green;\n   int blue;\n };', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:16', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1412', '在三维图像中，必须经常不断追踪每一个顶点的位置和颜色。可以使用之前所创建的 Vector 和 Color 复合类型来创建 Vertex 复合类型：', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:16', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1413', 'struct Vertex {\n   Vector position;\n   Color color;\n };', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:16', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1414', '以同样的格式创建一个 Vertex 类型的变量：Vertex v;，并以如下方式指派数值给 v ：', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:16', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1415', 'v.position.x = 0.0;\n   v.position.y = 1.5;\n   v.position.z = 0.0;\n   v.color.red = 128;\n   v.color.green = 0;\n   v.color.blue = 255;', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:16', '82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1416', '刚开始使用的 struct，是用来建构组合数据类型，不过有时它是用来避开标准 C 协议，以创建原始子类型检查（primitive subtyping）。例如，共同的网络协议依赖于以下事实，C 编译器以可预料的方法，在结构字段之间补白；因此代码', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:16', '82', '复合型别', '原始子类型检查', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1417', 'struct ifoo_old_stub {\n    long x, y;\n };\n struct ifoo_version_42 {\n    long x, y, z;\n    char *name;\n    long a, b, c;\n };\n void operate_on_ifoo(struct ifoo_old_stub *);\n struct ifoo_version_42 s;\n . . .\n operate_on_ifoo(&s);', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:16', '82', '复合型别', '原始子类型检查', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1419', '在图论上，一个图 G {\\displaystyle G} 的线图 L ( G ) {\\displaystyle L(G)} 是：', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E5%9B%BE', '2016-01-12 18:43:00', '2016-12-20 09:51:25', '83', '线图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1420', 'L ( G ) {\\displaystyle L(G)} 的一个顶点对应 G {\\displaystyle G} 的一边 L ( G ) {\\displaystyle L(G)} 的顶点相邻当且仅当它们在 G {\\displaystyle G} 对应的边相邻（有公共顶点）。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E5%9B%BE', '2016-01-12 18:43:00', '2016-12-20 09:51:25', '83', '线图', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1421', '若原图是连通的，线图也是。 χ E ( G ) = χ V ( L ( G ) ) {\\displaystyle \\chi _{E}(G)=\\chi _{V}(L(G))} ，原图的边色数等于线图的点色数。', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E5%9B%BE', '2016-01-12 18:43:00', '2016-12-20 09:51:25', '83', '线图', '性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1423', '一个实数的无限序列（蓝色）。这个序列既不是递增的也不是递减的更不是收敛的，但它是有界的。', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1424', '数学上，序列是被排成一列的对象（或事件）；这样，每个元素不是在其他元素之前，就是在其他元素之后。这里，元素之间的顺序非常重要。', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1425', '例如，(C,Y,R)是一个字母的序列：顺序是C第一，Y第二，R第三。序列可以是有限的（就像前面这个例子），也可以是无限的，就像所有正偶数的序列（2,4,6,...）。有限序列包含空序列（），它没有元素。序列中的元素也称为项，项的个数（可能是无限的）称为序列的长度。', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '例子和符号', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1426', '序列写作（a1,a2, ...）。简单起见，也可以用符号（an）。', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '例子和符号', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1427', '一个相对正式的定义：其项属于集合S的有限序列是一个从{1,2,...,n}到S的函数，这里n≥0。属于S的无限序列是从{1,2,...}（自然数集合）到S的函数。', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '例子和符号', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1428', '有限序列也称作n元组。一个从所有整数到集合的函数有时也称作双无限序列，这里将以负整数索引的序列认为是另一个以正整数索引的序列。', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '例子和符号', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1429', '一个给定序列的子序列是从给定序列中去除一些元素，而不改变其他元素之间相对位置而得到的。', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '序列的形式和性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1430', '若序列的项属于一个偏序集，则单调递增序列就是其中每个项都大于等于之前的项；若每个项都严格大于之前的项，这个序列就是严格单调递增的。类似可定义单调递减序列。单调序列是单调函数的一个特例。', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '序列的形式和性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1431', '由整数组成的序列称为整数列；由多项式组成的序列称为多项式列。', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '序列的形式和性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1432', '若S具有拓扑，那么就可以讨论S中的无限序列的收敛。请详见极限。', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '序列的形式和性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1433', '由数组成的序列称为数列；由数列的部分和组成的序列称为级数，例如：', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '序列的形式和性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1434', '1 + 1 2 + 1 4 + 1 8 + 1 16 + ⋯ + 1 2 n − 1 = 2 n − 1 2 n − 1 . {\\displaystyle 1+{\\frac {1}{2}}+{\\frac {1}{4}}+{\\frac {1}{8}}+{\\frac {1}{16}}+\\cdots +{\\frac {1}{2^{n-1}}}={\\frac {2^{n}-1}{2^{n-1}}}.}', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '序列的形式和性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1435', '柯西序列 网 (数学)（序列的推广） 序列空间 数列 整数数列在线大全', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:36', '84', '序列', '序列的形式和性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1436', '树状图是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：\r\n每个节点有零个或多个子节点；没有父节点的节点称为根节点；每一个非根节点有且只有一个父节点；除了根节点外，每个子节点可以分为多个不相交的子树；', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1437', '树（tree）是包含n（n>0）个结点的有穷集，其中：\r\n（1）每个元素称为结点（node）；\r\n（2）有一个特定的结点被称为根结点或树根（root）。\r\n（3）除根结点之外的其余数据元素被分为m（m≥0）个互不相交的集合T1，T2，……Tm-1，其中每一个集合Ti（1<=i<=m）本身也是一棵树，被称作原树的子树（subtree）。', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1438', '树也可以这样定义：树是由根结点和若干颗子树构成的。树是由一个集合以及在该集合上定义的一种关系构成的。集合中的元素称为树的结点，所定义的关系称为父子关系。父子关系在树的结点之间建立了一个层次结构。在这种层次结构中有一个结点具有特殊的地位，这个结点称为该树的根结点，或称为树根。', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1439', '我们可以形式地给出树的递归定义如下:\r\n单个结点是一棵树，树根就是该结点本身。\r\n设T1,T2,..,Tk是树，它们的根结点分别为n1,n2,..,nk。用一个新结点n作为n1,n2,..,nk的父亲，则得到一棵新树，结点n就是新树的根。我们称n1,n2,..,nk为一组兄弟结点，它们都是结点n的子结点。我们还称T1,T2,..,Tk为结点n的子树。\r\n空集合也是树，称为空树。空树中没有结点。', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1440', '节点的度：一个节点含有的子树的个数称为该节点的度；', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '相关术语', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1441', '叶节点或终端节点：度为0的节点称为叶节点；', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '相关术语', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1442', '非终端节点或分支节点：度不为0的节点；', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '相关术语', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1443', '双亲节点或父节点：若一个节点含有子节点，则这个节点称为其子节点的父节点；\r\n孩子节点或子节点：一个节点含有的子树的根节点称为该节点的子节点；\r\n兄弟节点：具有相同父节点的节点互称为兄弟节点；', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '相关术语', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1444', '树的度：一棵树中，最大的节点的度称为树的度；\r\n节点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；\r\n树的高度或深度：树中节点的最大层次；', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '相关术语', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1445', '堂兄弟节点：双亲在同一层的节点互为堂兄弟；\r\n节点的祖先：从根到该节点所经分支上的所有节点；\r\n子孙：以某节点为根的子树中任一节点都称为该节点的子孙。\r\n森林：由m（m>=0）棵互不相交的树的集合称为森林；', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '相关术语', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1446', '无序树：树中任意节点的子结点之间没有顺序关系，这种树称为无序树,也称为自由树;', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '种类', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1447', '有序树：树中任意节点的子结点之间有顺序关系，这种树称为有序树；', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '种类', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1448', '二叉树：每个节点最多含有两个子树的树称为二叉树；', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '种类', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1449', '完全二叉树\r\n满二叉树\r\n霍夫曼树：带权路径最短的二叉树称为哈夫曼树或最优二叉树；', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '种类', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1450', '定义一棵树的根结点层次为1，其他节点的层次是其父结点层次加1。一棵树中所有结点的层次的最大值称为这棵树的深度。', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '深度', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1451', '图像表达法\r\n树的表示方法有很多种，最常用的是图像表示法。\r\n一下是一个普通的树（非二叉树）：', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '表示方法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1452', '符号表达法\r\n用括号先将根结点放入一对圆括号中，然后把它的子树由左至右的顺序放入括号中，而对子树也采用同样的方法处理；同层子树与它的根结点用圆括号括起来，同层子树之间用逗号隔开，最后用闭括号括起来。如前文树形表示法可以表示为：（1（2（5（9，10）），3（6，7），4（8）））', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '表示方法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1453', '遍历表达法\r\n\r\n遍历表达法有3种方法：先序遍历、中序遍历、后序遍历[2] \r\n例如右图：\r\n其先序遍历为ABDECF\r\n其中序遍历为DBEAFC\r\n其后序遍历为DEBFCA\r\n具体请参照参考资料', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '表示方法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1454', '存储结勾\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n/* 树节点的定义 */\r\n#define MAX_TREE_SIZE 100\r\n \r\ntypedef struct{\r\n    TElemType data;\r\n    int parent; /* 父节点位置域 */\r\n} PTNode;\r\n \r\ntypedef struct{\r\n    PTNode nodes[MAX_TREE_SIZE];\r\n    int n; /* 节点数 */\r\n} PTree;', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '父节点表示法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1455', '构造空树\r\n清空或销毁一个树也是同样的操作\r\nvoid ClearTree(PTree *T){\r\n    T->n = 0;\r\n}', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '父节点表示法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1456', '判断树是否为空\r\nStatus TreeEmpty(PTree *T){\r\n    /* 初始条件：树T存在。操作结果：若T为空树，则返回TRUE，否则返回FALSE */  \r\n    return T->n==0;\r\n}', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '74', '树 (数据结构)', '父节点表示法', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1457', '堆（英语：Heap）是计算机科学中一类特殊的数据结构的统称。堆通常是一个可以被看做一棵树的数组对象。在队列中，调度程序反复提取队列中第一个作业并运行，因为实际情况中某些时间较短的任务将等待很长时间才能结束，或者某些不短小，但具有重要性的作业，同样应当具有优先权。堆即为解决此类问题设计的一种数据结构。', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '51', '堆 (数据结构)', '摘要', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1458', 'n个元素序列{k1,k2...ki...kn},当且仅当满足下列关系时称之为堆：\r\n(ki <= k2i,ki <= k2i+1)或者(ki >= k2i,ki >= k2i+1), (i = 1,2,3,4...n/2)', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '51', '堆 (数据结构)', '定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1459', '堆（英语：heap)是计算机科学中一类特殊的数据结构的统称。堆通常是一个可以被看做一棵树的数组对象。堆总是满足下列性质：\r\n堆中某个节点的值总是不大于或不小于其父节点的值；\r\n堆总是一棵完全二叉树。\r\n将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '51', '堆 (数据结构)', '定义', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1460', '堆的实现通过构造二叉堆（binary heap），实为二叉树的一种；由于其应用的普遍性，当不加限定时，均指该数据结构的这种实现。这种数据结构具有以下性质。\r\n任意节点小于（或大于）它的所有后裔，最小元（或最大元）在堆的根上（堆序性）。\r\n堆总是一棵完全树。即除了最底层，其他层的节点都被元素填满，且最底层尽可能地从左到右填入。\r\n将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '51', '堆 (数据结构)', '性质', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1461', '堆支持以下的基本:\r\nbuild:建立一个空堆；\r\ninsert:向堆中插入一个新元素；\r\nupdate：将新元素提升使其符合堆的性质；\r\nget：获取当前堆顶元素的值；\r\ndelete：删除堆顶元素；\r\nheapify：使删除堆顶元素的堆再次成为堆。\r\n某些堆实现还支持其他的一些操作，如斐波那契堆支持检查一个堆中是否存在某个元素。', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '51', '堆 (数据结构)', '操作', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1462', '为将元素X插入堆中，找到空闲位置，创建一个空穴，若满足堆序性（英文：heap order），则插入完成；否则将父节点元素装入空穴，删除该父节点元素，完成空穴上移。直至满足堆序性。这种策略叫做上滤（percolate up）。[1]\r\nvoid Insert( ElementType X, PriorityQueue H )\r\n{\r\n    int i;\r\n\r\n    if( IsFull(H) )\r\n    {\r\n        printf( \"Queue is full.\\n\" );\r\n        return;\r\n    }\r\n\r\n    for( i = ++H->Size; H->Element[i/2] > X; i /= 2 )\r\n        H->Elements[i] = H->Elements[i/2];\r\n    H->Elements[i] = X;\r\n}\r\n以上是插入到一个二叉堆的过程。', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '51', '堆 (数据结构)', '例程', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1463', 'DeleteMin，删除最小元，即二叉树的根或父节点。删除该节点元素后，队列最后一个元素必须移动到堆得某个位置，使得堆仍然满足堆序性质。这种向下替换元素的过程叫作下滤。\r\nElementType\r\nDeleteMin( PriorityQueue H )\r\n{\r\n    int i, Child;\r\n    ElementType MinElement, LastElement;\r\n\r\n    if( IsEmpty( H ) )\r\n    {\r\n        printf( \"Queue is empty.\\n\" );\r\n        return H->Elements[0];\r\n    }\r\n    MinElement = H->Elements[1];\r\n    LastElement = H->Elements[H->Size--];\r\n\r\n    for( i = 1; i*2 <= H->Size; i = Child )\r\n    {\r\n        /* Find smaller child. */\r\n        Child = i*2;\r\n        if( Child != H->Size && H->Elements[Child+1]\r\n                             <  H->Elements[Child] )\r\n            Child++;\r\n\r\n        /* Percolate one level. */\r\n        if( LastElement > H->Elements[Child] )\r\n            H->Elements[i] = H->Elements[Child];\r\n        else\r\n            break;\r\n    }\r\n    H->Elements[i] = LastElement;\r\n    return MinElement;\r\n}', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '51', '堆 (数据结构)', '例程', '1', '数据结构');
INSERT INTO `assemble_text` VALUES ('1464', '堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '51', '堆 (数据结构)', '堆排序', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1465', '通常堆是通过一维数组来实现的。在数组起始位置为0的情形中：\r\n父节点i的左子节点在位置(2*i+1);\r\n父节点i的右子节点在位置(2*i+2);\r\n子节点i的父节点在位置floor((i-1)/2);', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '51', '堆 (数据结构)', '堆排序', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1466', '堆的操作[编辑]\r\n在堆的数据结构中，堆中的最大值总是位于根节点(在优先队列中使用堆的话堆中的最小值位于根节点)。堆中定义以下几种操作：\r\n最大堆调整（Max_Heapify）：将堆的末端子节点作调整，使得子节点永远小于父节点\r\n创建最大堆（Build_Max_Heap）：将堆所有数据重新排序\r\n堆排序（HeapSort）：移除位在第一个数据的根节点，并做最大堆调整的递归运算', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '51', '堆 (数据结构)', '堆排序', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1467', '主要运用堆的排序以选择优先。', 'http://baike.baidu.com/link?url=ILQS79dXnpS3DpoWJstIpUaQ3Ap37xu73pBTU6JAUryHZz4V-nvpnoRps1Hs3qHL12GdiW6E08w91VA6M7nSTM802aLNLxfLrktpgCllhtZoCTE2Ej4MVHOMpWsXHtkEsTYzSIaHYX9LO6QkwG7Zi2vMTdj-sKjVbk2MM7duElojd-3JeRQbi00oZc5xzwSw', '2016-08-27 22:12:00', '2016-12-26 22:12:00', '51', '堆 (数据结构)', '事件模拟', '2', '数据结构');
INSERT INTO `assemble_text` VALUES ('1468', '测试碎片', null, null, '2017-10-22 16:29:58', '85', '测试主题1', '测试分面1', '1', '测试课程');
INSERT INTO `assemble_text` VALUES ('1469', '测试碎片', null, null, '2017-10-22 16:30:28', '85', '测试主题1', '测试分面2', '2', '测试课程');
INSERT INTO `assemble_text` VALUES ('1470', '测试碎片', null, null, '2017-10-22 16:30:53', '85', '测试主题1', '测试分面3', '3', '测试课程');
INSERT INTO `assemble_text` VALUES ('1471', '请添加碎片...', null, null, '2017-10-23 13:00:12', '89', 'test', 'facet2', '2', '测试课程');
INSERT INTO `assemble_text` VALUES ('1472', '请添加碎片...', null, null, '2017-10-23 13:27:37', '85', '测试主题1', '测试分面1', '1', '测试课程');

-- ----------------------------
-- Table structure for dependency
-- ----------------------------
DROP TABLE IF EXISTS `dependency`;
CREATE TABLE `dependency` (
  `ClassName` varchar(255) DEFAULT NULL,
  `Start` varchar(255) DEFAULT NULL,
  `StartID` varchar(255) DEFAULT NULL,
  `End` varchar(255) DEFAULT NULL,
  `EndID` varchar(255) DEFAULT NULL,
  `Confidence` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of dependency
-- ----------------------------
INSERT INTO `dependency` VALUES ('数据结构', '2-3树', '64', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', 'B+树', '19', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', 'B+树', '19', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '有序对', '76', '线图', '83', '');
INSERT INTO `dependency` VALUES ('数据结构', '四叉树', '12', '数据结构', '21', '');
INSERT INTO `dependency` VALUES ('数据结构', '线性探测', '4', '线段树', '66', '');
INSERT INTO `dependency` VALUES ('数据结构', '完全二分图', '6', '红黑树', '31', '');
INSERT INTO `dependency` VALUES ('数据结构', '平衡树', '16', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '图论术语', '2', '递归类型', '78', '');
INSERT INTO `dependency` VALUES ('数据结构', '2-3树', '64', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '链表', '70', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', 'B+树', '19', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '补图', '80', '复合型别', '82', '');
INSERT INTO `dependency` VALUES ('数据结构', '多重关连数组', '17', '伸展树', '72', '');
INSERT INTO `dependency` VALUES ('数据结构', 'B+树', '19', '2-3-4树', '30', '');
INSERT INTO `dependency` VALUES ('数据结构', '多重关连数组', '17', '关联数组', '59', '');
INSERT INTO `dependency` VALUES ('数据结构', '2-3-4树', '30', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '链表', '70', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '2-3树', '64', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', 'B+树', '19', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '2-3-4树', '30', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '深度优先搜索', '58', '广度优先搜索', '62', '');
INSERT INTO `dependency` VALUES ('数据结构', '有序对', '76', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', 'AA树', '79', '线图', '83', '');
INSERT INTO `dependency` VALUES ('数据结构', '2-3-4树', '30', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '二元搜寻树', '71', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', 'B树', '53', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '斐波那契堆', '22', '二项堆', '54', '');
INSERT INTO `dependency` VALUES ('数据结构', 'B树', '53', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '原始型别', '35', '数组', '44', '');
INSERT INTO `dependency` VALUES ('数据结构', '字符串', '46', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '字符串', '46', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '数据结构', '21', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '四叉树', '12', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '数据结构', '21', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '字符串', '46', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '四叉树', '12', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '双端队列', '15', '补图', '80', '');
INSERT INTO `dependency` VALUES ('数据结构', '四叉树', '12', 'B+树', '19', '');
INSERT INTO `dependency` VALUES ('数据结构', '2-3-4树', '30', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '二项堆', '54', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '数据结构', '21', '抽象资料型别', '50', '');
INSERT INTO `dependency` VALUES ('数据结构', '数据结构', '21', '朱迪矩阵', '43', '');
INSERT INTO `dependency` VALUES ('数据结构', 'B树', '53', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '二项堆', '54', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '二叉堆', '18', 'B+树', '19', '');
INSERT INTO `dependency` VALUES ('数据结构', '四叉树', '12', '朱迪矩阵', '43', '');
INSERT INTO `dependency` VALUES ('数据结构', '朱迪矩阵', '43', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '朱迪矩阵', '43', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '2-3-4树', '30', '替罪羊树', '36', '');
INSERT INTO `dependency` VALUES ('数据结构', 'AVL树', '63', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '二叉堆', '18', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '多重关连数组', '17', '数组', '44', '');
INSERT INTO `dependency` VALUES ('数据结构', '图论术语', '2', '二分图', '49', '');
INSERT INTO `dependency` VALUES ('数据结构', 'AVL树', '63', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '二叉堆', '18', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '二叉堆', '18', '替罪羊树', '36', '');
INSERT INTO `dependency` VALUES ('数据结构', '二项堆', '54', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '数据结构', '21', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '替罪羊树', '36', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', 'B树', '53', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '二分图', '49', '补图', '80', '');
INSERT INTO `dependency` VALUES ('数据结构', '广度优先搜索', '62', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '替罪羊树', '36', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '数组', '44', '字符串', '46', '');
INSERT INTO `dependency` VALUES ('数据结构', '数组', '44', '抽象资料型别', '50', '');
INSERT INTO `dependency` VALUES ('数据结构', '广度优先搜索', '62', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '二叉堆', '18', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '霍夫曼编码', '29', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', 'AVL树', '63', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '深度优先搜索', '58', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '原始型别', '35', '字符串', '46', '');
INSERT INTO `dependency` VALUES ('数据结构', '替罪羊树', '36', '二项堆', '54', '');
INSERT INTO `dependency` VALUES ('数据结构', '霍夫曼编码', '29', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '广度优先搜索', '62', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '二项堆', '54', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '字符串', '46', 'B树', '53', '');
INSERT INTO `dependency` VALUES ('数据结构', '斐波那契堆', '22', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '深度优先搜索', '58', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', 'AVL树', '63', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '朱迪矩阵', '43', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '替罪羊树', '36', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '字符串', '46', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '笛卡尔树', '68', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '树状数组', '1', '二项堆', '54', '');
INSERT INTO `dependency` VALUES ('数据结构', '2-3树', '64', '笛卡尔树', '68', '');
INSERT INTO `dependency` VALUES ('数据结构', '霍夫曼编码', '29', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '斐波那契堆', '22', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '原始型别', '35', '资料类型', '60', '');
INSERT INTO `dependency` VALUES ('数据结构', '凯莱图', '81', '线图', '83', '');
INSERT INTO `dependency` VALUES ('数据结构', '二叉树', '42', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '深度优先搜索', '58', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '替罪羊树', '36', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '笛卡尔树', '68', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '数组', '44', '关联数组', '59', '');
INSERT INTO `dependency` VALUES ('数据结构', '有序对', '76', '凯莱图', '81', '');
INSERT INTO `dependency` VALUES ('数据结构', '二项堆', '54', 'AVL树', '63', '');
INSERT INTO `dependency` VALUES ('数据结构', '霍夫曼编码', '29', '字符串', '46', '');
INSERT INTO `dependency` VALUES ('数据结构', '抽象资料型别', '50', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '斐波那契堆', '22', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '朱迪矩阵', '43', '字符串', '46', '');
INSERT INTO `dependency` VALUES ('数据结构', '广度优先搜索', '62', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '笛卡尔树', '68', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '完全二分图', '6', '二分图', '49', '');
INSERT INTO `dependency` VALUES ('数据结构', '霍夫曼编码', '29', '2-3-4树', '30', '');
INSERT INTO `dependency` VALUES ('数据结构', '深度优先搜索', '58', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '朱迪矩阵', '43', 'B树', '53', '');
INSERT INTO `dependency` VALUES ('数据结构', '二分图', '49', '凯莱图', '81', '');
INSERT INTO `dependency` VALUES ('数据结构', 'K-d树', '45', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', 'K-d树', '45', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', 'B树', '53', 'AVL树', '63', '');
INSERT INTO `dependency` VALUES ('数据结构', '空字元串', '3', '数组', '44', '');
INSERT INTO `dependency` VALUES ('数据结构', '斐波那契堆', '22', '替罪羊树', '36', '');
INSERT INTO `dependency` VALUES ('数据结构', '连通图', '32', '二分图', '49', '');
INSERT INTO `dependency` VALUES ('数据结构', '抽象资料型别', '50', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '多重关连数组', '17', '抽象资料型别', '50', '');
INSERT INTO `dependency` VALUES ('数据结构', '二叉树', '42', '二项堆', '54', '');
INSERT INTO `dependency` VALUES ('数据结构', '平衡树', '16', '替罪羊树', '36', '');
INSERT INTO `dependency` VALUES ('数据结构', '多重关连数组', '17', '数据结构', '21', '');
INSERT INTO `dependency` VALUES ('数据结构', '抽象资料型别', '50', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '空字元串', '3', '字符串', '46', '');
INSERT INTO `dependency` VALUES ('数据结构', '2-3树', '64', '树旋转', '69', '');
INSERT INTO `dependency` VALUES ('数据结构', '树旋转', '69', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '连通图', '32', '补图', '80', '');
INSERT INTO `dependency` VALUES ('数据结构', '哈希表', '40', '散列函数', '47', '');
INSERT INTO `dependency` VALUES ('数据结构', '平衡树', '16', '二叉堆', '18', '');
INSERT INTO `dependency` VALUES ('数据结构', '平衡树', '16', 'B树', '53', '');
INSERT INTO `dependency` VALUES ('数据结构', 'K-d树', '45', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '树堆', '8', 'B+树', '19', '');
INSERT INTO `dependency` VALUES ('数据结构', '抽象资料型别', '50', '关联数组', '59', '');
INSERT INTO `dependency` VALUES ('数据结构', '平衡树', '16', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '树堆', '8', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '树状数组', '1', '二叉堆', '18', '');
INSERT INTO `dependency` VALUES ('数据结构', '树堆', '8', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '原始型别', '35', '抽象资料型别', '50', '');
INSERT INTO `dependency` VALUES ('数据结构', '树旋转', '69', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', 'K-d树', '45', '二项堆', '54', '');
INSERT INTO `dependency` VALUES ('数据结构', '二叉树', '42', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '线性探测', '4', '二叉堆', '18', '');
INSERT INTO `dependency` VALUES ('数据结构', '树旋转', '69', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '哈希表', '40', '二项堆', '54', '');
INSERT INTO `dependency` VALUES ('数据结构', 'AA树', '79', '凯莱图', '81', '');
INSERT INTO `dependency` VALUES ('数据结构', '图论术语', '2', '补图', '80', '');
INSERT INTO `dependency` VALUES ('数据结构', '二叉树', '42', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '链表', '70', 'Alpha-beta剪枝', '77', '');
INSERT INTO `dependency` VALUES ('数据结构', '抽象资料型别', '50', 'B树', '53', '');
INSERT INTO `dependency` VALUES ('数据结构', '数组', '44', '布隆过滤器', '48', '');
INSERT INTO `dependency` VALUES ('数据结构', '数组', '44', 'B树', '53', '');
INSERT INTO `dependency` VALUES ('数据结构', '资料类型', '60', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '关联数组', '59', '伸展树', '72', '');
INSERT INTO `dependency` VALUES ('数据结构', '图论术语', '2', '连通图', '32', '');
INSERT INTO `dependency` VALUES ('数据结构', '哈希表', '40', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '布隆过滤器', '48', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '红黑树', '31', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '一笔画问题', '28', '连通图', '32', '');
INSERT INTO `dependency` VALUES ('数据结构', '红黑树', '31', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '可变长数组', '13', '数组', '44', '');
INSERT INTO `dependency` VALUES ('数据结构', '二分图', '49', '递归类型', '78', '');
INSERT INTO `dependency` VALUES ('数据结构', '二叉树', '42', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '哈希表', '40', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '树堆', '8', 'AVL树', '63', '');
INSERT INTO `dependency` VALUES ('数据结构', '树旋转', '69', '伸展树', '72', '');
INSERT INTO `dependency` VALUES ('数据结构', '红黑树', '31', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '八叉树', '25', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '补图', '80', '线图', '83', '');
INSERT INTO `dependency` VALUES ('数据结构', '八叉树', '25', '2-3-4树', '30', '');
INSERT INTO `dependency` VALUES ('数据结构', 'K-d树', '45', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '原始型别', '35', '关联数组', '59', '');
INSERT INTO `dependency` VALUES ('数据结构', '哈希表', '40', '朱迪矩阵', '43', '');
INSERT INTO `dependency` VALUES ('数据结构', '空字元串', '3', '2-3-4树', '30', '');
INSERT INTO `dependency` VALUES ('数据结构', '图论术语', '2', '凯莱图', '81', '');
INSERT INTO `dependency` VALUES ('数据结构', '树堆', '8', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '线性探测', '4', '朱迪矩阵', '43', '');
INSERT INTO `dependency` VALUES ('数据结构', '八叉树', '25', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '八叉树', '25', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '完美散列', '23', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '广度优先搜索', '62', 'AVL树', '63', '');
INSERT INTO `dependency` VALUES ('数据结构', '布隆过滤器', '48', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '完全二分图', '6', '凯莱图', '81', '');
INSERT INTO `dependency` VALUES ('数据结构', '线性探测', '4', '哈希表', '40', '');
INSERT INTO `dependency` VALUES ('数据结构', '布隆过滤器', '48', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', 'AA树', '79', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '随机图', '11', '二分图', '49', '');
INSERT INTO `dependency` VALUES ('数据结构', '链表', '70', '有序对', '76', '');
INSERT INTO `dependency` VALUES ('数据结构', '补图', '80', '凯莱图', '81', '');
INSERT INTO `dependency` VALUES ('数据结构', '一笔画问题', '28', '二分图', '49', '');
INSERT INTO `dependency` VALUES ('数据结构', '布隆过滤器', '48', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '线段树', '66', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '有序对', '76', '补图', '80', '');
INSERT INTO `dependency` VALUES ('数据结构', '正则图', '38', '补图', '80', '');
INSERT INTO `dependency` VALUES ('数据结构', 'Alpha-beta剪枝', '77', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', 'AVL树', '63', '笛卡尔树', '68', '');
INSERT INTO `dependency` VALUES ('数据结构', '树状数组', '1', '霍夫曼编码', '29', '');
INSERT INTO `dependency` VALUES ('数据结构', '二元搜寻树', '71', 'Alpha-beta剪枝', '77', '');
INSERT INTO `dependency` VALUES ('数据结构', '连通图', '32', '凯莱图', '81', '');
INSERT INTO `dependency` VALUES ('数据结构', '双端队列', '15', '复合型别', '82', '');
INSERT INTO `dependency` VALUES ('数据结构', '系统发生树', '10', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '正则图', '38', '二分图', '49', '');
INSERT INTO `dependency` VALUES ('数据结构', '红黑树', '31', '二分图', '49', '');
INSERT INTO `dependency` VALUES ('数据结构', '一笔画问题', '28', '正则图', '38', '');
INSERT INTO `dependency` VALUES ('数据结构', '系统发生树', '10', 'B+树', '19', '');
INSERT INTO `dependency` VALUES ('数据结构', '系统发生树', '10', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '正则图', '38', '凯莱图', '81', '');
INSERT INTO `dependency` VALUES ('数据结构', '笛卡尔树', '68', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '红黑树', '31', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', 'AA树', '79', '补图', '80', '');
INSERT INTO `dependency` VALUES ('数据结构', '二元搜寻树', '71', '有序对', '76', '');
INSERT INTO `dependency` VALUES ('数据结构', '布隆过滤器', '48', '抽象资料型别', '50', '');
INSERT INTO `dependency` VALUES ('数据结构', '散列函数', '47', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '线性探测', '4', '散列函数', '47', '');
INSERT INTO `dependency` VALUES ('数据结构', '一笔画问题', '28', '凯莱图', '81', '');
INSERT INTO `dependency` VALUES ('数据结构', '关联数组', '59', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '线段树', '66', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '空字元串', '3', '原始型别', '35', '');
INSERT INTO `dependency` VALUES ('数据结构', '链表', '70', '线图', '83', '');
INSERT INTO `dependency` VALUES ('数据结构', '散列函数', '47', '布隆过滤器', '48', '');
INSERT INTO `dependency` VALUES ('数据结构', '二元搜寻树', '71', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '二分图', '49', '线图', '83', '');
INSERT INTO `dependency` VALUES ('数据结构', '树状数组', '1', '笛卡尔树', '68', '');
INSERT INTO `dependency` VALUES ('数据结构', '树状数组', '1', 'B+树', '19', '');
INSERT INTO `dependency` VALUES ('数据结构', '空字元串', '3', '多重关连数组', '17', '');
INSERT INTO `dependency` VALUES ('数据结构', '系统发生树', '10', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '完全二分图', '6', '线图', '83', '');
INSERT INTO `dependency` VALUES ('数据结构', '完全二分图', '6', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '散列函数', '47', 'B树', '53', '');
INSERT INTO `dependency` VALUES ('数据结构', '连通图', '32', '正则图', '38', '');
INSERT INTO `dependency` VALUES ('数据结构', '邻接矩阵', '7', '正则图', '38', '');
INSERT INTO `dependency` VALUES ('数据结构', '二元搜寻树', '71', '线图', '83', '');
INSERT INTO `dependency` VALUES ('数据结构', '线性杂凑', '55', '深度优先搜索', '58', '');
INSERT INTO `dependency` VALUES ('数据结构', '八叉树', '25', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '线段树', '66', '笛卡尔树', '68', '');
INSERT INTO `dependency` VALUES ('数据结构', '散列函数', '47', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '随机图', '11', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '连通图', '32', '线图', '83', '');
INSERT INTO `dependency` VALUES ('数据结构', '散列函数', '47', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '笛卡尔树', '68', '树旋转', '69', '');
INSERT INTO `dependency` VALUES ('数据结构', '随机图', '11', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '关联数组', '59', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '二分图', '49', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '线段树', '66', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '系统发生树', '10', '四叉树', '12', '');
INSERT INTO `dependency` VALUES ('数据结构', '一笔画问题', '28', '补图', '80', '');
INSERT INTO `dependency` VALUES ('数据结构', '完美散列', '23', '字符串', '46', '');
INSERT INTO `dependency` VALUES ('数据结构', '关联数组', '59', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '伸展树', '72', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '有序对', '76', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '关联数组', '59', '广度优先搜索', '62', '');
INSERT INTO `dependency` VALUES ('数据结构', '随机图', '11', '平衡树', '16', '');
INSERT INTO `dependency` VALUES ('数据结构', '完美散列', '23', '数组', '44', '');
INSERT INTO `dependency` VALUES ('数据结构', '随机图', '11', 'B+树', '19', '');
INSERT INTO `dependency` VALUES ('数据结构', '邻接矩阵', '7', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '树旋转', '69', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '完美散列', '23', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '完美散列', '23', '2-3-4树', '30', '');
INSERT INTO `dependency` VALUES ('数据结构', '线图', '83', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '堆栈', '65', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '资料类型', '60', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '伸展树', '72', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '递归类型', '78', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '双端队列', '15', '替罪羊树', '36', '');
INSERT INTO `dependency` VALUES ('数据结构', '递归类型', '78', '补图', '80', '');
INSERT INTO `dependency` VALUES ('数据结构', '邻接矩阵', '7', '连通图', '32', '');
INSERT INTO `dependency` VALUES ('数据结构', '佩特森图', '33', '正则图', '38', '');
INSERT INTO `dependency` VALUES ('数据结构', '资料类型', '60', '笛卡尔树', '68', '');
INSERT INTO `dependency` VALUES ('数据结构', '可变长数组', '13', '多重关连数组', '17', '');
INSERT INTO `dependency` VALUES ('数据结构', '递归类型', '78', '凯莱图', '81', '');
INSERT INTO `dependency` VALUES ('数据结构', '可变长数组', '13', '原始型别', '35', '');
INSERT INTO `dependency` VALUES ('数据结构', '堆栈', '65', '二元搜寻树', '71', '');
INSERT INTO `dependency` VALUES ('数据结构', '资料类型', '60', '复合型别', '82', '');
INSERT INTO `dependency` VALUES ('数据结构', '可变长数组', '13', '关联数组', '59', '');
INSERT INTO `dependency` VALUES ('数据结构', '递归类型', '78', '线图', '83', '');
INSERT INTO `dependency` VALUES ('数据结构', '邻接矩阵', '7', '二项堆', '54', '');
INSERT INTO `dependency` VALUES ('数据结构', '资料类型', '60', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '凯莱图', '81', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '佩特森图', '33', '递归类型', '78', '');
INSERT INTO `dependency` VALUES ('数据结构', '线性杂凑', '55', '递归类型', '78', '');
INSERT INTO `dependency` VALUES ('数据结构', '邻接矩阵', '7', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '线性杂凑', '55', '广度优先搜索', '62', '');
INSERT INTO `dependency` VALUES ('数据结构', '递归类型', '78', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '堆栈', '65', '有序对', '76', '');
INSERT INTO `dependency` VALUES ('数据结构', '双端队列', '15', '抽象资料型别', '50', '');
INSERT INTO `dependency` VALUES ('数据结构', '堆栈', '65', '队列', '73', '');
INSERT INTO `dependency` VALUES ('数据结构', '堆栈', '65', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '双端队列', '15', '二分图', '49', '');
INSERT INTO `dependency` VALUES ('数据结构', '正则图', '38', '线图', '83', '');
INSERT INTO `dependency` VALUES ('数据结构', '线段树', '66', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '正则图', '38', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', 'Alpha-beta剪枝', '77', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '队列', '73', 'AA树', '79', '');
INSERT INTO `dependency` VALUES ('数据结构', '复合型别', '82', '线图', '83', '');
INSERT INTO `dependency` VALUES ('数据结构', '佩特森图', '33', '树旋转', '69', '');
INSERT INTO `dependency` VALUES ('数据结构', '补图', '80', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', 'AA树', '79', '复合型别', '82', '');
INSERT INTO `dependency` VALUES ('数据结构', '线性杂凑', '55', '链表', '70', '');
INSERT INTO `dependency` VALUES ('数据结构', '可变长数组', '13', '抽象资料型别', '50', '');
INSERT INTO `dependency` VALUES ('数据结构', '线性杂凑', '55', '2-3树', '64', '');
INSERT INTO `dependency` VALUES ('数据结构', '凯莱图', '81', '复合型别', '82', '');
INSERT INTO `dependency` VALUES ('数据结构', '佩特森图', '33', '二分图', '49', '');
INSERT INTO `dependency` VALUES ('数据结构', '复合型别', '82', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', 'Alpha-beta剪枝', '77', '递归类型', '78', '');
INSERT INTO `dependency` VALUES ('数据结构', '伸展树', '72', '有序对', '76', '');
INSERT INTO `dependency` VALUES ('数据结构', '伸展树', '72', 'Alpha-beta剪枝', '77', '');
INSERT INTO `dependency` VALUES ('数据结构', '佩特森图', '33', '笛卡尔树', '68', '');
INSERT INTO `dependency` VALUES ('数据结构', '伸展树', '72', '线图', '83', '');
INSERT INTO `dependency` VALUES ('数据结构', 'Alpha-beta剪枝', '77', '线图', '83', '');
INSERT INTO `dependency` VALUES ('数据结构', '对话树', '61', '补图', '80', '');
INSERT INTO `dependency` VALUES ('数据结构', '队列', '73', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '队列', '73', 'Alpha-beta剪枝', '77', '');
INSERT INTO `dependency` VALUES ('数据结构', 'Alpha-beta剪枝', '77', '补图', '80', '');
INSERT INTO `dependency` VALUES ('数据结构', '相位阵列', '5', '有序对', '76', '');
INSERT INTO `dependency` VALUES ('数据结构', '相位阵列', '5', '线图', '83', '');
INSERT INTO `dependency` VALUES ('数据结构', '相位阵列', '5', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '队列', '73', '有序对', '76', '');
INSERT INTO `dependency` VALUES ('数据结构', '相位阵列', '5', '平衡树', '16', '');
INSERT INTO `dependency` VALUES ('数据结构', '对话树', '61', '序列', '84', '');
INSERT INTO `dependency` VALUES ('数据结构', '相位阵列', '5', '堆栈', '65', '');
INSERT INTO `dependency` VALUES ('数据结构', '队列', '73', '线图', '83', '');
INSERT INTO `dependency` VALUES ('数据结构', '对话树', '61', 'Alpha-beta剪枝', '77', '');
INSERT INTO `dependency` VALUES ('数据结构', '对话树', '61', '复合型别', '82', '');
INSERT INTO `dependency` VALUES ('数据结构', '对话树', '61', '链表', '70', '');
INSERT INTO `dependency` VALUES ('测试课程', '测试主题1', '85', 'test', '89', null);
INSERT INTO `dependency` VALUES ('测试课程', '测试主题1', '85', '测试主题2', '86', null);

-- ----------------------------
-- Table structure for domain
-- ----------------------------
DROP TABLE IF EXISTS `domain`;
CREATE TABLE `domain` (
  `ClassID` int(20) NOT NULL AUTO_INCREMENT,
  `ClassName` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`ClassID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of domain
-- ----------------------------
INSERT INTO `domain` VALUES ('1', '数据结构');
INSERT INTO `domain` VALUES ('2', '测试课程');

-- ----------------------------
-- Table structure for domain_layer
-- ----------------------------
DROP TABLE IF EXISTS `domain_layer`;
CREATE TABLE `domain_layer` (
  `TermID` int(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '术语ID，存储各级未处理的主题（没有含有子主题的主题）',
  `TermName` varchar(255) DEFAULT NULL,
  `TermUrl` varchar(255) DEFAULT NULL,
  `TermLayer` int(20) DEFAULT NULL,
  `ClassName` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`TermID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='note 是标记';

-- ----------------------------
-- Records of domain_layer
-- ----------------------------

-- ----------------------------
-- Table structure for domain_layer_fuzhu
-- ----------------------------
DROP TABLE IF EXISTS `domain_layer_fuzhu`;
CREATE TABLE `domain_layer_fuzhu` (
  `TermID` int(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '术语ID，存储各级未处理的主题（存储含有子主题的主题）',
  `TermName` varchar(255) DEFAULT NULL,
  `TermUrl` varchar(255) DEFAULT NULL,
  `TermLayer` int(20) DEFAULT NULL,
  `isCatalog` int(20) DEFAULT NULL COMMENT '该主题是不是Catalog页面的主题：1表示是，0表示不是',
  `ClassName` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`TermID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='note 是标记';

-- ----------------------------
-- Records of domain_layer_fuzhu
-- ----------------------------

-- ----------------------------
-- Table structure for domain_layer_fuzhu2
-- ----------------------------
DROP TABLE IF EXISTS `domain_layer_fuzhu2`;
CREATE TABLE `domain_layer_fuzhu2` (
  `TermID` int(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '术语ID，删除重复的主题（含有子主题的主题）',
  `TermName` varchar(255) DEFAULT NULL,
  `TermUrl` varchar(255) DEFAULT NULL,
  `TermLayer` int(20) DEFAULT NULL,
  `isCatalog` int(20) DEFAULT NULL COMMENT '该主题是不是Catalog页面的主题：1表示是，0表示不是',
  `ClassName` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`TermID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='note 是标记';

-- ----------------------------
-- Records of domain_layer_fuzhu2
-- ----------------------------

-- ----------------------------
-- Table structure for domain_layer_relation
-- ----------------------------
DROP TABLE IF EXISTS `domain_layer_relation`;
CREATE TABLE `domain_layer_relation` (
  `TopicRelationId` int(20) NOT NULL AUTO_INCREMENT COMMENT '术语关系ID，存储未处理的主题上下位关系（含有子主题的主题）',
  `Parent` varchar(255) DEFAULT NULL,
  `ParentLayer` int(20) DEFAULT NULL,
  `Child` varchar(255) DEFAULT NULL,
  `ChildLayer` int(20) DEFAULT NULL,
  `ClassName` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`TopicRelationId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of domain_layer_relation
-- ----------------------------

-- ----------------------------
-- Table structure for domain_topic
-- ----------------------------
DROP TABLE IF EXISTS `domain_topic`;
CREATE TABLE `domain_topic` (
  `TermID` int(20) unsigned NOT NULL AUTO_INCREMENT,
  `TermName` varchar(255) DEFAULT NULL,
  `TermUrl` varchar(255) DEFAULT NULL,
  `TermLayer` int(20) DEFAULT NULL,
  `ClassName` varchar(255) DEFAULT NULL,
  `ClassID` int(20) DEFAULT NULL,
  PRIMARY KEY (`TermID`)
) ENGINE=InnoDB AUTO_INCREMENT=90 DEFAULT CHARSET=utf8 COMMENT='note 是标记';

-- ----------------------------
-- Records of domain_topic
-- ----------------------------
INSERT INTO `domain_topic` VALUES ('1', '树状数组', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('2', '图论术语', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('3', '空字元串', 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('4', '线性探测', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('5', '相位阵列', 'https://zh.wikipedia.org/wiki/%E7%9B%B8%E4%BD%8D%E9%98%B5%E5%88%97', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('6', '完全二分图', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%88%86%E5%9B%BE', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('7', '邻接矩阵', 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('8', '树堆', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('9', '哈密顿图', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%AF%86%E9%A1%BF%E5%9B%BE', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('10', '系统发生树', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('11', '随机图', 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('12', '四叉树', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('13', '可变长数组', 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('14', '记录', 'https://zh.wikipedia.org/wiki/%E8%AE%B0%E5%BD%95', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('15', '双端队列', 'https://zh.wikipedia.org/wiki/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('16', '平衡树', 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('17', '多重关连数组', 'https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E5%85%B3%E8%BF%9E%E6%95%B0%E7%BB%84', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('18', '二叉堆', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('19', 'B+树', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('20', '弦图', 'https://zh.wikipedia.org/wiki/%E5%BC%A6%E5%9B%BE', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('21', '数据结构', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('22', '斐波那契堆', 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('23', '完美散列', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('24', '道路 (图论)', 'https://zh.wikipedia.org/wiki/%E9%81%93%E8%B7%AF+%28%E5%9B%BE%E8%AE%BA%29', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('25', '八叉树', 'https://zh.wikipedia.org/wiki/%E5%85%AB%E5%8F%89%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('26', '邻接矩阵', 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('27', '串列 (抽象资料型别)', 'https://zh.wikipedia.org/wiki/%E4%B8%B2%E5%88%97+%28%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB%29', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('28', '一笔画问题', 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('29', '霍夫曼编码', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('30', '2-3-4树', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('32', '连通图', 'https://zh.wikipedia.org/wiki/%E8%BF%9E%E9%80%9A%E5%9B%BE', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('33', '佩特森图', 'https://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('34', '碰撞 (计算机科学)', 'https://zh.wikipedia.org/wiki/%E7%A2%B0%E6%92%9E+%28%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%29', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('35', '原始型别', 'https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%AB', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('36', '替罪羊树', 'https://zh.wikipedia.org/wiki/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('37', '平面图 (图论)', 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E9%9D%A2%E5%9B%BE+%28%E5%9B%BE%E8%AE%BA%29', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('38', '正则图', 'https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('39', '完全图', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E5%85%A8%E5%9B%BE', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('40', '哈希表', 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('41', '集合 (资料结构)', 'https://zh.wikipedia.org/wiki/%E9%9B%86%E5%90%88+%28%E8%B5%84%E6%96%99%E7%BB%93%E6%9E%84%29', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('43', '朱迪矩阵', 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('44', '数组', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('45', 'K-d树', 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('46', '字符串', 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('47', '散列函数', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('48', '布隆过滤器', 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('49', '二分图', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('50', '抽象资料型别', 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('51', '堆 (数据结构)', 'https://zh.wikipedia.org/wiki/%E5%A0%86+%28%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%29', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('52', '2-3-4树', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('53', 'B树', 'https://zh.wikipedia.org/wiki/B%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('54', '二项堆', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('55', '线性杂凑', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%9D%82%E5%87%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('56', '双向链表', 'https://zh.wikipedia.org/wiki/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('57', '后缀树', 'https://zh.wikipedia.org/wiki/%E5%90%8E%E7%BC%80%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('58', '深度优先搜索', 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('59', '关联数组', 'https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('60', '资料类型', 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('61', '对话树', 'https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%AF%9D%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('62', '广度优先搜索', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('63', 'AVL树', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('64', '2-3树', 'https://zh.wikipedia.org/wiki/2-3%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('65', '堆栈', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('66', '线段树', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('67', '布尔 (数据类型)', 'https://zh.wikipedia.org/wiki/%E5%B8%83%E5%B0%94+%28%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%29', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('68', '笛卡尔树', 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('69', '树旋转', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('70', '链表', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('71', '二元搜寻树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('72', '伸展树', 'https://zh.wikipedia.org/wiki/%E4%BC%B8%E5%B1%95%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('73', '队列', 'https://zh.wikipedia.org/wiki/%E9%98%9F%E5%88%97', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('74', '树 (数据结构)', 'https://zh.wikipedia.org/wiki/%E6%A0%91+%28%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%29', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('75', '枚举', 'https://zh.wikipedia.org/wiki/%E6%9E%9A%E4%B8%BE', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('76', '有序对', 'https://zh.wikipedia.org/wiki/%E6%9C%89%E5%BA%8F%E5%AF%B9', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('77', 'Alpha-beta剪枝', 'https://zh.wikipedia.org/wiki/Alpha-beta%E5%89%AA%E6%9E%9D', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('78', '递归类型', 'https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E7%B1%BB%E5%9E%8B', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('79', 'AA树', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('80', '补图', 'https://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('81', '凯莱图', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('82', '复合型别', 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('83', '线图', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E5%9B%BE', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('84', '序列', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', null, '数据结构', '1');
INSERT INTO `domain_topic` VALUES ('85', '测试主题1', null, null, '测试课程', '2');
INSERT INTO `domain_topic` VALUES ('86', '测试主题2', null, null, '测试课程', '2');
INSERT INTO `domain_topic` VALUES ('89', 'test', null, null, '测试课程', '2');

-- ----------------------------
-- Table structure for domain_topic_relation
-- ----------------------------
DROP TABLE IF EXISTS `domain_topic_relation`;
CREATE TABLE `domain_topic_relation` (
  `Parent` varchar(255) DEFAULT NULL COMMENT '无重复的主题关系表格，算法跑的，需要人工参与，不适合自动构建',
  `Child` varchar(255) DEFAULT NULL,
  `ClassName` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of domain_topic_relation
-- ----------------------------
INSERT INTO `domain_topic_relation` VALUES ('树 (数据结构)', '2-3-4树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('资料类型', '集合 (资料结构)', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('树旋转', '红黑树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('字符串', '后缀树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('资料类型', '布尔 (数据类型)', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('资料类型', '哈希表', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('资料类型', '枚举', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('资料类型', '链表', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('哈希表', '碰撞 (计算机科学)', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('树 (数据结构)', 'B树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('数组', '相位阵列', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('资料类型', '字符串', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('二叉树', '线段树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('数据结构', '堆 (数据结构)', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('线段树', '树状数组', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('道路 (图论)', '哈密顿图', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('平衡树', 'AVL树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('资料类型', '原始型别', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('散列函数', '朱迪矩阵', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('二叉树', '树旋转', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('数组', '可变长数组', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('哈希表', '完美散列', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('树旋转', '笛卡尔树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('平衡树', '替罪羊树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('B树', 'B+树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('资料类型', '空字元串', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('资料类型', '递归类型', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('堆 (数据结构)', '二项堆', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('数据结构', '资料类型', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('抽象资料型别', '队列', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('二叉树', '霍夫曼编码', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('哈希表', '布隆过滤器', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('B树', '2-3树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('系统发生树', '二叉树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('资料类型', '双端队列', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('资料类型', '堆栈', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('资料类型', '复合型别', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('树旋转', '树堆', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('哈希表', '线性探测', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('树旋转', 'K-d树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('资料类型', '关联数组', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('平衡树', '伸展树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('平衡树', 'AA树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('正则图', '佩特森图', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('树旋转', '二元搜寻树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('抽象资料型别', '多重关连数组', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('抽象资料型别', '串列 (抽象资料型别)', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('树 (数据结构)', '系统发生树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('哈希表', '散列函数', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('哈希表', '序列', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('资料类型', '抽象资料型别', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('数据结构', '树 (数据结构)', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('树 (数据结构)', '八叉树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('树 (数据结构)', '对话树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('树旋转', '平衡树', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('二分图', '邻接矩阵', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('正则图', '完全图', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('堆 (数据结构)', '二叉堆', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('哈密顿图', '一笔画问题', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('数据结构', '数组', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('哈希表', '线性杂凑', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('资料类型', '记录', '数据结构');
INSERT INTO `domain_topic_relation` VALUES ('测试课程', '测试主题1', '测试课程');
INSERT INTO `domain_topic_relation` VALUES ('测试主题1', 'test', '测试课程');
INSERT INTO `domain_topic_relation` VALUES ('测试主题1', '测试主题2', '测试课程');

-- ----------------------------
-- Table structure for facet
-- ----------------------------
DROP TABLE IF EXISTS `facet`;
CREATE TABLE `facet` (
  `TermID` int(20) NOT NULL,
  `TermName` varchar(255) DEFAULT NULL,
  `FacetName` varchar(255) DEFAULT NULL,
  `FacetLayer` int(20) DEFAULT NULL,
  `ClassName` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of facet
-- ----------------------------
INSERT INTO `facet` VALUES ('1', '树状数组', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('1', '树状数组', '结构起源', '1', '数据结构');
INSERT INTO `facet` VALUES ('1', '树状数组', '操作', '1', '数据结构');
INSERT INTO `facet` VALUES ('1', '树状数组', '应用', '1', '数据结构');
INSERT INTO `facet` VALUES ('1', '树状数组', '预备函数', '2', '数据结构');
INSERT INTO `facet` VALUES ('1', '树状数组', '新建', '2', '数据结构');
INSERT INTO `facet` VALUES ('1', '树状数组', '修改', '2', '数据结构');
INSERT INTO `facet` VALUES ('1', '树状数组', '求和', '2', '数据结构');
INSERT INTO `facet` VALUES ('1', '树状数组', '复杂度', '2', '数据结构');
INSERT INTO `facet` VALUES ('1', '树状数组', '求逆序数', '2', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '基本术语', '1', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '相邻与度数', '1', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '连通性', '1', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '距离', '1', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '亏格', '1', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '带权图与网络', '1', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '图的方向', '1', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '图的着色', '1', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '不变量', '1', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '子图', '2', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '路径', '2', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '树', '2', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '团', '2', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '强连通分量', '2', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '结', '2', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '缩图', '2', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '嵌入', '2', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '独立集', '2', '数据结构');
INSERT INTO `facet` VALUES ('2', '图论术语', '有向无环图', '2', '数据结构');
INSERT INTO `facet` VALUES ('3', '空字元串', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('3', '空字元串', '特性', '1', '数据结构');
INSERT INTO `facet` VALUES ('3', '空字元串', '表示方式', '1', '数据结构');
INSERT INTO `facet` VALUES ('4', '线性探测', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('4', '线性探测', '操作', '1', '数据结构');
INSERT INTO `facet` VALUES ('4', '线性探测', '注解与参考文献', '1', '数据结构');
INSERT INTO `facet` VALUES ('4', '线性探测', '搜索', '2', '数据结构');
INSERT INTO `facet` VALUES ('4', '线性探测', '插入', '2', '数据结构');
INSERT INTO `facet` VALUES ('4', '线性探测', '删除', '2', '数据结构');
INSERT INTO `facet` VALUES ('5', '相位阵列', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('6', '完全二分图', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('6', '完全二分图', '定义', '1', '数据结构');
INSERT INTO `facet` VALUES ('6', '完全二分图', '例子', '1', '数据结构');
INSERT INTO `facet` VALUES ('6', '完全二分图', '性质', '1', '数据结构');
INSERT INTO `facet` VALUES ('7', '邻接矩阵', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('7', '邻接矩阵', '定义', '1', '数据结构');
INSERT INTO `facet` VALUES ('7', '邻接矩阵', '例子', '1', '数据结构');
INSERT INTO `facet` VALUES ('7', '邻接矩阵', '特性', '1', '数据结构');
INSERT INTO `facet` VALUES ('7', '邻接矩阵', '传球问题', '1', '数据结构');
INSERT INTO `facet` VALUES ('7', '邻接矩阵', '其他解法', '2', '数据结构');
INSERT INTO `facet` VALUES ('8', '树堆', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('8', '树堆', '介绍', '1', '数据结构');
INSERT INTO `facet` VALUES ('8', '树堆', '算法分析', '1', '数据结构');
INSERT INTO `facet` VALUES ('8', '树堆', '参考程序', '1', '数据结构');
INSERT INTO `facet` VALUES ('8', '树堆', '与其他结构的比较', '1', '数据结构');
INSERT INTO `facet` VALUES ('8', '树堆', '插入', '2', '数据结构');
INSERT INTO `facet` VALUES ('8', '树堆', '删除', '2', '数据结构');
INSERT INTO `facet` VALUES ('8', '树堆', '查找', '2', '数据结构');
INSERT INTO `facet` VALUES ('8', '树堆', 'Pascal', '2', '数据结构');
INSERT INTO `facet` VALUES ('8', '树堆', 'C++', '2', '数据结构');
INSERT INTO `facet` VALUES ('9', '哈密顿图', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('10', '系统发生树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('10', '系统发生树', '树的种类', '1', '数据结构');
INSERT INTO `facet` VALUES ('10', '系统发生树', '树的算法', '1', '数据结构');
INSERT INTO `facet` VALUES ('10', '系统发生树', '相关软件', '1', '数据结构');
INSERT INTO `facet` VALUES ('10', '系统发生树', '根', '2', '数据结构');
INSERT INTO `facet` VALUES ('10', '系统发生树', '矩阵法', '2', '数据结构');
INSERT INTO `facet` VALUES ('10', '系统发生树', '简约法', '2', '数据结构');
INSERT INTO `facet` VALUES ('10', '系统发生树', '最大似然法', '2', '数据结构');
INSERT INTO `facet` VALUES ('10', '系统发生树', '后验概率法', '2', '数据结构');
INSERT INTO `facet` VALUES ('10', '系统发生树', 'Phylip', '2', '数据结构');
INSERT INTO `facet` VALUES ('10', '系统发生树', 'ARB', '2', '数据结构');
INSERT INTO `facet` VALUES ('10', '系统发生树', 'MrBayes', '2', '数据结构');
INSERT INTO `facet` VALUES ('10', '系统发生树', 'BAMBE', '2', '数据结构');
INSERT INTO `facet` VALUES ('10', '系统发生树', '软件', '2', '数据结构');
INSERT INTO `facet` VALUES ('11', '随机图', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('11', '随机图', '定义与模型', '1', '数据结构');
INSERT INTO `facet` VALUES ('11', '随机图', '性质', '1', '数据结构');
INSERT INTO `facet` VALUES ('11', '随机图', '随机树', '1', '数据结构');
INSERT INTO `facet` VALUES ('11', '随机图', '参考来源', '1', '数据结构');
INSERT INTO `facet` VALUES ('12', '四叉树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('12', '四叉树', '形态', '1', '数据结构');
INSERT INTO `facet` VALUES ('12', '四叉树', '一些四元树的常用法', '1', '数据结构');
INSERT INTO `facet` VALUES ('12', '四叉树', '区辨说明', '1', '数据结构');
INSERT INTO `facet` VALUES ('12', '四叉树', '四元树区块', '2', '数据结构');
INSERT INTO `facet` VALUES ('12', '四叉树', '点四元树', '2', '数据结构');
INSERT INTO `facet` VALUES ('12', '四叉树', '边四元树', '2', '数据结构');
INSERT INTO `facet` VALUES ('12', '四叉树', '点四元树的节点结构', '3', '数据结构');
INSERT INTO `facet` VALUES ('13', '可变长数组', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('13', '可变长数组', '例子', '1', '数据结构');
INSERT INTO `facet` VALUES ('14', '记录', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('15', '双端队列', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('15', '双端队列', '操作', '1', '数据结构');
INSERT INTO `facet` VALUES ('16', '平衡树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('16', '平衡树', '基本操作', '1', '数据结构');
INSERT INTO `facet` VALUES ('16', '平衡树', '各种平衡树', '1', '数据结构');
INSERT INTO `facet` VALUES ('16', '平衡树', '其他类型', '1', '数据结构');
INSERT INTO `facet` VALUES ('16', '平衡树', '应用', '1', '数据结构');
INSERT INTO `facet` VALUES ('17', '多重关连数组', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('17', '多重关连数组', '使用模式', '1', '数据结构');
INSERT INTO `facet` VALUES ('17', '多重关连数组', '语言支持', '1', '数据结构');
INSERT INTO `facet` VALUES ('17', '多重关连数组', 'C++', '2', '数据结构');
INSERT INTO `facet` VALUES ('17', '多重关连数组', 'Dart', '2', '数据结构');
INSERT INTO `facet` VALUES ('18', '二叉堆', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('18', '二叉堆', '存储', '1', '数据结构');
INSERT INTO `facet` VALUES ('18', '二叉堆', '基本操作', '1', '数据结构');
INSERT INTO `facet` VALUES ('18', '二叉堆', '插入节点', '2', '数据结构');
INSERT INTO `facet` VALUES ('18', '二叉堆', '删除根节点', '2', '数据结构');
INSERT INTO `facet` VALUES ('18', '二叉堆', '构造二叉堆', '2', '数据结构');
INSERT INTO `facet` VALUES ('18', '二叉堆', '合并两个二叉堆', '2', '数据结构');
INSERT INTO `facet` VALUES ('19', 'B+树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('19', 'B+树', '节点结构', '1', '数据结构');
INSERT INTO `facet` VALUES ('19', 'B+树', '算法', '1', '数据结构');
INSERT INTO `facet` VALUES ('19', 'B+树', '注解', '1', '数据结构');
INSERT INTO `facet` VALUES ('19', 'B+树', '查找', '2', '数据结构');
INSERT INTO `facet` VALUES ('19', 'B+树', '插入', '2', '数据结构');
INSERT INTO `facet` VALUES ('19', 'B+树', '删除', '2', '数据结构');
INSERT INTO `facet` VALUES ('20', '弦图', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('21', '数据结构', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('21', '数据结构', '常见的数据结构', '1', '数据结构');
INSERT INTO `facet` VALUES ('22', '斐波那契堆', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('22', '斐波那契堆', '结构', '1', '数据结构');
INSERT INTO `facet` VALUES ('22', '斐波那契堆', '操作', '1', '数据结构');
INSERT INTO `facet` VALUES ('22', '斐波那契堆', '建立一个新的斐波纳契堆', '2', '数据结构');
INSERT INTO `facet` VALUES ('22', '斐波那契堆', '插入一个节点', '2', '数据结构');
INSERT INTO `facet` VALUES ('22', '斐波那契堆', '查找最小的节点', '2', '数据结构');
INSERT INTO `facet` VALUES ('22', '斐波那契堆', '合并两个斐波纳契堆', '2', '数据结构');
INSERT INTO `facet` VALUES ('22', '斐波那契堆', '释放（删除）最小的节点', '2', '数据结构');
INSERT INTO `facet` VALUES ('22', '斐波那契堆', '降低一个节点的键值', '2', '数据结构');
INSERT INTO `facet` VALUES ('22', '斐波那契堆', '删除节点', '2', '数据结构');
INSERT INTO `facet` VALUES ('23', '完美散列', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('23', '完美散列', '特性及使用', '1', '数据结构');
INSERT INTO `facet` VALUES ('23', '完美散列', '最小完美散列函数', '1', '数据结构');
INSERT INTO `facet` VALUES ('23', '完美散列', '请参阅', '1', '数据结构');
INSERT INTO `facet` VALUES ('23', '完美散列', '索引', '1', '数据结构');
INSERT INTO `facet` VALUES ('23', '完美散列', '进一步阅读', '1', '数据结构');
INSERT INTO `facet` VALUES ('24', '道路 (图论)', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('25', '八叉树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('25', '八叉树', '主要用途', '1', '数据结构');
INSERT INTO `facet` VALUES ('27', '串列 (抽象资料型别)', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('28', '一笔画问题', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('28', '一笔画问题', '问题的提出', '1', '数据结构');
INSERT INTO `facet` VALUES ('28', '一笔画问题', '一笔画定理', '1', '数据结构');
INSERT INTO `facet` VALUES ('28', '一笔画问题', '例子', '1', '数据结构');
INSERT INTO `facet` VALUES ('28', '一笔画问题', '一笔画问题与哈密顿问题', '1', '数据结构');
INSERT INTO `facet` VALUES ('28', '一笔画问题', '参考来源', '1', '数据结构');
INSERT INTO `facet` VALUES ('28', '一笔画问题', '定理一', '2', '数据结构');
INSERT INTO `facet` VALUES ('28', '一笔画问题', '定理二', '2', '数据结构');
INSERT INTO `facet` VALUES ('28', '一笔画问题', '有向图的一笔画', '2', '数据结构');
INSERT INTO `facet` VALUES ('28', '一笔画问题', '七桥问题', '2', '数据结构');
INSERT INTO `facet` VALUES ('28', '一笔画问题', '一个可以一笔画的例子', '2', '数据结构');
INSERT INTO `facet` VALUES ('29', '霍夫曼编码', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('29', '霍夫曼编码', '历史', '1', '数据结构');
INSERT INTO `facet` VALUES ('29', '霍夫曼编码', '问题定义与解法', '1', '数据结构');
INSERT INTO `facet` VALUES ('29', '霍夫曼编码', '实现方法', '1', '数据结构');
INSERT INTO `facet` VALUES ('29', '霍夫曼编码', '数据长度', '1', '数据结构');
INSERT INTO `facet` VALUES ('29', '霍夫曼编码', '示范程序', '1', '数据结构');
INSERT INTO `facet` VALUES ('29', '霍夫曼编码', '广义', '2', '数据结构');
INSERT INTO `facet` VALUES ('29', '霍夫曼编码', '狭义', '2', '数据结构');
INSERT INTO `facet` VALUES ('29', '霍夫曼编码', '示例', '2', '数据结构');
INSERT INTO `facet` VALUES ('29', '霍夫曼编码', '数据压缩', '2', '数据结构');
INSERT INTO `facet` VALUES ('29', '霍夫曼编码', '数据解压缩', '2', '数据结构');
INSERT INTO `facet` VALUES ('29', '霍夫曼编码', '演算过程', '3', '数据结构');
INSERT INTO `facet` VALUES ('30', '2-3-4树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('30', '2-3-4树', '背景', '1', '数据结构');
INSERT INTO `facet` VALUES ('31', '红黑树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('31', '红黑树', '用途和好处', '1', '数据结构');
INSERT INTO `facet` VALUES ('31', '红黑树', '性质', '1', '数据结构');
INSERT INTO `facet` VALUES ('31', '红黑树', '操作', '1', '数据结构');
INSERT INTO `facet` VALUES ('31', '红黑树', '渐进边界的证明', '1', '数据结构');
INSERT INTO `facet` VALUES ('31', '红黑树', '引用', '1', '数据结构');
INSERT INTO `facet` VALUES ('31', '红黑树', '插入', '2', '数据结构');
INSERT INTO `facet` VALUES ('31', '红黑树', '删除', '2', '数据结构');
INSERT INTO `facet` VALUES ('31', '红黑树', 'C++示例代码', '2', '数据结构');
INSERT INTO `facet` VALUES ('32', '连通图', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('32', '连通图', '严格定义', '1', '数据结构');
INSERT INTO `facet` VALUES ('32', '连通图', '相关概念', '1', '数据结构');
INSERT INTO `facet` VALUES ('32', '连通图', '性质', '1', '数据结构');
INSERT INTO `facet` VALUES ('32', '连通图', '参考来源', '1', '数据结构');
INSERT INTO `facet` VALUES ('33', '佩特森图', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('33', '佩特森图', '性质', '1', '数据结构');
INSERT INTO `facet` VALUES ('33', '佩特森图', '最……', '1', '数据结构');
INSERT INTO `facet` VALUES ('33', '佩特森图', '脚注', '1', '数据结构');
INSERT INTO `facet` VALUES ('34', '碰撞 (计算机科学)', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('35', '原始型别', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('35', '原始型别', '概览', '1', '数据结构');
INSERT INTO `facet` VALUES ('36', '替罪羊树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('37', '平面图 (图论)', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('38', '正则图', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('38', '正则图', '性质', '1', '数据结构');
INSERT INTO `facet` VALUES ('38', '正则图', '代数性质', '1', '数据结构');
INSERT INTO `facet` VALUES ('39', '完全图', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('40', '哈希表', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('40', '哈希表', '基本概念', '1', '数据结构');
INSERT INTO `facet` VALUES ('40', '哈希表', '构造散列函数', '1', '数据结构');
INSERT INTO `facet` VALUES ('40', '哈希表', '处理冲突', '1', '数据结构');
INSERT INTO `facet` VALUES ('40', '哈希表', '例程', '1', '数据结构');
INSERT INTO `facet` VALUES ('40', '哈希表', '查找效率', '1', '数据结构');
INSERT INTO `facet` VALUES ('40', '哈希表', '举例：Linux内核的bcache', '1', '数据结构');
INSERT INTO `facet` VALUES ('40', '哈希表', '载荷因子', '2', '数据结构');
INSERT INTO `facet` VALUES ('41', '集合 (资料结构)', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '定义', '1', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '类型', '1', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '存储方法', '1', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '访问方法', '1', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '转换', '1', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '顺序存储表示', '2', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '二叉链表存储表示', '2', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '三叉链表存储表示', '2', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '前(先)序、中序、后序遍历', '2', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '深度优先遍历', '2', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '广度优先遍历', '2', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '存储结构与基本操作', '2', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '二叉线索存储表示', '2', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '树的二叉链表存储表示', '3', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '树的二叉链表存储的基本操作', '3', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '存储结构', '3', '数据结构');
INSERT INTO `facet` VALUES ('42', '二叉树', '基本操作', '3', '数据结构');
INSERT INTO `facet` VALUES ('43', '朱迪矩阵', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('43', '朱迪矩阵', '术语', '1', '数据结构');
INSERT INTO `facet` VALUES ('43', '朱迪矩阵', '优势', '1', '数据结构');
INSERT INTO `facet` VALUES ('43', '朱迪矩阵', '算法', '1', '数据结构');
INSERT INTO `facet` VALUES ('43', '朱迪矩阵', '内存分配', '2', '数据结构');
INSERT INTO `facet` VALUES ('43', '朱迪矩阵', '速度', '2', '数据结构');
INSERT INTO `facet` VALUES ('44', '数组', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('44', '数组', '语义', '1', '数据结构');
INSERT INTO `facet` VALUES ('44', '数组', '多维数组', '1', '数据结构');
INSERT INTO `facet` VALUES ('44', '数组', '不完整的数组类型', '1', '数据结构');
INSERT INTO `facet` VALUES ('44', '数组', '可变长数组', '1', '数据结构');
INSERT INTO `facet` VALUES ('44', '数组', '程序设计', '1', '数据结构');
INSERT INTO `facet` VALUES ('44', '数组', 'C/C++标准中的数组', '2', '数据结构');
INSERT INTO `facet` VALUES ('44', '数组', '柔性数组成员', '2', '数据结构');
INSERT INTO `facet` VALUES ('44', '数组', '数组下标运算符', '3', '数据结构');
INSERT INTO `facet` VALUES ('45', 'K-d树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('45', 'K-d树', '简介', '1', '数据结构');
INSERT INTO `facet` VALUES ('45', 'K-d树', 'k-d树的运算', '1', '数据结构');
INSERT INTO `facet` VALUES ('45', 'K-d树', '创建k-d树', '2', '数据结构');
INSERT INTO `facet` VALUES ('45', 'K-d树', '插入元素', '2', '数据结构');
INSERT INTO `facet` VALUES ('45', 'K-d树', '移除元素', '2', '数据结构');
INSERT INTO `facet` VALUES ('45', 'K-d树', '平衡', '2', '数据结构');
INSERT INTO `facet` VALUES ('45', 'K-d树', '最邻近搜索', '2', '数据结构');
INSERT INTO `facet` VALUES ('46', '字符串', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('46', '字符串', '形式理论', '1', '数据结构');
INSERT INTO `facet` VALUES ('46', '字符串', '字符串数据类型', '1', '数据结构');
INSERT INTO `facet` VALUES ('46', '字符串', '字符串实用程序', '1', '数据结构');
INSERT INTO `facet` VALUES ('46', '字符串', '字符串操作', '1', '数据结构');
INSERT INTO `facet` VALUES ('46', '字符串', '算法', '1', '数据结构');
INSERT INTO `facet` VALUES ('46', '字符串', '串接和子串', '2', '数据结构');
INSERT INTO `facet` VALUES ('46', '字符串', '词典排序', '2', '数据结构');
INSERT INTO `facet` VALUES ('46', '字符串', '字符串运算', '2', '数据结构');
INSERT INTO `facet` VALUES ('46', '字符串', '字符串长度', '2', '数据结构');
INSERT INTO `facet` VALUES ('46', '字符串', '字符编码', '2', '数据结构');
INSERT INTO `facet` VALUES ('46', '字符串', '实现', '2', '数据结构');
INSERT INTO `facet` VALUES ('46', '字符串', '表示法', '2', '数据结构');
INSERT INTO `facet` VALUES ('47', '散列函数', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('47', '散列函数', '散列函数的性质', '1', '数据结构');
INSERT INTO `facet` VALUES ('47', '散列函数', '散列函数的应用', '1', '数据结构');
INSERT INTO `facet` VALUES ('47', '散列函数', '术语来源', '1', '数据结构');
INSERT INTO `facet` VALUES ('47', '散列函数', '参阅', '1', '数据结构');
INSERT INTO `facet` VALUES ('47', '散列函数', '加密', '2', '数据结构');
INSERT INTO `facet` VALUES ('47', '散列函数', '确保传递真实的信息', '2', '数据结构');
INSERT INTO `facet` VALUES ('47', '散列函数', '散列表', '2', '数据结构');
INSERT INTO `facet` VALUES ('47', '散列函数', '错误校正', '2', '数据结构');
INSERT INTO `facet` VALUES ('47', '散列函数', '语音识别', '2', '数据结构');
INSERT INTO `facet` VALUES ('47', '散列函数', 'Rabin-Karp字符串搜索算法', '2', '数据结构');
INSERT INTO `facet` VALUES ('48', '布隆过滤器', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('48', '布隆过滤器', '基本概念', '1', '数据结构');
INSERT INTO `facet` VALUES ('48', '布隆过滤器', '优点', '1', '数据结构');
INSERT INTO `facet` VALUES ('48', '布隆过滤器', '缺点', '1', '数据结构');
INSERT INTO `facet` VALUES ('49', '二分图', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('49', '二分图', '特性', '1', '数据结构');
INSERT INTO `facet` VALUES ('49', '二分图', '图为二分图当且仅当', '2', '数据结构');
INSERT INTO `facet` VALUES ('50', '抽象资料型别', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('50', '抽象资料型别', '示例', '1', '数据结构');
INSERT INTO `facet` VALUES ('50', '抽象资料型别', '接口和实现的分离', '1', '数据结构');
INSERT INTO `facet` VALUES ('50', '抽象资料型别', '抽象数据结构', '1', '数据结构');
INSERT INTO `facet` VALUES ('50', '抽象资料型别', '内置抽象数据类型', '1', '数据结构');
INSERT INTO `facet` VALUES ('50', '抽象资料型别', '实际示例', '1', '数据结构');
INSERT INTO `facet` VALUES ('50', '抽象资料型别', '参阅', '1', '数据结构');
INSERT INTO `facet` VALUES ('50', '抽象资料型别', '作为抽象数据类型的有理数', '2', '数据结构');
INSERT INTO `facet` VALUES ('50', '抽象资料型别', '堆栈', '2', '数据结构');
INSERT INTO `facet` VALUES ('50', '抽象资料型别', '接口', '3', '数据结构');
INSERT INTO `facet` VALUES ('50', '抽象资料型别', '用法', '3', '数据结构');
INSERT INTO `facet` VALUES ('50', '抽象资料型别', '各种实现', '3', '数据结构');
INSERT INTO `facet` VALUES ('51', '堆 (数据结构)', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('53', 'B树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('53', 'B树', '概述', '1', '数据结构');
INSERT INTO `facet` VALUES ('53', 'B树', '数据库的问题', '1', '数据结构');
INSERT INTO `facet` VALUES ('53', 'B树', '变体', '2', '数据结构');
INSERT INTO `facet` VALUES ('53', 'B树', '名字取义', '2', '数据结构');
INSERT INTO `facet` VALUES ('53', 'B树', '已排序文件的查找时间', '2', '数据结构');
INSERT INTO `facet` VALUES ('53', 'B树', '提升查找的索引', '2', '数据结构');
INSERT INTO `facet` VALUES ('53', 'B树', '插入和删除带来的麻烦', '2', '数据结构');
INSERT INTO `facet` VALUES ('53', 'B树', 'B树运用的理念', '2', '数据结构');
INSERT INTO `facet` VALUES ('53', 'B树', 'B树的弊端', '2', '数据结构');
INSERT INTO `facet` VALUES ('54', '二项堆', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('54', '二项堆', '二项树', '1', '数据结构');
INSERT INTO `facet` VALUES ('54', '二项堆', '二项堆', '1', '数据结构');
INSERT INTO `facet` VALUES ('54', '二项堆', '二项堆的操作', '1', '数据结构');
INSERT INTO `facet` VALUES ('54', '二项堆', '运行时间', '1', '数据结构');
INSERT INTO `facet` VALUES ('54', '二项堆', '合并', '2', '数据结构');
INSERT INTO `facet` VALUES ('54', '二项堆', '插入', '2', '数据结构');
INSERT INTO `facet` VALUES ('54', '二项堆', '查找最小关键字所在结点', '2', '数据结构');
INSERT INTO `facet` VALUES ('54', '二项堆', '删除最小关键字所在结点', '2', '数据结构');
INSERT INTO `facet` VALUES ('54', '二项堆', '减小关键字的值', '2', '数据结构');
INSERT INTO `facet` VALUES ('54', '二项堆', '删除', '2', '数据结构');
INSERT INTO `facet` VALUES ('55', '线性杂凑', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('55', '线性杂凑', '算法', '1', '数据结构');
INSERT INTO `facet` VALUES ('55', '线性杂凑', '插入', '2', '数据结构');
INSERT INTO `facet` VALUES ('56', '双向链表', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('57', '后缀树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('58', '深度优先搜索', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('58', '深度优先搜索', 'C++的实现', '1', '数据结构');
INSERT INTO `facet` VALUES ('59', '关联数组', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('60', '资料类型', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('60', '资料类型', '机器中的数据类型', '1', '数据结构');
INSERT INTO `facet` VALUES ('60', '资料类型', '原始数据类型', '1', '数据结构');
INSERT INTO `facet` VALUES ('60', '资料类型', '复合类型', '1', '数据结构');
INSERT INTO `facet` VALUES ('60', '资料类型', '数值范围', '1', '数据结构');
INSERT INTO `facet` VALUES ('60', '资料类型', '数据结构', '1', '数据结构');
INSERT INTO `facet` VALUES ('60', '资料类型', '抽象类型', '1', '数据结构');
INSERT INTO `facet` VALUES ('60', '资料类型', '参阅', '1', '数据结构');
INSERT INTO `facet` VALUES ('61', '对话树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('61', '对话树', '脚注', '1', '数据结构');
INSERT INTO `facet` VALUES ('62', '广度优先搜索', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('62', '广度优先搜索', '作法', '1', '数据结构');
INSERT INTO `facet` VALUES ('62', '广度优先搜索', '实现方法', '1', '数据结构');
INSERT INTO `facet` VALUES ('62', '广度优先搜索', '特性', '1', '数据结构');
INSERT INTO `facet` VALUES ('62', '广度优先搜索', '广度优先搜索算法的应用', '1', '数据结构');
INSERT INTO `facet` VALUES ('62', '广度优先搜索', 'C 的实现', '2', '数据结构');
INSERT INTO `facet` VALUES ('62', '广度优先搜索', 'C++ 的实现', '2', '数据结构');
INSERT INTO `facet` VALUES ('62', '广度优先搜索', '空间复杂度', '2', '数据结构');
INSERT INTO `facet` VALUES ('62', '广度优先搜索', '时间复杂度', '2', '数据结构');
INSERT INTO `facet` VALUES ('62', '广度优先搜索', '完全性', '2', '数据结构');
INSERT INTO `facet` VALUES ('62', '广度优先搜索', '最佳解', '2', '数据结构');
INSERT INTO `facet` VALUES ('62', '广度优先搜索', '寻找连接元件', '2', '数据结构');
INSERT INTO `facet` VALUES ('62', '广度优先搜索', '测试是否二分图', '2', '数据结构');
INSERT INTO `facet` VALUES ('62', '广度优先搜索', '应用于电脑游戏中平面网格', '2', '数据结构');
INSERT INTO `facet` VALUES ('63', 'AVL树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('63', 'AVL树', '操作', '1', '数据结构');
INSERT INTO `facet` VALUES ('63', 'AVL树', '实现描述', '1', '数据结构');
INSERT INTO `facet` VALUES ('63', 'AVL树', 'AVL节点数计算', '1', '数据结构');
INSERT INTO `facet` VALUES ('63', 'AVL树', '引用', '1', '数据结构');
INSERT INTO `facet` VALUES ('63', 'AVL树', '删除', '2', '数据结构');
INSERT INTO `facet` VALUES ('63', 'AVL树', '搜寻', '2', '数据结构');
INSERT INTO `facet` VALUES ('64', '2-3树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('64', '2-3树', '链接', '1', '数据结构');
INSERT INTO `facet` VALUES ('65', '堆栈', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('65', '堆栈', '操作', '1', '数据结构');
INSERT INTO `facet` VALUES ('65', '堆栈', '特点', '1', '数据结构');
INSERT INTO `facet` VALUES ('65', '堆栈', '抽象定义', '1', '数据结构');
INSERT INTO `facet` VALUES ('65', '堆栈', '软件堆栈', '1', '数据结构');
INSERT INTO `facet` VALUES ('65', '堆栈', '硬件堆栈', '1', '数据结构');
INSERT INTO `facet` VALUES ('65', '堆栈', '堆叠的应用', '1', '数据结构');
INSERT INTO `facet` VALUES ('65', '堆栈', '阵列堆叠', '2', '数据结构');
INSERT INTO `facet` VALUES ('65', '堆栈', '串列堆叠', '2', '数据结构');
INSERT INTO `facet` VALUES ('65', '堆栈', '硬件支持', '2', '数据结构');
INSERT INTO `facet` VALUES ('66', '线段树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('66', '线段树', '基本操作', '1', '数据结构');
INSERT INTO `facet` VALUES ('66', '线段树', '变种', '1', '数据结构');
INSERT INTO `facet` VALUES ('66', '线段树', '相关链接', '1', '数据结构');
INSERT INTO `facet` VALUES ('66', '线段树', '节点数据向上更新', '2', '数据结构');
INSERT INTO `facet` VALUES ('66', '线段树', '节点懒惰标记下推', '2', '数据结构');
INSERT INTO `facet` VALUES ('66', '线段树', '建树', '2', '数据结构');
INSERT INTO `facet` VALUES ('66', '线段树', '更新', '2', '数据结构');
INSERT INTO `facet` VALUES ('66', '线段树', '区间查询', '2', '数据结构');
INSERT INTO `facet` VALUES ('67', '布尔 (数据类型)', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('68', '笛卡尔树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('68', '笛卡尔树', '定义', '1', '数据结构');
INSERT INTO `facet` VALUES ('68', '笛卡尔树', '笛卡尔树应用', '1', '数据结构');
INSERT INTO `facet` VALUES ('68', '笛卡尔树', 'treap', '1', '数据结构');
INSERT INTO `facet` VALUES ('68', '笛卡尔树', '范围最值查询与最低公共祖先', '2', '数据结构');
INSERT INTO `facet` VALUES ('69', '树旋转', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('69', '树旋转', '图示', '1', '数据结构');
INSERT INTO `facet` VALUES ('69', '树旋转', '实现', '1', '数据结构');
INSERT INTO `facet` VALUES ('69', '树旋转', '旋转距离', '1', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '历史', '1', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '结构', '1', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '链表的应用', '1', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', 'C代码实例', '1', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', 'C宏实例', '1', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '常见用途', '1', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '单向链表', '2', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '双向链表', '2', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '循环链表', '2', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '块状链表', '2', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '其它扩展', '2', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '存储结构', '2', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '接口声明', '2', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '接口实现', '2', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '其他数据结构', '2', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '类型确定', '3', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '初始化和销毁', '3', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '节点插入', '3', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '遍历', '3', '数据结构');
INSERT INTO `facet` VALUES ('70', '链表', '删除和查找', '3', '数据结构');
INSERT INTO `facet` VALUES ('71', '二元搜寻树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('71', '二元搜寻树', '二叉搜索树的查找算法', '1', '数据结构');
INSERT INTO `facet` VALUES ('71', '二元搜寻树', '在二叉搜索树插入节点的算法', '1', '数据结构');
INSERT INTO `facet` VALUES ('71', '二元搜寻树', '在二叉查找树删除结点的算法', '1', '数据结构');
INSERT INTO `facet` VALUES ('71', '二元搜寻树', '二叉查找树的遍历', '1', '数据结构');
INSERT INTO `facet` VALUES ('71', '二元搜寻树', '排序（或称构造）一棵二叉查找树', '1', '数据结构');
INSERT INTO `facet` VALUES ('71', '二元搜寻树', '二叉查找树性能分析', '1', '数据结构');
INSERT INTO `facet` VALUES ('71', '二元搜寻树', '二叉查找树的优化', '1', '数据结构');
INSERT INTO `facet` VALUES ('72', '伸展树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('72', '伸展树', '优点', '1', '数据结构');
INSERT INTO `facet` VALUES ('72', '伸展树', '缺点', '1', '数据结构');
INSERT INTO `facet` VALUES ('72', '伸展树', '实现', '1', '数据结构');
INSERT INTO `facet` VALUES ('72', '伸展树', '参考来源', '1', '数据结构');
INSERT INTO `facet` VALUES ('73', '队列', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('73', '队列', '阵列队列', '1', '数据结构');
INSERT INTO `facet` VALUES ('73', '队列', '单链队列', '2', '数据结构');
INSERT INTO `facet` VALUES ('73', '队列', '循环队列', '2', '数据结构');
INSERT INTO `facet` VALUES ('74', '树 (数据结构)', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('75', '枚举', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('76', '有序对', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('76', '有序对', '一般性', '1', '数据结构');
INSERT INTO `facet` VALUES ('76', '有序对', '有序对的集合论定义', '1', '数据结构');
INSERT INTO `facet` VALUES ('76', '有序对', '引用', '1', '数据结构');
INSERT INTO `facet` VALUES ('76', '有序对', '标准 Kuratowski 定义', '2', '数据结构');
INSERT INTO `facet` VALUES ('76', '有序对', '变体定义', '2', '数据结构');
INSERT INTO `facet` VALUES ('76', '有序对', '证明有序对的特征性质', '2', '数据结构');
INSERT INTO `facet` VALUES ('76', '有序对', 'Quine-Rosser 定义', '2', '数据结构');
INSERT INTO `facet` VALUES ('76', '有序对', 'Morse 定义', '2', '数据结构');
INSERT INTO `facet` VALUES ('77', 'Alpha-beta剪枝', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('77', 'Alpha-beta剪枝', '历史', '1', '数据结构');
INSERT INTO `facet` VALUES ('77', 'Alpha-beta剪枝', '对原版最小-最大算法的改进', '1', '数据结构');
INSERT INTO `facet` VALUES ('77', 'Alpha-beta剪枝', '伪代码', '1', '数据结构');
INSERT INTO `facet` VALUES ('78', '递归类型', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('78', '递归类型', '示例', '1', '数据结构');
INSERT INTO `facet` VALUES ('79', 'AA树', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('79', 'AA树', '旋转平衡', '1', '数据结构');
INSERT INTO `facet` VALUES ('79', 'AA树', '插入', '1', '数据结构');
INSERT INTO `facet` VALUES ('79', 'AA树', '删除', '1', '数据结构');
INSERT INTO `facet` VALUES ('79', 'AA树', '效能', '1', '数据结构');
INSERT INTO `facet` VALUES ('79', 'AA树', '引用', '1', '数据结构');
INSERT INTO `facet` VALUES ('80', '补图', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('80', '补图', '正式建立法', '1', '数据结构');
INSERT INTO `facet` VALUES ('80', '补图', '应用与范例', '1', '数据结构');
INSERT INTO `facet` VALUES ('81', '凯莱图', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('81', '凯莱图', '定义', '1', '数据结构');
INSERT INTO `facet` VALUES ('81', '凯莱图', '例子', '1', '数据结构');
INSERT INTO `facet` VALUES ('81', '凯莱图', '特征', '1', '数据结构');
INSERT INTO `facet` VALUES ('81', '凯莱图', '基本性质', '1', '数据结构');
INSERT INTO `facet` VALUES ('81', '凯莱图', 'Schreier陪集图', '1', '数据结构');
INSERT INTO `facet` VALUES ('81', '凯莱图', '与群论的关系', '1', '数据结构');
INSERT INTO `facet` VALUES ('82', '复合型别', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('82', '复合型别', 'C/C++', '1', '数据结构');
INSERT INTO `facet` VALUES ('82', '复合型别', '原始子类型检查', '1', '数据结构');
INSERT INTO `facet` VALUES ('82', '复合型别', '参阅', '1', '数据结构');
INSERT INTO `facet` VALUES ('83', '线图', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('83', '线图', '性质', '1', '数据结构');
INSERT INTO `facet` VALUES ('84', '序列', '摘要', '1', '数据结构');
INSERT INTO `facet` VALUES ('84', '序列', '例子和符号', '1', '数据结构');
INSERT INTO `facet` VALUES ('84', '序列', '序列的形式和性质', '1', '数据结构');
INSERT INTO `facet` VALUES ('74', '树 (数据结构)', '定义', '1', '数据结构');
INSERT INTO `facet` VALUES ('74', '树 (数据结构)', '相关术语', '1', '数据结构');
INSERT INTO `facet` VALUES ('74', '树 (数据结构)', '种类', '1', '数据结构');
INSERT INTO `facet` VALUES ('74', '树 (数据结构)', '深度', '1', '数据结构');
INSERT INTO `facet` VALUES ('74', '树 (数据结构)', '表示方法', '1', '数据结构');
INSERT INTO `facet` VALUES ('51', '堆 (数据结构)', '定义', '1', '数据结构');
INSERT INTO `facet` VALUES ('74', '树 (数据结构)', '父节点表示法', '1', '数据结构');
INSERT INTO `facet` VALUES ('51', '堆 (数据结构)', '性质', '1', '数据结构');
INSERT INTO `facet` VALUES ('51', '堆 (数据结构)', '操作', '1', '数据结构');
INSERT INTO `facet` VALUES ('51', '堆 (数据结构)', '例程', '1', '数据结构');
INSERT INTO `facet` VALUES ('51', '堆 (数据结构)', '应用', '1', '数据结构');
INSERT INTO `facet` VALUES ('51', '堆 (数据结构)', '堆排序', '2', '数据结构');
INSERT INTO `facet` VALUES ('51', '堆 (数据结构)', '事件模拟', '2', '数据结构');
INSERT INTO `facet` VALUES ('85', '测试主题1', '测试分面1', '1', '测试课程');
INSERT INTO `facet` VALUES ('85', '测试主题1', '测试分面2', '2', '测试课程');
INSERT INTO `facet` VALUES ('85', '测试主题1', '测试分面3', '3', '测试课程');
INSERT INTO `facet` VALUES ('86', '测试主题2', '分面1', '1', '测试课程');
INSERT INTO `facet` VALUES ('86', '测试主题2', '分面2', '2', '测试课程');
INSERT INTO `facet` VALUES ('86', '测试主题2', '分面3', '3', '测试课程');
INSERT INTO `facet` VALUES ('86', '测试主题2', '分面4', '1', '测试课程');
INSERT INTO `facet` VALUES ('86', '测试主题2', '分面5', '2', '测试课程');
INSERT INTO `facet` VALUES ('89', 'test', 'facet1', '1', '测试课程');
INSERT INTO `facet` VALUES ('89', 'test', 'facet2', '2', '测试课程');
INSERT INTO `facet` VALUES ('89', 'test', 'facet3', '3', '测试课程');

-- ----------------------------
-- Table structure for facet_relation
-- ----------------------------
DROP TABLE IF EXISTS `facet_relation`;
CREATE TABLE `facet_relation` (
  `ChildFacet` varchar(255) DEFAULT NULL,
  `ChildLayer` int(20) DEFAULT NULL,
  `ParentFacet` varchar(255) DEFAULT NULL,
  `ParentLayer` int(20) DEFAULT NULL,
  `TermID` int(20) NOT NULL,
  `TermName` varchar(255) DEFAULT NULL,
  `ClassName` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of facet_relation
-- ----------------------------
INSERT INTO `facet_relation` VALUES ('新建', '2', '操作', '1', '1', '树状数组', '数据结构');
INSERT INTO `facet_relation` VALUES ('修改', '2', '操作', '1', '1', '树状数组', '数据结构');
INSERT INTO `facet_relation` VALUES ('求和', '2', '操作', '1', '1', '树状数组', '数据结构');
INSERT INTO `facet_relation` VALUES ('求逆序数', '2', '应用', '1', '1', '树状数组', '数据结构');
INSERT INTO `facet_relation` VALUES ('子图', '2', '基本术语', '1', '2', '图论术语', '数据结构');
INSERT INTO `facet_relation` VALUES ('路径', '2', '基本术语', '1', '2', '图论术语', '数据结构');
INSERT INTO `facet_relation` VALUES ('树', '2', '基本术语', '1', '2', '图论术语', '数据结构');
INSERT INTO `facet_relation` VALUES ('团', '2', '基本术语', '1', '2', '图论术语', '数据结构');
INSERT INTO `facet_relation` VALUES ('独立集', '2', '相邻与度数', '1', '2', '图论术语', '数据结构');
INSERT INTO `facet_relation` VALUES ('有向无环图', '2', '图的方向', '1', '2', '图论术语', '数据结构');
INSERT INTO `facet_relation` VALUES ('搜索', '2', '操作', '1', '4', '线性探测', '数据结构');
INSERT INTO `facet_relation` VALUES ('插入', '2', '操作', '1', '4', '线性探测', '数据结构');
INSERT INTO `facet_relation` VALUES ('删除', '2', '操作', '1', '4', '线性探测', '数据结构');
INSERT INTO `facet_relation` VALUES ('其他解法', '2', '传球问题', '1', '7', '邻接矩阵', '数据结构');
INSERT INTO `facet_relation` VALUES ('插入', '2', '介绍', '1', '8', '树堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('删除', '2', '介绍', '1', '8', '树堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('查找', '2', '介绍', '1', '8', '树堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('Pascal', '2', '参考程序', '1', '8', '树堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('C++', '2', '参考程序', '1', '8', '树堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('根', '2', '树的种类', '1', '10', '系统发生树', '数据结构');
INSERT INTO `facet_relation` VALUES ('矩阵法', '2', '树的算法', '1', '10', '系统发生树', '数据结构');
INSERT INTO `facet_relation` VALUES ('简约法', '2', '树的算法', '1', '10', '系统发生树', '数据结构');
INSERT INTO `facet_relation` VALUES ('最大似然法', '2', '树的算法', '1', '10', '系统发生树', '数据结构');
INSERT INTO `facet_relation` VALUES ('后验概率法', '2', '树的算法', '1', '10', '系统发生树', '数据结构');
INSERT INTO `facet_relation` VALUES ('Phylip', '2', '相关软件', '1', '10', '系统发生树', '数据结构');
INSERT INTO `facet_relation` VALUES ('ARB', '2', '相关软件', '1', '10', '系统发生树', '数据结构');
INSERT INTO `facet_relation` VALUES ('MrBayes', '2', '相关软件', '1', '10', '系统发生树', '数据结构');
INSERT INTO `facet_relation` VALUES ('BAMBE', '2', '相关软件', '1', '10', '系统发生树', '数据结构');
INSERT INTO `facet_relation` VALUES ('软件', '2', '相关软件', '1', '10', '系统发生树', '数据结构');
INSERT INTO `facet_relation` VALUES ('四元树区块', '2', '形态', '1', '12', '四叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('点四元树', '2', '形态', '1', '12', '四叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('点四元树的节点结构', '3', '点四元树', '2', '12', '四叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('边四元树', '2', '形态', '1', '12', '四叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('C++', '2', '语言支持', '1', '17', '多重关连数组', '数据结构');
INSERT INTO `facet_relation` VALUES ('Dart', '2', '语言支持', '1', '17', '多重关连数组', '数据结构');
INSERT INTO `facet_relation` VALUES ('插入节点', '2', '基本操作', '1', '18', '二叉堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('删除根节点', '2', '基本操作', '1', '18', '二叉堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('构造二叉堆', '2', '基本操作', '1', '18', '二叉堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('合并两个二叉堆', '2', '基本操作', '1', '18', '二叉堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('查找', '2', '算法', '1', '19', 'B+树', '数据结构');
INSERT INTO `facet_relation` VALUES ('插入', '2', '算法', '1', '19', 'B+树', '数据结构');
INSERT INTO `facet_relation` VALUES ('删除', '2', '算法', '1', '19', 'B+树', '数据结构');
INSERT INTO `facet_relation` VALUES ('建立一个新的斐波纳契堆', '2', '操作', '1', '22', '斐波那契堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('插入一个节点', '2', '操作', '1', '22', '斐波那契堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('查找最小的节点', '2', '操作', '1', '22', '斐波那契堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('合并两个斐波纳契堆', '2', '操作', '1', '22', '斐波那契堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('释放（删除）最小的节点', '2', '操作', '1', '22', '斐波那契堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('降低一个节点的键值', '2', '操作', '1', '22', '斐波那契堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('删除节点', '2', '操作', '1', '22', '斐波那契堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('定理一', '2', '一笔画定理', '1', '28', '一笔画问题', '数据结构');
INSERT INTO `facet_relation` VALUES ('定理二', '2', '一笔画定理', '1', '28', '一笔画问题', '数据结构');
INSERT INTO `facet_relation` VALUES ('有向图的一笔画', '2', '一笔画定理', '1', '28', '一笔画问题', '数据结构');
INSERT INTO `facet_relation` VALUES ('七桥问题', '2', '例子', '1', '28', '一笔画问题', '数据结构');
INSERT INTO `facet_relation` VALUES ('一个可以一笔画的例子', '2', '例子', '1', '28', '一笔画问题', '数据结构');
INSERT INTO `facet_relation` VALUES ('广义', '2', '问题定义与解法', '1', '29', '霍夫曼编码', '数据结构');
INSERT INTO `facet_relation` VALUES ('狭义', '2', '问题定义与解法', '1', '29', '霍夫曼编码', '数据结构');
INSERT INTO `facet_relation` VALUES ('示例', '2', '问题定义与解法', '1', '29', '霍夫曼编码', '数据结构');
INSERT INTO `facet_relation` VALUES ('演算过程', '3', '示例', '2', '29', '霍夫曼编码', '数据结构');
INSERT INTO `facet_relation` VALUES ('数据压缩', '2', '实现方法', '1', '29', '霍夫曼编码', '数据结构');
INSERT INTO `facet_relation` VALUES ('数据解压缩', '2', '实现方法', '1', '29', '霍夫曼编码', '数据结构');
INSERT INTO `facet_relation` VALUES ('插入', '2', '操作', '1', '31', '红黑树', '数据结构');
INSERT INTO `facet_relation` VALUES ('删除', '2', '操作', '1', '31', '红黑树', '数据结构');
INSERT INTO `facet_relation` VALUES ('C++示例代码', '2', '操作', '1', '31', '红黑树', '数据结构');
INSERT INTO `facet_relation` VALUES ('载荷因子', '2', '查找效率', '1', '40', '哈希表', '数据结构');
INSERT INTO `facet_relation` VALUES ('顺序存储表示', '2', '存储方法', '1', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('存储结构', '3', '顺序存储表示', '2', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('基本操作', '3', '顺序存储表示', '2', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('二叉链表存储表示', '2', '存储方法', '1', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('存储结构', '3', '二叉链表存储表示', '2', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('基本操作', '3', '二叉链表存储表示', '2', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('三叉链表存储表示', '2', '存储方法', '1', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('存储结构', '3', '三叉链表存储表示', '2', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('基本操作', '3', '三叉链表存储表示', '2', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('前(先)序、中序、后序遍历', '2', '访问方法', '1', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('深度优先遍历', '2', '访问方法', '1', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('广度优先遍历', '2', '访问方法', '1', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('存储结构与基本操作', '2', '转换', '1', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('树的二叉链表存储表示', '3', '存储结构与基本操作', '2', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('树的二叉链表存储的基本操作', '3', '存储结构与基本操作', '2', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('二叉线索存储表示', '2', '线索二叉树 (threaded binary tree)', '1', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('存储结构', '3', '二叉线索存储表示', '2', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('基本操作', '3', '二叉线索存储表示', '2', '42', '二叉树', '数据结构');
INSERT INTO `facet_relation` VALUES ('内存分配', '2', '优势', '1', '43', '朱迪矩阵', '数据结构');
INSERT INTO `facet_relation` VALUES ('速度', '2', '优势', '1', '43', '朱迪矩阵', '数据结构');
INSERT INTO `facet_relation` VALUES ('C/C++标准中的数组', '2', '语义', '1', '44', '数组', '数据结构');
INSERT INTO `facet_relation` VALUES ('数组下标运算符', '3', 'C/C++标准中的数组', '2', '44', '数组', '数据结构');
INSERT INTO `facet_relation` VALUES ('柔性数组成员', '2', '不完整的数组类型', '1', '44', '数组', '数据结构');
INSERT INTO `facet_relation` VALUES ('创建k-d树', '2', 'k-d树的运算', '1', '45', 'K-d树', '数据结构');
INSERT INTO `facet_relation` VALUES ('插入元素', '2', 'k-d树的运算', '1', '45', 'K-d树', '数据结构');
INSERT INTO `facet_relation` VALUES ('移除元素', '2', 'k-d树的运算', '1', '45', 'K-d树', '数据结构');
INSERT INTO `facet_relation` VALUES ('平衡', '2', 'k-d树的运算', '1', '45', 'K-d树', '数据结构');
INSERT INTO `facet_relation` VALUES ('最邻近搜索', '2', 'k-d树的运算', '1', '45', 'K-d树', '数据结构');
INSERT INTO `facet_relation` VALUES ('串接和子串', '2', '形式理论', '1', '46', '字符串', '数据结构');
INSERT INTO `facet_relation` VALUES ('词典排序', '2', '形式理论', '1', '46', '字符串', '数据结构');
INSERT INTO `facet_relation` VALUES ('字符串运算', '2', '形式理论', '1', '46', '字符串', '数据结构');
INSERT INTO `facet_relation` VALUES ('字符串长度', '2', '字符串数据类型', '1', '46', '字符串', '数据结构');
INSERT INTO `facet_relation` VALUES ('字符编码', '2', '字符串数据类型', '1', '46', '字符串', '数据结构');
INSERT INTO `facet_relation` VALUES ('实现', '2', '字符串数据类型', '1', '46', '字符串', '数据结构');
INSERT INTO `facet_relation` VALUES ('表示法', '2', '字符串数据类型', '1', '46', '字符串', '数据结构');
INSERT INTO `facet_relation` VALUES ('加密', '2', '散列函数的应用', '1', '47', '散列函数', '数据结构');
INSERT INTO `facet_relation` VALUES ('确保传递真实的信息', '2', '散列函数的应用', '1', '47', '散列函数', '数据结构');
INSERT INTO `facet_relation` VALUES ('散列表', '2', '散列函数的应用', '1', '47', '散列函数', '数据结构');
INSERT INTO `facet_relation` VALUES ('错误校正', '2', '散列函数的应用', '1', '47', '散列函数', '数据结构');
INSERT INTO `facet_relation` VALUES ('语音识别', '2', '散列函数的应用', '1', '47', '散列函数', '数据结构');
INSERT INTO `facet_relation` VALUES ('Rabin-Karp字符串搜索算法', '2', '散列函数的应用', '1', '47', '散列函数', '数据结构');
INSERT INTO `facet_relation` VALUES ('图为二分图当且仅当', '2', '特性', '1', '49', '二分图', '数据结构');
INSERT INTO `facet_relation` VALUES ('作为抽象数据类型的有理数', '2', '实际示例', '1', '50', '抽象资料型别', '数据结构');
INSERT INTO `facet_relation` VALUES ('堆栈', '2', '实际示例', '1', '50', '抽象资料型别', '数据结构');
INSERT INTO `facet_relation` VALUES ('接口', '3', '堆栈', '2', '50', '抽象资料型别', '数据结构');
INSERT INTO `facet_relation` VALUES ('用法', '3', '堆栈', '2', '50', '抽象资料型别', '数据结构');
INSERT INTO `facet_relation` VALUES ('各种实现', '3', '堆栈', '2', '50', '抽象资料型别', '数据结构');
INSERT INTO `facet_relation` VALUES ('变体', '2', '概述', '1', '53', 'B树', '数据结构');
INSERT INTO `facet_relation` VALUES ('名字取义', '2', '概述', '1', '53', 'B树', '数据结构');
INSERT INTO `facet_relation` VALUES ('已排序文件的查找时间', '2', '数据库的问题', '1', '53', 'B树', '数据结构');
INSERT INTO `facet_relation` VALUES ('提升查找的索引', '2', '数据库的问题', '1', '53', 'B树', '数据结构');
INSERT INTO `facet_relation` VALUES ('插入和删除带来的麻烦', '2', '数据库的问题', '1', '53', 'B树', '数据结构');
INSERT INTO `facet_relation` VALUES ('B树运用的理念', '2', '数据库的问题', '1', '53', 'B树', '数据结构');
INSERT INTO `facet_relation` VALUES ('B树的弊端', '2', '数据库的问题', '1', '53', 'B树', '数据结构');
INSERT INTO `facet_relation` VALUES ('合并', '2', '二项堆的操作', '1', '54', '二项堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('插入', '2', '二项堆的操作', '1', '54', '二项堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('查找最小关键字所在结点', '2', '二项堆的操作', '1', '54', '二项堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('删除最小关键字所在结点', '2', '二项堆的操作', '1', '54', '二项堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('减小关键字的值', '2', '二项堆的操作', '1', '54', '二项堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('删除', '2', '二项堆的操作', '1', '54', '二项堆', '数据结构');
INSERT INTO `facet_relation` VALUES ('C 的实现', '2', '实现方法', '1', '62', '广度优先搜索', '数据结构');
INSERT INTO `facet_relation` VALUES ('C++ 的实现', '2', '实现方法', '1', '62', '广度优先搜索', '数据结构');
INSERT INTO `facet_relation` VALUES ('空间复杂度', '2', '特性', '1', '62', '广度优先搜索', '数据结构');
INSERT INTO `facet_relation` VALUES ('时间复杂度', '2', '特性', '1', '62', '广度优先搜索', '数据结构');
INSERT INTO `facet_relation` VALUES ('完全性', '2', '特性', '1', '62', '广度优先搜索', '数据结构');
INSERT INTO `facet_relation` VALUES ('最佳解', '2', '特性', '1', '62', '广度优先搜索', '数据结构');
INSERT INTO `facet_relation` VALUES ('寻找连接元件', '2', '广度优先搜索算法的应用', '1', '62', '广度优先搜索', '数据结构');
INSERT INTO `facet_relation` VALUES ('测试是否二分图', '2', '广度优先搜索算法的应用', '1', '62', '广度优先搜索', '数据结构');
INSERT INTO `facet_relation` VALUES ('应用于电脑游戏中平面网格', '2', '广度优先搜索算法的应用', '1', '62', '广度优先搜索', '数据结构');
INSERT INTO `facet_relation` VALUES ('删除', '2', '操作', '1', '63', 'AVL树', '数据结构');
INSERT INTO `facet_relation` VALUES ('搜寻', '2', '操作', '1', '63', 'AVL树', '数据结构');
INSERT INTO `facet_relation` VALUES ('阵列堆叠', '2', '软件堆栈', '1', '65', '堆栈', '数据结构');
INSERT INTO `facet_relation` VALUES ('串列堆叠', '2', '软件堆栈', '1', '65', '堆栈', '数据结构');
INSERT INTO `facet_relation` VALUES ('硬件支持', '2', '硬件堆栈', '1', '65', '堆栈', '数据结构');
INSERT INTO `facet_relation` VALUES ('节点数据向上更新', '2', '基本操作', '1', '66', '线段树', '数据结构');
INSERT INTO `facet_relation` VALUES ('节点懒惰标记下推', '2', '基本操作', '1', '66', '线段树', '数据结构');
INSERT INTO `facet_relation` VALUES ('建树', '2', '基本操作', '1', '66', '线段树', '数据结构');
INSERT INTO `facet_relation` VALUES ('更新', '2', '基本操作', '1', '66', '线段树', '数据结构');
INSERT INTO `facet_relation` VALUES ('区间查询', '2', '基本操作', '1', '66', '线段树', '数据结构');
INSERT INTO `facet_relation` VALUES ('范围最值查询与最低公共祖先', '2', '笛卡尔树应用', '1', '68', '笛卡尔树', '数据结构');
INSERT INTO `facet_relation` VALUES ('单向链表', '2', '结构', '1', '70', '链表', '数据结构');
INSERT INTO `facet_relation` VALUES ('双向链表', '2', '结构', '1', '70', '链表', '数据结构');
INSERT INTO `facet_relation` VALUES ('接口声明', '2', 'C代码实例', '1', '70', '链表', '数据结构');
INSERT INTO `facet_relation` VALUES ('接口实现', '2', 'C代码实例', '1', '70', '链表', '数据结构');
INSERT INTO `facet_relation` VALUES ('类型确定', '3', '接口实现', '2', '70', '链表', '数据结构');
INSERT INTO `facet_relation` VALUES ('初始化和销毁', '3', '接口实现', '2', '70', '链表', '数据结构');
INSERT INTO `facet_relation` VALUES ('节点插入', '3', '接口实现', '2', '70', '链表', '数据结构');
INSERT INTO `facet_relation` VALUES ('遍历', '3', '接口实现', '2', '70', '链表', '数据结构');
INSERT INTO `facet_relation` VALUES ('删除和查找', '3', '接口实现', '2', '70', '链表', '数据结构');
INSERT INTO `facet_relation` VALUES ('其他数据结构', '2', '参见', '1', '70', '链表', '数据结构');
INSERT INTO `facet_relation` VALUES ('标准 Kuratowski 定义', '2', '有序对的集合论定义', '1', '76', '有序对', '数据结构');
INSERT INTO `facet_relation` VALUES ('变体定义', '2', '有序对的集合论定义', '1', '76', '有序对', '数据结构');
INSERT INTO `facet_relation` VALUES ('证明有序对的特征性质', '2', '有序对的集合论定义', '1', '76', '有序对', '数据结构');
INSERT INTO `facet_relation` VALUES ('Quine-Rosser 定义', '2', '有序对的集合论定义', '1', '76', '有序对', '数据结构');
INSERT INTO `facet_relation` VALUES ('Morse 定义', '2', '有序对的集合论定义', '1', '76', '有序对', '数据结构');
INSERT INTO `facet_relation` VALUES ('堆排序', '2', '应用', '1', '51', '堆 (数据结构)', '数据结构');
INSERT INTO `facet_relation` VALUES ('事件模拟', '2', '应用', '1', '51', '堆 (数据结构)', '数据结构');
INSERT INTO `facet_relation` VALUES ('测试分面2', '2', '测试分面1', '1', '85', '测试主题1', '测试课程');
INSERT INTO `facet_relation` VALUES ('测试分面3', '3', '测试分面2', '2', '85', '测试主题1', '测试课程');
INSERT INTO `facet_relation` VALUES ('分面2', '2', '分面1', '1', '86', '测试主题2', '测试课程');
INSERT INTO `facet_relation` VALUES ('分面3', '3', '分面2', '2', '86', '测试主题2', '测试课程');
INSERT INTO `facet_relation` VALUES ('分面5', '2', '分面1', '1', '86', '测试主题2', '测试课程');
INSERT INTO `facet_relation` VALUES ('facet2', '2', 'facet1', '1', '89', 'test', '测试课程');
INSERT INTO `facet_relation` VALUES ('facet3', '3', 'facet2', '2', '89', 'test', '测试课程');

-- ----------------------------
-- Table structure for fragment
-- ----------------------------
DROP TABLE IF EXISTS `fragment`;
CREATE TABLE `fragment` (
  `FragmentID` int(20) NOT NULL AUTO_INCREMENT,
  `FragmentContent` longtext NOT NULL,
  `FragmentScratchTime` datetime DEFAULT NULL,
  PRIMARY KEY (`FragmentID`)
) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of fragment
-- ----------------------------

-- ----------------------------
-- Table structure for spider_image
-- ----------------------------
DROP TABLE IF EXISTS `spider_image`;
CREATE TABLE `spider_image` (
  `ImageID` int(20) NOT NULL AUTO_INCREMENT,
  `ImageUrl` varchar(255) DEFAULT NULL,
  `ImageWidth` int(20) DEFAULT NULL,
  `ImageHeight` int(20) DEFAULT NULL,
  `TermID` int(20) DEFAULT NULL,
  `TermName` varchar(255) DEFAULT NULL,
  `TermUrl` varchar(255) DEFAULT NULL,
  `ClassName` varchar(255) DEFAULT NULL,
  `ImageScratchTime` datetime DEFAULT NULL,
  `ImageAPI` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`ImageID`)
) ENGINE=InnoDB AUTO_INCREMENT=156 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of spider_image
-- ----------------------------
INSERT INTO `spider_image` VALUES ('1', '//upload.wikimedia.org/wikipedia/commons/thumb/2/24/Tree_graph.svg/220px-Tree_graph.svg.png', '220', '257', '2', '图论术语', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '数据结构', '2016-12-20 09:37:17', null);
INSERT INTO `spider_image` VALUES ('2', '//upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Complete_graph_K5.svg/220px-Complete_graph_K5.svg.png', '220', '216', '2', '图论术语', 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '数据结构', '2016-12-20 09:37:17', null);
INSERT INTO `spider_image` VALUES ('4', '//upload.wikimedia.org/wikipedia/commons/thumb/9/90/HASHTB12.svg/220px-HASHTB12.svg.png', '220', '137', '4', '线性探测', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '数据结构', '2016-12-20 09:37:49', null);
INSERT INTO `spider_image` VALUES ('5', '//upload.wikimedia.org/wikipedia/commons/thumb/3/38/Linear_Probing_Deletion.png/220px-Linear_Probing_Deletion.png', '220', '65', '4', '线性探测', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '数据结构', '2016-12-20 09:37:49', null);
INSERT INTO `spider_image` VALUES ('6', '//upload.wikimedia.org/wikipedia/commons/thumb/9/9b/PAVE_PAWS_Radar_Clear_AFS_Alaska.jpg/220px-PAVE_PAWS_Radar_Clear_AFS_Alaska.jpg', '220', '193', '5', '相位阵列', 'https://zh.wikipedia.org/wiki/%E7%9B%B8%E4%BD%8D%E9%98%B5%E5%88%97', '数据结构', '2016-12-20 09:37:58', null);
INSERT INTO `spider_image` VALUES ('7', '//upload.wikimedia.org/wikipedia/commons/thumb/e/e2/Complete_bipartite_graph_K3%2C2.svg/160px-Complete_bipartite_graph_K3%2C2.svg.png', '160', '121', '6', '完全二分图', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%88%86%E5%9B%BE', '数据结构', '2016-12-20 09:38:07', null);
INSERT INTO `spider_image` VALUES ('8', '//upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Complete_bipartite_graph_K3%2C1.svg/120px-Complete_bipartite_graph_K3%2C1.svg.png', '120', '91', '6', '完全二分图', 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%88%86%E5%9B%BE', '数据结构', '2016-12-20 09:38:07', null);
INSERT INTO `spider_image` VALUES ('9', '//upload.wikimedia.org/wikipedia/commons/thumb/2/28/6n-graph2.svg/185px-6n-graph2.svg.png', '185', '202', '7', '邻接矩阵', 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '数据结构', '2016-12-20 09:38:18', null);
INSERT INTO `spider_image` VALUES ('10', '//upload.wikimedia.org/wikipedia/commons/thumb/1/11/Tree_of_life_SVG.svg/340px-Tree_of_life_SVG.svg.png', '340', '340', '10', '系统发生树', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '数据结构', '2016-12-20 09:38:48', null);
INSERT INTO `spider_image` VALUES ('11', '//upload.wikimedia.org/wikipedia/commons/thumb/0/0e/MyosinUnrootedTree.jpg/275px-MyosinUnrootedTree.jpg', '275', '194', '10', '系统发生树', 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '数据结构', '2016-12-20 09:38:48', null);
INSERT INTO `spider_image` VALUES ('12', '//upload.wikimedia.org/wikipedia/commons/thumb/8/8b/Point_quadtree.svg/300px-Point_quadtree.svg.png', '300', '300', '12', '四叉树', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:39:07', null);
INSERT INTO `spider_image` VALUES ('13', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Quad_tree_bitmap.svg/380px-Quad_tree_bitmap.svg.png', '380', '156', '12', '四叉树', 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:39:07', null);
INSERT INTO `spider_image` VALUES ('14', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Unbalanced_binary_tree.svg/240px-Unbalanced_binary_tree.svg.png', '240', '240', '16', '平衡树', 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '数据结构', '2016-12-20 09:39:44', null);
INSERT INTO `spider_image` VALUES ('15', '//upload.wikimedia.org/wikipedia/commons/thumb/0/06/AVLtreef.svg/240px-AVLtreef.svg.png', '240', '107', '16', '平衡树', 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '数据结构', '2016-12-20 09:39:44', null);
INSERT INTO `spider_image` VALUES ('16', '//upload.wikimedia.org/wikipedia/commons/thumb/3/37/Bplustree.png/400px-Bplustree.png', '400', '184', '19', 'B+树', 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '数据结构', '2016-12-20 09:40:14', null);
INSERT INTO `spider_image` VALUES ('17', '//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Binary_tree.svg/220px-Binary_tree.svg.png', '220', '183', '21', '数据结构', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '数据结构', '2016-12-20 09:40:33', null);
INSERT INTO `spider_image` VALUES ('19', '//upload.wikimedia.org/wikipedia/commons/thumb/3/35/Octree2.png/400px-Octree2.png', '400', '230', '25', '八叉树', 'https://zh.wikipedia.org/wiki/%E5%85%AB%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:41:13', null);
INSERT INTO `spider_image` VALUES ('20', '//upload.wikimedia.org/wikipedia/commons/thumb/8/82/Huffman_tree_2.svg/350px-Huffman_tree_2.svg.png', '350', '225', '29', '霍夫曼编码', 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '数据结构', '2016-12-20 09:41:46', null);
INSERT INTO `spider_image` VALUES ('21', '//upload.wikimedia.org/wikipedia/commons/0/0a/2-3-4_tree_example.png', '335', '166', '30', '2-3-4树', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '数据结构', '2016-12-20 09:41:56', null);
INSERT INTO `spider_image` VALUES ('22', '//upload.wikimedia.org/wikipedia/commons/7/76/2-3-4_tree_2-node.png', '75', '69', '30', '2-3-4树', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '数据结构', '2016-12-20 09:41:56', null);
INSERT INTO `spider_image` VALUES ('23', '//upload.wikimedia.org/wikipedia/commons/4/4e/2-3-4-tree_3-node.png', '117', '69', '30', '2-3-4树', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '数据结构', '2016-12-20 09:41:56', null);
INSERT INTO `spider_image` VALUES ('24', '//upload.wikimedia.org/wikipedia/commons/f/f6/2-3-4_tree_4-node.png', '159', '69', '30', '2-3-4树', 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '数据结构', '2016-12-20 09:41:56', null);
INSERT INTO `spider_image` VALUES ('25', '//upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/450px-Red-black_tree_example.svg.png', '450', '217', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '数据结构', '2016-12-20 09:42:09', null);
INSERT INTO `spider_image` VALUES ('26', '//upload.wikimedia.org/wikipedia/commons/c/c8/Red-black_tree_insert_case_3.png', '300', '139', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '数据结构', '2016-12-20 09:42:09', null);
INSERT INTO `spider_image` VALUES ('27', '//upload.wikimedia.org/wikipedia/commons/5/56/Red-black_tree_insert_case_4.png', '283', '138', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '数据结构', '2016-12-20 09:42:09', null);
INSERT INTO `spider_image` VALUES ('28', '//upload.wikimedia.org/wikipedia/commons/6/66/Red-black_tree_insert_case_5.png', '310', '138', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '数据结构', '2016-12-20 09:42:09', null);
INSERT INTO `spider_image` VALUES ('29', '//upload.wikimedia.org/wikipedia/commons/3/39/Red-black_tree_delete_case_2.png', '298', '136', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '数据结构', '2016-12-20 09:42:09', null);
INSERT INTO `spider_image` VALUES ('30', '//upload.wikimedia.org/wikipedia/commons/c/c7/Red-black_tree_delete_case_3.png', '313', '132', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '数据结构', '2016-12-20 09:42:09', null);
INSERT INTO `spider_image` VALUES ('31', '//upload.wikimedia.org/wikipedia/commons/d/d7/Red-black_tree_delete_case_4.png', '313', '132', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '数据结构', '2016-12-20 09:42:09', null);
INSERT INTO `spider_image` VALUES ('32', '//upload.wikimedia.org/wikipedia/commons/3/30/Red-black_tree_delete_case_5.png', '247', '133', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '数据结构', '2016-12-20 09:42:09', null);
INSERT INTO `spider_image` VALUES ('33', '//upload.wikimedia.org/wikipedia/commons/3/31/Red-black_tree_delete_case_6.png', '299', '143', '31', '红黑树', 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '数据结构', '2016-12-20 09:42:09', null);
INSERT INTO `spider_image` VALUES ('34', '//upload.wikimedia.org/wikipedia/commons/thumb/f/f5/Petersen_graph.svg/200px-Petersen_graph.svg.png', '200', '191', '33', '佩特森图', 'https://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', '数据结构', '2016-12-20 09:42:28', null);
INSERT INTO `spider_image` VALUES ('35', '//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Petersen_graph%2C_two_crossings.svg/220px-Petersen_graph%2C_two_crossings.svg.png', '220', '220', '33', '佩特森图', 'https://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', '数据结构', '2016-12-20 09:42:28', null);
INSERT INTO `spider_image` VALUES ('36', '//upload.wikimedia.org/wikipedia/commons/thumb/0/0b/0-regul%C3%A1rn%C3%AD_graf_na_6_vrcholech.png/120px-0-regul%C3%A1rn%C3%AD_graf_na_6_vrcholech.png', '120', '120', '38', '正则图', 'https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', '数据结构', '2016-12-20 09:43:15', null);
INSERT INTO `spider_image` VALUES ('37', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/220px-Binary_tree.png', '220', '128', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:26', null);
INSERT INTO `spider_image` VALUES ('38', '//upload.wikimedia.org/wikipedia/commons/thumb/b/b1/BinaryTree_leaf.jpg/300px-BinaryTree_leaf.jpg', '300', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:26', null);
INSERT INTO `spider_image` VALUES ('39', '//upload.wikimedia.org/wikipedia/commons/thumb/7/7d/FullBT_CompleteBT.jpg/400px-FullBT_CompleteBT.jpg', '400', '206', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:26', null);
INSERT INTO `spider_image` VALUES ('40', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('41', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('42', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('43', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('44', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('45', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('46', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('47', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('48', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('49', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('50', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('51', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('52', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('53', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('54', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('55', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('56', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('57', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('58', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('59', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('60', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('61', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('62', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('63', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('64', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:27', null);
INSERT INTO `spider_image` VALUES ('65', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('66', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('67', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('68', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('69', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('70', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('71', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('72', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('73', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('74', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('75', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('76', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('77', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('78', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('79', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('80', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('81', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('82', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('83', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('84', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('85', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('86', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('87', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('88', '//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg', '402', '218', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('89', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('90', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('91', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('92', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('93', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:28', null);
INSERT INTO `spider_image` VALUES ('94', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('95', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('96', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('97', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('98', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('99', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('100', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('101', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('102', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('103', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('104', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('105', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('106', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('107', '//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg', '537', '258', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('108', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png', '350', '203', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('109', '//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG', '155', '161', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('110', '//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png', '400', '250', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('111', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg', '300', '341', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('112', '//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg', '415', '62', '42', '二叉树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '数据结构', '2016-12-20 09:44:29', null);
INSERT INTO `spider_image` VALUES ('113', '//upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Internet_map_1024.jpg/32px-Internet_map_1024.jpg', '32', '32', '44', '数组', 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '数据结构', '2016-12-20 09:44:53', null);
INSERT INTO `spider_image` VALUES ('114', '//upload.wikimedia.org/wikipedia/commons/thumb/b/b6/3dtree.png/250px-3dtree.png', '250', '238', '45', 'K-d树', 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '数据结构', '2016-12-20 09:45:03', null);
INSERT INTO `spider_image` VALUES ('116', '//upload.wikimedia.org/wikipedia/commons/thumb/d/da/Hash_function.svg/330px-Hash_function.svg.png', '330', '223', '47', '散列函数', 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '数据结构', '2016-12-20 09:45:26', null);
INSERT INTO `spider_image` VALUES ('117', '//upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Simple-bipartite-graph.svg/200px-Simple-bipartite-graph.svg.png', '200', '200', '49', '二分图', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '数据结构', '2016-12-20 09:45:43', null);
INSERT INTO `spider_image` VALUES ('118', '//upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Binomial_Trees.svg/500px-Binomial_Trees.svg.png', '500', '286', '54', '二项堆', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '数据结构', '2016-12-20 09:46:33', null);
INSERT INTO `spider_image` VALUES ('119', '//upload.wikimedia.org/wikipedia/commons/thumb/6/61/Binomial-heap-13.svg/325px-Binomial-heap-13.svg.png', '325', '217', '54', '二项堆', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '数据结构', '2016-12-20 09:46:33', null);
INSERT INTO `spider_image` VALUES ('120', '//upload.wikimedia.org/wikipedia/commons/thumb/9/9f/Binomial_heap_merge1.svg/200px-Binomial_heap_merge1.svg.png', '200', '291', '54', '二项堆', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '数据结构', '2016-12-20 09:46:33', null);
INSERT INTO `spider_image` VALUES ('121', '//upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Binomial_heap_merge2.svg/300px-Binomial_heap_merge2.svg.png', '300', '248', '54', '二项堆', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '数据结构', '2016-12-20 09:46:33', null);
INSERT INTO `spider_image` VALUES ('122', '//upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Depth-first-tree.svg/300px-Depth-first-tree.svg.png', '300', '192', '58', '深度优先搜索', 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '数据结构', '2016-12-20 09:47:09', null);
INSERT INTO `spider_image` VALUES ('123', '//upload.wikimedia.org/wikipedia/commons/thumb/b/bc/Dialog_tree_example_%28zh-cn%29.svg/399px-Dialog_tree_example_%28zh-cn%29.svg.png', '399', '193', '61', '对话树', 'https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%AF%9D%E6%A0%91', '数据结构', '2016-12-20 09:47:39', null);
INSERT INTO `spider_image` VALUES ('125', '//upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Breadth-first_tree.svg/300px-Breadth-first_tree.svg.png', '300', '199', '62', '广度优先搜索', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '数据结构', '2016-12-20 09:47:48', null);
INSERT INTO `spider_image` VALUES ('126', '//upload.wikimedia.org/wikipedia/commons/thumb/a/ad/MapGermanyGraph.svg/250px-MapGermanyGraph.svg.png', '250', '252', '62', '广度优先搜索', 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '数据结构', '2016-12-20 09:47:48', null);
INSERT INTO `spider_image` VALUES ('127', '//upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Unbalanced_binary_tree.svg/250px-Unbalanced_binary_tree.svg.png', '250', '250', '63', 'AVL树', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '数据结构', '2016-12-20 09:47:58', null);
INSERT INTO `spider_image` VALUES ('128', '//upload.wikimedia.org/wikipedia/commons/thumb/0/06/AVLtreef.svg/250px-AVLtreef.svg.png', '250', '111', '63', 'AVL树', 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '数据结构', '2016-12-20 09:47:58', null);
INSERT INTO `spider_image` VALUES ('129', '//upload.wikimedia.org/wikipedia/commons/thumb/3/3a/2-3-4_tree_2-node.svg/110px-2-3-4_tree_2-node.svg.png', '110', '95', '64', '2-3树', 'https://zh.wikipedia.org/wiki/2-3%E6%A0%91', '数据结构', '2016-12-20 09:48:07', null);
INSERT INTO `spider_image` VALUES ('130', '//upload.wikimedia.org/wikipedia/commons/thumb/2/29/Data_stack.svg/200px-Data_stack.svg.png', '200', '144', '65', '堆栈', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '数据结构', '2016-12-20 09:48:17', null);
INSERT INTO `spider_image` VALUES ('131', '//upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Internet_map_1024.jpg/32px-Internet_map_1024.jpg', '32', '32', '65', '堆栈', 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '数据结构', '2016-12-20 09:48:17', null);
INSERT INTO `spider_image` VALUES ('132', '//upload.wikimedia.org/wikipedia/commons/2/23/Tree_rotation.png', '612', '241', '69', '树旋转', 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '数据结构', '2016-12-20 09:48:55', null);
INSERT INTO `spider_image` VALUES ('133', '//upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Singly-linked-list.svg/408px-Singly-linked-list.svg.png', '408', '41', '70', '链表', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '数据结构', '2016-12-20 09:49:08', null);
INSERT INTO `spider_image` VALUES ('134', '//upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Doubly-linked-list.svg/610px-Doubly-linked-list.svg.png', '610', '41', '70', '链表', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '数据结构', '2016-12-20 09:49:08', null);
INSERT INTO `spider_image` VALUES ('135', '//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Circularly-linked-list.svg/350px-Circularly-linked-list.svg.png', '350', '60', '70', '链表', 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '数据结构', '2016-12-20 09:49:08', null);
INSERT INTO `spider_image` VALUES ('136', '//upload.wikimedia.org/wikipedia/commons/thumb/d/da/Binary_search_tree.svg/150px-Binary_search_tree.svg.png', '150', '125', '71', '二元搜寻树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '数据结构', '2016-12-20 09:49:19', null);
INSERT INTO `spider_image` VALUES ('137', '//upload.wikimedia.org/wikipedia/commons/thumb/4/46/Binary_search_tree_delete.svg/480px-Binary_search_tree_delete.svg.png', '480', '137', '71', '二元搜寻树', 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '数据结构', '2016-12-20 09:49:19', null);
INSERT INTO `spider_image` VALUES ('138', '//upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Venn_A_intersect_B.svg/100px-Venn_A_intersect_B.svg.png', '100', '71', '76', '有序对', 'https://zh.wikipedia.org/wiki/%E6%9C%89%E5%BA%8F%E5%AF%B9', '数据结构', '2016-12-20 09:50:13', null);
INSERT INTO `spider_image` VALUES ('140', '//upload.wikimedia.org/wikipedia/commons/thumb/f/f9/Red_Black_Shape_Cases.svg/360px-Red_Black_Shape_Cases.svg.png', '360', '70', '79', 'AA树', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '数据结构', '2016-12-20 09:50:44', null);
INSERT INTO `spider_image` VALUES ('141', '//upload.wikimedia.org/wikipedia/commons/thumb/d/dd/AA_Tree_Shape_Cases.svg/105px-AA_Tree_Shape_Cases.svg.png', '105', '70', '79', 'AA树', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '数据结构', '2016-12-20 09:50:44', null);
INSERT INTO `spider_image` VALUES ('142', '//upload.wikimedia.org/wikipedia/commons/thumb/e/e0/AA_Tree_Skew2.svg/280px-AA_Tree_Skew2.svg.png', '280', '120', '79', 'AA树', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '数据结构', '2016-12-20 09:50:44', null);
INSERT INTO `spider_image` VALUES ('143', '//upload.wikimedia.org/wikipedia/commons/thumb/0/0e/AA_Tree_Split2.svg/255px-AA_Tree_Split2.svg.png', '255', '150', '79', 'AA树', 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '数据结构', '2016-12-20 09:50:44', null);
INSERT INTO `spider_image` VALUES ('144', '//upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Petersen_graph_complement.svg/300px-Petersen_graph_complement.svg.png', '300', '147', '80', '补图', 'https://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', '数据结构', '2016-12-20 09:50:55', null);
INSERT INTO `spider_image` VALUES ('145', '//upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Cayley_graph_of_F2.svg/220px-Cayley_graph_of_F2.svg.png', '220', '220', '81', '凯莱图', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '数据结构', '2016-12-20 09:51:05', null);
INSERT INTO `spider_image` VALUES ('146', '//upload.wikimedia.org/wikipedia/commons/thumb/c/c4/Dih_4_Cayley_Graph%3B_generators_a%2C_b%3B_prefix.svg/200px-Dih_4_Cayley_Graph%3B_generators_a%2C_b%3B_prefix.svg.png', '200', '200', '81', '凯莱图', 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '数据结构', '2016-12-20 09:51:05', null);
INSERT INTO `spider_image` VALUES ('147', '//upload.wikimedia.org/wikipedia/commons/thumb/8/87/Line_graph_construction_%28original%29.png/220px-Line_graph_construction_%28original%29.png', '220', '221', '83', '线图', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E5%9B%BE', '数据结构', '2016-12-20 09:51:25', null);
INSERT INTO `spider_image` VALUES ('148', '//upload.wikimedia.org/wikipedia/commons/thumb/c/c7/Line_graph_construction_%28intermediate%29.png/220px-Line_graph_construction_%28intermediate%29.png', '220', '220', '83', '线图', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E5%9B%BE', '数据结构', '2016-12-20 09:51:25', null);
INSERT INTO `spider_image` VALUES ('149', '//upload.wikimedia.org/wikipedia/commons/thumb/6/67/Line_graph_construction_%28result%29.png/220px-Line_graph_construction_%28result%29.png', '220', '221', '83', '线图', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E5%9B%BE', '数据结构', '2016-12-20 09:51:25', null);
INSERT INTO `spider_image` VALUES ('150', '//upload.wikimedia.org/wikipedia/commons/7/7b/Ind_subg_not_in_line_graph.png', '301', '362', '83', '线图', 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E5%9B%BE', '数据结构', '2016-12-20 09:51:25', null);
INSERT INTO `spider_image` VALUES ('151', '//upload.wikimedia.org/wikipedia/commons/thumb/f/f4/Cauchy_sequence_illustration2.png/250px-Cauchy_sequence_illustration2.png', '250', '160', '84', '序列', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '数据结构', '2016-12-20 09:51:36', null);
INSERT INTO `spider_image` VALUES ('152', '//upload.wikimedia.org/wikipedia/commons/thumb/9/93/Fibonacci_spiral_34.svg/80px-Fibonacci_spiral_34.svg.png', '80', '51', '84', '序列', 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '数据结构', '2016-12-20 09:51:36', null);
INSERT INTO `spider_image` VALUES ('153', 'http://yotta.xjtushilei.com:9218/Yotta/SpiderAPI/getUnaddImage?imageID=1', null, null, '85', '测试主题1', null, '测试课程', '2017-10-22 16:29:58', null);
INSERT INTO `spider_image` VALUES ('154', 'http://yotta.xjtushilei.com:9218/Yotta/SpiderAPI/getUnaddImage?imageID=2', null, null, '85', '测试主题1', null, '测试课程', '2017-10-22 16:30:28', null);
INSERT INTO `spider_image` VALUES ('155', 'http://yotta.xjtushilei.com:9218/Yotta/SpiderAPI/getUnaddImage?imageID=3', null, null, '85', '测试主题1', null, '测试课程', '2017-10-22 16:30:53', null);

-- ----------------------------
-- Table structure for spider_text
-- ----------------------------
DROP TABLE IF EXISTS `spider_text`;
CREATE TABLE `spider_text` (
  `FragmentID` int(20) NOT NULL AUTO_INCREMENT,
  `FragmentContent` longblob NOT NULL,
  `FragmentUrl` varchar(255) DEFAULT NULL,
  `FragmentPostTime` datetime DEFAULT NULL,
  `FragmentScratchTime` datetime DEFAULT NULL,
  `TermID` int(20) DEFAULT NULL,
  `TermName` varchar(255) DEFAULT NULL,
  `ClassName` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`FragmentID`)
) ENGINE=InnoDB AUTO_INCREMENT=1441 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of spider_text
-- ----------------------------
INSERT INTO `spider_text` VALUES ('2', 0xhttps://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-21 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('3', 0xE7BB93E69E84E8B5B7E6BA90EFBC9A0AE68C89E785A75065746572204D2E2046656E7769636BE79A84E8AFB4E6B395EFBC8CE6ADA3E5A682E68980E69C89E79A84E695B4E695B0E983BDE58FAFE4BBA5E8A1A8E7A4BAE6889032E79A84E5B982E5928CEFBC8CE68891E4BBACE4B99FE58FAFE4BBA5E68A8AE4B880E4B8B2E5BA8FE58897E8A1A8E7A4BAE68890E4B880E7B3BBE58897E5AD90E5BA8FE58897E79A84E5928CE38082E98787E794A8E8BF99E4B8AAE683B3E6B395EFBC8CE68891E4BBACE58FAFE5B086E4B880E4B8AAE5898DE7BC80E5928CE58892E58886E68890E5A49AE4B8AAE5AD90E5BA8FE58897E79A84E5928CEFBC8CE8808CE58892E58886E79A84E696B9E6B395E4B88EE695B0E79A8432E79A84E5B982E5928CE585B7E69C89E69E81E585B6E79BB8E4BCBCE79A84E696B9E5BC8FE38082E4B880E696B9E99DA2EFBC8CE5AD90E5BA8FE58897E79A84E4B8AAE695B0E698AFE585B6E4BA8CE8BF9BE588B6E8A1A8E7A4BAE4B8AD31E79A84E4B8AAE695B0EFBC8CE58FA6E4B880E696B9E99DA2EFBC8CE5AD90E5BA8FE58897E4BBA3E8A1A8E79A84665B695DE79A84E4B8AAE695B0E4B99FE698AF32E79A84E5B982E380825B325D5B335D5B345D, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-21 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('4', 0xE9A284E5A487E587BDE695B0EFBC9A0AE5AE9AE4B989E4B880E4B8AA4C6F77626974E587BDE695B0EFBC8CE8BF94E59B9EE58F82E695B0E8BDACE4B8BAE4BA8CE8BF9BE588B6E5908E2CE69C80E5908EE4B880E4B8AA31E79A84E4BD8DE7BDAEE68980E4BBA3E8A1A8E79A84E695B0E580BC2E, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-21 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('5', 0xE9A284E5A487E587BDE695B0EFBC9A0AE4BE8BE5A6822C4C6F7762697428333429E79A84E8BF94E59B9EE580BCE5B086E698AF32EFBC9BE8808C4C6F7762697428313229E8BF94E59B9E34EFBC9B4C6F77626974283829E8BF94E59B9E38E38082, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-21 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('6', 0xE9A284E5A487E587BDE695B0EFBC9A0AE5B0863334E8BDACE4B8BAE4BA8CE8BF9BE588B62CE4B8BA3030313020303031302CE8BF99E9878CE79A8422E69C80E5908EE4B880E4B8AA3122E68C87E79A84E698AFE4BB8E20322030207B5C646973706C61797374796C6520325E7B307D7D20E4BD8DE5BE80E5898DE695B02CE8A781E588B0E79A84E7ACACE4B880E4B8AA312CE4B99FE5B0B1E698AF20322031207B5C646973706C61797374796C6520325E7B317D7D20E4BD8DE4B88AE79A84312E, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-21 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('7', 0xE9A284E5A487E587BDE695B0EFBC9A0AE7A88BE5BA8FE4B88AEFBC8C28284E6F742049292B312920416E642049E8A1A8E6988EE4BA86E69C80E5908EE4B880E4BD8D31E79A84E580BC2C, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('8', 0xE9A284E5A487E587BDE695B0EFBC9A0AE4BB8DE784B6E4BBA53334E4B8BAE4BE8B2C4E6F7420303031302030303130E79A84E7BB93E69E9CE698AF2031313031203131303128323231292CE58AA0E4B880E5908EE4B8BA2031313031203131313028323232292C20E68A8A20303031302030303130E4B88E313130312031313130E4BD9C414E442CE5BE973030303020303031302832292E, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('9', 0xE9A284E5A487E587BDE695B0EFBC9A0A696E74206C6F7762697428696E742078290A7B0A2020202072657475726E207826282D78293B0A7D, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('10', 0xE696B0E5BBBAEFBC9A0AE5AE9AE4B989E4B880E4B8AAE695B0E7BB8420424954EFBC8CE794A8E4BBA5E7BBB4E68AA42041207B5C646973706C61797374796C6520417D20E79A84E5898DE7BC80E5928CEFBC8CE588993A, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('11', 0xE696B0E5BBBAEFBC9A0A42204920542069203D20E28891206A203D206920E28892206C206F2077206220692074202820692029202B203120692041206A207B5C646973706C61797374796C65204249545F7B697D3D5C73756D205F7B6A3D692D6C6F776269742869292B317D5E7B697D415F7B6A7D7D, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('12', 0xE696B0E5BBBAEFBC9A0A766F6964206275696C6428290A7B200A20202020666F722028696E7420693D313B693C3D4D41585F4E3B692B2B290A202020207B0A20202020202020204249545B695D3D415B695D3B0A2020202020202020666F722028696E74206A3D692D313B206A3E692D6C6F776269742869293B206A2D2D290A2020202020202020202020204249545B695D2B3D415B6A5D3B0A202020207D0A7D, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('13', 0xE4BFAEE694B9EFBC9A0AE58187E8AEBEE78EB0E59CA8E8A681E5B0862041205B2069205D207B5C646973706C61797374796C6520415B695D7D20E79A84E580BCE5A29EE58AA064656C74612C, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('14', 0xE4BFAEE694B9EFBC9A0AE982A3E4B9882CE99C80E8A681E5B086204220492054205B2069205D207B5C646973706C61797374796C65204249545B695D7D20E8A686E79B96E79A84E58CBAE997B4E58C85E590AB2041205B2069205D207B5C646973706C61797374796C6520415B695D7D20E79A84E580BCE983BDE58AA0E4B88A4B2E, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('15', 0xE4BFAEE694B9EFBC9A0AE8BF99E4B8AAE8BF87E7A88BE58FAFE4BBA5E58699E68890E98092E5BD922CE68896E88085E699AEE9809AE79A84E5BEAAE78EAF2E, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('16', 0xE4BFAEE694B9EFBC9A0AE99C80E8A681E8AEA1E7AE97E79A84E6ACA1E695B0E4B88EE695B0E68DAEE8A784E6A8A14EE79A84E4BA8CE8BF9BE588B6E4BD8DE695B0E69C89E585B32CE58DB3E8BF99E983A8E58886E79A84E697B6E997B4E5A48DE69D82E5BAA6E698AF4F284C6F674E29, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('17', 0xE4BFAEE694B9EFBC9A0A766F6964206564697428696E7420692C20696E742064656C7461290A7B0A20202020666F722028696E74206A203D20693B206A203C3D204D41585F4E3B206A202B3D206C6F77626974286A29290A20202020202020204249545B6A5D202B3D2064656C74613B0A7D, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('18', 0xE6B182E5928CEFBC9A0AE58187E8AEBEE68891E4BBACE99C80E8A681E8AEA1E7AE9720E288912069203D2031206B20412069207B5C646973706C61797374796C65205C73756D205F7B693D317D5E7B6B7D415F7B697D7D20E79A84E580BC2E, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('19', 0xE6B182E5928CEFBC9A0AE9A696E585882CE5B086616E73E5889DE5A78BE58C96E4B8BA30EFBC8CE5B08669E5889DE5A78BE58C96E4B8BA6B2E20E5B086616E73E79A84E580BCE58AA0E4B88A4249545B695D20E5B08669E79A84E580BCE5878FE58EBB6C6F7762697428692920E9878DE5A48DE6ADA5E9AAA432EFBD9E33EFBC8CE79BB4E588B069E79A84E580BCE58F98E4B8BA30, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('20', 0xE6B182E5928CEFBC9A0A696E742073756D2028696E74206B290A7B0A20202020696E7420616E73203D20303B0A20202020666F722028696E742069203D206B3B2069203E20303B2069202D3D206C6F77626974286929290A2020202020202020616E73202B3D204249545B695D3B0A2020202072657475726E20616E733B0A7D, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('21', 0xE5A48DE69D82E5BAA6EFBC9A0AE5889DE5A78BE58C96E5A48DE69D82E5BAA6E69C80E4BC98E4B8BA204F2028204E206C6F6720E281A1204E2029207B5C646973706C61797374796C65204F284E5C6C6F67204E297D, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('22', 0xE5A48DE69D82E5BAA6EFBC9A0AE58D95E6ACA1E8AFA2E997AEE5A48DE69D82E5BAA6204F2028206C6F6720E281A1204E2029207B5C646973706C61797374796C65204F285C6C6F67204E297D202CE585B6E4B8AD4EE4B8BAE695B0E7BB84E5A4A7E5B08F, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:05', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('23', 0xE5A48DE69D82E5BAA6EFBC9A0AE58D95E6ACA1E4BFAEE694B9E5A48DE69D82E5BAA6204F2028206C6F6720E281A1204E2029207B5C646973706C61797374796C65204F285C6C6F67204E297D202CE585B6E4B8AD4EE4B8BAE695B0E7BB84E5A4A7E5B08F, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('24', 0xE5A48DE69D82E5BAA6EFBC9A0AE7A9BAE997B4E5A48DE69D82E5BAA6204F2028204E2029207B5C646973706C61797374796C65204F284E297D, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('25', 0xE6B182E98086E5BA8FE695B05B355DEFBC9A0AE98086E5BA8FE695B0E698AFE4B880E4B8AAE695B0E58897E4B8ADE59CA8E5AE83E5898DE99DA2E69C89E6AF94E5AE83E5A4A7E79A84E4B8AAE695B0E38082E5A68234333132E79A84E98086E5BA8FE695B0E698AF302B312B322B323D35E38082, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('26', 0xhttps://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84', '2016-10-19 14:27:00', '2016-12-20 09:37:06', '1', '树状数组', '数据结构');
INSERT INTO `spider_text` VALUES ('28', 0xE69198E8A681EFBC9A0AE59BBEE8AEBAE4B8ADE69C89E8AEB8E5A49AE4B893E69C89E5908DE8AF8DEFBC8CE6ADA4E5A484E680BBE7BB93E4BA86E4B880E4BA9BE5908DE8AF8DE79A84E4B880E888ACE6848FE4B989E5928CE794A8E6B395E38082, 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('29', 0xE8BF9EE9809AE680A7EFBC9A0AE7A7B02047207B5C646973706C61797374796C6520477D20E698AFE8BF9EE9809AE79A84EFBC8CE5A682E69E9CE99D9EE7A9BAE59BBE2047207B5C646973706C61797374796C6520477D20E79A84E4BBBBE6848FE4B8A4E4B8AAE9A1B6E782B9E4B98BE997B4E59D87E69C89E4B880E69DA1E8B7AFE79BB8E8BF9EE38082, 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('30', 0xhttps://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('31', 0xhttps://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('32', 0xE8B79DE7A6BBEFBC9A0AE8B79DE7A6BBE698AFE4B8A4E4B8AAE9A1B6E782B9E4B98BE997B4E7BB8FE8BF87E69C80E79FADE8B7AFE5BE84E79A84E8BEB9E79A84E695B0E79BAEEFBC8CE9809AE5B8B8E794A82064204720282075202C20762029207B5C646973706C61797374796C6520645F7B477D28752C76297D20E8A1A8E7A4BAE38082, 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('33', 0xhttps://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('34', 0xE8B79DE7A6BBEFBC9A0AE59BBEE79A84E79BB4E5BE84EFBC886469616D65746572EFBC89EFBC8CE8A1A8E7A4BAE58F96E9818DE59BBEE79A84E68980E69C89E9A1B6E782B9EFBC8CE5BE97E588B0E79A84E5818FE5BF83E78E87E79A84E69C80E5A4A7E580BCEFBC8CE8AEB0E4BD9C206420692061206D202820472029207B5C646973706C61797374796C65206469616D2847297D20E38082E79BB8E5AFB9E4BA8EE79BB4E5BE84E79A84E4B880E4B8AAE6A682E5BFB5E698AFE59BBEE79A84E58D8AE5BE84EFBC88726164697573EFBC89EFBC8CE8A1A8E7A4BAE59BBEE79A84E68980E69C89E782B9E79A84E5818FE5BF83E78E87E79A84E69C80E5B08FE580BCEFBC8CE8AEB0E4BD9C207220612064202820472029207B5C646973706C61797374796C65207261642847297D20E38082E8BF99E4B8A4E88085E997B4E79A84E585B3E7B3BBE698AFEFBC9A206420692061206D20282047202920E2A9BD2032207220612064202820472029207B5C646973706C61797374796C65206469616D2847295C6C6571736C616E7420327261642847297D, 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('36', 0xE4B88DE58F98E9878FEFBC9A0A5E20522E4469657374656CEFBC8CE59BBEE8AEBAEFBC88E7ACACE59B9BE78988EFBC89EFBC8CE9AB98E7AD89E69599E882B2E587BAE78988E7A4BEEFBC8C503130, 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('37', 0xhttps://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('38', 0xE5AD90E59BBEEFBC9A0AE5A682E69E9CE59BBE47E79A84E5AD90E59BBE48E6BBA1E8B6B3562848293D56284729EFBC8CE58DB3E59BBE48E58C85E590ABE59BBE47E79A84E68980E69C89E9A1B6E782B9EFBC8CE58899E7A7B048E698AF47E79A84E694AFE69291E5AD90E59BBEE68896E7949FE68890E5AD90E59BBEE38082, 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('39', 0xE5AD90E59BBEEFBC9A0AE5A682E69E9CE59BBE47E79A84E5AD90E59BBE48E6BBA1E8B6B3E8BEB928752C7629E59CA8E59BBE48E4B8ADE5BD93E4B894E4BB85E5BD93E8BEB928752C7629E59CA8E59BBE47E4B8ADEFBC8CE58DB3E59BBE48E58C85E590ABE4BA86E59BBE47E4B8ADE68980E69C89E4B8A4E4B8AAE7ABAFE782B9E983BDE59CA856284829E4B8ADE79A84E8BEB9EFBC8CE58899E7A7B048E698AF47E79A84E5AFBCE587BAE5AD90E59BBEE38082, 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('40', 0xhttps://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('41', 0xE8B7AFE5BE84EFBC9A0AE8B7AFE5BE84EFBC8877616C6BEFBC89EFBC8CE58F88E8AF91E4BD9CE98094E5BE84E38082E4B880E4B8AAE995BFE5BAA6E4B8BA206B207B5C646973706C61797374796C65206B7D20E79A84E8B7AFE5BE84E698AFE4B880E4B8AAE99D9EE7A9BAE79A84E9A1B6E782B9E5928CE8BEB9E79A84E4BAA4E99499E5BA8FE5889720762030206520302076203120652031202E202E202E2065206B20E2889220312076206B207B5C646973706C61797374796C6520765F7B307D655F7B307D765F7B317D655F7B317D2E2E2E655F7B6B2D317D765F7B6B7D7D20EFBC8CE4BDBFE5BE97E5AFB9E4BA8EE68980E69C892069203C206B207B5C646973706C61797374796C6520693C6B7D20E59D87E69C8920652069203D2076206920762069202B2031207B5C646973706C61797374796C6520655F7B697D3D7B765F7B697D765F7B692B317D7D7D20E38082E789B9E588ABE79A84EFBC8CE5BD9320762030203D2076206B207B5C646973706C61797374796C6520765F7B307D3D765F7B6B7D7D20E697B6EFBC8CE7A7B0E8BF99E4B8AAE8B7AFE5BE84E698AFE997ADE79A84EFBC88636C6F736564EFBC89EFBC9BE5BD93E8B7AFE5BE84E4B8ADE79A84E9A1B6E782B9E4BA92E4B88DE79BB8E5908CEFBC8CE5BE97E588B02047207B5C646973706C61797374796C6520477D20E79A84E4B880E69DA1E8B7AFE380825B315D, 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('42', 0xhttps://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('43', 0xE6A091EFBC9A0AE697A0E78EAFEFBC88E4B88DE4B880E5AE9AE8BF9EE9809AEFBC89E59BBEE7A7B0E4B8BAE6A3AEE69E97EFBC8CE6A3AEE69E9746E79A84E5AD90E59BBEE7A7B0E4B8BA46E79A84E5AD90E6A3AEE69E97E38082, 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('44', 0xE6A091EFBC9A0AE5A682E69E9CE59BBE47E79A84E4B880E4B8AAE7949FE68890E5AD90E59BBEE698AFE6A091EFBC8CE58899E7A7B0E8AFA5E5AD90E59BBEE4B8BAE7949FE68890E6A091E38082, 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('45', 0xE6A091EFBC9A0AE6989FE698AFE4BB85E69C89E4B880E4B8AAE9A1B6E782B9E4B88DE698AFE58FB6E5AD90E79A84E6A091E38082E6989FE4B99FE58FAFE4BBA5E8A1A8E7A4BAE4B8BAE5AE8CE585A8E4BA8CE58886E59BBE4B312C6EE38082, 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('46', 0xE59BA2EFBC9A0AE5AE8CE585A8E59BBEE698AFE68980E69C89E9A1B6E782B9E4B8A4E4B8A4E79BB8E982BBE79A84E59BBEE380826EE998B6E5AE8CE585A8E59BBEEFBC8CE8AEB0E4BD9C4B6EE38082E5A682E59BBEE68980E7A4BAE4B8BA4B35E380826EE998B6E5AE8CE585A8E59BBEE69C896E286E2D31292F32E69DA1E8BEB9E38082, 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('47', 0xE59BA2EFBC9A0AE59BBEE4B8ADE79A84E59BA2E698AFE794B1E59BBEE4B8ADE4B8A4E4B8A4E79BB8E982BBE79A84E9A1B6E782B9E69E84E68890E79A84E99B86E59088E38082, 'https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E6%9C%AF%E8%AF%AD', '2016-01-01 00:00:00', '2016-12-20 09:37:16', '2', '图论术语', '数据结构');
INSERT INTO `spider_text` VALUES ('48', 0xE69198E8A681EFBC9A0AE59CA8E8AEA1E7AE97E69CBAE7A791E5ADA6E68896E5BDA2E5BC8FE8AFADE8A880E4B8ADEFBC8CE7A9BAE5AD97E58583E4B8B2E698AFE68C87E59CA8E5AD97E6AF8DE8A1A8CEA3E4B88AEFBC8CE585B6E995BFE5BAA6E4B8BA203020E79A84E982A3E594AFE4B880E5AD97E4B8B2EFBC8CE4BBA5CEB5E68896CEBBE69DA5E6A087E8AEB0E38082, 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '数据结构');
INSERT INTO `spider_text` VALUES ('49', 0xE69198E8A681EFBC9A0AE59CA8E99DA2E59091E5AFB9E8B1A1E7BC96E7A88BE8AFADE8A880E4B8ADEFBC8CE7A9BAE5AD97E4B8B2E585B1E99D9EE7A9BAE58F82E785A7E38082E4B880E4B8AAE5AD97E4B8B2E59E8BE588ABE79A84E7A9BAE58F82E785A7E5B9B6E69CAAE68C87E59091E4B880E4B8AAE5AD97E4B8B2E789A9E4BBB6EFBC8CE8808CE5AFB9E585B6E6938DE4BD9CE58899E4BC9AE5AFBCE887B4E99499E8AFAFE38082E7A9BAE5AD97E4B8B2E58899E58FAFE4BBA5E4BDBFE794A8E5AD97E4B8B2E8BF90E7AE97E38082, 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '数据结构');
INSERT INTO `spider_text` VALUES ('50', 0xE789B9E680A7EFBC9A0AE59CA8E5BDA2E5BC8FE8AFADE8A880E4B8ADEFBC8CE7A9BAE5AD97E4B8B2E69C89E4BBA5E4B88BE789B9E680A7EFBC9A, 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '数据结构');
INSERT INTO `spider_text` VALUES ('51', 0xhttps://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '数据结构');
INSERT INTO `spider_text` VALUES ('52', 0xE789B9E680A7EFBC9A0AE7BC96E7A88BE8AFADE8A880E58FAFE883BDE4BC9AE7BBB4E68C81E8BF99E4BA9BE789B9E680A7EFBC8CE4BD86E4BF9DE79599E789B9E6AE8AE5AE9EE4BD9CE696B9E5BC8FE79A84E58FAFE883BD5BE69DA5E6BA90E8AFB7E6B1825DE38082, 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '数据结构');
INSERT INTO `spider_text` VALUES ('53', 0xE8A1A8E7A4BAE696B9E5BC8FEFBC9A0AE7A9BAE5AD97E4B8B2E9809AE5B8B8E4BDBFE794A8E5928CE585B6E5AE83E4B880E888ACE5AD97E4B8B2E79BB8E5908CE79A84E696B9E5BC8FE69DA5E8A1A8E7A4BAE38082E59CA8E4BDBFE794A8E7BB93E69D9FE5AD97E7ACA6E79A84E8AFADE8A88028E5A68243E5AD97E4B8B2E68896E7BAAFE69687E5AD97E79A84E4B880E8A18C29E4B8ADEFBC8CE58899E58D95E7BB9FE59CB0E5B086E7BB93E69D9FE5AD97E7ACA6E694BEE59CA8E7ACACE4B880E4B8AAE4BD8DE7BDAEE38082, 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '数据结构');
INSERT INTO `spider_text` VALUES ('54', 0xhttps://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '数据结构');
INSERT INTO `spider_text` VALUES ('55', 0xE8A1A8E7A4BAE696B9E5BC8FEFBC9A0A5E2043534531303032204C656374757265204E6F746573202D204C657869636F67726170686963, 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '数据结构');
INSERT INTO `spider_text` VALUES ('56', 0xE8A1A8E7A4BAE696B9E5BC8FEFBC9A0AC2A0C2A0E8BF99E698AFE4B88EE980BBE8BE91E5ADA6E79BB8E585B3E79A84E5B08FE4BD9CE59381E38082E4BDA0E58FAFE4BBA5E9809AE8BF87E7BC96E8BE91E68896E4BFAEE8AEA2E689A9E58585E585B6E58685E5AEB9E38082, 'https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E5%85%83%E4%B8%B2', '2013-03-12 14:36:00', '2016-12-20 09:37:26', '3', '空字元串', '数据结构');
INSERT INTO `spider_text` VALUES ('57', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '数据结构');
INSERT INTO `spider_text` VALUES ('58', 0xE69198E8A681EFBC9A0AE7BABFE680A7E68EA2E6B58BE698AFE8AEA1E7AE97E69CBAE7A88BE5BA8FE8A7A3E586B3E695A3E58897E8A1A8E586B2E7AA81E697B6E68980E98787E58F96E79A84E4B880E7A78DE7AD96E795A5E38082E695A3E58897E8A1A8E8BF99E7A78DE695B0E68DAEE7BB93E69E84E794A8E4BA8EE4BF9DE5AD98E994AEE580BCE5AFB9EFBC8CE5B9B6E4B894E883BDE9809AE8BF87E7BB99E587BAE79A84E994AEE69DA5E69FA5E689BEE8A1A8E4B8ADE5AFB9E5BA94E79A84E580BCE38082E7BABFE680A7E68EA2E6B58BE8BF99E7A78DE7AD96E795A5E698AFE59CA831393534E5B9B4E794B147656E6520416D6461686C2CC2A0456C61696E65204D2E204D63477261772CE5928CC2A04172746875722053616D75656CC2A0E68980E58F91E6988EEFBC8CE5B9B6E4B894E69C80E697A9E4BA8E31393633E5B9B4E794B1446F6E616C64204B6E757468E5AFB9E585B6E8BF9BE8A18CE58886E69E90E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '数据结构');
INSERT INTO `spider_text` VALUES ('59', 0xE69198E8A681EFBC9A0A4A6F686E20536D697468E5928C53616E64726120446565EFBC88E983BDE8A2ABE69D82E58791E698A0E5B084E588B0E4BA86E58D95E58583383733EFBC89E79A84E586B2E7AA81EFBC8CE5809FE794B1E68A8AE5908EE88085E694BEE59CA8E4B88BE4B880E4B8AAE7A9BAE997B2E58D95E58583EFBC88E58D95E58583383734EFBC89E8808CE8A7A3E586B3, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '数据结构');
INSERT INTO `spider_text` VALUES ('60', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '数据结构');
INSERT INTO `spider_text` VALUES ('61', 0xE69198E8A681EFBC9A0AE6ADA3E5A68254686F727570E5928CE5BCA0E5AF85E59CA832303132E5B9B4E68980E58699EFBC8CE280A6E2809CE695A3E58897E8A1A8E698AFE69C80E5B8B8E794A8E79A84E699AEE9809AE695B0E68DAEE7BB93E69E84EFBC8CE5AE83E59CA8E7A1ACE4BBB6E4B88AE79A84E6A087E58786E5AE9EE78EB0E4B8ADE69C80E6B581E8A18CE79A84E696B9E6B395E5B0B1E698AFE4BDBFE794A8E7BABFE680A7E68EA2E6B58BE38082E7BABFE680A7E68EA2E6B58BE58F88E5BFABE58F88E7AE80E58D95E380825B315DE2809DE7BABFE680A7E68EA2E6B58BE883BDE5A49FE68F90E4BE9BE9AB98E680A7E883BDE79A84E58E9FE59BA0E698AFE59BA0E4B8BAE5AE83E79A84E889AFE5A5BDE79A84E5BC95E794A8E5B180E983A8E680A7EFBC8CE784B6E8808CE5AE83E4B88EE585B6E4BB96E8A7A3E586B3E695A3E58897E586B2E7AA81E79A84E7AD96E795A5E79BB8E6AF94E5AFB9E4BA8EE695A3E58897E587BDE695B0E79A84E8B4A8E9878FE69BB4E4B8BAE6958FE6849FE38082E5BD93E4BDBFE794A8E99A8FE69CBAE695A3E58897E587BDE695B0EFBC8C20352D696E646570656E64656E74E695A3E58897E587BDE695B0E68896746162756C6174696F6EE695A3E58897E587BDE695B0EFBC8CE585B6E794A8E4BA8EE6909CE7B4A2EFBC8CE68F92E585A5E68896E588A0E999A4E79A84E9A284E69C9FE697B6E997B4E698AFE5B8B8E695B0E38082E4B88DE8BF87EFBC8CE5809FE794B1E585B6E4BB96E5838FE698AFE7A781E8AFADE69D82E58791E79A84E695A3E58897E587BDE695B0E58FAFE4BBA5E59CA8E5AE9EE4BD9CE4B8ADE8BEBEE588B0E8BE83E5A5BDE79A84E7BB93E69E9C5B325DE38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '数据结构');
INSERT INTO `spider_text` VALUES ('62', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '数据结构');
INSERT INTO `spider_text` VALUES ('63', 0xE6909CE7B4A2EFBC9A0AE4B8BAE4BA86E6909CE7B4A2E7BB99E5AE9AE79A84E994AE2078EFBC8CE695A3E58897E8A1A8E4B8ADE794B168287829E5AFB9E5BA94E79A84E58D95E58583E5BC80E5A78BE79A84E79BB8E982BBE58D95E58583C2A068287829202B20312CC2A068287829202B20322C202E2E2E2C20E983BDE5B086E8A2ABE6A380E69FA5EFBC8CE79BB4E588B0E689BEE588B0E4BA86E58685E5AEB9E4B8BAE7A9BAE79A84E58D95E58583E68896E698AFE689BEE588B0E4BA86E5AD98E582A8E7BB99E5AE9AE994AEE4B8BA78E79A84E58D95E58583E38082E585B6E4B8ADEFBC8C68E698AFE695A3E58897E587BDE695B0E38082E5A682E69E9CE689BEE588B0E4BA86E5AD98E582A8E7BB99E5AE9AE994AEE79A84E58D95E58583EFBC8CE6909CE7B4A2E5B086E4BC9AE8BF94E59B9EE58D95E58583E4B8ADE5AD98E582A8E79A84E994AEE5AFB9E5BA94E79A84E580BCE38082E590A6E58899EFBC8CE5A682E69E9CE6909CE7B4A2E98187E588B0E4BA86E7A9BAE79A84E58D95E58583EFBC8CE994AEE59CA8E8A1A8E4B8ADE5B0B1E4B88DE5AD98E59CA8EFBC8CE59BA0E4B8BAE994AEE5BA94E5BD93E8A2ABE5AD98E694BEE59CA8E68980E69C89E69CAAE8A2ABE6909CE7B4A2E79A84E58D95E58583E4B98BE5898DE38082E6ADA4E697B6EFBC8CE6909CE7B4A2E8BF94E59B9EE8A1A8E4B8ADE697A0E6ADA4E994AEE79A84E7BB93E69E9CE38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '数据结构');
INSERT INTO `spider_text` VALUES ('64', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '数据结构');
INSERT INTO `spider_text` VALUES ('65', 0xE68F92E585A5EFBC9A0AE5A682E69E9CE68F92E585A5E5B086E5AFBCE887B4E8A1A8EFBC88E58DA0E794A8E58D95E58583E79A84E6AF94E4BE8BEFBC89E5A29EE995BFE9AB98E4BA8EE69F90E4B8AAE9A284E8AEBEE79A84E99888E580BCE79A84E8B49FE8BDBDE7B3BBE695B0EFBC8CE695B4E4B8AAE8A1A8E58FAFE4BBA5E9809AE8BF87E4B880E4B8AAE696B0E79A84E8A1A8EFBC88E8A784E6A8A1E5A4A7E4BA8EE69CACE8A1A8E8A784E6A8A1EFBC89E5928CE4B880E4B8AAE696B0E79A84E695A3E58897E587BDE695B0E69DA5E4BBA3E69BBFEFBC8CE5A682E4BDBFE794A8E58AA8E68081E695B0E7BB84E38082E8AEBEE7BDAEE8BF99E4B8AAE79A84E99888E580BCE68EA5E8BF91E4BA8EE99BB6EFBC8CE5B9B6E4BDBFE794A8E8A1A8E5A4A7E5B08FE79A84E9AB98E5A29EE995BFE78E87E69DA5E5B8A6E69DA5E69BB4E5BFABE9809FE79A84E59388E5B88CE8A1A8E79A84E6938DE4BD9CEFBC8CE4BD86E79BB8E6AF94E4BA8EE68EA5E8BF91E4B880E4B8AAE99888E580BCE4B88EE4BD8EE5A29EE995BFE78E87EFBC8CE5AE83E4BC9AE5B8A6E69DA5E69BB4E9AB98E79A84E58685E5AD98E4BDBFE794A8E68385E586B5E38082E4B880E4B8AAE5B8B8E8A781E79A84E98089E68BA9E698AFE8A1A8E8A784E6A8A1E689A9E5A4A7E4B880E5808DEFBC8CE5BD93E8B49FE8BDBDE7B3BBE695B0E5B086E8B685E8BF87312F32EFBC8CE5AFBCE887B4E8B49FE8BDBDE7B3BBE695B0E4BF9DE68C81E59CA8312F34E5928C312F32E4B98BE997B4E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '数据结构');
INSERT INTO `spider_text` VALUES ('66', 0xE588A0E999A4EFBC9A0AE5BD93E4B880E5AFB9E994AEE580BCE5AFB9E8A2ABE588A0E999A4EFBC8CE58FAFE883BDE4BC9AE69C89E5BF85E8A681E5B086E585B6E4BB96E79A84E994AEE580BCE5AFB9E694BEE59B9EE588B0E5AE83E79A84E58D95E58583E4B8ADEFBC8CE69DA5E998B2E6ADA2E6909CE7B4A2E697B6E6909CE7B4A2E588B0E7A9BAE79A84E58D95E58583E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '数据结构');
INSERT INTO `spider_text` VALUES ('67', 0xE588A0E999A4EFBC9A0AE695A3E58897E8A1A8E5BA94E5BD93E68F90E4BE9BE588A0E999A4E994AEE580BCE5AFB9E79A84E58A9FE883BDE38082E784B6E8808CEFBC8CE58D95E7BAAFE59CB0E6B885E7A9BAE5AFB9E5BA94E79A84E58D95E58583E698AFE4B88DE5A49FE79A84E38082E8BF99E4BC9AE5BDB1E5938DE588B0E5AFB9E4BA8EE582A8E5AD98E697B6E997B4E697A9E4BA8EE8AFA5E58D95E58583E38081E4BD86E582A8E5AD98E4BD8DE7BDAEE59CA8E8AFA5E58D95E58583E4B98BE5908EE79A84E585B6E4BB96E994AEE38082E6ADA4E58D95E58583E4BC9AE980A0E68890E6909CE7B4A2E88EB7E5BE97E99499E8AFAFE79A84E7BB93E69E9CEFBC8CE5918AE8AF89E4BDBFE794A8E88085E8BF99E4BA9BE994AEE5B9B6E4B88DE5AD98E59CA8E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '数据结构');
INSERT INTO `spider_text` VALUES ('68', 0xE588A0E999A4EFBC9A0AE79BB8E8BE83E4BA8EE79BB4E68EA5E6B885E7A9BAE5AFB9E5BA94E58D95E5858369EFBC8CE69BB4E5A5BDE79A84E5819AE6B395E698AFE58588E6B885E7A9BAEFBC8CE784B6E5908EE68A8AE5AE83E4B98BE5908EE68980E69C89E4BC9AE980A0E68890E997AEE9A298E79A84E58D95E58583E59091E5898DE7A7BBE58AA8EFBC8CE69DA5E981BFE5858DE6909CE7B4A2E587BAE99499E38082E9878DE5A48DE79BB4E588B0E587BAE78EB0E7A9BAE58D95E58583EFBC8CE58899E588A0E999A4E58AA8E4BD9CE5AE89E585A8E5AE8CE68890E38082E4BD86E698AFEFBC8CE5A682E69E9CE69C89E58F91E78EB0E5908EE7BBADE69C89E994AEE58FAFE4BBA5E7A7BBE588B0E8BF99E4B8AAE4BD8DE7BDAEE4B88AE79A84E8AF9DEFBC8CE79BB4E68EA5E5B086E8AFA5E994AEE58F96E4BBA3E6ACB2E588A0E999A4E79A84E58D95E58583E58FAFE4BBA5E58AA0E9809FE5908EE7BBADE79A84E585B6E4BB96E8A18CE4B8BAEFBC8CE5BD93E784B6EFBC8CE8BF99E6A0B7E4B99FE4BC9AE980A0E68890E5908EE99DA2E5A49AE587BAE4B880E4B8AAE696B0E79A84E7A9BAE58D95E58583E38082E6909CE7B4A2E58FAFE794A8E69DA5E58F96E4BBA3E79A84E58D95E58583E79A84E58AA8E4BD9CE4BC9AE68C81E7BBADE588B0E6909CE7B4A2E588B0E58E9FE69CACE5B0B1E7A9BAE799BDE79A84E58D95E58583E4B8BAE6ADA2E38082E59CA8E8BF99E4B8AAE5B086E994AEE7A7BBE588B0E5898DE99DA2E79A84E8BF87E7A88BE4B8ADEFBC8CE68980E69C89E79A84E994AEE983BDE4BC9AE8A2ABE7AE97E8BF87E4B880E9818DE38082E59BA0E6ADA4EFBC8CE5AE8CE68890E8BF99E695B4E4B8AAE8BF87E7A88BE68980E99C80E79A84E697B6E997B4E4B88EE8AFA5E582A8E5AD98E4BD8DE7BDAEE79A84E58D95E58583E695B0E9878FE59188E6ADA3E6AF94EFBC8CE4B88EE69D82E58791E8A1A8E79A84E585B6E4BB96E8BF90E7AE97E79BB8E7ACA65B335DE38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '数据结构');
INSERT INTO `spider_text` VALUES ('69', 0xE588A0E999A4EFBC9A0AE69C89E4B880E7A78DE58FAFE8A18CE79A84E69BBFE4BBA3E696B9E6A188E698AFE68792E683B0E588A0E999A4EFBC8CE794A8E68C87E59091E6ACB2E588A0E999A4E994AEE79A84E789B9E6AE8AE79A84E6A087E5BF97E580BCEFBC88666C61672076616C7565EFBC89E58F96E4BBA3E58E9FE69CACE79A84E994AEE580BCE9858DE5AFB9E38082E4B88DE8BF87EFBC8CE8BF99E4BA9BE6A087E5BF97E580BCE59CA8E6909CE7B4A2E4B88AE4BC9AE5BD93E4BD9CE99D9EE7A9BAE38082E59BA0E6ADA4EFBC8CE5A682E69E9CE4B880E4B8AAE998B5E58897E4B8ADE69C89E8BF87E5A49AE79A84E8A2ABE588A0E999A4E994AEEFBC8CE982A3E4B988E5B0B1E99C80E8A681E6B885E999A4E68980E69C89E79A84E6A087E5BF97E580BCE5B9B6E4B894E9878DE696B0E69D82E58791E695B4E4B8AAE8A1A85B335D5B345DE38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B', '2016-12-19 17:45:00', '2016-12-20 09:37:48', '4', '线性探测', '数据结构');
INSERT INTO `spider_text` VALUES ('70', 0xE69198E8A681EFBC9A0AE79BB8E4BD8DE998B5E58897EFBC88E88BB1E8AFADEFBC9A706861736564206172726179EFBC89EFBC8CE698AFE794B1E4B880E7BEA4E5A4A9E7BABFE7BB84E68890E79A84E998B5E58897E38082E98081E5BE80E59084E4B8AAE5A4A9E7BABFE79A84E8AEAFE58FB7E79A84E79BB8E5AFB9E79BB8E4BD8DE7BB8FE8BF87E98082E5BD93E8B083E695B4EFBC8CE69C80E5908EE4BC9AE5BCBAE58C96E8AEAFE58FB7E59CA8E68C87E5AE9AE696B9E59091E79A84E5BCBAE5BAA6EFBC8CE5B9B6E4B894E58E8BE68A91E585B6E4BB96E696B9E59091E79A84E5BCBAE5BAA6E38082E6ADA4E68A80E69CAFE69CACE69DA5E698AFE4B8BAE5B084E794B5E5A4A9E69687E5ADA6E5BC80E58F91E38082E5908EE69DA5E4B99FE4B8BAE4B8BBE58AA8E794B5E5AD90E689ABE68F8FE998B5E58897E99BB7E8BEBEE68980E794A8E38082, 'https://zh.wikipedia.org/wiki/%E7%9B%B8%E4%BD%8D%E9%98%B5%E5%88%97', '2016-12-14 16:53:00', '2016-12-20 09:37:58', '5', '相位阵列', '数据结构');
INSERT INTO `spider_text` VALUES ('71', 0xE69198E8A681EFBC9A0AE8AEB8E5A49AE59CB0E58CBAE79A84E8B083E5B985E5B9BFE692ADE794B5E58FB0E983BDE4BDBFE794A8E8BF99E4B8AAE68A80E69CAFEFBC8CE58FAFE4BBA5E99990E5AE9AE5B9BFE692ADE79A84E88C83E59BB4EFBC8CE5878FE5B091E5AFB9E585B6E4BB96E59CB0E58CBAE79A84E5B9B2E689B0E38082, 'https://zh.wikipedia.org/wiki/%E7%9B%B8%E4%BD%8D%E9%98%B5%E5%88%97', '2016-12-14 16:53:00', '2016-12-20 09:37:58', '5', '相位阵列', '数据结构');
INSERT INTO `spider_text` VALUES ('72', 0xE69198E8A681EFBC9A0AE7BE8EE59BBDE993BAE8B7AFE788AAE995BFE7A88BE9A284E8ADA6E99BB7E8BEBEE5B0B1E588A9E794A8E4BA86E79BB8E4BD8DE998B5E58897E58E9FE79086E38082, 'https://zh.wikipedia.org/wiki/%E7%9B%B8%E4%BD%8D%E9%98%B5%E5%88%97', '2016-12-14 16:53:00', '2016-12-20 09:37:58', '5', '相位阵列', '数据结构');
INSERT INTO `spider_text` VALUES ('73', 0xE69198E8A681EFBC9A0AE5AE8CE585A8E4BA8CE58886E59BBE20E4B880E4B8AAE5AE8CE585A8E4BA8CE58886E59BBE6D3D33206E203D3220E9A1B6E782B9206E2B6D20E8BEB9206D6E20E887AAE5908CE69E84E7BEA420326D216E21E5A682E69E9C6D3D6EEFBC8CE590A6E588996D216E2120E69FA520E8AEBA20E7BC96, 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%88%86%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:38:07', '6', '完全二分图', '数据结构');
INSERT INTO `spider_text` VALUES ('74', 0xE69198E8A681EFBC9A0AE5AE8CE585A8E4BA8CE58886E59BBEE698AFE4B880E7A78DE789B9E6AE8AE79A84E4BA8CE58886E59BBEEFBC8CE58FAFE4BBA5E68A8AE59BBEE4B8ADE79A84E9A1B6E782B9E58886E68890E4B8A4E4B8AAE99B86E59088EFBC8CE4BDBFE5BE97E7ACACE4B880E4B8AAE99B86E59088E4B8ADE79A84E68980E69C89E9A1B6E782B9E983BDE4B88EE7ACACE4BA8CE4B8AAE99B86E59088E4B8ADE79A84E68980E69C89E9A1B6E782B9E79BB8E8BF9EE38082, 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%88%86%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:38:07', '6', '完全二分图', '数据结构');
INSERT INTO `spider_text` VALUES ('75', 0xhttps://zh.wikipedia.org/wiki/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%88%86%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:38:07', '6', '完全二分图', '数据结构');
INSERT INTO `spider_text` VALUES ('76', 0xhttps://zh.wikipedia.org/wiki/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%88%86%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:38:07', '6', '完全二分图', '数据结构');
INSERT INTO `spider_text` VALUES ('77', 0xE69198E8A681EFBC9A0AE982BBE68EA5E79FA9E998B5E698AFE8A1A8E7A4BAE4B880E4B8AAE59BBEE79A84E5B8B8E794A8E5AD98E582A8E8A1A8E7A4BAE38082E5AE83E794A8E4B8A4E4B8AAE695B0E7BB84E58886E588ABE5AD98E582A8E695B0E68DAEE58583E7B4A0EFBC88E9A1B6E782B9EFBC89E79A84E4BFA1E681AFE5928CE695B0E68DAEE58583E7B4A0E4B98BE997B4E79A84E585B3E7B3BBEFBC88E8BEB9E68896E5BCA7EFBC89E79A84E4BFA1E681AFE38082, 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '2014-01-31 07:15:00', '2016-12-20 09:38:18', '7', '邻接矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('78', 0xhttps://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '2014-01-31 07:15:00', '2016-12-20 09:38:18', '7', '邻接矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('79', 0xE4BE8BE5AD90EFBC9A0A282031203120302030203120302031203020312030203120302030203120302031203020302030203020312030203120312031203120302031203020302030203020302031203020302029202E207B5C646973706C61797374796C65207B5C626567696E7B706D61747269787D31263126302630263126305C5C31263026312630263126305C5C30263126302631263026305C5C30263026312630263126315C5C31263126302631263026305C5C30263026302631263026305C5C5C656E647B706D61747269787D7D2E7D, 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '2014-01-31 07:15:00', '2016-12-20 09:38:18', '7', '邻接矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('80', 0xE789B9E680A7EFBC9A0AE8AEBEE59BBE2047207B5C646973706C61797374796C6520477D20E79A84E982BBE68EA5E79FA9E998B5E4B8BA2041207B5C646973706C61797374796C6520417D20E38082, 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '2014-01-31 07:15:00', '2016-12-20 09:38:18', '7', '邻接矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('81', 0xE789B9E680A7EFBC9A0A41206E207B5C646973706C61797374796C6520415E7B6E7D7D20E79A84E58583E7B4A020412069206A206E207B5C646973706C61797374796C6520415F7B696A7D5E7B6E7D7D20E8A1A8E7A4BAE794B1E9A1B6E782B92069207B5C646973706C61797374796C6520697D20E588B0E9A1B6E782B9206A207B5C646973706C61797374796C65206A7D20E995BFE5BAA6E4B8BA206E207B5C646973706C61797374796C65206E7D20E79A84E5BE84E79A84E695B0E79BAEE380825B315D, 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '2014-01-31 07:15:00', '2016-12-20 09:38:18', '7', '邻接矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('82', 0xhttps://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '2014-01-31 07:15:00', '2016-12-20 09:38:18', '7', '邻接矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('83', 0xhttps://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '2014-01-31 07:15:00', '2016-12-20 09:38:18', '7', '邻接矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('84', 0xE585B6E4BB96E8A7A3E6B395EFBC9A0A5E20E59BBEE8AEBAE4B8ADE982BBE68EA5E79FA9E998B5E79A84E5BA94E794A82EC2A0205E20322E3020322E3120E4BCA0E79083E997AEE9A298E79A84E7BB88E69E81E8A7A3E6B3952EC2A0, 'https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5', '2014-01-31 07:15:00', '2016-12-20 09:38:18', '7', '邻接矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('85', 0xE69198E8A681EFBC9A0AE6A091E5A086EFBC88E88BB1E8AFADEFBC9A5472656170EFBC89EFBC8CE698AFE69C89E4B880E4B8AAE99A8FE69CBAE99984E58AA0E59F9FE6BBA1E8B6B3E5A086E79A84E680A7E8B4A8E79A84E4BA8CE58F89E6909CE7B4A2E6A091EFBC8CE585B6E7BB93E69E84E79BB8E5BD93E4BA8EE4BBA5E99A8FE69CBAE695B0E68DAEE68F92E585A5E79A84E4BA8CE58F89E6909CE7B4A2E6A091E38082E585B6E59FBAE69CACE6938DE4BD9CE79A84E69C9FE69C9BE697B6E997B4E5A48DE69D82E5BAA6E4B8BA204F2028206C6F6720E281A1206E2029207B5C646973706C61797374796C65204F285C6C6F67207B6E7D297D20E38082E79BB8E5AFB9E4BA8EE585B6E4BB96E79A84E5B9B3E8A1A1E4BA8CE58F89E6909CE7B4A2E6A091EFBC8C5472656170E79A84E789B9E782B9E698AFE5AE9EE78EB0E7AE80E58D95EFBC8CE4B894E883BDE59FBAE69CACE5AE9EE78EB0E99A8FE69CBAE5B9B3E8A1A1E79A84E7BB93E69E84E38082, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:27', '8', '树堆', '数据结构');
INSERT INTO `spider_text` VALUES ('86', 0xhttps://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:27', '8', '树堆', '数据结构');
INSERT INTO `spider_text` VALUES ('87', 0xE7AE97E6B395E58886E69E90EFBC9A0A5472656170E79A84E585B6E5AE83E6938DE4BD9CE79A84E69C9FE69C9BE5A48DE69D82E5BAA6E5908CE6A0B7E698AF204F2028206C6F6720E281A1206E2029207B5C646973706C61797374796C65204F285C6C6F67207B6E7D297D20E38082, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:27', '8', '树堆', '数据结构');
INSERT INTO `spider_text` VALUES ('88', 0xE4B88EE585B6E4BB96E7BB93E69E84E79A84E6AF94E8BE83EFBC9A0A41564CE6A09120E4BCB8E5B195E6A091EFBC8853706C61792054726565EFBC8920E7BABFE6AEB5E6A09120E7BAA2E9BB91E6A0912053697A652042616C616E6365642054726565, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:27', '8', '树堆', '数据结构');
INSERT INTO `spider_text` VALUES ('89', 0xE4B88EE585B6E4BB96E7BB93E69E84E79A84E6AF94E8BE83EFBC9A0A52616E646F6D697A6564205365617263682054726565732870646629EFBC8CE69C89E5AFB95472656170E5928CE5AE83E79A84E58AA0E69D83E5BDA2E5BC8FE79A84E8AFA6E5B0BDE4BB8BE7BB8DE4BBA5E58F8AE5A48DE69D82E5BAA6E79A84E4B8A5E6A0BCE8AF81E6988E, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:27', '8', '树堆', '数据结构');
INSERT INTO `spider_text` VALUES ('91', 0xE68F92E585A5EFBC9A0AE7BB99E88A82E782B9E99A8FE69CBAE58886E9858DE4B880E4B8AAE4BC98E58588E7BAA7EFBC8CE58588E5928CE4BA8CE58F89E6909CE7B4A2E6A091E79A84E68F92E585A5E4B880E6A0B7EFBC8CE58588E68A8AE8A681E68F92E585A5E79A84E782B9E68F92E585A5E588B0E4B880E4B8AAE58FB6E5AD90E4B88AEFBC8CE784B6E5908EE8B79FE7BBB4E68AA4E5A086E4B880E6A0B7EFBC8CE5A682E69E9CE5BD93E5898DE88A82E782B9E79A84E4BC98E58588E7BAA7E6AF94E6A0B9E5A4A7E5B0B1E6978BE8BDACEFBC8CE5A682E69E9CE5BD93E5898DE88A82E782B9E698AFE6A0B9E79A84E5B7A6E584BFE5AD90E5B0B1E58FB3E6978BE5A682E69E9CE5BD93E5898DE88A82E782B9E698AFE6A0B9E79A84E58FB3E584BFE5AD90E5B0B1E5B7A6E6978BE38082, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:27', '8', '树堆', '数据结构');
INSERT INTO `spider_text` VALUES ('92', 0xE68F92E585A5EFBC9A0AE794B1E4BA8EE6978BE8BDACE698AF204F202820312029207B5C646973706C61797374796C65204F2831297D20E79A84EFBC8CE69C80E5A49AE8BF9BE8A18C68E6ACA1EFBC8868E698AFE6A091E79A84E9AB98E5BAA6EFBC89EFBC8CE68F92E585A5E79A84E5A48DE69D82E5BAA6E698AF204F202820682029207B5C646973706C61797374796C65204F2868297D20E79A84EFBC8CE59CA8E69C9FE69C9BE68385E586B5E4B88B2068203D204F2028206C6F6720E281A1206E2029207B5C646973706C61797374796C6520683D4F285C6C6F67207B6E7D297D20EFBC8CE68980E4BBA5E5AE83E79A84E69C9FE69C9BE5A48DE69D82E5BAA6E698AF204F2028206C6F6720E281A1206E2029207B5C646973706C61797374796C65204F285C6C6F67207B6E7D297D20E38082, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:27', '8', '树堆', '数据结构');
INSERT INTO `spider_text` VALUES ('93', 0xE588A0E999A4EFBC9A0AE59BA0E4B8BA5472656170E6BBA1E8B6B3E5A086E680A7E8B4A8EFBC8CE68980E4BBA5E58FAAE99C80E8A681E68A8AE8A681E588A0E999A4E79A84E88A82E782B9E6978BE8BDACE588B0E58FB6E88A82E782B9E4B88AEFBC8CE784B6E5908EE79BB4E68EA5E588A0E999A4E5B0B1E58FAFE4BBA5E4BA86E38082E585B7E4BD93E79A84E696B9E6B395E5B0B1E698AFE6AF8FE6ACA1E689BEE588B0E4BC98E58588E7BAA7E69C80E5A4A7E79A84E584BFE5AD90EFBC8CE59091E4B88EE585B6E79BB8E58F8DE79A84E696B9E59091E6978BE8BDACEFBC8CE79BB4E588B0E982A3E4B8AAE88A82E782B9E8A2ABE6978BE8BDACE588B0E4BA86E58FB6E88A82E782B9EFBC8CE784B6E5908EE79BB4E68EA5E588A0E999A4E38082, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:27', '8', '树堆', '数据结构');
INSERT INTO `spider_text` VALUES ('94', 0xE588A0E999A4EFBC9A0AE588A0E999A4E69C80E5A49AE8BF9BE8A18C204F202820682029207B5C646973706C61797374796C65204F2868297D20E6ACA1E6978BE8BDACEFBC8CE69C9FE69C9BE5A48DE69D82E5BAA6E698AF204F2028206C6F6720E281A1206E2029207B5C646973706C61797374796C65204F285C6C6F67207B6E7D297D20E38082, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:27', '8', '树堆', '数据结构');
INSERT INTO `spider_text` VALUES ('95', 0xE69FA5E689BEEFBC9A0AE5928CE4B880E888ACE79A84E4BA8CE58F89E6909CE7B4A2E6A091E4B880E6A0B7EFBC8CE4BD86E698AFE794B1E4BA8E5472656170E79A84E99A8FE69CBAE58C96E7BB93E69E84EFBC8C5472656170E4B8ADE69FA5E689BEE79A84E69C9FE69C9BE5A48DE69D82E5BAA6E698AF204F2028206C6F6720E281A1206E2029207B5C646973706C61797374796C65204F285C6C6F67207B6E7D297D20E38082, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:27', '8', '树堆', '数据结构');
INSERT INTO `spider_text` VALUES ('96', 0x50617363616CEFBC9A0A282A0A2020202050726F6A6563743A20416D626572205374616E6461726420536F7572636573204C696272617279205B4153534C5D0A20202020417574686F723A20416D6265720A202020205469746C653A2054726561700A2020202043617465676F72793A2044617461205374727563747572650A2020202056657273696F6E3A2076312E300A2020202052656D61726B3A2058585858585858580A202020205465737465642050726F626C656D733A204E2F410A20202020446174653A20323030362D31312D31360A202A290A2070726F6772616D204153534C5F547265617028496E7075742C204F7574707574293B0A20636F6E73740A20202020496E66696E697479203D2036353533353B0A20747970650A2020202054496E646578203D204C6F6E67696E743B0A20202020544B6579203D204C6F6E67696E743B0A20202020545072696F72697479203D20576F72643B0A202020205054726561704E6F6465203D205E5454726561704E6F64653B0A202020205454726561704E6F6465203D207265636F72640A20202020202020204C6566742C2052696768743A205054726561704E6F64653B0A20202020202020205072696F726974793A20545072696F726974793B0A20202020202020204B65793A20544B65793B0A20202020656E643B0A207661720A202020204E756C6C4E6F64653A205054726561704E6F64653B0A200A2070726F63656475726520496E6974616C697A653B0A20626567696E0A202020206966204E756C6C4E6F6465203D206E696C207468656E0A20202020626567696E0A20202020202020204E6577284E756C6C4E6F6465293B0A20202020202020204E756C6C4E6F64655E2E4C656674203A3D204E756C6C4E6F64653B0A20202020202020204E756C6C4E6F64655E2E5269676874203A3D204E756C6C4E6F64653B0A20202020202020204E756C6C4E6F64655E2E5072696F72697479203A3D20496E66696E6974793B0A20202020656E643B0A20656E643B0A200A2066756E6374696F6E2046696E644D617828543A205054726561704E6F6465293A205054726561704E6F64653B0A20626567696E0A2020202069662054203C3E204E756C6C4E6F6465207468656E0A20202020202020207768696C6520545E2E5269676874203C3E204E756C6C4E6F646520646F0A20202020202020202020202054203A3D20545E2E52696768743B0A20202020526573756C74203A3D20543B0A20656E643B0A200A2066756E6374696F6E2046696E644D696E28543A205054726561704E6F6465293A205054726561704E6F64653B0A20626567696E0A2020202069662054203C3E204E756C6C4E6F6465207468656E0A20202020202020207768696C6520545E2E4C656674203C3E204E756C6C4E6F646520646F0A20202020202020202020202054203A3D20545E2E4C6566743B0A20202020526573756C74203A3D20543B0A20656E643B0A200A2066756E6374696F6E2046696E6428543A205054726561704E6F64653B204B65793A20544B6579293A205054726561704E6F64653B0A20626567696E0A202020207768696C652054203C3E204E756C6C4E6F646520646F0A20202020202020206966204B6579203C20545E2E4B6579207468656E0A20202020202020202020202054203A3D20545E2E4C6566740A2020202020202020656C7365206966204B6579203E20545E2E4B6579207468656E0A20202020202020202020202054203A3D20545E2E52696768740A2020202020202020656C73650A202020202020202020202020427265616B3B0A20202020526573756C74203A3D20543B0A20656E643B0A200A2066756E6374696F6E204C656674526F7461746528543A205054726561704E6F6465293A205054726561704E6F64653B0A20626567696E0A20202020526573756C74203A3D20545E2E4C6566743B0A20202020545E2E4C656674203A3D20526573756C745E2E52696768743B0A20202020526573756C745E2E5269676874203A3D20543B0A20656E643B0A200A2066756E6374696F6E205269676874526F7461746528543A205054726561704E6F6465293A205054726561704E6F64653B0A20626567696E0A20202020526573756C74203A3D20545E2E52696768743B0A20202020545E2E5269676874203A3D20526573756C745E2E4C6566743B0A20202020526573756C745E2E4C656674203A3D20543B0A20656E643B0A200A2066756E6374696F6E20496E736572744E6F6465284B65793A20544B65793B20543A205054726561704E6F6465293A205054726561704E6F64653B0A20626567696E0A2020202069662054203D204E756C6C4E6F6465207468656E0A20202020626567696E0A20202020202020204E65772854293B0A2020202020202020545E2E4C656674203A3D204E756C6C4E6F64653B0A2020202020202020545E2E5269676874203A3D204E756C6C4E6F64653B0A2020202020202020545E2E4B6579203A3D204B65793B0A2020202020202020545E2E5072696F72697479203A3D2052616E646F6D283635353335293B0A20202020656E640A20202020656C7365206966204B6579203C20545E2E4B6579207468656E0A20202020626567696E0A2020202020202020545E2E4C656674203A3D20496E736572744E6F6465284B65792C20545E2E4C656674293B0A2020202020202020696620545E2E4C6566745E2E5072696F72697479203C20545E2E5072696F72697479207468656E0A20202020202020202020202054203A3D204C656674526F746174652854293B0A20202020656E640A20202020656C7365206966204B6579203E20545E2E4B6579207468656E0A20202020626567696E0A2020202020202020545E2E5269676874203A3D20496E736572744E6F6465284B65792C20545E2E5269676874293B0A2020202020202020696620545E2E52696768745E2E5072696F72697479203C20545E2E5072696F72697479207468656E0A20202020202020202020202054203A3D205269676874526F746174652854293B0A20202020656E643B0A20202020526573756C74203A3D20543B0A20656E643B0A200A2066756E6374696F6E2044656C6574654E6F6465284B65793A20544B65793B20543A205054726561704E6F6465293A205054726561704E6F64653B0A20626567696E0A2020202069662054203C3E204E756C6C4E6F6465207468656E0A20202020202020206966204B6579203C20545E2E4B6579207468656E0A202020202020202020202020545E2E4C656674203A3D2044656C6574654E6F6465284B65792C20545E2E4C656674290A2020202020202020656C7365206966204B6579203E20545E2E4B6579207468656E0A202020202020202020202020545E2E5269676874203A3D2044656C6574654E6F6465284B65792C20545E2E5269676874290A2020202020202020656C73650A2020202020202020626567696E0A202020202020202020202020696620545E2E4C6566745E2E5072696F72697479203C20545E2E52696768745E2E5072696F72697479207468656E0A2020202020202020202020202020202054203A3D204C656674526F746174652854290A202020202020202020202020656C73650A2020202020202020202020202020202054203A3D205269676874526F746174652854293B0A20202020202020202020202069662054203C3E204E756C6C4E6F6465207468656E0A2020202020202020202020202020202054203A3D2044656C6574654E6F6465284B65792C2054290A202020202020202020202020656C7365202F2F5269676874526F746174650A202020202020202020202020626567696E0A20202020202020202020202020202020446973706F736528545E2E4C656674293B0A20202020202020202020202020202020545E2E4C656674203A3D204E756C6C4E6F64653B0A202020202020202020202020656E643B0A2020202020202020656E643B0A2020202020526573756C74203A3D20543B0A20656E643B0A200A2070726F636564757265204D61696E3B0A20626567696E0A2020202020496E6974616C697A653B0A20656E643B0A20626567696E0A20202020204D61696E3B0A20656E642E, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:27', '8', '树堆', '数据结构');
INSERT INTO `spider_text` VALUES ('97', 0xhttps://zh.wikipedia.org/wiki/%E6%A0%91%E5%A0%86', '2016-11-21 02:45:00', '2016-12-20 09:38:27', '8', '树堆', '数据结构');
INSERT INTO `spider_text` VALUES ('98', 0xhttps://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:46', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('99', 0xE69198E8A681EFBC9A0AE588A9E794A831365320E6A0B8E7B396E4BD93524E41E7BB98E588B6E79A84E7B3BBE7BB9FE6BC94E58C96E6A091EFBC8CE4B889E4B8AAE69C80E5A4A7E58886E694AFEFBC88E59F9FEFBC89E58886E588ABE4B8BAE7BB86E88F8CE59F9FE38081E58FA4E88F8CE59F9FE5928CE79C9FE6A0B8E7949FE789A9E59F9FE38082, 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:46', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('100', 0xE69198E8A681EFBC9A0AE887AAE58AA8E7949FE68890E79A84E7949FE591BDE6A091EFBC8CE59FBAE4BA8EE5AE8CE585A8E6B58BE5BA8FE79A84E59FBAE59BA0E7BB84E380825B315D5B325D, 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('101', 0xhttps://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('102', 0xE6A0B9EFBC9A0AE6A091E58FAFE58886E4B8BAE69C89E6A0B9E6A091E5928CE697A0E6A0B9E6A091E4B8A4E7B1BBE38082E69C89E6A0B9E6A091E698AFE585B7E69C89E696B9E59091E79A84E6A091EFBC8CE58C85E590ABE594AFE4B880E79A84E88A82E782B9EFBC8CE5B086E585B6E4BD9CE4B8BAE6A091E4B8ADE68980E69C89E789A9E7A78DE79A84E69C80E8BF91E585B1E5908CE7A596E58588E38082E58FB3E59BBEE58DB3E698AFE4B880E4B8AAE69C89E6A0B9E6A091EFBC8CE8A1A8E7A4BAE4BA86E4B889E59F9FE7B3BBE7BB9F28576F657365203139393829E38082E69C80E5B8B8E794A8E79A84E7A1AEE5AE9AE6A091E6A0B9E79A84E696B9E6B395E698AFE4BDBFE794A8E4B880E4B8AAE68896E5A49AE4B8AAE697A0E58FAFE4BA89E8AEAEE79A84E5908CE6BA90E789A9E7A78DE4BD9CE4B8BAE5A496E7BEA4EFBC88E88BB1E696876F757467726F7570EFBC89EFBC8CE8BF99E4B8AAE5A496E7BEA4E8A681E8B6B3E5A49FE8BF91EFBC8CE4BBA5E68F90E4BE9BE8B6B3E5A49FE79A84E4BFA1E681AFEFBC8CE4BD86E58F88E4B88DE883BDE5A4AAE8BF91E4BBA5E887B3E4BA8EE5928CE6A091E4B8ADE79A84E7A78DE7B1BBE79BB8E6B7B7E38082, 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('103', 0xE6A0B9EFBC9A0AE68A8AE69C89E6A0B9E6A091E58EBBE68E89E6A0B9E58DB3E68890E4B8BAE697A0E6A0B9E6A091E38082E4B880E6A3B5E697A0E6A0B9E6A091E59CA8E6B2A1E69C89E585B6E4BB96E4BFA1E681AFEFBC88E5A496E7BEA4EFBC89E68896E58187E8AEBEEFBC88E5A682E58187E8AEBEE69C80E5A4A7E69E9DE995BFE4B8BAE6A0B9EFBC89E697B6E4B88DE883BDE7A1AEE5AE9AE585B6E6A091E6A0B9E38082E697A0E6A0B9E6A091E698AFE6B2A1E69C89E696B9E59091E79A84EFBC8CE585B6E4B8ADE7BABFE6AEB5E79A84E4B8A4E4B8AAE6BC94E58C96E696B9E59091E983BDE69C89E58FAFE883BDE38082, 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('104', 0xE79FA9E998B5E6B395EFBC9A0AE8BF91E982BBE7BB93E59088E6B395206E65696768626F722D6A6F696E696E6720284E4A29, 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('105', 0xE7AE80E7BAA6E6B395EFBC9A0AE69C80E5A4A7E7AE80E7BAA6E6B395206D6178696D756D2070617273696D6F6E7920284D5029, 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('106', 0xE69C80E5A4A7E4BCBCE784B6E6B395EFBC9A0AE69C80E5A4A7E4BCBCE784B6E4BCB0E8AEA1206D6178696D756D206C696B656C69686F6F6420284D4C29, 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('107', 0x5068796C6970EFBC9A0AE5AE98E696B9E7BD91E7AB99EFBC9A687474703A2F2F65766F6C7574696F6E2E67656E65746963732E77617368696E67746F6E2E6564752F7068796C69702E68746D6C20EFBC88E88BB1E69687EFBC89, 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('108', 0x415242EFBC9A0AE5AE98E696B9E7BD91E7AB99EFBC9A687474703A2F2F7777772E6172622D686F6D652E64652F20EFBC88E88BB1E69687EFBC89, 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('109', 0x4D724261796573EFBC9A0AE5AE98E696B9E7BD91E7AB99EFBC9A687474703A2F2F6D7262617965732E637369742E6673752E6564752F696E6465782E70687020EFBC88E88BB1E69687EFBC89, 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('110', 0x42414D4245EFBC9A0A687474703A2F2F7777772E6D61746863732E6475712E6564752F6C61726765742F62616D62652E68746D6C2028E88BB1E6968729, 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('111', 0xE8BDAFE4BBB6EFBC9A0A504155502A205472656556696577205068796C6F77696E2066617374444E416D6C2053454D5048592050414C4D, 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('112', 0xhttps://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('113', 0xE8BDAFE4BBB6EFBC9A0AE7BBB4E59FBAE585B1E4BAABE8B584E6BA90E4B8ADE79BB8E585B3E79A84E5A49AE5AA92E4BD93E8B584E6BA90EFBC9AE7949FE591BDE79A84E7B3BBE7BB9FE58F91E7949FE6A091, 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('114', 0xE8BDAFE4BBB6EFBC9A0A546865204465617468206F66207468652054726565206F66204C6966652069732047726561746C7920457861676765726174656420E7949FE789A9E8BDAFE4BBB6E7BD9120E8BF9BE58C96E6A091E58886E69E90E8BDAFE4BBB620E7949FE789A9E8B0B720E8BF9BE58C96E6A091E58886E69E90E8BDAFE4BBB620E8BF9BE58C96E6A091E8BDAFE4BBB6E4BDBFE794A8E7BBBCE8BFB020E6BC94E58C96E6A091E8BDAFE4BBB6E4BB8BE7BB8DEFBC88E88BB1E69687EFBC89, 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('115', 0xE8BDAFE4BBB6EFBC9A0AE8BF9BE58C96E8AEBA20E7949FE789A9E58886E7B1BBE680BBE8A1A820E6A0912028E695B0E68DAEE7BB93E69E842920656E3A54726565206F66206C696665202862696F6C6F6779292C20656E3A44617669642048696C6C6973272048696C6C697320506C6F742028696D6167652920E58886E7B1BBE5ADA620E7B3BBE7BB9FE58F91E7949FE5ADA6287068796C6F67656E65746963732920E7B3BBE7BB9FE58F91E7949FE7BD91E7BB9C287068796C6F67656E65746963206E6574776F726B29, 'https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E5%8F%91%E7%94%9F%E6%A0%91', '2016-07-04 01:38:00', '2016-12-20 09:38:47', '10', '系统发生树', '数据结构');
INSERT INTO `spider_text` VALUES ('117', 0xhttps://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:56', '11', '随机图', '数据结构');
INSERT INTO `spider_text` VALUES ('118', 0xE5AE9AE4B989E4B88EE6A8A1E59E8BEFBC9A0AE99A8FE69CBAE59BBEE79A84E2809CE99A8FE69CBAE2809DE4BA8CE5AD97E4BD93E78EB0E59CA8E8BEB9E79A84E58886E5B883E4B88AE38082E4B880E4B8AAE99A8FE69CBAE59BBEE5AE9EE99985E4B88AE698AFE5B086E7BB99E5AE9AE79A84E9A1B6E782B9E4B98BE997B4E99A8FE69CBAE59CB0E8BF9EE4B88AE8BEB9E38082E58187E8AEBEE5B086E4B880E4BA9BE7BABDE689A3E695A3E890BDE59CA8E59CB0E4B88AEFBC8CE5B9B6E4B894E4B88DE696ADE99A8FE69CBAE59CB0E5B086E4B8A4E4B8AAE7BABDE689A3E4B98BE997B4E7B3BBE4B88AE4B880E69DA1E7BABFEFBC8CE8BF99E6A0B7E5B0B1E5BE97E588B0E4B880E4B8AAE99A8FE69CBAE59BBEE79A84E4BE8BE5AD905B335DE38082E8BEB9E79A84E4BAA7E7949FE58FAFE4BBA5E4BE9DE8B596E4BA8EE4B88DE5908CE79A84E99A8FE69CBAE696B9E5BC8FEFBC8CE8BF99E6A0B7E5B0B1E4BAA7E7949FE4BA86E4B88DE5908CE79A84E99A8FE69CBAE59BBEE6A8A1E59E8BE38082E4B880E4B8AAE585B8E59E8BE79A84E6A8A1E59E8BE698AFE59F83E5B094E5BEB7E4BB80E5928CE99BB7E5B0BCE585B1E5908CE7A094E7A9B6E79A844552E6A8A1E59E8BE380824552E6A8A1E59E8BE698AFE68C87E59CA8E7BB99E5AE9A206E20E4B8AAE9A1B6E782B9E5908EEFBC8CE8A784E5AE9AE6AF8FE4B8A4E4B8AAE9A1B6E782B9E4B98BE997B4E983BDE69C89207020E79A84E6A682E78E87E8BF9EE8B5B7E69DA5EFBC88203020E2A9BD207020E2A9BD2031207B5C646973706C61797374796C6520305C6C6571736C616E7420705C6C6571736C616E7420317D20EFBC89EFBC8CE8808CE4B894E8BF99E4BA9BE588A4E5AE9AE4B98BE997B4E4B8A4E4B8A4E697A0E585B3E38082E8BF99E6A0B7E5BE97E588B0E79A84E99A8FE69CBAE59BBEE4B880E888ACE8AEB0E4BD9C2047206E2070207B5C646973706C61797374796C6520475F7B6E7D5E7B707D7D20E6889620452052206E202820702029207B5C646973706C61797374796C652045525F7B6E7D2870297D205B345DE38082, 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:56', '11', '随机图', '数据结构');
INSERT INTO `spider_text` VALUES ('119', 0xE5AE9AE4B989E4B88EE6A8A1E59E8BEFBC9A0AE58FA6E4B880E7A78DE99A8FE69CBAE59BBEE6A8A1E59E8BE58FABE5819AE58685E7A7AFE6A8A1E59E8BE38082E58685E7A7AFE6A8A1E59E8BE79A84E69CBAE588B6E698AFE5AFB9E6AF8FE4B880E4B8AAE9A1B6E782B9E68C87E5AE9AE4B880E4B8AAE5AE9EE7B3BBE695B0E79A84E59091E9878FEFBC8CE8808CE4B8A4E4B8AAE9A1B6E782B9E4B98BE997B4E698AFE590A6E8BF9EE68EA5E79A84E6A682E78E87E58899E698AFE5AE83E4BBACE79A84E59091E9878FE79A84E58685E7A7AFE79A84E587BDE695B0E38082, 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:56', '11', '随机图', '数据结构');
INSERT INTO `spider_text` VALUES ('120', 0xhttps://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:56', '11', '随机图', '数据结构');
INSERT INTO `spider_text` VALUES ('121', 0xE5AE9AE4B989E4B88EE6A8A1E59E8BEFBC9A0AE99A8FE69CBAE8A784E58899E59BBEE698AFE99A8FE69CBAE59BBEE4B8ADE789B9E6AE8AE79A84E4B880E7B1BBEFBC8CE5AE83E79A84E680A7E8B4A8E58FAFE883BDE4BC9AE4B88EE4B880E888ACE79A84E99A8FE69CBAE59BBEE4B88DE5908CE38082, 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:56', '11', '随机图', '数据结构');
INSERT INTO `spider_text` VALUES ('122', 0xE680A7E8B4A8EFBC9A0AE99A8FE79D80E8BEB9E6A682E78E87E79A84E4B88DE5908CEFBC8CE99A8FE69CBAE59BBEE58FAFE883BDE4BC9AE59188E78EB0E4B88DE5908CE79A84E5B19EE680A7E38082E5AFB9E4BA8EE69C80E585B8E59E8BE79A844552E6A8A1E59E8BEFBC8CE59F83E5B094E5BEB7E4BB80E4B88EE99BB7E5B0BCE7A094E7A9B6E4BA86E5BD93E9A1B6E782B9E695B0E79BAE206E20E8B68BE59091E4BA8EE6ADA3E697A0E7A9B7E5A4A7E697B6EFBC8C4552E99A8FE69CBAE59BBEE79A84E680A7E8B4A8E4B88EE6A682E78E87207020E4B98BE997B4E79A84E585B3E7B3BBE38082E4BB96E4BBACE58F91E78EB0EFBC8CE5BD93207020E79A84E580BCE8B68AE8BF87E69F90E4BA9BE997A8E6A79BE697B6EFBC8C4552E99A8FE69CBAE59BBEE79A84E680A7E8B4A8E4BC9AE58F91E7949FE7AA81E784B6E79A84E694B9E58F985B335DE380824552E99A8FE69CBAE59BBEE79A84E8AEB8E5A49AE680A7E8B4A8E983BDE698AFE7AA81E784B6E6B68CE78EB0E79A84EFBC8CE6AF94E5A682E8AFB4EFBC8CE5BD93207020E79A84E580BCE5B08FE4BA8EE69F90E4B8AAE789B9E6AE8AE580BCE4B98BE5898DEFBC8CE99A8FE69CBAE59BBEE585B7E69C89E69F90E4B8AAE680A7E8B4A8E79A84E58FAFE883BDE680A7E7AD89E4BA8E30EFBC8CE4BD86E5BD93207020E79A84E580BCE5A4A7E4BA8EE8BF99E4B8AAE789B9E6AE8AE580BCE4BBA5E5908EEFBC8CE99A8FE69CBAE59BBEE585B7E69C89E8BF99E4B8AAE680A7E8B4A8E79A84E58FAFE883BDE680A7E4BC9AE7AA81E784B6E58F98E6889031E38082, 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:56', '11', '随机图', '数据结构');
INSERT INTO `spider_text` VALUES ('123', 0xE680A7E8B4A8EFBC9A0AE4B8BEE4BE8BE69DA5E8AFB4EFBC8CE5BD93E6A682E78E87207020E5A4A7E4BA8EE69F90E4B8AAE4B8B4E7958CE580BC207063286E2920E5908EEFBC8CE7949FE68890E79A84E99A8FE69CBAE59BBEE587A0E4B98EE5BF85E784B6E698AFE8BF9EE9809AE79A84EFBC88E6A682E78E87E7AD89E4BA8E31EFBC89E38082E4B99FE5B0B1E698AFE8AFB4EFBC8CE5AFB9E4BA8EE695A3E890BDE59CA8E59CB0E4B88AE79A84206E20E4B8AAE7BABDE689A3EFBC8CE5A682E69E9CE4BDA0E4BBA5E8BF99E6A0B7E79A84E6A682E78E87207020E5B086E4B8A4E4B8AAE7BABDE689A3E4B98BE997B4E7B3BBE4B88AE7BABFEFBC8CE982A3E4B988E4BDA0E68BBFE8B5B7E4B880E9A297E7BABDE689A3E697B6E5B0B1E587A0E4B98EE883BDE5B8A6E8B5B7E68980E69C89E79A84E7BABDE689A3E4BA865B335DE38082, 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:56', '11', '随机图', '数据结构');
INSERT INTO `spider_text` VALUES ('124', 0xhttps://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:56', '11', '随机图', '数据结构');
INSERT INTO `spider_text` VALUES ('125', 0xE99A8FE69CBAE6A091EFBC9A0AE78EBBE889B22DE788B1E59BA0E696AFE59DA6E5879DE8819A20E88594E4BD93E6B39520E5A48DE69D82E7BD91E7BB9C20E5B08FE4B896E7958CE7BD91E7BB9C20E697A0E5B0BAE5BAA6E7BD91E7BB9C, 'https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:56', '11', '随机图', '数据结构');
INSERT INTO `spider_text` VALUES ('126', 0xhttps://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%9B%BE', '2016-09-29 13:56:00', '2016-12-20 09:38:56', '11', '随机图', '数据结构');
INSERT INTO `spider_text` VALUES ('128', 0xhttps://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('129', 0xE69198E8A681EFBC9A0AE58FAFE58886E8A7A3E68890E4B8BAE59084E887AAE79A84E58CBAE59D9720E6AF8FE4B8AAE58CBAE59D97E983BDE69C89E88A82E782B9E5AEB9E9878FE38082E5BD93E88A82E782B9E8BEBEE588B0E69C80E5A4A7E5AEB9E9878FE697B6EFBC8CE88A82E782B9E58886E8A38220E6A091E78AB6E695B0E68DAEE7BB93E69E84E4BE9DE980A0E59B9BE58583E6A091E6B395E58AA0E4BBA5E58CBAE58886, 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('130', 0xhttps://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('131', 0xhttps://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('132', 0xE58CBAE8BEA8E8AFB4E6988EEFBC9A0A5E20546F6D617320472E20526F6B69636B692E20416E20416C676F726974686D20666F7220436F6D7072657373696E6720537061636520616E642054696D652E20323030362D30342D3031205B323030392D30352D32305D2EC2A0, 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('133', 0xhttps://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('134', 0xE58CBAE8BEA8E8AFB4E6988EEFBC9A0AE585ABE58F89E6A09120E4BA8CE58F89E7A9BAE997B4E58886E58CBA2842696E61727920737061636520706172746974696F6E696E6729206B2D64E6A091284B642D74726565292052E6A09128522D7472656529205542E6A0912855422D747265652920E7A9BAE997B4E7B4A2E5BC95285370617469616C20696E6465782920E7A9BAE997B4E695B0E68DAEE5BA93285370617469616C20646174616261736529, 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('135', 0xE58CBAE8BEA8E8AFB4E6988EEFBC9A0A412064697363757373696F6E206F662074686520517561647472656520616E6420616E206170706C69636174696F6E20EFBC88E88BB1E69687EFBC8920436F6E736964657261626C652064697363757373696F6E20616E642064656D6F6E7374726174696F6E73206F66205370617469616C20496E646578696E6720EFBC88E88BB1E69687EFBC89, 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('137', 0xE59B9BE58583E6A091E58CBAE59D97EFBC9A0AE59B9BE58583E6A091E58CBAE59D97E8A1A8E7A4BAE4B8BAE7A9BAE997B4E79A84E58886E58CBAEFBC8CE58DB3E59CA8E4BA8CE7BBB4E4B88AE58886E58CBAE59D97E4B8BAE59B9BE7BB84E79BB8E5908CE79A84E8B1A1E99990E38081E6ACA1E8B1A1E99990E7AD89EFBC8CE4B894E6AF8FE4B8AAE58FB6E88A82E782B9E58C85E590ABE69C89E585B3E789B9E6AE8AE6ACA1E58CBAE59D97E79A84E695B0E68DAEE38082E6A091E9878CE79A84E6AF8FE4B8AAE88A82E782B9E4B88DE698AFE6ADA3E5A5BDE69C8934E4B8AAE5AD90E88A82E782B9EFBC8CE5B0B1E698AFE6B2A1E69C89E5AD90E88A82E782B928E4B8BAE4B880E4B8AAE6A091E58FB6E88A82E782B929E38082E59B9BE58583E6A091E58CBAE59D97E4B88DE698AFE4B8A5E6A0BCE79A84E4B880E9A29727E6A09127202D20E4B894E4BD8DE7BDAEE79A84E6ACA1E58886E58CBAE4B88EE695B0E68DAEE697A0E585B3E38082E4BB96E4BBACE698AFE6AF94E8BE83E7B2BEE7A1AEE4B880E4BA9BE7A7B0E4B8BA27E58D95E8AF8DE69FA5E689BEE6A091272E, 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('138', 0xhttps://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('139', 0xE59B9BE58583E6A091E58CBAE59D97EFBC9A0AE59B9BE58583E6A091E58CBAE59D97E4B99FE58FAFE4BBA5E794A8E4B8BAE4B880E7A78DE695B0E68DAEE58CBAE59D97E4B88AE4B88DE5908CE58F98E58C96E8A7A3E69E90E79A84E8A1A8E8BEBEE6B395E38082E6AF94E5A682EFBC8CE6B8A9E5BAA6E59CA8E4B880E4B8AAE58CBAE59D97E4B8ADE58FAFE4BBA5E5AD98E582A8E4B8BAE4B880E4B8AAE59B9BE58583E6A091EFBC8CE8808CE6A091E58FB6E88A82E782B9E5AD98E582A8E89197E5B9B3E59D87E6B8A9E5BAA6E6B6B5E79B96E588B0E5AE83E68980E68BA5E69C89E79A84E6ACA1E58CBAE59D97E38082, 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('140', 0xE59B9BE58583E6A091E58CBAE59D97EFBC9A0AE58187E5A682E59B9BE58583E6A091E58CBAE59D97E8A2ABE794A8E69DA5E8A1A8E8BEBEE4B880E7BB84E782B9E695B0E68DAE28E8AFB8E5A682E4B880E7BB84E59F8EE5B882E79A84E7BB8FE7BAACE5BAA629EFBC8CE58CBAE59D97E5B0B1E8BF9BE8A18CE6ACA1E58886E58CBAE79BB4E588B0E6AF8FE4B8AAE58FB6E88A82E782B9E58C85E590ABE69C80E5A49AE4B880E4B8AAE58D95E782B9E38082, 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('141', 0xE8BEB9E59B9BE58583E6A091EFBC9A0AE8BEB9E59B9BE58583E6A091E698AFE4B893E997A8E794A8E69DA5E5AD98E582A8E79BB4E7BABFE8808CE4B88DE698AFE782B9E38082E69BB2E7BABFE883BDE58886E58CBAE6AF8FE6A0BCE588B0E5BE88E68EA5E8BF91E7B2BEE7BB86E79A84E58886E8BEA8E78E87E38082E5A682E6ADA4E883BDE4BAA7E7949FE69E81E5BAA6E79A84E4B88DE5B9B3E8A1A1E6A091EFBC8CE8808CE6ADA4E4B88DE5B9B3E8A1A1E6A091E58FAFE883BDE68EA8E7BFBBE7B4A2E5BC95E79A84E4BDBFE794A8E79BAEE79A84E38082, 'https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('142', 0xhttps://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('143', 0xhttps://zh.wikipedia.org/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91', '2016-03-03 08:42:00', '2016-12-20 09:39:06', '12', '四叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('144', 0xE69198E8A681EFBC9A0AE58FAFE58F98E995BFE695B0E7BB84E698AFE8AEA1E7AE97E69CBAE7A88BE5BA8FE8AEBEE8AEA1E4B8ADEFBC8CE695B0E7BB84E5AFB9E8B1A1E79A84E995BFE5BAA6E59CA8E8BF90E8A18CE697B6EFBC88E8808CE4B88DE698AFE7BC96E8AF91E697B6EFBC89E7A1AEE5AE9AE380825B315D, 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:16', '13', '可变长数组', '数据结构');
INSERT INTO `spider_text` VALUES ('145', 0xE69198E8A681EFBC9A0AE694AFE68C81E58FAFE58F98E995BFE695B0E7BB84E79A84E7A88BE5BA8FE8AEBEE8AEA1E8AFADE8A880E69C89EFBC9A4164612C20416C676F6C2036382028666F72206E6F6E2D666C657869626C6520726F7773292C2041504C2C204339392028E4BBA5E58F8A4331315B325D5B335D5B345D202920EFBC8C4323205B355D2C20434F424F4C2C20466F727472616E2039302C204AE38082, 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:16', '13', '可变长数组', '数据结构');
INSERT INTO `spider_text` VALUES ('146', 0xE69198E8A681EFBC9A0A432F432B2BE79A84E69F94E680A7E695B0E7BB84E68890E59198E698AFE58FA6E5A496E4B880E4B8AAE8AFADE8A880E789B9E680A7E38082, 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:16', '13', '可变长数组', '数据结构');
INSERT INTO `spider_text` VALUES ('147', 0xE4BE8BE5AD90EFBC9A0AE4B88BE8BFB0433939E587BDE695B0E58685E983A8E79A84E5B180E983A8E58F98E9878FE4B8BAE58FAFE58F98E995BFE695B0E7BB84E38082, 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:16', '13', '可变长数组', '数据结构');
INSERT INTO `spider_text` VALUES ('148', 0xE4BE8BE5AD90EFBC9A0A666C6F617420726561645F616E645F70726F6365737328696E74206E290A7B0A20202020666C6F61742076616C735B6E5D3B0A0A20202020666F722028696E742069203D20303B2069203C206E3B20692B2B290A202020202020202076616C735B695D203D20726561645F76616C28293B0A2020202072657475726E2070726F636573732876616C732C206E293B0A7D, 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:17', '13', '可变长数组', '数据结构');
INSERT INTO `spider_text` VALUES ('149', 0xhttps://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:17', '13', '可变长数组', '数据结构');
INSERT INTO `spider_text` VALUES ('150', 0xhttps://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:17', '13', '可变长数组', '数据结构');
INSERT INTO `spider_text` VALUES ('151', 0xE4BE8BE5AD90EFBC9A0A44415441204449564953494F4E2E0A574F524B494E472D53544F524147452053454354494F4E2E0A30312020444550542D50454F504C452E0A202020203035202050454F504C452D434E54202020202020202020205049432053392834292042494E4152592E0A2020202030352020444550542D504552534F4E2020202020202020204F4343555253203020544F2032302054494D455320444550454E44494E47204F4E2050454F504C452D434E542E0A202020202020202031302020504552534F4E2D4E414D4520202020205049432058283230292E0A202020202020202031302020504552534F4E2D574147452020202020504943205339283729563939205041434B45442D444543494D414C2E, 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:17', '13', '可变长数组', '数据结构');
INSERT INTO `spider_text` VALUES ('152', 0xE4BE8BE5AD90EFBC9A0A756E7361666520766F6964206465636C617265537461636B4261736564417272617928696E742073697A65290A7B0A20202020696E74202A704172726179203D20737461636B616C6C6F6320696E745B73697A655D3B0A202020207041727261795B305D203D203132333B0A7D, 'https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:17', '13', '可变长数组', '数据结构');
INSERT INTO `spider_text` VALUES ('153', 0xhttps://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:39:17', '13', '可变长数组', '数据结构');
INSERT INTO `spider_text` VALUES ('154', 0xE69198E8A681EFBC9A0AE58F8CE7ABAFE9989FE58897EFBC886465717565EFBC8CE585A8E5908D646F75626C652D656E646564207175657565EFBC89E698AFE4B880E7A78DE585B7E69C89E9989FE58897E5928CE6A088E680A7E8B4A8E79A84E695B0E68DAEE7BB93E69E84E38082E58F8CE7ABAFE9989FE58897E4B8ADE79A84E58583E7B4A0E58FAFE4BBA5E4BB8EE4B8A4E7ABAFE5BCB9E587BAEFBC8CE68F92E585A5E5928CE588A0E999A4E6938DE4BD9CE99990E5AE9AE59CA8E9989FE58897E79A84E4B8A4E8BEB9E8BF9BE8A18CE38082, 'https://zh.wikipedia.org/wiki/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97', '2013-08-14 06:09:00', '2016-12-20 09:39:35', '15', '双端队列', '数据结构');
INSERT INTO `spider_text` VALUES ('155', 0xE6938DE4BD9CEFBC9A0AE58F8CE7ABAFE9989FE58897E58FAFE4BBA5E59CA8E9989FE58897E4BBBBE6848FE4B880E7ABAFE585A5E9989FE5928CE587BAE9989FE38082E6ADA4E5A496EFBC8CE7BB8FE5B8B8E8BF98E4BC9AE69C89E4B880E4B8AAE69FA5E79C8BEFBC885065656BEFBC89E6938DE4BD9CEFBC8CE8BF94E59B9EE8AFA5E7ABAFE79A84E695B0E68DAEE8808CE4B88DE5B086E585B6E587BAE9989FE38082, 'https://zh.wikipedia.org/wiki/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97', '2013-08-14 06:09:00', '2016-12-20 09:39:35', '15', '双端队列', '数据结构');
INSERT INTO `spider_text` VALUES ('156', 0xE6938DE4BD9CEFBC9A0AE6938DE4BD9CE79A84E5908DE7A7B0E4BE9DE8AFADE8A880E79A84E4B88DE5908CE8808CE4B88DE5908CEFBC9BE4B8BBE6B581E5AE9EE78EB0E58C85E68BACEFBC9A, 'https://zh.wikipedia.org/wiki/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97', '2013-08-14 06:09:00', '2016-12-20 09:39:35', '15', '双端队列', '数据结构');
INSERT INTO `spider_text` VALUES ('157', 0xhttps://zh.wikipedia.org/wiki/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97', '2013-08-14 06:09:00', '2016-12-20 09:39:35', '15', '双端队列', '数据结构');
INSERT INTO `spider_text` VALUES ('159', 0xE6938DE4BD9CEFBC9A0AC2A0C2A0E8BF99E698AFE4B88EE8AEA1E7AE97E69CBAE79BB8E585B3E79A84E5B08FE4BD9CE59381E38082E4BDA0E58FAFE4BBA5E9809AE8BF87E7BC96E8BE91E68896E4BFAEE8AEA2E689A9E58585E585B6E58685E5AEB9E38082, 'https://zh.wikipedia.org/wiki/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97', '2013-08-14 06:09:00', '2016-12-20 09:39:35', '15', '双端队列', '数据结构');
INSERT INTO `spider_text` VALUES ('160', 0xhttps://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '数据结构');
INSERT INTO `spider_text` VALUES ('161', 0xE69198E8A681EFBC9A0AE59CA8E8BF99E9878CEFBC8CE5B9B3E8A1A1E68C87E68980E69C89E58FB6E5AD90E79A84E6B7B1E5BAA6E8B68BE4BA8EE5B9B3E8A1A1EFBC8CE69BB4E5B9BFE4B989E79A84E698AFE68C87E59CA8E6A091E4B88AE68980E69C89E58FAFE883BDE69FA5E689BEE79A84E59D87E6918AE5A48DE69D82E5BAA6E5818FE4BD8EE38082, 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '数据结构');
INSERT INTO `spider_text` VALUES ('162', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE587A0E4B98EE68980E69C89E5B9B3E8A1A1E6A091E79A84E6938DE4BD9CE983BDE59FBAE4BA8EE6A091E6978BE8BDACE6938DE4BD9CEFBC8CE9809AE8BF87E6978BE8BDACE6938DE4BD9CE58FAFE4BBA5E4BDBFE5BE97E6A091E8B68BE4BA8EE5B9B3E8A1A1E3808220E5AFB9E4B880E6A3B5E69FA5E689BEE6A091EFBC887365617263682074726565EFBC89E8BF9BE8A18CE69FA5E8AFA22FE696B0E5A29E2FE588A0E999A420E7AD89E58AA8E4BD9C2C20E68980E88AB1E79A84E697B6E997B4E4B88EE6A091E79A84E9AB98E5BAA66820E68890E6AF94E4BE8B2C20E5B9B6E4B88DE4B88EE6A091E79A84E5AEB9E9878F206E20E68890E6AF94E4BE8BE38082E5A682E69E9CE58FAFE4BBA5E8AEA9E6A091E7BBB4E68C81E79FAEE79FAEE88396E88396E79A84E5A5BDE8BAABE69D902C20E4B99FE5B0B1E698AFE8AEA968E7BBB4E68C81E59CA84F286C67206E29E5B7A6E58FB32C20E5AE8CE68890E4B88AE8BFB0E5B7A5E4BD9CE5B0B1E5BE88E79C81E697B6E997B4E38082E883BDE5A49FE4B880E79BB4E7BBB4E68C81E5A5BDE8BAABE69D902C20E4B88DE59BA0E696B0E5A29EE588A0E999A4E8808CE995BFE6ADAAE79A84E6909CE5AFBBE6A0912C20E58FABE5819A62616C616E636564207365617263682074726565EFBC88E5B9B3E8A1A1E6A091EFBC89E3808220E6978BE8BDAC526F7461746520E28094E2809420E4B88DE7A0B4E59D8FE5B7A6E5B08FE58FB3E5A4A7E789B9E680A7E79A84E5B08FE6898BE69CAF20E5B9B3E8A1A1E6A091E69C89E5BE88E5A49AE7A78D2C20E585B6E4B8ADE69C89E587A0E7B1BBE6A091E7BBB4E68C81E5B9B3E8A1A1E79A84E696B9E6B3952C20E983BDE698AFE99DA0E695B4E5BDA2E5B08FE6898BE69CAF3A, 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '数据结构');
INSERT INTO `spider_text` VALUES ('163', 0xhttps://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '数据结构');
INSERT INTO `spider_text` VALUES ('164', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A412042204320E8BF99E4B8AAE58AA8E4BD9C2C20E7A7B0E4B8BA20726967687420726F746174696F6E20E59091E58FB3E6978BE8BDAC2C20E68896E7A7B0E4B8BAE9A1BAE697B6E99288E6978BE8BDAC2028636C6F636B7769736529E3808220E58E9FE69DA5E79A8420706172656E742028792920E58FABE5819A207069766F742C20E58E9FE69DA5E79A84206368696C642028782920E58FABE5819A20726F7461746F72E3808220E68A8AE4B88AE59BBEE58F8DE8BF87E69DA5E79C8B2C20E5A682E69E9CE58E9FE69DA5E79A84E6A091E995BFE5BE97E5838FE58FB3E59BBE2C20E683B3E5B086E5AE83E694B9E68890E5B7A6E59BBE2C20E58899E7A7B0E4B8BA206C65667420726F746174696F6E20E59091E5B7A6E6978BE8BDAC2C20E68896E7A7B0E4B8BAE98086E697B6E99288E6978BE8BDAC2028636F756E7465722D636C6F636B7769736529E3808220E58E9FE69DA5E79A8420706172656E742028782920E58FABE5819A207069766F742C20E58E9FE69DA5E79A84206368696C642028792920E58FABE5819A20726F7461746F72E38082, 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '数据结构');
INSERT INTO `spider_text` VALUES ('165', 0xhttps://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '数据结构');
INSERT INTO `spider_text` VALUES ('166', 0xE585B6E4BB96E7B1BBE59E8BEFBC9A0AE8B7B3E8A1A8EFBC8CE4B880E7A78DE694AFE68C81E5B9B3E8A1A1E6A091E5A4A7E5A49AE695B0E6938DE4BD9CE79A84E695B0E68DAEE7BB93E69E84, 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '数据结构');
INSERT INTO `spider_text` VALUES ('167', 0xE5BA94E794A8EFBC9A0AE794A8E4BA8EE8A1A8E7A4BAE69C89E5BA8FE79A84E7BABFE680A7E695B0E68DAEE7BB93E69E84EFBC8CE5A682E4BC98E58588E9989FE58897E38081E585B3E88194E695B0E7BB84E38081E994AE2DE580BCE79A84E698A0E5B084E7AD89E38082E887AAE5B9B3E8A1A1E79A84E4BA8CE58F89E69FA5E689BEE6A091E79A84E5AE9EE78EB0E4B88EE585B6E7AB9EE4BA89E5AFB9E6898B68617368E8A1A8E79A84E5AE9EE78EB0EFBC8CE59084E585B7E69C89E4BC98E7BCBAE782B9E38082E887AAE5B9B3E8A1A1E4BA8CE58F89E69FA5E689BEE6A091E59CA8E68C89E5BA8FE9818DE58E86E68980E69C89E994AEE580BCE697B6E698AFE9878FE7BAA7E69C80E4BC98E79A84EFBC8C68617368E8A1A8E4B88DE883BDE38082E887AAE5B9B3E8A1A1E4BA8CE58F89E69FA5E689BEE6A091E59CA8E69FA5E689BEE4B880E4B8AAE994AEE580BCE697B6EFBC8CE69C80E59D8FE68385E586B5E4B88BE697B6E997B4E5A48DE69D82E5BAA6E4BC98E4BA8E68617368E8A1A8EFBC8C204F286C6F67206E29E5AFB9E6AF944F286E29EFBC9BE4BD86E5B9B3E59D87E697B6E997B4E5A48DE69D82E5BAA6E9808AE4BA8E68617368E8A1A8EFBC8C4F286C6F67206E29E5AFB9E6AF944F283129E38082, 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '数据结构');
INSERT INTO `spider_text` VALUES ('168', 0xE5BA94E794A8EFBC9A0AE887AAE5B9B3E8A1A1E4BA8CE58F89E69FA5E689BEE6A091E79A84E68E92E5BA8FE696B9E6B395EFBC8CE899BDE784B6E59CA8E5B9B3E59D87E697B6E997B4E5A48DE69D82E5BAA6E4B88AE4B99FE698AF4F286E206C6F67206E29EFBC8CE4BD86E794B1E4BA8E6361636865E680A7E883BDE38081E6A091E79A84E8B083E695B4E6938DE4BD9CE7AD89EFBC8CE680A7E883BDE4B88AE4B88DE5A682E5BFABE9809FE68E92E5BA8FE38081E5A086E68E92E5BA8FE38081E59088E5B9B6E68E92E5BA8FE38082, 'https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91', '2015-12-15 16:18:00', '2016-12-20 09:39:44', '16', '平衡树', '数据结构');
INSERT INTO `spider_text` VALUES ('170', 0xE69198E8A681EFBC9A0AE59CA8E8AEA1E7AE97E69CBAE7A791E5ADA6E4B8ADEFBC8CE5A49AE9878DE585B3E8BF9EE695B0E7BB84EFBC88E88BB1E8AFADEFBC9A6D756C74696D6170EFBC89EFBC8CE698AFE4B880E7A78DE68ABDE8B1A1E695B0E68DAEE7BB93E69E84EFBC8CE5AE83E5AD98E582A8E8919728E994AEEFBC8CE580BC29E79A84E69C89E5BA8FE5AFB9EFBC8CE5928C6D6170E4B88DE5908CE4B98BE5A484E59CA8E4BA8EEFBC8CE5A49AE9878DE585B3E8BF9EE695B0E7BB84E79A84E69C89E5BA8FE5AFB9E58FAFE4BBA5E9878DE5A48DE38082E9809AE5B8B8EFBC8CE5A49AE9878DE585B3E8BF9EE695B0E7BB84E698AFE588A9E794A8E59CA86D6170E4B8ADE4BDBFE794A8E4B8B2E58897E68896E99B86E59088E5BD93E4BD9CE580BCE79A84E5AD97E6AEB5E38082, 'https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E5%85%B3%E8%BF%9E%E6%95%B0%E7%BB%84', '2016-07-07 12:25:00', '2016-12-20 09:39:54', '17', '多重关连数组', '数据结构');
INSERT INTO `spider_text` VALUES ('171', 0xE69198E8A681EFBC9A0AE8BF99E7A78DE695B0E68DAEE7BB93E69E84E58C85E590ABE4BBA5E4B88BE587A0E7A78DE5B8B8E8A781E6938DE4BD9CEFBC9A20E59091E585B3E7B3BBE695B0E7BB84E6B7BBE58AA0E9858DE5AFB920E4BB8EE585B3E7B3BBE695B0E7BB84E58685E588A0E999A4E9858DE5AFB920E4BFAEE694B9E585B3E7B3BBE695B0E7BB84E58685E79A84E9858DE5AFB920E6A0B9E68DAEE5B7B2E79FA5E79A84E994AEE69FA5E689BEE9858DE5AFB9, 'https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E5%85%B3%E8%BF%9E%E6%95%B0%E7%BB%84', '2016-07-07 12:25:00', '2016-12-20 09:39:54', '17', '多重关连数组', '数据结构');
INSERT INTO `spider_text` VALUES ('172', 0xhttps://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E5%85%B3%E8%BF%9E%E6%95%B0%E7%BB%84', '2016-07-07 12:25:00', '2016-12-20 09:39:54', '17', '多重关连数组', '数据结构');
INSERT INTO `spider_text` VALUES ('173', 0x432B2BEFBC9A0A432B2BE79A84E6A087E58786E6A8A1E69DBFE5BA93E68F90E4BE9BE588A9E794A8E5B9B3E8A1A1E6A091E69DA5E5AE9EE78EB0E5A49AE9878DE585B3E8BF9EE695B0E7BB842C5B315DC2A0EFBC8CE4B894534749E79A84E6A087E58786E6A8A1E69DBFE5BA93E68F90E4BE9BE4BA86E588A9E794A8E695A3E58897E8A1A8686173685F6D756C74696D6170C2A05B325D, 'https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E5%85%B3%E8%BF%9E%E6%95%B0%E7%BB%84', '2016-07-07 12:25:00', '2016-12-20 09:39:54', '17', '多重关连数组', '数据结构');
INSERT INTO `spider_text` VALUES ('174', 0x44617274EFBC9A0A5E20226D756C74696D61703C4B65792C20446174612C20436F6D706172652C20416C6C6F633E222E205E2022686173685F6D756C74696D61703C4B65792C204861736846636E2C20457175616C4B65792C20416C6C6F633E222E205E20224D756C74696D6170222E, 'https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%87%8D%E5%85%B3%E8%BF%9E%E6%95%B0%E7%BB%84', '2016-07-07 12:25:00', '2016-12-20 09:39:54', '17', '多重关连数组', '数据结构');
INSERT INTO `spider_text` VALUES ('176', 0xE69198E8A681EFBC9A0AE4BA8CE58F89E5A086E698AFE4B880E7A78DE789B9E6AE8AE79A84E5A086EFBC8CE4BA8CE58F89E5A086E698AFE5AE8CE585A8E4BA8CE58F89E6A091E68896E88085E698AFE8BF91E4BCBCE5AE8CE585A8E4BA8CE58F89E6A091E38082E4BA8CE58F89E5A086E6BBA1E8B6B3E5A086E789B9E680A7EFBC9AE788B6E88A82E782B9E79A84E994AEE580BCE680BBE698AFE4BF9DE68C81E59BBAE5AE9AE79A84E5BA8FE585B3E7B3BBE4BA8EE4BBBBE4BD95E4B880E4B8AAE5AD90E88A82E782B9E79A84E994AEE580BCEFBC8CE4B894E6AF8FE4B8AAE88A82E782B9E79A84E5B7A6E5AD90E6A091E5928CE58FB3E5AD90E6A091E983BDE698AFE4B880E4B8AAE4BA8CE58F89E5A086E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('177', 0xE69198E8A681EFBC9A0AE5BD93E788B6E88A82E782B9E79A84E994AEE580BCE680BBE698AFE5A4A7E4BA8EE68896E7AD89E4BA8EE4BBBBE4BD95E4B880E4B8AAE5AD90E88A82E782B9E79A84E994AEE580BCE697B6E4B8BAE69C80E5A4A7E5A086E3808220E5BD93E788B6E88A82E782B9E79A84E994AEE580BCE680BBE698AFE5B08FE4BA8EE68896E7AD89E4BA8EE4BBBBE4BD95E4B880E4B8AAE5AD90E88A82E782B9E79A84E994AEE580BCE697B6E4B8BAE69C80E5B08FE5A086E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('178', 0xE5AD98E582A8EFBC9A0AE4BA8CE58F89E5A086E4B880E888ACE794A8E695B0E7BB84E69DA5E8A1A8E7A4BAE38082E5A682E69E9CE6A0B9E88A82E782B9E59CA8E695B0E7BB84E4B8ADE79A84E4BD8DE7BDAEE698AF31EFBC8CE7ACAC6EE4B8AAE4BD8DE7BDAEE79A84E5AD90E88A82E782B9E58886E588ABE59CA8326EE5928C20326E2B31E38082E59BA0E6ADA4EFBC8CE7ACAC31E4B8AAE4BD8DE7BDAEE79A84E5AD90E88A82E782B9E59CA832E5928C33EFBC8CE7ACAC32E4B8AAE4BD8DE7BDAEE79A84E5AD90E88A82E782B9E59CA834E5928C35E38082E4BBA5E6ADA4E7B1BBE68EA8E38082E8BF99E7A78DE59FBAE4BA8E31E79A84E695B0E7BB84E5AD98E582A8E696B9E5BC8FE4BEBFE4BA8EE5AFBBE689BEE788B6E88A82E782B9E5928CE5AD90E88A82E782B9E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('179', 0xE5AD98E582A8EFBC9A0AE5A682E69E9CE5AD98E582A8E695B0E7BB84E79A84E4B88BE6A087E59FBAE4BA8E30EFBC8CE982A3E4B988E4B88BE6A087E4B8BA69E79A84E88A82E782B9E79A84E5AD90E88A82E782B9E698AF3269202B2031E4B88E3269202B2032EFBC9BE585B6E788B6E88A82E782B9E79A84E4B88BE6A087E698AFE28C8A286920E2889220312920E288952032E28C8BE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('180', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('181', 0xE5AD98E582A8EFBC9A0AE5B086E8BF99E4B8A4E4B8AAE5A086E4BF9DE5AD98E59CA8E4BBA531E5BC80E5A78BE79A84E695B0E7BB84E4B8ADEFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('182', 0xE5AD98E582A8EFBC9A0AE4BD8DE7BDAE3A2020312020322020332020342020352020362020372020382020392031302031310AE5B7A6E59BBE3A2020312020322020332020342020352020362020372020382020392031302031310AE58FB3E59BBE3A203131202039203130202035202036202037202038202031202032202033202034, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('183', 0xE5AD98E582A8EFBC9A0AE5AFB9E4BA8EE4B880E4B8AAE5BE88E5A4A7E79A84E5A086EFBC8CE8BF99E7A78DE5AD98E582A8E698AFE4BD8EE69588E79A84E38082E59BA0E4B8BAE88A82E782B9E79A84E5AD90E88A82E782B9E5BE88E58FAFE883BDE59CA8E58FA6E5A496E4B880E4B8AAE58685E5AD98E9A1B5E4B8ADE38082422D68656170E698AFE4B880E7A78DE69588E78E87E69BB4E9AB98E79A84E5AD98E582A8E696B9E5BC8FEFBC8CE68A8AE6AF8FE4B8AAE5AD90E6A091E694BEE588B0E5908CE4B880E58685E5AD98E9A1B5E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('184', 0xE5AD98E582A8EFBC9A0AE5A682E69E9CE794A8E68C87E99288E993BEE8A1A8E5AD98E582A8E5A086EFBC8CE982A3E4B988E99C80E8A681E883BDE8AEBFE997AEE58FB6E88A82E782B9E79A84E696B9E6B395E38082E58FAFE4BBA5E5AFB9E4BA8CE58F89E6A091E2809CE7A9BFE7BABFE2809D28746872656164696E6729E696B9E5BC8FEFBC8CE69DA5E4BE9DE5BA8FE9818DE58E86E8BF99E4BA9BE88A82E782B9E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('185', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('186', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('187', 0xE588A0E999A4E6A0B9E88A82E782B9EFBC9A0AE4B88BE5B19EE5AFB9E69C80E5A4A7E5A086E79A84E887AAE4B88AE8808CE4B88BE8B083E695B4E5A086E79A84E4BCAAE4BBA3E7A081E4B8ADEFBC8CE695B0E7BB8441E79A84E4B88BE6A087E7B4A2E5BC95E580BCE698AFE4BB8E31E5BC80E5A78BEFBC9A204D61782D486561706966795B315D2028412C2069293A20C2A06C65667420E2869020326920C2A0726967687420E28690203269202B203120C2A06C61726765737420E28690206920C2A06966206C65667420E289A420686561705F6C656E6774685B415D20616E6420415B6C6566745D203E20415B6C6172676573745D207468656E3A20C2A06C61726765737420E28690206C65667420C2A0696620726967687420E289A420686561705F6C656E6774685B415D20616E6420415B72696768745D203E20415B6C6172676573745D207468656E3A20C2A06C61726765737420E2869020726967687420C2A06966206C61726765737420E289A02069207468656E3A20C2A07377617020415B695D20E2869420415B6C6172676573745D20C2A04D61782D4865617069667928412C206C61726765737429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('188', 0xE69E84E980A0E4BA8CE58F89E5A086EFBC9A0AE4B880E4B8AAE79BB4E8A782E58A9EE6B395E698AFE4BB8EE58D95E88A82E782B9E79A84E4BA8CE58F89E5A086E5BC80E5A78BEFBC8CE6AF8FE6ACA1E68F92E585A5E4B880E4B8AAE88A82E782B9E38082E585B6E697B6E997B4E5A48DE69D82E5BAA6E4B8BA204F2028206E206C6F6720E281A1206E2029207B5C646973706C61797374796C65204F286E5C6C6F67206E297D20E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('189', 0xE69E84E980A0E4BA8CE58F89E5A086EFBC9A0AE69C80E4BC98E7AE97E6B395E698AFE4BB8EE4B880E4B8AAE88A82E782B9E58583E7B4A0E4BBBBE6848FE694BEE7BDAEE79A84E4BA8CE58F89E6A091E5BC80E5A78BEFBC8CE887AAE5BA95E59091E4B88AE5AFB9E6AF8FE4B880E4B8AAE5AD90E6A091E689A7E8A18CE588A0E999A4E6A0B9E88A82E782B9E697B6E79A844D61782D48656170696679E7AE97E6B395EFBC88E8BF99E698AFE5AFB9E69C80E5A4A7E5A086E8808CE8A880EFBC89E4BDBFE5BE97E5BD93E5898DE5AD90E6A091E68890E4B8BAE4B880E4B8AAE4BA8CE58F89E5A086E38082E585B7E4BD93E8808CE8A880EFBC8CE58187E8AEBEE9AB98E5BAA6E4B8BA68E79A84E5AD90E6A091E59D87E5B7B2E5AE8CE68890E4BA8CE58F89E5A086E58C96EFBC8CE982A3E4B988E5AFB9E4BA8EE9AB98E5BAA6E4B8BA682B31E79A84E5AD90E6A091EFBC8CE68A8AE585B6E6A0B9E88A82E782B9E6B2BFE79D80E69C80E5A4A7E5AD90E88A82E782B9E79A84E58886E69E9DE5819AE8B083E695B4EFBC8CE69C80E5A49AE99C80E8A68168E6ADA5E5AE8CE68890E4BA8CE58F89E5A086E58C96E38082E58FAFE4BBA5E8AF81E6988EEFBC8CE8BF99E4B8AAE7AE97E6B395E79A84E697B6E997B4E5A48DE69D82E5BAA6E4B8BA204F2028206E2029207B5C646973706C61797374796C65204F286E297D20E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('190', 0xE69E84E980A0E4BA8CE58F89E5A086EFBC9A0AE5BBBAE980A0E69C80E5A4A7E5A086E79A84E4BCAAE4BBA3E7A081EFBC9A204275696C642D4D61782D486561705B315D202841293A20C2A0686561705F6C656E6774685B415D20E28690206C656E6774685B415D20C2A0666F72206920E2869020666C6F6F72286C656E6774685B415D2F322920646F776E746F203120646F20C2A04D61782D4865617069667928412C206929, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('191', 0xE59088E5B9B6E4B8A4E4B8AAE4BA8CE58F89E5A086EFBC9A0AE69C80E4BC98E696B9E6B395E698AFE68A8AE4B8A4E4B8AAE4BA8CE58F89E5A086E9A696E5B0BEE79BB8E8BF9EE694BEE59CA8E4B880E4B8AAE695B0E7BB84E4B8ADEFBC8CE784B6E5908EE69E84E980A0E696B0E79A84E4BA8CE58F89E5A086E38082E697B6E997B4E5A48DE69D82E5BAA6E4B8BA204F2028206C6F6720E281A1206E206C6F6720E281A1206B2029207B5C646973706C61797374796C65204F285C6C6F67206E5C6C6F67206B297D20EFBC8CE585B6E4B8AD6EE380816BE4B8BAE4B8A4E4B8AAE5A086E79A84E58583E7B4A0E695B0E79BAEE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('192', 0xE59088E5B9B6E4B8A4E4B8AAE4BA8CE58F89E5A086EFBC9A0AE5A682E69E9CE7BB8FE5B8B8E99C80E8A681E59088E5B9B6E4B8A4E4B8AAE5A086E79A84E6938DE4BD9CEFBC8CE982A3E4B988E4BDBFE794A8E4BA8CE9A1B9E5BC8FE5A086E69BB4E5A5BDEFBC8CE585B6E697B6E997B4E5A48DE69D82E5BAA6E4B8BA204F2028206C6F6720E281A1206E2029207B5C646973706C61797374796C65204F285C6C6F67206E297D20E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('193', 0xE59088E5B9B6E4B8A4E4B8AAE4BA8CE58F89E5A086EFBC9A0A5E20312E3020312E3120436F726D656E2C20542E20482E202620616C2E2C20496E74726F64756374696F6E20746F20416C676F726974686D7320326E642C2043616D6272696467652C204D6173736163687573657474733A20546865204D49542050726573732C20323030312C204953424EC2A0302D30372D3031333135312D31C2A0, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('194', 0xE59088E5B9B6E4B8A4E4B8AAE4BA8CE58F89E5A086EFBC9A0A687474703A2F2F6D617468776F726C642E776F6C6672616D2E636F6D2F486561702E68746D6C20687474703A2F2F7777772E706F6C696379616C6D616E61632E6F72672F67616D65732F62696E61727948656170732E68746D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86', '2015-06-18 16:42:00', '2016-12-20 09:40:04', '18', '二叉堆', '数据结构');
INSERT INTO `spider_text` VALUES ('195', 0xE69198E8A681EFBC9A0AE993BEE68EA5E994AE20312D3720E588B0E695B0E68DAEE580BC2064312D643720E79A84E7AE80E58D95E4BE8BE5AD90E38082E6B3A8E6848FE993BEE68EA5E58897E8A1A8EFBC88E7BAA2E889B2EFBC89E58581E8AEB8E5BFABE9809FE68C89E9A1BAE5BA8FE9818DE58E86, 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '数据结构');
INSERT INTO `spider_text` VALUES ('196', 0xE69198E8A681EFBC9A0A422B20E6A091E698AFE4B880E7A78DE6A091E695B0E68DAEE7BB93E69E84EFBC8CE9809AE5B8B8E794A8E4BA8EE695B0E68DAEE5BA93E5928CE6938DE4BD9CE7B3BBE7BB9FE79A84E69687E4BBB6E7B3BBE7BB9FE4B8ADE38082422B20E6A091E79A84E789B9E782B9E698AFE883BDE5A49FE4BF9DE68C81E695B0E68DAEE7A8B3E5AE9AE69C89E5BA8FEFBC8CE585B6E68F92E585A5E4B88EE4BFAEE694B9E68BA5E69C89E8BE83E7A8B3E5AE9AE79A84E5AFB9E695B0E697B6E997B4E5A48DE69D82E5BAA6E38082422B20E6A091E58583E7B4A0E887AAE5BA95E59091E4B88AE68F92E585A5EFBC8CE8BF99E4B88EE4BA8CE58F89E6A091E681B0E5A5BDE79BB8E58F8DE38082, 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '数据结构');
INSERT INTO `spider_text` VALUES ('197', 0xE69198E8A681EFBC9A0A422B20E6A091E59CA8E88A82E782B9E8AEBFE997AEE697B6E997B4E8BF9CE8BF9CE8B685E8BF87E88A82E782B9E58685E983A8E8AEBFE997AEE697B6E997B4E79A84E697B6E58099EFBC8CE6AF94E58FAFE4BD9CE4B8BAE69BBFE4BBA3E79A84E5AE9EE78EB0E69C89E79D80E5AE9EE59CA8E79A84E4BC98E58ABFE38082E8BF99E9809AE5B8B8E59CA8E5A49AE695B0E88A82E782B9E59CA8E6ACA1E7BAA7E5AD98E582A8E6AF94E5A682E7A1ACE79B98E4B8ADE79A84E697B6E58099E587BAE78EB0E38082E9809AE8BF87E69C80E5A4A7E58C96E59CA8E6AF8FE4B8AAE58685E983A8E88A82E782B9E58685E79A84E5AD90E88A82E782B9E79A84E695B0E79BAEE5878FE5B091E6A091E79A84E9AB98E5BAA6EFBC8CE5B9B3E8A1A1E6938DE4BD9CE4B88DE7BB8FE5B8B8E58F91E7949FEFBC8CE8808CE4B894E69588E78E87E5A29EE58AA0E4BA86E38082E8BF99E7A78DE4BBB7E580BCE5BE97E4BBA5E7A1AEE7AB8BE9809AE5B8B8E99C80E8A681E6AF8FE4B8AAE88A82E782B9E59CA8E6ACA1E7BAA7E5AD98E582A8E4B8ADE58DA0E68DAEE5AE8CE695B4E79A84E7A381E79B98E59D97E68896E8BF91E4BCBCE79A84E5A4A7E5B08FE38082, 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '数据结构');
INSERT INTO `spider_text` VALUES ('198', 0xE69198E8A681EFBC9A0A422B20E8838CE5908EE79A84E683B3E6B395E698AFE58685E983A8E88A82E782B9E58FAFE4BBA5E69C89E59CA8E9A284E5AE9AE88C83E59BB4E58685E79A84E58FAFE58F98E695B0E79BAEE79A84E5AD90E88A82E782B9E38082E59BA0E6ADA4EFBC8C422B20E6A091E4B88DE99C80E8A681E8B1A1E585B6E4BB96E887AAE5B9B3E8A1A1E4BA8CE58F89E69FA5E689BEE6A091E982A3E6A0B7E7BB8FE5B8B8E79A84E9878DE696B0E5B9B3E8A1A1E38082E5AFB9E4BA8EE789B9E5AE9AE79A84E5AE9EE78EB0E59CA8E5AD90E88A82E782B9E695B0E79BAEE4B88AE79A84E4BD8EE5928CE9AB98E8BEB9E7958CE698AFE59BBAE5AE9AE79A84E38082E4BE8BE5A682EFBC8CE59CA820322D33204220E6A091EFBC88E5B8B8E7AE80E7A7B0E4B8BA322D3320E6A091EFBC89E4B8ADEFBC8CE6AF8FE4B8AAE58685E983A8E88A82E782B9E58FAAE58FAFE883BDE69C89203220E68896203320E4B8AAE5AD90E88A82E782B9E38082E5A682E69E9CE88A82E782B9E69C89E697A0E69588E695B0E79BAEE79A84E5AD90E88A82E782B9E58899E8A2ABE5BD93E4BD9CE5A484E4BA8EE8BF9DE8A784E78AB6E68081E38082, 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '数据结构');
INSERT INTO `spider_text` VALUES ('199', 0xE69198E8A681EFBC9A0A422B20E6A091E79A84E5889BE980A0E88085205275646F6C6620426179657220E6B2A1E69C89E8A7A3E9878A42E4BBA3E8A1A8E4BB80E4B988E38082E69C80E5B8B8E8A781E79A84E8A782E782B9E698AF42E4BBA3E8A1A8E5B9B3E8A1A12862616C616E63656429EFBC8CE59BA0E4B8BAE68980E69C89E79A84E58FB6E5AD90E88A82E782B9E59CA8E6A091E4B8ADE983BDE59CA8E79BB8E5908CE79A84E7BAA7E588ABE4B88AE3808242E4B99FE58FAFE883BDE4BBA3E8A1A84261796572EFBC8CE68896E88085E698AFE6B3A2E99FB3EFBC88426F65696E67EFBC89EFBC8CE59BA0E4B8BAE4BB96E69BBEE7BB8FE5B7A5E4BD9CE4BA8EE6B3A2E99FB3E7A791E5ADA6E7A094E7A9B6E5AE9EE9AA8CE5AEA4E38082, 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '数据结构');
INSERT INTO `spider_text` VALUES ('200', 0xE88A82E782B9E7BB93E69E84EFBC9A0AE59CA820422B20E6A091E4B8ADE79A84E88A82E782B9E9809AE5B8B8E8A2ABE8A1A8E7A4BAE4B8BAE4B880E7BB84E69C89E5BA8FE79A84E58583E7B4A0E5928CE5AD90E68C87E99288E38082E5A682E69E9CE6ADA4422BE6A091E79A84E5BA8FE695B0EFBC886F72646572EFBC89E698AF6D20EFBC8CE58899E999A4E4BA86E6A0B9E4B98BE5A496E79A84E6AF8FE4B8AAE88A82E782B9E983BDE58C85E590ABE69C80E5B09120E28C8A206D202F203220E28C8B207B5C646973706C61797374796C65205C6C666C6F6F72206D2F325C72666C6F6F72207D20E4B8AAE58583E7B4A0E69C80E5A49A206D2D3120E4B8AAE58583E7B4A0EFBC8CE5AFB9E4BA8EE4BBBBE6848FE79A84E88A82E782B9E69C89E69C80E5A49A206D20E4B8AAE5AD90E68C87E99288E38082E5AFB9E4BA8EE68980E69C89E58685E983A8E88A82E782B9EFBC8CE5AD90E68C87E99288E79A84E695B0E79BAEE680BBE698AFE6AF94E58583E7B4A0E79A84E695B0E79BAEE5A49AE4B880E4B8AAE38082E59BA0E4B8BAE68980E69C89E58FB6E5AD90E983BDE59CA8E79BB8E5908CE79A84E9AB98E5BAA6E4B88AEFBC8CE88A82E782B9E9809AE5B8B8E4B88DE58C85E590ABE7A1AEE5AE9AE5AE83E4BBACE698AFE58FB6E5AD90E8BF98E698AFE58685E983A8E88A82E782B9E79A84E696B9E5BC8FE38082, 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '数据结构');
INSERT INTO `spider_text` VALUES ('201', 0xhttps://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '数据结构');
INSERT INTO `spider_text` VALUES ('202', 0xE6B3A8E8A7A3EFBC9A0AE58187E5AE9A204C20E698AFE88A82E782B9E58581E8AEB8E68BA5E69C89E5AD90E88A82E782B9E79A84E69C80E5B08FE695B0E79BAEEFBC8CE8808C205520E698AFE69C80E5A4A7E695B0E79BAEE38082E58899E6AF8FE4B8AAE88A82E782B9E680BBE698AFE69C89E59CA8204C20E5928C205520E4B98BE997B4EFBC88E58C85E590ABE5AE83E4BBACE59CA8E58685EFBC89E4B8AAE5AD90E88A82E782B9EFBC8CE999A4E4BA86E4B880E4B8AAE4BE8BE5A496EFBC9AE6A0B9E88A82E782B9E69C89E4BB8E32E588B055EFBC88E58C85E590ABE5AE83E4BBACE59CA8E58685EFBC89E4B8AAE5AD90E88A82E782B9E38082E68DA2E58FA5E8AF9DE8AFB4EFBC8CE6A0B9E88A82E782B9E8B181E5858DE4BA8EE4BD8EE8BEB9E7958CE99990E588B6EFBC8CE8808CE68BA5E69C89E5AE83E887AAE5B7B1E79A84E4BD8EE8BEB9E7958C32E38082E8BF99E58581E8AEB8E6A091E68C81E69C89E5B08FE695B0E79BAEE79A84E58583E7B4A0E38082E6A0B9E69C89E4B880E4B8AAE5AD90E88A82E782B9E6B2A1E69C89E6848FE4B989EFBC8CE59BA0E4B8BAE99984E79D80E59CA8E8BF99E4B8AAE5AD90E88A82E782B9E4B88AE79A84E5AD90E6A091E58FAFE4BBA5E7AE80E58D95E79A84E99984E79D80E59CA8E6A0B9E88A82E782B9E4B88AE38082E58581E8AEB8E6A0B9E88A82E782B9E6B2A1E69C89E5AD90E88A82E782B9E4B99FE698AFE4B88DE99C80E8A681E79A84EFBC8CE59BA0E4B8BAE6B2A1E69C89E58583E7B4A0E79A84E6A091E585B8E59E8BE79A84E8A1A8E7A4BAE4B8BAE6B2A1E69C89E6A0B9E88A82E782B9E38082, 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '数据结构');
INSERT INTO `spider_text` VALUES ('203', 0xE6B3A8E8A7A3EFBC9A0A526F62657274205461726A616E20E8AF81E6988EE4BA86E59D87E6918AE79A84E58886E8A382EFBC8FE59088E5B9B6E695B0E79BAEE698AF2032E38082, 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '数据结构');
INSERT INTO `spider_text` VALUES ('204', 0xE6B3A8E8A7A3EFBC9A0A4E54465320E695B0E68DAEE5BA9320E4BA8CE58F89E6A09120422320547265652042E6A091204269746D617020696E646578, 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '数据结构');
INSERT INTO `spider_text` VALUES ('205', 0xE6B3A8E8A7A3EFBC9A0AE59CA857696B69626F6F6B73205472616E7377696B69E69C89E69BB4E5A49AE585B3E4BA8EE69CACE69DA1E79BAEE79A84E58685E5AEB9EFBC9A20422B2074726565, 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '数据结构');
INSERT INTO `spider_text` VALUES ('206', 0xhttps://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '数据结构');
INSERT INTO `spider_text` VALUES ('208', 0xE69FA5E689BEEFBC9A0AE69FA5E689BEE4BBA5E585B8E59E8BE79A84E696B9E5BC8FE8BF9BE8A18CEFBC8CE7B1BBE4BCBCE4BA8EE4BA8CE58F89E69FA5E689BEE6A091E38082E8B5B7E5A78BE4BA8EE6A0B9E88A82E782B9EFBC8CE887AAE9A1B6E59091E4B88BE9818DE58E86E6A091EFBC8CE98089E68BA9E585B6E58886E7A6BBE580BCE59CA8E8A681E69FA5E689BEE580BCE79A84E4BBBBE6848FE4B880E8BEB9E79A84E5AD90E68C87E99288E38082E59CA8E88A82E782B9E58685E983A8E585B8E59E8BE79A84E4BDBFE794A8E698AFE4BA8CE58886E69FA5E689BEE69DA5E7A1AEE5AE9AE8BF99E4B8AAE4BD8DE7BDAEE38082, 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '数据结构');
INSERT INTO `spider_text` VALUES ('209', 0xE68F92E585A5EFBC9A0AE88A82E782B9E8A681E5A484E4BA8EE8BF9DE8A784E78AB6E68081EFBC8CE5AE83E5BF85E9A1BBE58C85E590ABE59CA8E58FAFE68EA5E58F97E88C83E59BB4E4B98BE5A496E695B0E79BAEE79A84E58583E7B4A0E38082, 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '数据结构');
INSERT INTO `spider_text` VALUES ('210', 0xE68F92E585A5EFBC9A0AE9A696E58588EFBC8CE69FA5E689BEE8A681E68F92E585A5E585B6E4B8ADE79A84E88A82E782B9E79A84E4BD8DE7BDAEE38082E68EA5E79D80E68A8AE580BCE68F92E585A5E8BF99E4B8AAE88A82E782B9E4B8ADE3808220E5A682E69E9CE6B2A1E69C89E88A82E782B9E5A484E4BA8EE8BF9DE8A784E78AB6E68081E58899E5A484E79086E7BB93E69D9FE3808220E5A682E69E9CE69F90E4B8AAE88A82E782B9E69C89E8BF87E5A49AE58583E7B4A0EFBC8CE58899E68A8AE5AE83E58886E8A382E4B8BAE4B8A4E4B8AAE88A82E782B9EFBC8CE6AF8FE4B8AAE983BDE69C89E69C80E5B08FE695B0E79BAEE79A84E58583E7B4A0E38082E59CA8E6A091E4B88AE98092E5BD92E59091E4B88AE7BBA7E7BBADE8BF99E4B8AAE5A484E79086E79BB4E588B0E588B0E8BEBEE6A0B9E88A82E782B9EFBC8CE5A682E69E9CE6A0B9E88A82E782B9E8A2ABE58886E8A382EFBC8CE58899E5889BE5BBBAE4B880E4B8AAE696B0E6A0B9E88A82E782B9E38082E4B8BAE4BA86E4BDBFE5AE83E5B7A5E4BD9CEFBC8CE58583E7B4A0E79A84E69C80E5B08FE5928CE69C80E5A4A7E695B0E79BAEE585B8E59E8BE79A84E5BF85E9A1BBE98089E68BA9E4B8BAE4BDBFE69C80E5B08FE695B0E4B88DE5B08FE4BA8EE69C80E5A4A7E695B0E79A84E4B880E58D8AE38082, 'https://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '数据结构');
INSERT INTO `spider_text` VALUES ('211', 0xhttps://zh.wikipedia.org/wiki/B%2B%E6%A0%91', '2015-07-13 14:46:00', '2016-12-20 09:40:13', '19', 'B+树', '数据结构');
INSERT INTO `spider_text` VALUES ('212', 0xE69198E8A681EFBC9A0AE59CA8E8AEA1E7AE97E69CBAE7A791E5ADA6E4B8ADEFBC8CE695B0E68DAEE7BB93E69E84EFBC88E88BB1E8AFADEFBC9A6461746120737472756374757265EFBC89E698AFE8AEA1E7AE97E69CBAE4B8ADE5AD98E582A8E38081E7BB84E7BB87E695B0E68DAEE79A84E696B9E5BC8FE38082, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '数据结构');
INSERT INTO `spider_text` VALUES ('213', 0xE69198E8A681EFBC9A0AE695B0E68DAEE7BB93E69E84E6848FE591B3E79D80E68EA5E58FA3E68896E5B081E8A385EFBC9AE4B880E4B8AAE695B0E68DAEE7BB93E69E84E58FAFE8A2ABE8A786E4B8BAE4B8A4E4B8AAE587BDE695B0E4B98BE997B4E79A84E68EA5E58FA3EFBC8CE68896E88085E698AFE794B1E695B0E68DAEE7B1BBE59E8BE88194E59088E7BB84E68890E79A84E5AD98E582A8E58685E5AEB9E79A84E8AEBFE997AEE696B9E6B395E5B081E8A385E38082, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '数据结构');
INSERT INTO `spider_text` VALUES ('214', 0xhttps://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '数据结构');
INSERT INTO `spider_text` VALUES ('215', 0xE69198E8A681EFBC9A0AE695B0E68DAEE7BB93E69E84E58FAFE9808FE8BF87E7A88BE5BA8FE8AFADE8A880E68980E68F90E4BE9BE79A84E695B0E68DAEE7B1BBE59E8BE38081E5BC95E794A8E58F8AE585B6E4BB96E6938DE4BD9CE58AA0E4BBA5E5AE9EE78EB0E38082E4B880E4B8AAE8AEBEE8AEA1E889AFE5A5BDE79A84E695B0E68DAEE7BB93E69E84EFBC8CE5BA94E8AFA5E59CA8E5B0BDE58FAFE883BDE4BDBFE794A8E8BE83E5B091E79A84E697B6E997B4E4B88EE7A9BAE997B4E8B584E6BA90E79A84E5898DE68F90E4B88BEFBC8CE694AFE68C81E59084E7A78DE7A88BE5BA8FE8BF90E8A18CE38082, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '数据结构');
INSERT INTO `spider_text` VALUES ('216', 0xhttps://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '数据结构');
INSERT INTO `spider_text` VALUES ('217', 0xE69198E8A681EFBC9A0AE6ADA3E7A1AEE79A84E695B0E68DAEE7BB93E69E84E98089E68BA9E58FAFE4BBA5E68F90E9AB98E7AE97E6B395E79A84E69588E78E87EFBC88E8AFB7E58F82E88083E7AE97E6B395E69588E78E87EFBC88E88BB1E8AFADEFBC9A616C676F726974686D696320656666696369656E6379EFBC89EFBC89E38082E59CA8E8AEA1E7AE97E69CBAE7A88BE5BA8FE8AEBEE8AEA1E79A84E8BF87E7A88BE9878CEFBC8CE98089E68BA9E98082E5BD93E79A84E695B0E68DAEE7BB93E69E84E698AFE4B880E9A1B9E9878DE8A681E5B7A5E4BD9CE38082E8AEB8E5A49AE5A4A7E59E8BE7B3BBE7BB9FE79A84E7BC96E58699E7BB8FE9AA8CE698BEE7A4BAEFBC8CE7A88BE5BA8FE8AEBEE8AEA1E79A84E59BB0E99ABEE7A88BE5BAA6E4B88EE69C80E7BB88E68890E69E9CE79A84E8B4A8E9878FE4B88EE8A1A8E78EB0EFBC8CE58F96E586B3E4BA8EE698AFE590A6E98089E68BA9E4BA86E69C80E98082E59088E79A84E695B0E68DAEE7BB93E69E84E38082, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '数据结构');
INSERT INTO `spider_text` VALUES ('218', 0xE69198E8A681EFBC9A0AE7B3BBE7BB9FE69EB6E69E84E79A84E585B3E994AEE59BA0E7B4A0E698AFE695B0E68DAEE7BB93E69E84E8808CE99D9EE7AE97E6B395E79A84E8A781E8A7A3EFBC8CE5AFBCE887B4E4BA86E5A49AE7A78DE5BDA2E5BC8FE58C96E79A84E8AEBEE8AEA1E696B9E6B395E4B88EE7BC96E7A88BE8AFADE8A880E79A84E587BAE78EB0E38082E7BB9DE5A4A7E5A49AE695B0E79A84E8AFADE8A880E983BDE5B8A6E69C89E69F90E7A78DE7A88BE5BAA6E4B88AE79A84E6A8A1E59D97E58C96E6809DE683B3EFBC8CE9808FE8BF87E5B086E695B0E68DAEE7BB93E69E84E79A84E585B7E4BD93E5AE9EE78EB0E5B081E8A385E99A90E8978FE4BA8EE794A8E688B7E7958CE99DA2E4B98BE5908EE79A84E696B9E6B395EFBC8CE69DA5E8AEA9E4B88DE5908CE79A84E5BA94E794A8E7A88BE5BA8FE883BDE5A49FE5AE89E585A8E59CB0E9878DE794A8E8BF99E4BA9BE695B0E68DAEE7BB93E69E84E38082432B2BE380814A617661E38081507974686F6EE7AD89E99DA2E59091E5AFB9E8B1A1E79A84E7BC96E7A88BE8AFADE8A880E58FAFE4BDBFE794A8E7B1BBE588ABE69DA5E8BEBEE588B0E8BF99E4B8AAE79BAEE79A84E38082, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '数据结构');
INSERT INTO `spider_text` VALUES ('219', 0xE69198E8A681EFBC9A0AE59BA0E4B8BAE695B0E68DAEE7BB93E69E84E6A682E5BFB5E79A84E699AEE58F8AEFBC8CE78EB0E4BBA3E7BC96E7A88BE8AFADE8A880E58F8AE585B6415049E4B8ADE983BDE58C85E590ABE4BA86E5A49AE7A78DE9BB98E8AEA4E79A84E695B0E68DAEE7BB93E69E84EFBC8CE4BE8BE5A68220432B2B20E6A087E58786E6A8A1E69DBFE5BA93E4B8ADE79A84E5AEB9E599A8E380814A617661E99B86E59088E6A186E69EB6E4BBA5E58F8AE5BEAEE8BDAFE79A842E4E4554204672616D65776F726BE38082, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '数据结构');
INSERT INTO `spider_text` VALUES ('220', 0xE5B8B8E8A781E79A84E695B0E68DAEE7BB93E69E84EFBC9A0AE695B0E7BB84EFBC884172726179EFBC8920E5A086E6A088EFBC88537461636BEFBC8920E9989FE58897EFBC885175657565EFBC8920E993BEE8A1A8EFBC884C696E6B6564204C697374EFBC8920E6A091EFBC8854726565EFBC8920E59BBEEFBC884772617068EFBC8920E5A086EFBC8848656170EFBC8920E695A3E58897E8A1A8EFBC8848617368EFBC89, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '数据结构');
INSERT INTO `spider_text` VALUES ('221', 0xE5B8B8E8A781E79A84E695B0E68DAEE7BB93E69E84EFBC9A0AE3808AE7AE97E6B395E4B88EE695B0E68DAEE7BB93E69E84E8AF8DE585B8E3808BE4B8ADE79A84E68F8FE8BFB020687474703A2F2F7777772E6373652E756E722E6564752F7E62656269732F43533330382F204272756E6F20522E20507265697373EFBC8CE99DA2E59091E5AFB9E8B1A1E7A88BE5BA8FE8AEBEE8AEA1E79A84E695B0E68DAEE7B1BBE59E8BE4B88EE7AE97E6B395E6A8A1E59E8BEFBC9A432B2BE380814A617661E380814323E38081507974686F6EE3808152756279, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '数据结构');
INSERT INTO `spider_text` VALUES ('222', 0xE5B8B8E8A781E79A84E695B0E68DAEE7BB93E69E84EFBC9A0A5BE698BEE7A4BA5D20E69FA520E8AEBA20E7BC9620E695B0E68DAEE7BB93E69E8420E7B1BBE59E8B20E99B86E5908820E5AEB9E599A820E68ABDE8B1A1E7B1BBE59E8B20E585B3E88194E695B0E7BB8420E5A49AE9878DE585B3E8BF9EE695B0E7BB8420E58897E8A1A820E5A086E6A08820E9989FE5889720E58F8CE7ABAFE9989FE5889720E4BC98E58588E9989FE5889720E58F8CE7ABAFE4BC98E58588E9989FE5889720E99B86E5908820E5A49AE9878DE99B8620E5B9B6E69FA5E99B8620E695B0E7BB8420E5AD97E7ACA6E4B8B220E4BD8DE695B0E7BB8420E78EAFE5BDA2E7BC93E586B2E599A820E58AA8E68081E695B0E7BB8420E59388E5B88CE8A1A820E59388E5B88CE695B0E7BB84E6A09120E7A880E7968FE695B0E7BB8420E58897E8A1A820E58F8CE7ABAFE9989FE5889720E9989FE5889720E5A086E6A08820E5BEAAE78EAFE9989FE5889720E585B3E88194E8A1A820E993BEE8A1A820E8B7B3E8B783E58897E8A1A820E69DBEE695A3E993BEE8A1A820E5BC82E68896E993BEE8A1A820E6A09120E7BABFE6AEB5E6A09120E887AAE5B9B3E8A1A1E4BA8CE58F89E69FA5E689BEE6A0912042E6A09120E4BA8CE58F89E6A091204141E6A0912041564CE6A09120E7BAA2E9BB91E6A09120E5B9B3E8A1A1E6A09120E4BCB8E5B195E6A09120E4BA8CE58F89E69FA5E689BEE6A09120E5A08620E4BA8CE58F89E5A08620E4BA8CE9A1B9E5A08620E69690E6B3A2E982A3E5A591E5A0862052E6A09120522AE6A09120522BE6A0912048696C626572742052E6A09120E5898DE7BC80E6A09120E59388E5B88CE6A09120E59BBE20E69C89E59091E59BBE20E69C89E59091E697A0E78EAFE59BBE20E4BA8CE58583E586B3E7AD96E59BBE20E697A0E59091E59BBE20E7A1AEE5AE9AE680A7E99D9EE5BEAAE78EAFE69C89E99990E887AAE58AA8E69CBA20E695B0E68DAEE7BB93E69E84E58897E8A1A8, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '数据结构');
INSERT INTO `spider_text` VALUES ('223', 0xhttps://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '数据结构');
INSERT INTO `spider_text` VALUES ('224', 0xE5B8B8E8A781E79A84E695B0E68DAEE7BB93E69E84EFBC9A0AE8A784E88C83E68EA7E588B620474E443A20343031313134362D35204E444C3A203031313637373537, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84', '2016-11-02 10:12:00', '2016-12-20 09:40:33', '21', '数据结构', '数据结构');
INSERT INTO `spider_text` VALUES ('226', 0xE69198E8A681EFBC9A0AE69690E6B3A2E982A3E5A591E5A086284669626F6E61636369206865617029E698AFE8AEA1E7AE97E69CBAE7A791E5ADA6E4B8ADE6A091E79A84E99B86E59088E38082E5AE83E6AF94E4BA8CE9A1B9E5BC8FE5A086E585B7E69C89E69BB4E5A5BDE79A84E5B9B3E6918AE58886E69E90E680A7E883BDEFBC8CE58FAFE794A8E4BA8EE5AE9EE78EB0E59088E5B9B6E4BC98E58588E9989FE58897E38082E4B88DE6B689E58F8AE588A0E999A4E58583E7B4A0E79A84E6938DE4BD9CE69C894F283129E79A84E5B9B3E6918AE697B6E997B4E3808220457874726163742D4D696EE5928C44656C657465E79A84E695B0E79BAEE5928CE585B6E5AE83E79BB8E6AF94EFBC8CE8BE83E5B08FE697B6E69588E78E87E69BB4E4BDB3E38082E7A8A0E5AF86E59BBEE6AF8FE6ACA16465637265617365206B6579E58FAAE8A6814F283129E79A84E5B9B3E6918AE697B6E997B4EFBC8CE5928CE4BA8CE9A1B9E5A086E79A844F286C67206E29E79BB8E6AF94E698AFE5B7A8E5A4A7E79A84E694B9E8BF9BE38082, 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:43', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('227', 0xE69198E8A681EFBC9A0AE69690E6B3A2E7BAB3E5A591E5A086E4BA8E31393834E5B9B4E794B14D69636861656C204C2E20467265646D616EE4B88E526F6265727420452E205461726A616EE68F90E587BAEFBC8C31393837E5B9B4E585ACE5BC80E58F91E8A1A8E380825B315DE5908DE5AD97E69DA5E6BA90E4BA8EE8BF90E8A18CE697B6E58886E69E90E4BDBFE794A8E79A84E69690E6B3A2E982A3E5A591E695B0E38082, 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:43', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('228', 0xE7BB93E69E84EFBC9A0AE69690E6B3A2E982A3E5A591E5A086E698AFE794B1E4B880E7BB84E69C80E5B08FE5A086E69C89E5BA8FE6A091E69E84E68890E79A84E38082E6AF8FE4B8AAE88A82E782B9E79A84E5BAA6E695B0E4B8BAE585B6E5AD90E88A82E782B9E79A84E695B0E79BAEE38082E6A091E79A84E5BAA6E695B0E4B8BAE585B6E6A0B9E88A82E782B9E79A84E5BAA6E695B0E38082, 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:43', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('229', 0xhttps://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:43', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('230', 0xE7BB93E69E84EFBC9A0AE69690E6B3A2E982A3E5A591E5A086E4B8ADE68980E69C89E6A091E79A84E6A0B9E88A82E782B9E4B99FE794A8E4B880E4B8AAE58F8CE59091E5BEAAE78EAFE993BEE8A1A8E993BEE68EA5E8B5B7E69DA5E38082, 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:43', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('231', 0xE7BB93E69E84EFBC9A0AE4BDBFE794A8E4B880E4B8AAE68C87E99288E68C87E59091E69690E6B3A2E982A3E5A591E5A086E4B8ADE69C80E5B08FE58583E7B4A0E38082, 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:43', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('232', 0xhttps://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:43', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('233', 0xhttps://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:43', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('234', 0xE5BBBAE7AB8BE4B880E4B8AAE696B0E79A84E69690E6B3A2E7BAB3E5A591E5A086EFBC9A0AE5AFB9E4BA8EE4B880E4B8AAE7BB99E5AE9AE79A84E69690E6B3A2E982A3E5A591E5A08648EFBC8CE58FAFE4BBA5E9809AE8BF87E68C87E59091E58C85E590ABE69C80E5B08FE585B3E994AEE5AD97E79A84E6A091E6A0B9E79A84E68C87E992886D696E5B485DE69DA5E8AEBFE997AEEFBC8CE8BF99E4B8AAE7BB93E782B9E8A2ABE7A7B0E4B8BAE69690E6B3A2E982A3E5A591E5A086E4B8ADE79A84E69C80E5B08FE7BB93E782B9E38082E5A682E69E9CE4B880E4B8AAE69690E6B3A2E982A3E5A591E5A08648E698AFE7A9BAE79A84EFBC8CE588996D696E5B485D203D204E494C2E20E59CA8E4B880E4B8AAE69690E6B3A2E982A3E5A591E5A086E4B8ADEFBC8CE68980E69C89E6A091E79A84E6A0B9E983BDE9809AE8BF876C656674E5928C7269676874E68C87E99288E993BEE68EA5E68890E4B880E4B8AAE78EAFE5BDA2E79A84E58F8CE59091E993BEE8A1A8EFBC8CE7A7B0E4B8BAE5A086E79A84E6A0B9E8A1A8E38082E4BA8EE698AFEFBC8CE68C87E992886D696E5B485DE5B0B1E68C87E59091E6A0B9E8A1A8E4B8ADE585B7E69C89E69C80E5B08FE585B3E994AEE5AD97E79A84E7BB93E782B9E38082, 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('235', 0xhttps://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('236', 0xE5BBBAE7AB8BE4B880E4B8AAE696B0E79A84E69690E6B3A2E7BAB3E5A591E5A086EFBC9A0AE5889BE5BBBAE4B880E4B8AAE7A9BAE79A84E69690E6B3A2E982A3E5A591E5A086EFBC8CE8BF87E7A88B4D414B452D4649422D4845415020E58886E9858DE5B9B6E8BF94E59B9EE4B880E4B8AAE69690E6B3A2E982A3E5A591E5A086E5AFB9E8B1A148EFBC9B, 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('237', 0xE5BBBAE7AB8BE4B880E4B8AAE696B0E79A84E69690E6B3A2E7BAB3E5A591E5A086EFBC9A0A2F2FE5889DE5A78BE58C96E4B880E4B8AAE7A9BAE79A844669626F6E6163636920486561700A20202046696248656170202A20466962486561704D616B652829207B0A2020202020202046696248656170202A2068656170203D204E554C4C3B0A2020202020202068656170203D202846696248656170202A29206D616C6C6F632873697A656F66284669624865617029293B0A20202020202020696620284E554C4C203D3D206865617029207B0A20202020202020202020207075747328224F7574206F66205370616365212122293B0A2020202020202020202020657869742831293B0A202020202020207D0A202020202020206D656D73657428686561702C20302C2073697A656F66284669624865617029293B0A2020202020202072657475726E20686561703B0A2020207D0A202020200A2020202F2FE5889DE5A78BE58C96E7BB93E782B9780A2020204669624E6F6465202A20466962486561704E6F64654D616B652829207B0A202020202020204669624E6F6465202A2078203D204E554C4C3B0A2020202020202078203D20284669624E6F6465202A29206D616C6C6F632873697A656F66284669624E6F646529293B0A20202020202020696620284E554C4C203D3D207829207B0A20202020202020202020207075747328224F7574206F66205370616365212122293B0A2020202020202020202020657869742831293B0A202020202020207D0A202020202020206D656D73657428782C20302C2073697A656F66284669624E6F646529293B0A20202020202020782D3E6C656674203D20782D3E7269676874203D20783B0A2020202020202072657475726E20783B0A2020207D, 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('238', 0xE68F92E585A5E4B880E4B8AAE88A82E782B9EFBC9A0AE5889BE5BBBAE4B880E4B8AAE4BB85E58C85E590ABE4B880E4B8AAE88A82E782B9E79A84E696B0E79A84E69690E6B3A2E7BAB3E5A591E5A086EFBC8CE784B6E5908EE689A7E8A18CE5A086E59088E5B9B6E38082, 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('239', 0xE69FA5E689BEE69C80E5B08FE79A84E88A82E782B9EFBC9A0AE794B1E4BA8EE794A8E4B880E4B8AAE68C87E99288E68C87E59091E4BA86E585B7E69C89E69C80E5B08FE580BCE79A84E6A0B9E88A82E782B9EFBC8CE59BA0E6ADA4E69FA5E689BEE69C80E5B08FE79A84E88A82E782B9E698AFE5B9B3E587A1E79A84E6938DE4BD9CE38082, 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('240', 0xE59088E5B9B6E4B8A4E4B8AAE69690E6B3A2E7BAB3E5A591E5A086EFBC9A0AE7AE80E58D95E59088E5B9B6E4B8A4E4B8AAE69690E6B3A2E7BAB3E5A591E5A086E79A84E6A0B9E8A1A8E38082E58DB3E68A8AE4B8A4E4B8AAE69690E6B3A2E7BAB3E5A591E5A086E79A84E68980E69C89E6A091E79A84E6A0B9E9A696E5B0BEE8A194E68EA5E5B9B6E7BDAEE38082, 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('241', 0xE9878AE694BEEFBC88E588A0E999A4EFBC89E69C80E5B08FE79A84E88A82E782B9EFBC9A0AE69FA5E689BEE69C80E5B08FE79A84E6A0B9E88A82E782B9E5B9B6E588A0E999A4E5AE83EFBC8CE585B6E68980E69C89E79A84E5AD90E88A82E782B9E983BDE58AA0E585A5E5A086E79A84E6A0B9E8A1A8EFBC8CE58DB3E5AE83E79A84E5AD90E6A091E983BDE68890E4B8BAE5A086E68980E58C85E590ABE79A84E6A091EFBC9B20E99C80E8A681E69FA5E689BEE5B9B6E7BBB4E68AA4E5A086E79A84E69C80E5B08FE6A0B9E88A82E782B9EFBC8CE4BD86E8BF99E88097E697B6E8BE83E5A4A7E38082E4B8BAE6ADA4EFBC8CE5908CE697B6E5AE8CE68890E5A086E79A84E7BBB4E68AA4EFBC9AE5AFB9E5A086E5BD93E5898DE58C85E590ABE79A84E6A091E79A84E5BAA6E695B0E4BB8EE4BD8EE588B0E9AB98EFBC8CE8BFADE4BBA3E689A7E8A18CE585B7E69C89E79BB8E5908CE5BAA6E695B0E79A84E6A091E79A84E59088E5B9B6E5B9B6E5AE9EE78EB0E69C80E5B08FE6A091E58C96E8B083E695B4EFBC8CE4BDBFE5BE97E5A086E58C85E590ABE79A84E6A091E585B7E69C89E4B88DE5908CE79A84E5BAA6E695B0E38082E8BF99E4B880E6ADA5E4BDBFE794A8E4B880E4B8AAE695B0E7BB84EFBC8CE695B0E7BB84E4B88BE6A087E4B8BAE6A0B9E88A82E782B9E79A84E5BAA6E695B0EFBC8CE695B0E7BB84E79A84E580BCE4B8BAE68C87E59091E8AFA5E6A0B9E88A82E782B9E68C87E99288E38082E5A682E69E9CE58F91E78EB0E585B7E69C89E79BB8E5908CE5BAA6E695B0E79A84E585B6E4BB96E6A0B9E88A82E782B9E58899E59088E5B9B6E4B8A4E6A3B5E6A091E5B9B6E7BBB4E68AA4E8AFA5E695B0E7BB84E79A84E78AB6E68081E3808220E5AFB9E5BD93E5898DE5A086E79A84E68980E69C89E6A0B9E88A82E782B9E69FA5E689BEE69C80E5B08FE79A84E6A0B9E88A82E782B9E38082, 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('242', 0xE9998DE4BD8EE4B880E4B8AAE88A82E782B9E79A84E994AEE580BCEFBC9A0AE5AFB9E4B880E4B8AAE88A82E782B9E79A84E994AEE580BCE9998DE4BD8EE5908EEFBC8CE887AAE994AEE580BCE9998DE4BD8EE79A84E88A82E782B9E5BC80E5A78BE887AAE4B88BE8808CE4B88AE79A84E8BFADE4BBA3E689A7E8A18CE4B88BE8BFB0E6938DE4BD9CEFBC8CE79BB4E887B3E588B0E6A0B9E88A82E782B9E68896E4B880E4B8AAE69CAAE8A2ABE6A087E8AEB0EFBC886D61726B6564EFBC89E88A82E782B9E4B8BAE6ADA2EFBC9A, 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('243', 0xhttps://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('244', 0xE9998DE4BD8EE4B880E4B8AAE88A82E782B9E79A84E994AEE580BCEFBC9A0AE5A682E69E9CE5A086E79A84E696B0E6A091E79A84E6A0B9E88A82E782B9E8A2ABE6A087E8AEB0EFBC886D61726B6564EFBC89EFBC8CE58899E58EBBE999A4E8AFA5E6A087E8AEB0E38082, 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('245', 0xE588A0E999A4E88A82E782B9EFBC9A0AE68A8AE8A2ABE588A0E999A4E88A82E782B9E79A84E994AEE580BCE8B083E695B4E4B8BAE8B49FE697A0E7A9B7E5B08FEFBC8CE784B6E5908EE689A7E8A18CE2809CE9998DE4BD8EE4B880E4B8AAE88A82E782B9E79A84E994AEE580BCE2809DE7AE97E6B395EFBC8CE784B6E5908EE5868DE689A7E8A18CE2809CE588A0E999A4E69C80E5B08FE88A82E782B9E2809DE7AE97E6B395E38082, 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('246', 0xE588A0E999A4E88A82E782B9EFBC9A0A5E20467265646D616E2C204D69636861656C204C617772656E63653B205461726A616E2C20526F6265727420452E204669626F6E6163636920686561707320616E64207468656972207573657320696E20696D70726F766564206E6574776F726B206F7074696D697A6174696F6E20616C676F726974686D732028504446292E204A6F75726E616C206F6620746865204173736F63696174696F6E20666F7220436F6D707574696E67204D616368696E6572792E20313938372C203334202833293A20353936E280933631352E20646F693A31302E313134352F32383836392E32383837342EC2A0, 'https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86', '2014-02-27 13:40:00', '2016-12-20 09:40:44', '22', '斐波那契堆', '数据结构');
INSERT INTO `spider_text` VALUES ('247', 0xE69198E8A681EFBC9A0AE5BD93E5898DE69DA1E79BAEE79A84E58685E5AEB9E6ADA3E59CA8E4BE9DE785A7656E3A506572666563745F686173685F66756E6374696F6EE79A84E58685E5AEB9E8BF9BE8A18CE7BFBBE8AF91E3808220E5A682E69E9CE682A8E7869FE79FA5E69DA1E79BAEE58685E5AEB9E5B9B6E69385E995BFE7BFBBE8AF91EFBC8CE6ACA2E8BF8EE58D8FE58AA9E694B9E59684E68896E6A0A1E5AFB9E8BF99E7AF87E69DA1E79BAEEFBC8CE995BFE69C9FE997B2E7BDAEE79A84E99D9EE4B8ADE69687E58685E5AEB9E58FAFE883BDE4BC9AE8A2ABE7A7BBE999A4E38082, 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '数据结构');
INSERT INTO `spider_text` VALUES ('248', 0xhttps://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '数据结构');
INSERT INTO `spider_text` VALUES ('249', 0xE789B9E680A7E58F8AE4BDBFE794A8EFBC9A0AE5AFB9E4BA8EE789B9E5AE9AE99B86E5908853E79A84E5AE8CE7BE8EE695A3E58897E587BDE695B0E883BDE59CA8E5B8B8E695B0E697B6E997B4E4B8ADE8A2ABE8AEA1E7AE97E587BAEFBC8CE585B6E698A0E5B084E580BCE59CA8E4B880E4B8AAE79BB8E5AFB9E5B08FE79A84E88C83E59BB4E58685EFBC8CE883BDE8A2ABE4B880E4B8AAE99A8FE69CBAE58C96E7AE97E6B395E58F91E78EB0EFBC8CE8AFA5E7AE97E6B395E79A84E6938DE4BD9CE6ACA1E695B0E4B88E53E79A84E5A4A7E5B08FE68890E6ADA3E6AF942E5B315DE4BBBBE4BD95E98082E59088E59CA8E59388E5B88CE8A1A8E4B8ADE4BDBFE794A8E79A84E5AE8CE7BE8EE695A3E58897E587BDE695B0E99C80E8A681E887B3E5B091E4B88E53E79A84E5A4A7E5B08FE68890E6ADA3E6AF94E79A84E4BD8DE695B0E38082, 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '数据结构');
INSERT INTO `spider_text` VALUES ('250', 0xhttps://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '数据结构');
INSERT INTO `spider_text` VALUES ('251', 0xhttps://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '数据结构');
INSERT INTO `spider_text` VALUES ('252', 0xE69C80E5B08FE5AE8CE7BE8EE695A3E58897E587BDE695B0EFBC9A0AE5AFB9E4B880E4B8AAE69C80E5B08FE5AE8CE7BE8EE695A3E58897E587BDE695B046EFBC8CE88BA5E994AEE4BBA561312C2061322C202E2E2E2C20616EE6ACA1E5BA8FE7BB99E587BAEFBC8CE5AFB9E4BBBBE6848FE994AE616A20616E6420616B2C206A3C6BEFBC8CE6848FE591B3E79D804628616A293C4628616B292E5B345D204F726465722D70726573657276696E67206D696E696D616C207065726665637420686173682066756E6374696F6E732072657175697265206E65636573736172696C7920CEA9286E206C6F67206E29206269747320746F20626520726570726573656E7465642E5B355DEFBC8CE68891E4BBACE7A7B0E8AFA5E69C80E5B08FE5AE8CE7BE8EE695A3E58897E587BDE695B046E698AFE4BF9DE5BA8F20E79A84E38082, 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '数据结构');
INSERT INTO `spider_text` VALUES ('253', 0xE69C80E5B08FE5AE8CE7BE8EE695A3E58897E587BDE695B0EFBC9A0AE88BA5E5AFB9E4B880E4B8AAE69C80E5B08FE5AE8CE7BE8EE695A3E58897E587BDE695B046EFBC8CE585B6E5BA94E794A8E58F98E68DA2E5908EE5BE97E588B0E79A84E580BCE4BF9DE68C81E4BA86E994AEEFBC886B6579EFBC89E79A84E5AD97E585B8E5BA8FEFBC8CE68891E4BBACE7A7B0E8AFA5E69C80E5B08FE5AE8CE7BE8EE695A3E58897E587BDE695B046E4B8BAE58D95E8B083E79A84E38082E59CA8E6ADA4E68385E586B5E4B88BEFBC8CE587BDE695B0E4BAA7E7949FE79A84E580BCE5B0B1E698AFE8BE93E585A5E79A84E994AEE59CA8E68980E69C89E58FAFE883BDE79A84E69C89E5BA8FE994AEE5BA8FE58897E4B8ADE79A84E4BD8DE7BDAEE38082E88BA5E8A2AB68617368E79A84E994AEE8A2ABE5AD98E582A8E4BA8EE69C89E5BA8FE695B0E7BB84E4B8ADEFBC8CE5B7B2E5AE9EE78EB0E4B880E7A78DE7AD96E795A5EFBC8CE5AFB9E6AF8FE4B8AAE994AEE5AD98E582A8E5B091E9878FE99984E58AA0E4BD8DEFBC8862697473EFBC89EFBC8CE4BBA5E58F96E5BE97E69BB4E5BFABE8AEA1E7AE9768617368E580BCE79A84E4BC98E58ABFE380825B365D, 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '数据结构');
INSERT INTO `spider_text` VALUES ('254', 0xE8AFB7E58F82E99885EFBC9A0A44796E616D696320706572666563742068617368696E672050656172736F6E2068617368696E672053756363696E637420646174612073747275637475726520556E6976657273616C2068617368696E67, 'https://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '数据结构');
INSERT INTO `spider_text` VALUES ('255', 0xhttps://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '数据结构');
INSERT INTO `spider_text` VALUES ('256', 0xhttps://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '数据结构');
INSERT INTO `spider_text` VALUES ('257', 0xhttps://zh.wikipedia.org/wiki/%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97', '2016-07-11 20:54:00', '2016-12-20 09:40:54', '23', '完美散列', '数据结构');
INSERT INTO `spider_text` VALUES ('258', 0xE69198E8A681EFBC9A0AE5B7A6EFBC9AE98092E59B9EE5AD90E58887E58886E4B880E4B8AAE7AB8BE696B9E4BD93E4B8BAE5A49AE4B8AAE58DA6E99990E38082E58FB3EFBC9AE5AFB9E5BA94E79A84E585ABE5B294E6A091, 'https://zh.wikipedia.org/wiki/%E5%85%AB%E5%8F%89%E6%A0%91', '2015-10-12 12:48:00', '2016-12-20 09:41:13', '25', '八叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('259', 0xhttps://zh.wikipedia.org/wiki/%E5%85%AB%E5%8F%89%E6%A0%91', '2015-10-12 12:48:00', '2016-12-20 09:41:13', '25', '八叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('260', 0xE4B8BBE8A681E794A8E98094EFBC9A0AE7BBB4E59FBAE585B1E4BAABE8B584E6BA90E4B8ADE79BB8E585B3E79A84E5A49AE5AA92E4BD93E8B584E6BA90EFBC9AE585ABE58F89E6A091, 'https://zh.wikipedia.org/wiki/%E5%85%AB%E5%8F%89%E6%A0%91', '2015-10-12 12:48:00', '2016-12-20 09:41:13', '25', '八叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('261', 0xhttps://zh.wikipedia.org/wiki/%E5%85%AB%E5%8F%89%E6%A0%91', '2015-10-12 12:48:00', '2016-12-20 09:41:13', '25', '八叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('263', 0xhttps://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('264', 0xE69198E8A681EFBC9A0AE4B88EE4B880E7AC94E794BBE997AEE9A298E79BB8E5AFB9E5BA94E79A84E4B880E4B8AAE59BBEE8AEBAE997AEE9A298E698AFE59388E5AF86E9A1BFE997AEE9A298E38082, 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('265', 0xhttps://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('266', 0xE997AEE9A298E79A84E68F90E587BAEFBC9A0AE4B880E7AC94E794BBE997AEE9A298E79A84E68EA8E5B9BFE698AFE5A49AE7AC94E794BBE997AEE9A298EFBC8CE58DB3E5AFB9E4BA8EE4B88DE883BDE4B880E7AC94E794BBE79A84E59BBEEFBC8CE68EA2E8AEA8E69C80E5B091E883BDE794A8E5A49AE5B091E7AC94E69DA5E794BBE68890E38082, 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('267', 0xhttps://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('268', 0xE4B880E7AC94E794BBE997AEE9A298E4B88EE59388E5AF86E9A1BFE997AEE9A298EFBC9A0AE69FAFE5B0BCE696AFE5A0A1E4B883E6A1A5E997AEE9A29820E59388E5AF86E5B094E9A1BFE997AEE9A29820E6A0912028E59BBEE8AEBA2920E4B8ADE59BBDE982AEE98092E59198E997AEE9A298, 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('269', 0xhttps://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('270', 0xE5AE9AE79086E4B880EFBC9A0AE8BF9EE9809AE79A84E697A0E59091E59BBE2047207B5C646973706C61797374796C6520477D20E69C89E6ACA7E68B89E8B7AFE5BE84E79A84E58585E8A681E69DA1E4BBB6E698AFEFBC9A2047207B5C646973706C61797374796C6520477D20E4B8ADE5A587E9A1B6E782B9EFBC88E8BF9EE68EA5E79A84E8BEB9E695B0E9878FE4B8BAE5A587E695B0E79A84E9A1B6E782B9EFBC89E79A84E695B0E79BAEE7AD89E4BA8E30E68896E8808532E38082, 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('271', 0xE5AE9AE79086E4B880EFBC9A0AE8BF9EE9809AE79A84E697A0E59091E59BBE2047207B5C646973706C61797374796C6520477D20E698AFE6ACA7E68B89E78EAFEFBC88E5AD98E59CA8E6ACA7E68B89E59B9EE8B7AFEFBC89E79A84E58585E8A681E69DA1E4BBB6E698AFEFBC9A2047207B5C646973706C61797374796C6520477D20E4B8ADE6AF8FE4B8AAE9A1B6E782B9E79A84E5BAA6E983BDE698AFE581B6E695B0E380825B325DE38082, 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('272', 0xE5AE9AE79086E4B880EFBC9A0AE8AF81E6988EEFBC9A5B325D5B335D20E5BF85E8A681E680A7EFBC9AE5A682E69E9CE4B880E4B8AAE59BBEE883BDE4B880E7AC94E794BBE68890EFBC8CE982A3E4B988E5AFB9E6AF8FE4B880E4B8AAE9A1B6E782B9EFBC8CE8A681E4B988E8B7AFE5BE84E4B8ADE2809CE8BF9BE585A5E2809DE8BF99E4B8AAE782B9E79A84E8BEB9E695B0E7AD89E4BA8EE2809CE7A6BBE5BC80E2809DE8BF99E4B8AAE782B9E79A84E8BEB9E695B0EFBC9AE8BF99E697B6E782B9E79A84E5BAA6E4B8BAE581B6E695B0E38082E8A681E4B988E4B8A4E88085E79BB8E5B7AEE4B880EFBC9AE8BF99E697B6E8BF99E4B8AAE782B9E5BF85E784B6E698AFE8B5B7E782B9E68896E7BB88E782B9E4B98BE4B880E38082E6B3A8E6848FE588B0E69C89E8B5B7E782B9E5B0B1E5BF85E784B6E69C89E7BB88E782B9EFBC8CE59BA0E6ADA4E5A587E9A1B6E782B9E79A84E695B0E79BAEE8A681E4B988E698AF30EFBC8CE8A681E4B988E698AF32E3808220E58585E58886E680A7EFBC9A20E5A682E69E9CE59BBEE4B8ADE6B2A1E69C89E5A587E9A1B6E782B9EFBC8CE982A3E4B988E99A8FE4BEBFE98089E4B880E4B8AAE782B9E587BAE58F91EFBC8CE8BF9EE4B880E4B8AAE78EAF20432031207B5C646973706C61797374796C6520435F7B317D7D20E38082E5A682E69E9CE8BF99E4B8AAE78EAFE5B0B1E698AFE58E9FE59BBEEFBC8CE982A3E4B988E7BB93E69D9FE38082E5A682E69E9CE4B88DE698AFEFBC8CE982A3E4B988E794B1E4BA8EE58E9FE59BBEE698AFE8BF9EE9809AE79A84EFBC8C20432031207B5C646973706C61797374796C6520435F7B317D7D20E5928CE58E9FE59BBEE79A84E585B6E5AE83E983A8E58886E5BF85E784B6E69C89E585ACE585B1E9A1B6E782B920732031207B5C646973706C61797374796C6520735F7B317D7D20E38082E4BB8EE8BF99E4B880E782B9E587BAE58F91EFBC8CE59CA8E58E9FE59BBEE79A84E589A9E4BD99E983A8E58886E4B8ADE9878DE5A48DE4B88AE8BFB0E6ADA5E9AAA4E38082E794B1E4BA8EE58E9FE59BBEE698AFE8BF9EE9809AE59BBEEFBC8CE7BB8FE8BF87E88BA5E5B9B2E6ADA5E5908EEFBC8CE585A8E59BBEE8A2ABE58886E4B8BAE4B880E4BA9BE78EAFE38082E794B1E4BA8EE4B8A4E4B8AAE79BB8E8BF9EE79A84E78EAFE5B0B1E698AFE4B880E4B8AAE78EAFEFBC8CE58E9FE69DA5E79A84E59BBEE4B99FE5B0B1E698AFE4B880E4B8AAE6ACA7E68B89E78EAFE4BA86E3808220E5A682E69E9CE59BBEE4B8ADE69C89E4B8A4E4B8AAE5A587E9A1B6E782B92075207B5C646973706C61797374796C6520757D20E5928C2076207B5C646973706C61797374796C6520767D20EFBC8CE982A3E4B988E58AA0E5A49AE4B880E69DA1E8BEB9E5B086E5AE83E4BBACE8BF9EE4B88AE5908EE5BE97E588B0E4B880E4B8AAE697A0E5A587E9A1B6E782B9E79A84E8BF9EE9809AE59BBEE38082E794B1E4B88AE79FA5E8BF99E4B8AAE59BBEE698AFE4B880E4B8AAE78EAFEFBC8CE59BA0E6ADA4E58EBBE68E89E696B0E58AA0E79A84E8BEB9E5908EE68890E4B8BAE4B880E69DA1E8B7AFE5BE84EFBC8CE8B5B7E782B9E5928CE7BB88E782B9E698AF2075207B5C646973706C61797374796C6520757D20E5928C2076207B5C646973706C61797374796C6520767D20E38082E8AF81E6AF95E38082, 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('273', 0xE5AE9AE79086E4B880EFBC9A0AE8BF9EE9809AE697A0E59091E59BBEE69C89E6ACA7E68B89E8B7AFE5BE84E79A84E58585E8A681E69DA1E4BBB6E4B99FE58FAFE4BBA5E58699E4BD9CE2809CE59BBEE4B8ADE5A587E9A1B6E782B9E695B0E79BAEE4B88DE5A49AE4BA8E32E4B8AAE2809DEFBC8CE8BF99E698AFE59BA0E4B8BAE5A587E9A1B6E782B9E695B0E79BAEE4B88DE58FAFE883BDE698AF31E4B8AAE38082E5AE9EE99985E4B88AEFBC8CE8BF9EE9809AE697A0E59091E59BBEE4B8ADEFBC8CE5A587E9A1B6E782B9E79A84E695B0E79BAEE680BBE698AFE581B6E695B0E38082, 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('274', 0xhttps://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('275', 0xE5AE9AE79086E4B880EFBC9A0AE999A4E4BA86E794A8E9A1B6E782B9E79A84E5BAA6E695B0E4BD9CE4B8BAE588A4E5AE9AE79A84E58585E8A681E69DA1E4BBB6EFBC8CE8BF98E58FAFE4BBA5E794A8E59BBEE4B8ADE8BEB9E79A84E789B9E680A7E69DA5E4BD9CE4B8BAE6ACA7E68B89E59B9EE8B7AFE5AD98E59CA8E79A84E588A4E5AE9AE58786E58899E38082E8BF9EE9809AE79A84E697A0E59091E59BBE2047207B5C646973706C61797374796C6520477D20E4B8ADE5AD98E59CA8E6ACA7E68B89E59B9EE8B7AFEFBC8CE7AD89E4BBB7E4BA8EE59BBE2047207B5C646973706C61797374796C6520477D20E68980E69C89E79A84E8BEB9E58FAFE4BBA5E58892E58886E4B8BAE88BA5E5B9B2E4B8AAE78EAFE79A84E4B88DE4BAA4E5B9B6E38082E585B7E4BD93E69DA5E8AFB4EFBC8CE7AD89E4BBB7E4BA8EE5AD98E59CA8E4B880E7B3BBE58897E79A84E78EAF20432031202C20432032202C20E28BAF202C2043206D207B5C646973706C61797374796C6520435F7B317D2C435F7B327D2C5C63646F7473202C435F7B6D7D7D20EFBC8CE4BDBFE5BE97E59BBE2047207B5C646973706C61797374796C6520477D20E9878CE79A84E6AF8FE4B880E69DA1E8BEB9E983BDE681B0E5A5BDE5B19EE4BA8EE69F90E4B880E4B8AAE78EAFE38082, 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('276', 0xE5AE9AE79086E4BA8CEFBC9A0AE5A682E69E9CE8BF9EE9809AE697A0E59091E59BBE2047207B5C646973706C61797374796C6520477D20E69C892032206B207B5C646973706C61797374796C6520326B7D20E4B8AAE5A587E9A1B6E782B9EFBC8CE982A3E4B988E5AE83E58FAFE4BBA5E794A8206B207B5C646973706C61797374796C65206B7D20E7AC94E794BBE68890EFBC8CE5B9B6E4B894E887B3E5B091E8A681E794A8206B207B5C646973706C61797374796C65206B7D20E7AC94E794BBE688905B325DE38082, 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('277', 0xhttps://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('278', 0xhttps://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('279', 0xhttps://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:32', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('280', 0xE4B883E6A1A5E997AEE9A298EFBC9A0AE58FB3E59BBEE4B880E698AFE4B883E6A1A5E997AEE9A298E68ABDE8B1A1E58C96E5908EE5BE97E588B0E79A84E6A8A1E59E8BEFBC8CE794B1E59B9BE4B8AAE9A1B6E782B9E5928CE4B883E69DA1E8BEB9E7BB84E68890E38082E6B3A8E6848FE588B0E59B9BE4B8AAE9A1B6E782B9E585A8E698AFE5A587E9A1B6E782B9EFBC8CE794B1E5AE9AE79086E4B880E58FAFE79FA5E697A0E6B395E4B880E7AC94E794BBE68890E38082, 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('281', 0xE4B880E4B8AAE58FAFE4BBA5E4B880E7AC94E794BBE79A84E4BE8BE5AD90EFBC9A0AE59BBEE4BA8CE698AFE4B8ADE69687E2809CE4B8B2E2809DE5AD97E68ABDE8B1A1E58C96E5908EE5BE97E588B0E79A84E6A8A1E59E8BE38082E794B1E4BA8EE58FAAE69C89E69C80E4B88AE696B9E5928CE69C80E4B88BE696B9E79A84E9A1B6E782B9E698AFE5A587E9A1B6E782B9EFBC8CE794B1E5AE9AE79086E4B880E79FA5E5AE83E58FAFE4BBA5E4B880E7AC94E794BBE68890E38082, 'https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98', '2016-08-05 08:37:00', '2016-12-20 09:41:33', '28', '一笔画问题', '数据结构');
INSERT INTO `spider_text` VALUES ('282', 0xE69198E8A681EFBC9A0AE8BF99E4B8AAE58FA5E5AD90E2809C7468697320697320616E206578616D706C65206F66206120687566666D616E2074726565E2809DE4B8ADE5BE97E588B0E79A84E5AD97E6AF8DE9A291E78E87E69DA5E5BBBAE69E84E99C8DE5A4ABE69BBCE6A091E38082E58FA5E4B8ADE5AD97E6AF8DE79A84E7BC96E7A081E5928CE9A291E78E87E5A682E59BBEE68980E7A4BAE38082E7BC96E7A081E6ADA4E58FA5E5AD90E99C80E8A68131333520626974EFBC88E4B88DE58C85E68BACE4BF9DE5AD98E6A091E68980E794A8E79A84E7A9BAE997B4EFBC89, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('283', 0xE69198E8A681EFBC9A0AE5AD97E6AF8D20E9A291E78E8720E7BC96E7A08120737061636520372031313120612034203031302065203420303030206620332031313031206820322031303130206920322031303030206D20322030313131206E20322030303130207320322031303131207420322030313130206C2031203131303031206F203120303031313020702031203130303131207220312031313030302075203120303031313120782031203130303130, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('284', 0xE69198E8A681EFBC9A0AE99C8DE5A4ABE69BBCE7BC96E7A081EFBC88E88BB1E8AFADEFBC9A487566666D616E20436F64696E67EFBC89EFBC8CE58F88E8AF91E4B8BAE59388E5A4ABE69BBCE7BC96E7A081E38081E8B5ABE5A4ABE69BBCE7BC96E7A081EFBC8CE698AFE4B880E7A78DE794A8E4BA8EE697A0E68D9FE695B0E68DAEE58E8BE7BCA9E79A84E786B5E7BC96E7A081EFBC88E69D83E7BC96E7A081EFBC89E7AE97E6B395E38082E794B1E5A4A7E58DABC2B7E99C8DE5A4ABE69BBCE59CA831393532E5B9B4E58F91E6988EE38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('285', 0xE69198E8A681EFBC9A0AE59CA8E8AEA1E7AE97E69CBAE695B0E68DAEE5A484E79086E4B8ADEFBC8CE99C8DE5A4ABE69BBCE7BC96E7A081E4BDBFE794A8E58F98E995BFE7BC96E7A081E8A1A8E5AFB9E6BA90E7ACA6E58FB7EFBC88E5A682E69687E4BBB6E4B8ADE79A84E4B880E4B8AAE5AD97E6AF8DEFBC89E8BF9BE8A18CE7BC96E7A081EFBC8CE585B6E4B8ADE58F98E995BFE7BC96E7A081E8A1A8E698AFE9809AE8BF87E4B880E7A78DE8AF84E4BCB0E69DA5E6BA90E7ACA6E58FB7E587BAE78EB0E6A682E78E87E79A84E696B9E6B395E5BE97E588B0E79A84EFBC8CE587BAE78EB0E6A682E78E87E9AB98E79A84E5AD97E6AF8DE4BDBFE794A8E8BE83E79FADE79A84E7BC96E7A081EFBC8CE58F8DE4B98BE587BAE78EB0E6A682E78E87E4BD8EE79A84E58899E4BDBFE794A8E8BE83E995BFE79A84E7BC96E7A081EFBC8CE8BF99E4BEBFE4BDBFE7BC96E7A081E4B98BE5908EE79A84E5AD97E7ACA6E4B8B2E79A84E5B9B3E59D87E995BFE5BAA6E38081E69C9FE69C9BE580BCE9998DE4BD8EEFBC8CE4BB8EE8808CE8BEBEE588B0E697A0E68D9FE58E8BE7BCA9E695B0E68DAEE79A84E79BAEE79A84E38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('286', 0xE69198E8A681EFBC9A0AE4BE8BE5A682EFBC8CE59CA8E88BB1E69687E4B8ADEFBC8C65E79A84E587BAE78EB0E6A682E78E87E69C80E9AB98EFBC8CE8808C7AE79A84E587BAE78EB0E6A682E78E87E58899E69C80E4BD8EE38082E5BD93E588A9E794A8E99C8DE5A4ABE69BBCE7BC96E7A081E5AFB9E4B880E7AF87E88BB1E69687E8BF9BE8A18CE58E8BE7BCA9E697B6EFBC8C65E69E81E69C89E58FAFE883BDE794A8E4B880E4B8AAE6AF94E789B9E69DA5E8A1A8E7A4BAEFBC8CE8808C7AE58899E58FAFE883BDE88AB1E58EBB3235E4B8AAE6AF94E789B9EFBC88E4B88DE698AF3236EFBC89E38082E794A8E699AEE9809AE79A84E8A1A8E7A4BAE696B9E6B395E697B6EFBC8CE6AF8FE4B8AAE88BB1E69687E5AD97E6AF8DE59D87E58DA0E794A8E4B880E4B8AAE5AD97E88A82EFBC8CE58DB338E4B8AAE6AF94E789B9E38082E4BA8CE88085E79BB8E6AF94EFBC8C65E4BDBFE794A8E4BA86E4B880E888ACE7BC96E7A081E79A84312F38E79A84E995BFE5BAA6EFBC8C7AE58899E4BDBFE794A8E4BA8633E5808DE5A49AE38082E58098E88BA5E68891E4BBACE883BDE5AE9EE78EB0E5AFB9E4BA8EE88BB1E69687E4B8ADE59084E4B8AAE5AD97E6AF8DE587BAE78EB0E6A682E78E87E79A84E8BE83E58786E7A1AEE79A84E4BCB0E7AE97EFBC8CE5B0B1E58FAFE4BBA5E5A4A7E5B985E5BAA6E68F90E9AB98E697A0E68D9FE58E8BE7BCA9E79A84E6AF94E4BE8BE38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('287', 0xE69198E8A681EFBC9A0AE99C8DE5A4ABE69BBCE6A091E58F88E7A7B0E69C80E4BC98E4BA8CE58F89E6A091EFBC8CE698AFE4B880E7A78DE5B8A6E69D83E8B7AFE5BE84E995BFE5BAA6E69C80E79FADE79A84E4BA8CE58F89E6A091E38082E68980E8B093E6A091E79A84E5B8A6E69D83E8B7AFE5BE84E995BFE5BAA6EFBC8CE5B0B1E698AFE6A091E4B8ADE68980E69C89E79A84E58FB6E7BB93E782B9E79A84E69D83E580BCE4B998E4B88AE585B6E588B0E6A0B9E7BB93E782B9E79A84E8B7AFE5BE84E995BFE5BAA6EFBC88E88BA5E6A0B9E7BB93E782B9E4B8BA30E5B182EFBC8CE58FB6E7BB93E782B9E588B0E6A0B9E7BB93E782B9E79A84E8B7AFE5BE84E995BFE5BAA6E4B8BAE58FB6E7BB93E782B9E79A84E5B182E695B0EFBC89E38082E6A091E79A84E8B7AFE5BE84E995BFE5BAA6E698AFE4BB8EE6A091E6A0B9E588B0E6AF8FE4B880E7BB93E782B9E79A84E8B7AFE5BE84E995BFE5BAA6E4B98BE5928CEFBC8CE8AEB0E4B8BA57504C3DEFBC8857312A4C312B57322A4C322B57332A4C332B2E2E2E2B576E2A4C6EEFBC89EFBC8C4EE4B8AAE69D83E580BC5769EFBC88693D312C322C2E2E2E6EEFBC89E69E84E68890E4B880E6A3B5E69C894EE4B8AAE58FB6E7BB93E782B9E79A84E4BA8CE58F89E6A091EFBC8CE79BB8E5BA94E79A84E58FB6E7BB93E782B9E79A84E8B7AFE5BE84E995BFE5BAA6E4B8BA4C69EFBC88693D312C322C2E2E2E6EEFBC89E38082E58FAFE4BBA5E8AF81E6988EE99C8DE5A4ABE69BBCE6A091E79A8457504CE698AFE69C80E5B08FE79A84E38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('288', 0xE58E86E58FB2EFBC9A0A31393531E5B9B4EFBC8CE99C8DE5A4ABE69BBCE5928CE4BB96E59CA84D4954E4BFA1E681AFE8AEBAE79A84E5908CE5ADA6E5BE97E98089E68BA9E698AFE5AE8CE68890E5ADA6E69C9FE68AA5E5918AE8BF98E698AFE69C9FE69CABE88083E8AF95E38082E5AFBCE5B888E7BD97E4BCAFE789B9C2B7E6B395E8AFBAE587BAE79A84E5ADA6E69C9FE68AA5E5918AE9A298E79BAEE698AFEFBC8CE69FA5E689BEE69C80E69C89E69588E79A84E4BA8CE8BF9BE588B6E7BC96E7A081E38082E794B1E4BA8EE697A0E6B395E8AF81E6988EE593AAE4B8AAE5B7B2E69C89E7BC96E7A081E698AFE69C80E69C89E69588E79A84EFBC8CE99C8DE5A4ABE69BBCE694BEE5BC83E5AFB9E5B7B2E69C89E7BC96E7A081E79A84E7A094E7A9B6EFBC8CE8BDACE59091E696B0E79A84E68EA2E7B4A2EFBC8CE69C80E7BB88E58F91E78EB0E4BA86E59FBAE4BA8EE69C89E5BA8FE9A291E78E87E4BA8CE58F89E6A091E7BC96E7A081E79A84E683B3E6B395EFBC8CE5B9B6E5BE88E5BFABE8AF81E6988EE4BA86E8BF99E4B8AAE696B9E6B395E698AFE69C80E69C89E69588E79A84E38082E99C8DE5A4ABE69BBCE4BDBFE794A8E887AAE5BA95E59091E4B88AE79A84E696B9E6B395E69E84E5BBBAE4BA8CE58F89E6A091EFBC8CE981BFE5858DE4BA86E6ACA1E4BC98E7AE97E6B395E9A699E5869C2DE88C83E8AFBAE7BC96E7A081E79A84E69C80E5A4A7E5BC8AE7ABAFE29480E29480E887AAE9A1B6E59091E4B88BE69E84E5BBBAE6A091E38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('289', 0xE58E86E58FB2EFBC9A0A31393532E5B9B4EFBC8CE4BA8EE8AEBAE69687E3808AE4B880E7A78DE69E84E5BBBAE69E81E5B08FE5A49AE4BD99E7BC96E7A081E79A84E696B9E6B395E3808BEFBC8841204D6574686F6420666F722074686520436F6E737472756374696F6E206F66204D696E696D756D2D526564756E64616E637920436F646573EFBC89E4B8ADE58F91E8A1A8E4BA86E8BF99E4B8AAE7BC96E7A081E696B9E6B395E38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('290', 0xhttps://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('291', 0xE695B0E68DAEE995BFE5BAA6EFBC9A0A65206E20742072206F20702079203D20E28891206A203D2031204A205020282073206A202920C397206C6F6720E281A12031205020282073206A2029207B5C646973706C61797374796C6520656E74726F70793D5C73756D205F7B6A3D317D5E7B4A7D7B505C6C65667428735F7B6A7D5C7269676874295C74696D6573205C6C6F67207B31205C6F76657220505C6C65667428735F7B6A7D5C7269676874297D7D7D, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('292', 0xE695B0E68DAEE995BFE5BAA6EFBC9A0A6D20652061206E2028204C2029203D20E28891206A203D2031204A205020282073206A202920C39720C2A0204C20282073206A2029207B5C646973706C61797374796C65206D65616E5C6C656674284C5C7269676874293D5C73756D205F7B6A3D317D5E7B4A7D7B505C6C65667428735F7B6A7D5C7269676874295C74696D6573205C204C5C6C65667428735F7B6A7D5C7269676874297D7D, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('293', 0xhttps://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('294', 0xE695B0E68DAEE995BFE5BAA6EFBC9A0AE99C8DE5A4ABE69BBCE7A081E79A84E5B9B3E59D87E7BC96E7A081E995BFE5BAA6EFBC9AE8AEBE2062203D206D20652061206E2028204C2029204E207B5C646973706C61797374796C6520623D6D65616E5C6C656674284C5C7269676874294E7D20EFBC8C204E207B5C646973706C61797374796C65204E7D20E4B8BAE695B0E68DAEE995BFE5BAA6, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('295', 0xE695B0E68DAEE995BFE5BAA6EFBC9A0A4E207B5C646973706C61797374796C65204E7D2065206E20742072206F20702079206C206F2067206B207B5C646973706C61797374796C6520656E74726F7079205C6F766572206C6F676B7D20E289A42062207B5C646973706C61797374796C6520627D20E289A4204E207B5C646973706C61797374796C65204E7D2065206E20742072206F20702079206C206F2067206B207B5C646973706C61797374796C6520656E74726F7079205C6F766572206C6F676B7D202B204E207B5C646973706C61797374796C65202B4E7D, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('296', 0xhttps://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('297', 0xhttps://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('299', 0xE5B9BFE4B989EFBC9A0AE4B880E7BB84E7ACA6E58FB7EFBC8853796D626F6CEFBC89E5928CE585B6E5AFB9E5BA94E79A84E69D83E9878DE580BCEFBC88776569676874EFBC89EFBC8CE585B6E69D83E9878DE9809AE5B8B8E8A1A8E7A4BAE68890E6A682E78E87EFBC8825EFBC89E38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:43', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('300', 0xE5B9BFE4B989EFBC9A0AE4B880E7BB84E4BA8CE58583E79A84E5898DE7BDAEE7A081EFBC8CE585B6E4BA8CE58583E7A081E79A84E995BFE5BAA6E4B8BAE69C80E79FADE38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('301', 0xE78BADE4B989EFBC9A0AE7ACA6E58FB7E99B86E590882053203D207B20732031202C20732032202C20E28BAF202C2073206E207D207B5C646973706C61797374796C6520533D5C6C6566745C7B735F7B317D2C735F7B327D2C5C63646F7473202C735F7B6E7D5C72696768745C7D7D20EFBC8CE585B653E99B86E59088E79A84E5A4A7E5B08FE4B8BA206E207B5C646973706C61797374796C65206E7D20E3808220E69D83E9878DE99B86E590882057203D207B20772031202C20772032202C20E28BAF202C2077206E207D207B5C646973706C61797374796C6520573D5C6C6566745C7B775F7B317D2C775F7B327D2C5C63646F7473202C775F7B6E7D5C72696768745C7D7D20EFBC8CE585B657E99B86E59088E4B88DE4B8BAE8B49FE695B0E4B89420772069203D2077206520692067206820742028207320692029202C203120E289A4206920E289A4206E207B5C646973706C61797374796C6520775F7B697D3D5C6D617468726D207B7765696768747D205C6C65667428735F7B697D5C7269676874292C315C6C657120695C6C6571206E7D20E38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('302', 0xhttps://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('303', 0xE78BADE4B989EFBC9A0AE8AEBE204C202820432029203D20E288912069203D2031206E2077206920C397206C2065206E2067207420682028206320692029207B5C646973706C61797374796C65204C5C6C65667428435C7269676874293D5C73756D205F7B693D317D5E7B6E7D7B775F7B697D5C74696D6573205C6D617468726D207B6C656E6774687D205C6C65667428635F7B697D5C7269676874297D7D20E4B8BA2043207B5C646973706C61797374796C6520437D20E79A84E58AA0E69D83E79A84E8B7AFE5BE84E995BFEFBC8CE5AFB9E68980E69C89E7BC96E7A081205420282053202C20572029207B5C646973706C61797374796C6520545C6C65667428532C575C7269676874297D20EFBC8CE58899204C20282043202920E289A4204C202820542029207B5C646973706C61797374796C65204C5C6C65667428435C7269676874295C6C6571204C5C6C65667428545C7269676874297D, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('304', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0AE5AE9EE78EB0E99C8DE5A4ABE69BBCE7BC96E7A081E79A84E696B9E5BC8FE4B8BBE8A681E698AFE5889BE5BBBAE4B880E4B8AAE4BA8CE58F89E6A091E5928CE585B6E88A82E782B9E38082E8BF99E4BA9BE6A091E79A84E88A82E782B9E58FAFE4BBA5E5AD98E582A8E59CA8E695B0E7BB84E9878CEFBC8CE695B0E7BB84E79A84E5A4A7E5B08FE4B8BAE7ACA6E58FB7EFBC8873796D626F6C73EFBC89E695B0E79A84E5A4A7E5B08F6EEFBC8CE8808CE88A82E782B9E58886E4B8BAE698AFE7BB88E7ABAFE88A82E782B9EFBC88E58FB6E88A82E782B9EFBC89E4B88EE99D9EE7BB88E7ABAFE88A82E782B9EFBC88E58685E983A8E88A82E782B9EFBC89E38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('305', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0AE4B880E5BC80E5A78BEFBC8CE68980E69C89E79A84E88A82E782B9E983BDE698AFE7BB88E7ABAFE88A82E782B9EFBC8CE88A82E782B9E58685E69C89E4B889E4B8AAE5AD97E6AEB5EFBC9A, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('306', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0A322EE69D83E9878DEFBC88576569676874E3808150726F626162696C6974696573E380814672657175656E6379EFBC89, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('307', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0A332EE68C87E59091E788B6E88A82E782B9E79A84E993BEE68EA5EFBC884C696E6B20746F2069747320706172656E74206E6F6465EFBC89, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('308', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0A312EE69D83E9878DEFBC88576569676874E3808150726F626162696C6974696573E380814672657175656E6379EFBC89, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('309', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0A322EE68C87E59091E4B8A4E4B8AAE5AD90E88A82E782B9E79A8420E993BEE68EA5EFBC884C696E6B7320746F2074776F206368696C64206E6F6465EFBC89, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('310', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0A332EE68C87E59091E788B6E88A82E782B9E79A84E993BEE68EA5EFBC884C696E6B20746F2069747320706172656E74206E6F6465EFBC89, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('311', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0AE59FBAE69CACE4B88AEFBC8CE68891E4BBACE794A8273027E4B88E273127E58886E588ABE4BBA3E8A1A8E68C87E59091E5B7A6E5AD90E88A82E782B9E4B88EE58FB3E5AD90E88A82E782B9EFBC8CE69C80E5908EE4B8BAE5AE8CE68890E79A84E4BA8CE58F89E6A091E585B1E69C896EE4B8AAE7BB88E7ABAFE88A82E782B9E4B88E6E2D31E4B8AAE99D9EE7BB88E7ABAFE88A82E782B9EFBC8CE58EBBE999A4E4BA86E4B88DE5BF85E8A681E79A84E7ACA6E58FB7E5B9B6E4BAA7E7949FE69C80E4BDB3E79A84E7BC96E7A081E995BFE5BAA6E38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('312', 0xhttps://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('313', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0AE5AE9EE78EB0E99C8DE5A4ABE69BBCE6A091E79A84E696B9E5BC8FE69C89E5BE88E5A49AE7A78DEFBC8CE58FAFE4BBA5E4BDBFE794A8E4BC98E58588E9989FE58897EFBC885072696F72697479205175657565EFBC89E7AE80E58D95E8BEBEE68890E8BF99E4B8AAE8BF87E7A88BEFBC8CE7BB99E4B88EE69D83E9878DE8BE83E4BD8EE79A84E7ACA6E58FB7E8BE83E9AB98E79A84E4BC98E58588E7BAA7EFBC885072696F72697479EFBC89EFBC8CE7AE97E6B395E5A682E4B88BEFBC9A, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('314', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0AE29288E68A8A6EE4B8AAE7BB88E7ABAFE88A82E782B9E58AA0E585A5E4BC98E58588E9989FE58897EFBC8CE588996EE4B8AAE88A82E782B9E983BDE69C89E4B880E4B8AAE4BC98E58588E69D835069EFBC8C3120E289A4206920E289A4206E, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('315', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0AE291B4E4BB8EE9989FE58897E4B8ADE7A7BBE999A4E4B8A4E4B8AAE69C80E5A4A7E79A845069E88A82E782B9EFBC8CE58DB3E8BF9EE7BBADE5819AE4B8A4E6ACA172656D6F7665EFBC886D6178285069EFBC892C205072696F726974795F517565756529, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('316', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0AE291B5E4BAA7E7949FE4B880E4B8AAE696B0E88A82E782B9EFBC8CE6ADA4E88A82E782B9E4B8BAEFBC8831EFBC89E4B98BE7A7BBE999A4E88A82E782B9E4B98BE788B6E88A82E782B9EFBC8CE8808CE6ADA4E88A82E782B9E79A84E69D83E9878DE580BCE4B8BAEFBC8831EFBC89E4B8A4E88A82E782B9E4B98BE69D83E9878DE5928C, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('317', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0AE291B6E68A8AEFBC8832EFBC89E4BAA7E7949FE4B98BE88A82E782B9E58AA0E585A5E4BC98E58588E9989FE58897E4B8AD, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('318', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0AE2928AE69C80E5908EE59CA8E4BC98E58588E9989FE58897E9878CE79A84E782B9E4B8BAE6A091E79A84E6A0B9E88A82E782B9EFBC88726F6F74EFBC89, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('319', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0AE8808CE6ADA4E7AE97E6B395E79A84E697B6E997B4E5A48DE69D82E5BAA6EFBC882054696D6520436F6D706C6578697479EFBC89E4B8BA4FEFBC886E206C6F67206EEFBC89EFBC9BE59BA0E4B8BAE69C896EE4B8AAE7BB88E7ABAFE88A82E782B9EFBC8CE68980E4BBA5E6A091E680BBE585B1E69C89326E2D31E4B8AAE88A82E782B9EFBC8CE4BDBFE794A8E4BC98E58588E9989FE58897E6AF8FE4B8AAE5BEAAE78EAFE9A1BB4FEFBC886C6F67206EEFBC89E38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('320', 0xhttps://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('321', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0AE29288E68A8A6EE4B8AAE7BB88E7ABAFE88A82E782B9E58AA0E585A5E7ACACE4B880E4B8AAE9989FE58897EFBC88E4BE9DE785A7E69D83E9878DE5A4A7E5B08FE68E92E58897EFBC8CE69C80E5B08FE59CA8E5898DE7ABAFEFBC89, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('322', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0AE291B4E4BB8EE9989FE58897E5898DE7ABAFE7A7BBE999A4E4B8A4E4B8AAE69C80E4BD8EE69D83E9878DE79A84E88A82E782B9, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('323', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0AE291B5E5B086EFBC8831EFBC89E4B8ADE7A7BBE999A4E79A84E4B8A4E4B8AAE88A82E782B9E69D83E9878DE79BB8E58AA0E59088E68890E4B880E4B8AAE696B0E88A82E782B9, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('324', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0AE2928AE69C80E5908EE59CA8E7ACACE4B880E4B8AAE9989FE58897E79A84E88A82E782B9E4B8BAE6A0B9E88A82E782B9, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('325', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0AE899BDE784B6E4BDBFE794A8E6ADA4E696B9E6B395E6AF94E4BDBFE794A8E4BC98E58588E9989FE58897E79A84E697B6E997B4E5A48DE69D82E5BAA6E8BF98E4BD8EEFBC8CE4BD86E698AFE6B3A8E6848FE6ADA4E6B395E79A84E7ACAC31E9A1B9EFBC8CE88A82E782B9E5BF85E9A1BBE4BE9DE785A7E69D83E9878DE5A4A7E5B08FE58AA0E585A5E9989FE58897E4B8ADEFBC8CE5A682E69E9CE88A82E782B9E58AA0E585A5E9A1BAE5BA8FE4B88DE68C89E5A4A7E5B08FEFBC8CE58899E99C80E8A681E7BB8FE8BF87E68E92E5BA8FEFBC8CE58899E887B3E5B091E88AB1E4BA864FEFBC886E206C6F67206EEFBC89E79A84E697B6E997B4E5A48DE69D82E5BAA6E8AEA1E7AE97E38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('326', 0xE695B0E68DAEE58E8BE7BCA9EFBC9A0AE4BD86E698AFE59CA8E4B88DE5908CE79A84E78AB6E586B5E88083E9878FE4B88BEFBC8CE697B6E997B4E5A48DE69D82E5BAA6E5B9B6E99D9EE698AFE69C80E9878DE8A681E79A84EFBC8CE5A682E69E9CE68891E4BBACE4BB8AE5A4A9E88083E89991E88BB1E69687E5AD97E6AF8DE79A84E587BAE78EB0E9A291E78E87EFBC8CE58F98E9878F6EE5B0B1E698AFE88BB1E69687E5AD97E6AF8DE79A843236E4B8AAE5AD97E6AF8DEFBC8CE58899E4BDBFE794A8E593AAE4B880E7A78DE7AE97E6B395E697B6E997B4E5A48DE69D82E5BAA6E983BDE4B88DE4BC9AE5BDB1E5938DE5BE88E5A4A7EFBC8CE59BA0E4B8BA6EE4B88DE698AFE4B880E7AC94E5BA9EE5A4A7E79A84E695B0E5AD97E38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('327', 0xE695B0E68DAEE8A7A3E58E8BE7BCA9EFBC9A0AE7AE80E58D95E69DA5E8AFB4EFBC8CE99C8DE5A4ABE69BBCE7A081E6A091E79A84E8A7A3E58E8BE7BCA9E5B0B1E698AFE5B086E5BE97E588B0E79A84E5898DE7BDAEE7A081EFBC8850726566697820487566666D616E20636F6465EFBC89E8BDACE68DA2E59B9EE7ACA6E58FB7EFBC8CE9809AE5B8B8E5809FE794B1E6A091E79A84E8BFBDE8B8AAEFBC8854726176657273616CEFBC89EFBC8CE5B086E68EA5E694B6E588B0E79A84E6AF94E789B9E4B8B2EFBC88426974732073747265616DEFBC89E4B880E6ADA5E4B880E6ADA5E8BF98E58E9FE38082E4BD86E698AFE8A681E8BFBDE8B8AAE6A091E4B98BE5898DEFBC8CE5BF85E9A1BBE8A681E58588E9878DE5BBBAE99C8DE5A4ABE69BBCE6A09120EFBC9BE69F90E4BA9BE68385E586B5E4B88BEFBC8CE5A682E69E9CE6AF8FE4B8AAE7ACA6E58FB7E79A84E69D83E9878DE58FAFE4BBA5E8A2ABE4BA8BE58588E9A284E6B58BEFBC8CE982A3E4B988E99C8DE5A4ABE69BBCE6A091E5B0B1E58FAFE4BBA5E9A284E58588E9878DE5BBBAEFBC8CE5B9B6E4B894E5AD98E582A8E5B9B6E9878DE5A48DE4BDBFE794A8EFBC8CE590A6E58899EFBC8CE58F91E98081E7ABAFE5BF85E9A1BBE9A284E58588E58F91E98081E99C8DE5A4ABE69BBCE6A091E79A84E79BB8E585B3E4BFA1E681AFE7BB99E68EA5E694B6E7ABAFE38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:44', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('328', 0xE695B0E68DAEE8A7A3E58E8BE7BCA9EFBC9A0AE69C80E7AE80E58D95E79A84E696B9E5BC8FEFBC8CE5B0B1E698AFE9A284E58588E7BB9FE8AEA1E59084E7ACA6E58FB7E79A84E69D83E9878DE5B9B6E58AA0E585A5E887B3E58E8BE7BCA9E4B98BE6AF94E789B9E4B8B2EFBC8CE4BD86E698AFE6ADA4E6B395E79A84E8BF90E7AE97E9878FE88AB1E8B4B9E79BB8E5BD93E5A4A7EFBC8CE5B9B6E4B88DE98082E59088E5AE9EE99985E79A84E5BA94E794A8E38082E88BA5E698AFE4BDBFE794A843616E6F6E6963616C20656E636F64696E67EFBC8CE58899E58FAFE7B2BEE58786E5BE97E79FA5E6A091E9878DE5BBBAE79A84E695B0E68DAEE9878FE58FAAE58DA042325E42E6AF94E789B9EFBC88E585B6E4B8AD42E4B8BAE6AF8FE4B8AAE7ACA6E58FB7E79A84E6AF94E789B9E695B0EFBC8862697473EFBC89EFBC89E38082E5A682E69E9CE7AE80E58D95E5B086E68EA5E694B6E588B0E79A84E6AF94E789B9E4B8B2E4B880E4B8AAE6AF94E789B9E4B880E4B8AAE6AF94E789B9E79A84E9878DE5BBBAEFBC8CE4BE8BE5A682EFBC9A273027E8A1A8E7A4BAE788B6E88A82E782B9EFBC8C273127E8A1A8E7A4BAE7BB88E7ABAFE88A82E782B9EFBC8CE88BA5E6AF8FE6ACA1E8AFBBE58F96E588B031E697B6EFBC8CE4B88B38E4B8AAE6AF94E789B9E58899E4BC9AE8A2ABE8A7A3E8AFBBE698AFE7BB88E7ABAFE88A82E782B9EFBC88E58187E8AEBEE695B0E68DAEE4B8BA382D626974E5AD97E6AF8DEFBC89EFBC8CE58899E99C8DE5A4ABE69BBCE6A091E58899E58FAFE8A2ABE9878DE5BBBAEFBC8CE4BBA5E6ADA4E696B9E6B395EFBC8CE695B0E68DAEE9878FE79A84E5A4A7E5B08FE58FAFE883BDE4B8BA327E333230E5AD97E88A82E4B88DE7AD89E38082E899BDE784B6E8BF98E69C89E5BE88E5A49AE696B9E6B395E58FAFE4BBA5E9878DE5BBBAE99C8DE5A4ABE69BBCE6A091EFBC8CE4BD86E59BA0E4B8BAE58E8BE7BCA9E79A84E695B0E68DAEE4B8B2E58C85E590AB227472616C696E67206269747322EFBC8CE68980E4BBA5E8BF98E58E9FE697B6E4B880E5AE9AE8A681E88083E89991E4BD95E697B6E5819CE6ADA2EFBC8CE4B88DE8A681E8BF98E58E9FE588B0E99499E8AFAFE79A84E580BCEFBC8CE5A682E59CA8E695B0E68DAEE58E8BE7BCA9E697B6E697B6E58AA0E4B88AE6AF8FE7AC94E695B0E68DAEE79A84E995BFE5BAA6E7AD89E38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('329', 0xE6BC94E7AE97E8BF87E7A88BEFBC9A0AEFBC88E4B880EFBC89E8BF9BE8A18CE99C8DE5A4ABE69BBCE7BC96E7A081E5898DEFBC8CE68891E4BBACE58588E5889BE5BBBAE4B880E4B8AAE99C8DE5A4ABE69BBCE6A091E38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('330', 0xhttps://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('331', 0xE6BC94E7AE97E8BF87E7A88BEFBC9A0AE69C80E5908EE4BAA7E7949FE79A84E6A091E78AB6E59BBEE5B0B1E698AFE99C8DE5A4ABE69BBCE6A091EFBC8CE58F82E880834669672E32E3808220EFBC88E4BA8CEFBC89E8BF9BE8A18CE7BC96E7A081, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('332', 0xE6BC94E7AE97E8BF87E7A88BEFBC9A0A312EE7BB99E99C8DE5A4ABE69BBCE6A091E79A84E68980E69C89E5B7A6E993BEE68EA5273027E4B88EE58FB3E993BEE68EA5273127E3808220322EE4BB8EE6A091E6A0B9E887B3E6A091E58FB6E4BE9DE5BA8FE8AEB0E5BD95E68980E69C89E5AD97E6AF8DE79A84E7BC96E7A081EFBC8CE5A6824669672E33E38082, 'https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81', '2016-06-18 05:26:00', '2016-12-20 09:41:45', '29', '霍夫曼编码', '数据结构');
INSERT INTO `spider_text` VALUES ('333', 0xE69198E8A681EFBC9A0A322D332D3420E6A091E59CA8E8AEA1E7AE97E69CBAE7A791E5ADA6E4B8ADE698AFE998B6E4B8BA203420E79A8442E6A091E38082, 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '数据结构');
INSERT INTO `spider_text` VALUES ('334', 0xE69198E8A681EFBC9A0AE5A4A7E4BD93E4B88AE5908C42E6A091E4B880E6A0B7EFBC8C322D332D3420E6A091E698AFE58FAFE4BBA5E794A8E5819AE5AD97E585B8E79A84E4B880E7A78DE887AAE5B9B3E8A1A1E695B0E68DAEE7BB93E69E84E38082E5AE83E58FAFE4BBA5E59CA84FEFBC886C6F67206EEFBC89E697B6E997B4E58685E69FA5E689BEE38081E68F92E585A5E5928CE588A0E999A4EFBC8CE8BF99E9878CE79A84206E20E698AFE6A091E4B8ADE58583E7B4A0E79A84E695B0E79BAEE38082, 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '数据结构');
INSERT INTO `spider_text` VALUES ('335', 0xE69198E8A681EFBC9A0A322D332D3420E6A091E59CA8E5A49AE695B0E7BC96E7A88BE8AFADE8A880E4B8ADE5AE9EE78EB0E8B5B7E69DA5E79BB8E5AFB9E59BB0E99ABEEFBC8CE59BA0E4B8BAE59CA8E6A091E4B88AE79A84E6938DE4BD9CE6B689E58F8AE5A4A7E9878FE79A84E789B9E6AE8AE68385E586B5E38082E7BAA2E9BB91E6A091E5AE9EE78EB0E8B5B7E69DA5E69BB4E7AE80E58D95E4B880E4BA9BEFBC8CE68980E4BBA5E58FAFE4BBA5E794A8E5AE83E69DA5E69BBFE4BBA3E38082, 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '数据结构');
INSERT INTO `spider_text` VALUES ('336', 0xE8838CE699AFEFBC9A0A322D332D3420E6A091E68A8AE695B0E68DAEE5AD98E582A8E59CA8E58FABE5819AE58583E7B4A0E79A84E58D95E78BACE58D95E58583E4B8ADE38082E5AE83E4BBACE7BB84E59088E68890E88A82E782B9EFBC8CE6AF8FE4B8AAE88A82E782B9E983BDE698AFE4B88BE58897E4B98BE4B880, 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '数据结构');
INSERT INTO `spider_text` VALUES ('337', 0xE8838CE699AFEFBC9A0A322DE88A82E782B9EFBC8CE5B0B1E698AFE8AFB4EFBC8CE5AE83E58C85E590AB203120E4B8AAE58583E7B4A0E5928C203220E4B8AAE584BFE5AD90EFBC8C20332DE88A82E782B9EFBC8CE5B0B1E698AFE8AFB4EFBC8CE5AE83E58C85E590AB203220E4B8AAE58583E7B4A0E5928C203320E4B8AAE584BFE5AD90EFBC8C20342DE88A82E782B9EFBC8CE5B0B1E698AFE8AFB4EFBC8CE5AE83E58C85E590AB203320E4B8AAE58583E7B4A0E5928C203420E4B8AAE584BFE5AD9020E38082, 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '数据结构');
INSERT INTO `spider_text` VALUES ('338', 0xhttps://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '数据结构');
INSERT INTO `spider_text` VALUES ('339', 0xE8838CE699AFEFBC9A0AE5908C42E6A091E4B880E6A0B7EFBC8C322D332D3420E6A091E698AFE69C89E5BA8FE79A84EFBC9AE6AF8FE4B8AAE58583E7B4A0E5BF85E9A1BBE5A4A7E4BA8EE68896E7AD89E4BA8EE5AE83E5B7A6E8BEB9E79A84E5928CE5AE83E79A84E5B7A6E5AD90E6A091E4B8ADE79A84E4BBBBE4BD95E585B6E4BB96E58583E7B4A0E38082E6AF8FE4B8AAE584BFE5AD90E59BA0E6ADA4E68890E4B8BAE4BA86E794B1E5AE83E79A84E5B7A6E5928CE58FB3E58583E7B4A0E7958CE5AE9AE79A84E4B880E4B8AAE58CBAE997B4E38082, 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '数据结构');
INSERT INTO `spider_text` VALUES ('340', 0xE8838CE699AFEFBC9A0A322D332D3420E6A091E698AFE7BAA2E9BB91E6A091E79A84E4B880E7A78DE7AD89E5908CEFBC8CE8BF99E6848FE591B3E79D80E5AE83E4BBACE698AFE7AD89E4BBB7E79A84E695B0E68DAEE7BB93E69E84E38082E68DA2E58FA5E8AF9DE8AFB4EFBC8CE5AFB9E4BA8EE6AF8FE4B8AA20322D332D3420E6A091EFBC8CE983BDE5AD98E59CA8E79D80E887B3E5B091E4B880E4B8AAE695B0E68DAEE58583E7B4A0E698AFE79BB8E5908CE6ACA1E5BA8FE79A84E7BAA2E9BB91E6A091E38082E59CA820322D332D3420E6A091E4B88AE79A84E68F92E585A5E5928CE588A0E999A4E6938DE4BD9CE4B99FE7AD89E4BBB7E4BA8EE59CA8E7BAA2E9BB91E6A091E4B8ADE79A84E9A29CE889B2E7BFBBE8BDACE5928CE6978BE8BDACE38082E8BF99E4BDBFE5BE97E5AE83E68890E4B8BAE79086E8A7A3E7BAA2E9BB91E6A091E8838CE5908EE79A84E980BBE8BE91E79A84E9878DE8A681E5B7A5E585B7E38082, 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '数据结构');
INSERT INTO `spider_text` VALUES ('342', 0xE8838CE699AFEFBC9A0AC2A0C2A0E8BF99E698AFE4B88EE8AEA1E7AE97E69CBAE79BB8E585B3E79A84E5B08FE4BD9CE59381E38082E4BDA0E58FAFE4BBA5E9809AE8BF87E7BC96E8BE91E68896E4BFAEE8AEA2E689A9E58585E585B6E58685E5AEB9E38082, 'https://zh.wikipedia.org/wiki/2-3-4%E6%A0%91', '2016-05-25 14:42:00', '2016-12-20 09:41:55', '30', '2-3-4树', '数据结构');
INSERT INTO `spider_text` VALUES ('343', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('344', 0xE794A8E98094E5928CE5A5BDE5A484EFBC9A0AE7BAA2E9BB91E6A091E5928C41564CE6A091E4B880E6A0B7E983BDE5AFB9E68F92E585A5E697B6E997B4E38081E588A0E999A4E697B6E997B4E5928CE69FA5E689BEE697B6E997B4E68F90E4BE9BE4BA86E69C80E5A5BDE58FAFE883BDE79A84E69C80E59D8FE68385E586B5E68B85E4BF9DE38082E8BF99E4B88DE58FAAE698AFE4BDBFE5AE83E4BBACE59CA8E697B6E997B4E6958FE6849FE79A84E5BA94E794A8E5A682E5AE9EE697B6E5BA94E794A8EFBC887265616C2074696D65206170706C69636174696F6EEFBC89E4B8ADE69C89E4BBB7E580BCEFBC8CE8808CE4B894E4BDBFE5AE83E4BBACE69C89E59CA8E68F90E4BE9BE69C80E59D8FE68385E586B5E68B85E4BF9DE79A84E585B6E4BB96E695B0E68DAEE7BB93E69E84E4B8ADE4BD9CE4B8BAE5BBBAE980A0E69DBFE59D97E79A84E4BBB7E580BCEFBC9BE4BE8BE5A682EFBC8CE59CA8E8AEA1E7AE97E587A0E4BD95E4B8ADE4BDBFE794A8E79A84E5BE88E5A49AE695B0E68DAEE7BB93E69E84E983BDE58FAFE4BBA5E59FBAE4BA8EE7BAA2E9BB91E6A091E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('345', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('346', 0xE794A8E98094E5928CE5A5BDE5A484EFBC9A0AE7BAA2E9BB91E6A091E698AF322D332D34E6A091E79A84E4B880E7A78DE7AD89E5908CE38082E68DA2E58FA5E8AF9DE8AFB4EFBC8CE5AFB9E4BA8EE6AF8FE4B8AA322D332D34E6A091EFBC8CE983BDE5AD98E59CA8E887B3E5B091E4B880E4B8AAE695B0E68DAEE58583E7B4A0E698AFE5908CE6A0B7E6ACA1E5BA8FE79A84E7BAA2E9BB91E6A091E38082E59CA8322D332D34E6A091E4B88AE79A84E68F92E585A5E5928CE588A0E999A4E6938DE4BD9CE4B99FE7AD89E5908CE4BA8EE59CA8E7BAA2E9BB91E6A091E4B8ADE9A29CE889B2E7BFBBE8BDACE5928CE6978BE8BDACE38082E8BF99E4BDBFE5BE97322D332D34E6A091E68890E4B8BAE79086E8A7A3E7BAA2E9BB91E6A091E8838CE5908EE79A84E980BBE8BE91E79A84E9878DE8A681E5B7A5E585B7EFBC8CE8BF99E4B99FE698AFE5BE88E5A49AE4BB8BE7BB8DE7AE97E6B395E79A84E69599E7A791E4B9A6E59CA8E7BAA2E9BB91E6A091E4B98BE5898DE4BB8BE7BB8D322D332D34E6A091E79A84E58E9FE59BA0EFBC8CE5B0BDE7AEA1322D332D34E6A091E59CA8E5AE9EE8B7B5E4B8ADE4B88DE7BB8FE5B8B8E4BDBFE794A8E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('347', 0xE794A8E98094E5928CE5A5BDE5A484EFBC9A0AE7BAA2E9BB91E6A091E79BB8E5AFB9E4BA8E41564CE6A091E69DA5E8AFB4EFBC8CE789BAE789B2E4BA86E983A8E58886E5B9B3E8A1A1E680A7E4BBA5E68DA2E58F96E68F92E585A52FE588A0E999A4E6938DE4BD9CE697B6E5B091E9878FE79A84E6978BE8BDACE6938DE4BD9CEFBC8CE695B4E4BD93E69DA5E8AFB4E680A7E883BDE8A681E4BC98E4BA8E41564CE6A091E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('348', 0xE680A7E8B4A8EFBC9A0AE7BAA2E9BB91E6A091E698AFE6AF8FE4B8AAE88A82E782B9E983BDE5B8A6E69C89E9A29CE889B2E5B19EE680A7E79A84E4BA8CE58F89E69FA5E689BEE6A091EFBC8CE9A29CE889B2E4B8BAE7BAA2E889B2E68896E9BB91E889B2E38082E59CA8E4BA8CE58F89E69FA5E689BEE6A091E5BCBAE588B6E4B880E888ACE8A681E6B182E4BBA5E5A496EFBC8CE5AFB9E4BA8EE4BBBBE4BD95E69C89E69588E79A84E7BAA2E9BB91E6A091E68891E4BBACE5A29EE58AA0E4BA86E5A682E4B88BE79A84E9A29DE5A496E8A681E6B182EFBC9A, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('349', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('350', 0xE680A7E8B4A8EFBC9A0AE8BF99E4BA9BE7BAA6E69D9FE7A1AEE4BF9DE4BA86E7BAA2E9BB91E6A091E79A84E585B3E994AEE789B9E680A7EFBC9AE4BB8EE6A0B9E588B0E58FB6E5AD90E79A84E69C80E995BFE79A84E58FAFE883BDE8B7AFE5BE84E4B88DE5A49AE4BA8EE69C80E79FADE79A84E58FAFE883BDE8B7AFE5BE84E79A84E4B8A4E5808DE995BFE38082E7BB93E69E9CE698AFE8BF99E4B8AAE6A091E5A4A7E887B4E4B88AE698AFE5B9B3E8A1A1E79A84E38082E59BA0E4B8BAE6938DE4BD9CE6AF94E5A682E68F92E585A5E38081E588A0E999A4E5928CE69FA5E689BEE69F90E4B8AAE580BCE79A84E69C80E59D8FE68385E586B5E697B6E997B4E983BDE8A681E6B182E4B88EE6A091E79A84E9AB98E5BAA6E68890E6AF94E4BE8BEFBC8CE8BF99E4B8AAE59CA8E9AB98E5BAA6E4B88AE79A84E79086E8AEBAE4B88AE99990E58581E8AEB8E7BAA2E9BB91E6A091E59CA8E69C80E59D8FE68385E586B5E4B88BE983BDE698AFE9AB98E69588E79A84EFBC8CE8808CE4B88DE5908CE4BA8EE699AEE9809AE79A84E4BA8CE58F89E69FA5E689BEE6A091E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('351', 0xE680A7E8B4A8EFBC9A0AE8A681E79FA5E98193E4B8BAE4BB80E4B988E8BF99E4BA9BE680A7E8B4A8E7A1AEE4BF9DE4BA86E8BF99E4B8AAE7BB93E69E9CEFBC8CE6B3A8E6848FE588B0E680A7E8B4A834E5AFBCE887B4E4BA86E8B7AFE5BE84E4B88DE883BDE69C89E4B8A4E4B8AAE6AF97E8BF9EE79A84E7BAA2E889B2E88A82E782B9E5B0B1E8B6B3E5A49FE4BA86E38082E69C80E79FADE79A84E58FAFE883BDE8B7AFE5BE84E983BDE698AFE9BB91E889B2E88A82E782B9EFBC8CE69C80E995BFE79A84E58FAFE883BDE8B7AFE5BE84E69C89E4BAA4E69BBFE79A84E7BAA2E889B2E5928CE9BB91E889B2E88A82E782B9E38082E59BA0E4B8BAE6A0B9E68DAEE680A7E8B4A835E68980E69C89E69C80E995BFE79A84E8B7AFE5BE84E983BDE69C89E79BB8E5908CE695B0E79BAEE79A84E9BB91E889B2E88A82E782B9EFBC8CE8BF99E5B0B1E8A1A8E6988EE4BA86E6B2A1E69C89E8B7AFE5BE84E883BDE5A49AE4BA8EE4BBBBE4BD95E585B6E4BB96E8B7AFE5BE84E79A84E4B8A4E5808DE995BFE38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('352', 0xE680A7E8B4A8EFBC9A0AE59CA8E5BE88E5A49AE6A091E695B0E68DAEE7BB93E69E84E79A84E8A1A8E7A4BAE4B8ADEFBC8CE4B880E4B8AAE88A82E782B9E69C89E58FAFE883BDE58FAAE69C89E4B880E4B8AAE5AD90E88A82E782B9EFBC8CE8808CE58FB6E5AD90E88A82E782B9E58C85E590ABE695B0E68DAEE38082E794A8E8BF99E7A78DE88C83E4BE8BE8A1A8E7A4BAE7BAA2E9BB91E6A091E698AFE58FAFE883BDE79A84EFBC8CE4BD86E698AFE8BF99E4BC9AE694B9E58F98E4B880E4BA9BE680A7E8B4A8E5B9B6E4BDBFE7AE97E6B395E5A48DE69D82E38082E4B8BAE6ADA4EFBC8CE69CACE69687E4B8ADE68891E4BBACE4BDBFE794A8226E696CE58FB6E5AD9022E6889622E7A9BAEFBC886E756C6CEFBC89E58FB6E5AD9022EFBC8CE5A682E4B88AE59BBEE68980E7A4BAEFBC8CE5AE83E4B88DE58C85E590ABE695B0E68DAEE8808CE58FAAE58585E5BD93E6A091E59CA8E6ADA4E7BB93E69D9FE79A84E68C87E7A4BAE38082E8BF99E4BA9BE88A82E782B9E59CA8E7BB98E59BBEE4B8ADE7BB8FE5B8B8E8A2ABE79C81E795A5EFBC8CE5AFBCE887B4E4BA86E8BF99E4BA9BE6A091E5A5BDE5838FE5908CE4B88AE8BFB0E58E9FE58899E79BB8E79F9BE79BBEEFBC8CE8808CE5AE9EE99985E4B88AE4B88DE698AFE8BF99E6A0B7E38082E4B88EE6ADA4E69C89E585B3E79A84E7BB93E8AEBAE698AFE68980E69C89E88A82E782B9E983BDE69C89E4B8A4E4B8AAE5AD90E88A82E782B9EFBC8CE5B0BDE7AEA1E585B6E4B8ADE79A84E4B880E4B8AAE68896E4B8A4E4B8AAE58FAFE883BDE698AFE7A9BAE58FB6E5AD90E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('353', 0xE6B890E8BF9BE8BEB9E7958CE79A84E8AF81E6988EEFBC9A0AE58C85E590AB6EE4B8AAE58685E983A8E88A82E782B9E79A84E7BAA2E9BB91E6A091E79A84E9AB98E5BAA6E698AF4F286C6F67286E2929E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('354', 0xE6B890E8BF9BE8BEB9E7958CE79A84E8AF81E6988EEFBC9A0A68287629203D20E4BBA5E88A82E782B976E4B8BAE6A0B9E79A84E5AD90E6A091E79A84E9AB98E5BAA6E38082206268287629203D20E4BB8E76E588B0E5AD90E6A091E4B8ADE4BBBBE4BD95E58FB6E5AD90E79A84E9BB91E889B2E88A82E782B9E79A84E695B0E79BAEEFBC88E5A682E69E9C76E698AFE9BB91E889B2E58899E4B88DE8AEA1E695B0E5AE83EFBC8CE4B99FE58FABE5819AE9BB91E889B2E9AB98E5BAA6EFBC89E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('355', 0xE6B890E8BF9BE8BEB9E7958CE79A84E8AF81E6988EEFBC9A0AE5BC95E79086EFBC9AE4BBA5E88A82E782B976E4B8BAE6A0B9E79A84E5AD90E6A091E69C89E887B3E5B09120322062206820282076202920E288922031207B5C646973706C61797374796C6520325E7B62682876297D2D317D20E4B8AAE58685E983A8E88A82E782B9E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('356', 0xE6B890E8BF9BE8BEB9E7958CE79A84E8AF81E6988EEFBC9A0AE5A682E69E9C76E79A84E9AB98E5BAA6E698AFE99BB6E58899E5AE83E5BF85E5AE9AE698AF6E696CEFBC8CE59BA0E6ADA46268287629203D2030E38082E68980E4BBA5EFBC9A, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('357', 0xE6B890E8BF9BE8BEB9E7958CE79A84E8AF81E6988EEFBC9A0A322062206820282076202920E288922031203D2032203020E288922031203D203120E288922031203D2030207B5C646973706C61797374796C6520325E7B62682876297D2D313D325E7B307D2D313D312D313D307D, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('358', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('359', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('360', 0xE6B890E8BF9BE8BEB9E7958CE79A84E8AF81E6988EEFBC9A0A32206220682028207620E280B2202920E28892203120E288922031202B2032206220682028207620E280B2202920E28892203120E288922031202B2031203D2032206220682028207620E280B2202920E288922031207B5C646973706C61797374796C6520325E7B6268287627292D317D2D312B325E7B6268287627292D317D2D312B313D325E7B6268287627297D2D317D, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('361', 0xE6B890E8BF9BE8BEB9E7958CE79A84E8AF81E6988EEFBC9A0AE4BDBFE794A8E8BF99E4B8AAE5BC95E79086E68891E4BBACE78EB0E59CA8E58FAFE4BBA5E5B195E7A4BAE587BAE6A091E79A84E9AB98E5BAA6E698AFE5AFB9E695B0E680A7E79A84E38082E59BA0E4B8BAE59CA8E4BB8EE6A0B9E588B0E58FB6E5AD90E79A84E4BBBBE4BD95E8B7AFE5BE84E4B88AE887B3E5B091E69C89E4B880E58D8AE79A84E88A82E782B9E698AFE9BB91E889B2EFBC88E6A0B9E68DAEE7BAA2E9BB91E6A091E680A7E8B4A834EFBC89EFBC8CE6A0B9E79A84E9BB91E889B2E9AB98E5BAA6E887B3E5B091E698AF6828726F6F74292F32E38082E9809AE8BF87E5BC95E79086E68891E4BBACE5BE97E588B0EFBC9A, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('362', 0xE6B890E8BF9BE8BEB9E7958CE79A84E8AF81E6988EEFBC9A0A6E20E2A9BE2032206820282072206F206F20742029203220E28892203120E28694206C6F6720E281A12028206E202B2031202920E2A9BE206820282072206F206F20742029203220E28694206820282072206F206F2074202920E2A9BD2032206C6F6720E281A12028206E202B20312029207B5C646973706C61797374796C65206E5C676571736C616E7420325E7B5C66726163207B6828726F6F74297D7B327D7D2D315C6C65667472696768746172726F77205C3B5C6C6F67207B286E2B31297D5C676571736C616E74207B5C66726163207B6828726F6F74297D7B327D7D5C6C65667472696768746172726F77205C3B6828726F6F74295C6C6571736C616E7420325C6C6F67207B286E2B31297D7D, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('363', 0xE6B890E8BF9BE8BEB9E7958CE79A84E8AF81E6988EEFBC9A0A41564CE6A0912042E6A0912064616E63696E67207472656520E4BCB8E5B195E6A09120322D332D34E6A091205472656170, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('364', 0xE5BC95E794A8EFBC9A0A4D617468776F726C643A205265642D426C61636B20547265652053616E20446965676F20537461746520556E69766572736974793A204353203636303A205265642D426C61636B2074726565206E6F7465732C20627920526F67657220576869746E657920436F726D656E2C204C6569736572736F6E2C205269766573742C20537465696E2E20496E74726F64756374696F6E20746F20416C676F726974686D732E204D6173736163687573657474733A20546865204D49542050726573732C20323030322E2070703237332D37372E204953424E20302D30372D3031333135312D31, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('365', 0xE5BC95E794A8EFBC9A0AE7BBB4E59FBAE585B1E4BAABE8B584E6BA90E4B8ADE79BB8E585B3E79A84E5A49AE5AA92E4BD93E8B584E6BA90EFBC9AE7BAA2E9BB91E6A091, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('366', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('368', 0xE68F92E585A5EFBC9A0AE68891E4BBACE9A696E58588E4BBA5E4BA8CE58F89E69FA5E689BEE6A091E79A84E696B9E6B395E5A29EE58AA0E88A82E782B9E5B9B6E6A087E8AEB0E5AE83E4B8BAE7BAA2E889B2E38082EFBC88E5A682E69E9CE8AEBEE4B8BAE9BB91E889B2EFBC8CE5B0B1E4BC9AE5AFBCE887B4E6A0B9E588B0E58FB6E5AD90E79A84E8B7AFE5BE84E4B88AE69C89E4B880E69DA1E8B7AFE4B88AEFBC8CE5A49AE4B880E4B8AAE9A29DE5A496E79A84E9BB91E88A82E782B9EFBC8CE8BF99E4B8AAE698AFE5BE88E99ABEE8B083E695B4E79A84E38082E4BD86E698AFE8AEBEE4B8BAE7BAA2E889B2E88A82E782B9E5908EEFBC8CE58FAFE883BDE4BC9AE5AFBCE887B4E587BAE78EB0E4B8A4E4B8AAE8BF9EE7BBADE7BAA2E889B2E88A82E782B9E79A84E586B2E7AA81EFBC8CE982A3E4B988E58FAFE4BBA5E9809AE8BF87E9A29CE889B2E8B083E68DA2EFBC88636F6C6F7220666C697073EFBC89E5928CE6A091E6978BE8BDACE69DA5E8B083E695B4E38082EFBC89E4B88BE99DA2E8A681E8BF9BE8A18CE4BB80E4B988E6938DE4BD9CE58F96E586B3E4BA8EE585B6E4BB96E4B8B4E8BF91E88A82E782B9E79A84E9A29CE889B2E38082E5908CE4BABAE7B1BBE79A84E5AEB6E6978FE6A091E4B8ADE4B880E6A0B7EFBC8CE68891E4BBACE5B086E4BDBFE794A8E69CAFE8AFADE58F94E788B6E88A82E782B9E69DA5E68C87E4B880E4B8AAE88A82E782B9E79A84E788B6E88A82E782B9E79A84E58584E5BC9FE88A82E782B9E38082E6B3A8E6848FEFBC9A, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('369', 0xE68F92E585A5EFBC9A0AE680A7E8B4A831E5928CE680A7E8B4A833E680BBE698AFE4BF9DE68C81E79D80E3808220E680A7E8B4A834E58FAAE59CA8E5A29EE58AA0E7BAA2E889B2E88A82E782B9E38081E9878DE7BB98E9BB91E889B2E88A82E782B9E4B8BAE7BAA2E889B2EFBC8CE68896E5819AE6978BE8BDACE697B6E58F97E588B0E5A881E88381E3808220E680A7E8B4A835E58FAAE59CA8E5A29EE58AA0E9BB91E889B2E88A82E782B9E38081E9878DE7BB98E7BAA2E889B2E88A82E782B9E4B8BAE9BB91E889B2EFBC8CE68896E5819AE6978BE8BDACE697B6E58F97E588B0E5A881E88381E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('370', 0xE68F92E585A5EFBC9A0AE59CA8E4B88BE99DA2E79A84E7A4BAE6848FE59BBEE4B8ADEFBC8CE5B086E8A681E68F92E585A5E79A84E88A82E782B9E6A087E4B8BA4EEFBC8C4EE79A84E788B6E88A82E782B9E6A087E4B8BA50EFBC8C4EE79A84E7A596E788B6E88A82E782B9E6A087E4B8BA47EFBC8C4EE79A84E58F94E788B6E88A82E782B9E6A087E4B8BA55E38082E59CA8E59BBEE4B8ADE5B195E7A4BAE79A84E4BBBBE4BD95E9A29CE889B2E8A681E4B988E698AFE794B1E5AE83E68980E5A484E68385E5BDA2E8BF99E4BA9BE68980E4BD9CE79A84E58187E5AE9AEFBC8CE8A681E4B988E698AFE58187E5AE9AE68980E69A97E590ABEFBC88696D706C79EFBC89E79A84E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('371', 0xE68F92E585A5EFBC9A0AE5AFB9E4BA8EE6AF8FE4B880E7A78DE68385E5BDA2EFBC8CE68891E4BBACE5B086E4BDBFE794A843E7A4BAE4BE8BE4BBA3E7A081E69DA5E5B195E7A4BAE38082E9809AE8BF87E4B88BE58897E587BDE695B0EFBC8CE58FAFE4BBA5E689BEE588B0E4B880E4B8AAE88A82E782B9E79A84E58F94E788B6E5928CE7A596E788B6E88A82E782B9EFBC9A, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('372', 0xE68F92E585A5EFBC9A0A6E6F64652A206772616E64706172656E74286E6F6465202A6E297B0A202020202072657475726E206E2D3E706172656E742D3E706172656E743B0A207D0A0A206E6F64652A20756E636C65286E6F6465202A6E297B0A20202020206966286E2D3E706172656E74203D3D206772616E64706172656E74286E292D3E6C656674290A20202020202020202072657475726E206772616E64706172656E7420286E292D3E72696768743B0A2020202020656C73650A20202020202020202072657475726E206772616E64706172656E7420286E292D3E6C6566743B0A207D, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:05', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('373', 0xE68F92E585A5EFBC9A0AE68385E5BDA2313AE696B0E88A82E782B94EE4BD8DE4BA8EE6A091E79A84E6A0B9E4B88AEFBC8CE6B2A1E69C89E788B6E88A82E782B9E38082E59CA8E8BF99E7A78DE68385E5BDA2E4B88BEFBC8CE68891E4BBACE68A8AE5AE83E9878DE7BB98E4B8BAE9BB91E889B2E4BBA5E6BBA1E8B6B3E680A7E8B4A832E38082E59BA0E4B8BAE5AE83E59CA8E6AF8FE4B8AAE8B7AFE5BE84E4B88AE5AFB9E9BB91E88A82E782B9E695B0E79BAEE5A29EE58AA0E4B880EFBC8CE680A7E8B4A835E58CB9E9858DE38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('374', 0xE68F92E585A5EFBC9A0A766F696420696E736572745F6361736531286E6F6465202A6E297B0A20202020206966286E2D3E706172656E74203D3D204E554C4C290A2020202020202020206E2D3E636F6C6F72203D20424C41434B3B0A2020202020656C73650A202020202020202020696E736572745F636173653220286E293B0A207D, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('375', 0xE68F92E585A5EFBC9A0AE68385E5BDA2323AE696B0E88A82E782B9E79A84E788B6E88A82E782B950E698AFE9BB91E889B2EFBC8CE68980E4BBA5E680A7E8B4A834E6B2A1E69C89E5A4B1E69588EFBC88E696B0E88A82E782B9E698AFE7BAA2E889B2E79A84EFBC89E38082E59CA8E8BF99E7A78DE68385E5BDA2E4B88BEFBC8CE6A091E4BB8DE698AFE69C89E69588E79A84E38082E680A7E8B4A835E4B99FE69CAAE58F97E588B0E5A881E88381EFBC8CE5B0BDE7AEA1E696B0E88A82E782B94EE69C89E4B8A4E4B8AAE9BB91E889B2E58FB6E5AD90E5AD90E88A82E782B9EFBC9BE4BD86E794B1E4BA8EE696B0E88A82E782B94EE698AFE7BAA2E889B2EFBC8CE9809AE8BF87E5AE83E79A84E6AF8FE4B8AAE5AD90E88A82E782B9E79A84E8B7AFE5BE84E5B0B1E983BDE69C89E5908CE9809AE8BF87E5AE83E68980E69BBFE68DA2E79A84E9BB91E889B2E79A84E58FB6E5AD90E79A84E8B7AFE5BE84E5908CE6A0B7E695B0E79BAEE79A84E9BB91E889B2E88A82E782B9EFBC8CE68980E4BBA5E4BE9DE784B6E6BBA1E8B6B3E8BF99E4B8AAE680A7E8B4A8E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('376', 0xE68F92E585A5EFBC9A0A766F696420696E736572745F6361736532286E6F6465202A6E297B0A20202020206966286E2D3E706172656E742D3E636F6C6F72203D3D20424C41434B290A20202020202020202072657475726E3B202F2A20E6A091E4BB8DE697A7E69C89E695882A2F0A2020202020656C73650A202020202020202020696E736572745F636173653320286E293B0A207D, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('377', 0xE68F92E585A5EFBC9A0AE6B3A8E6848FEFBC9AE59CA8E4B88BE58897E68385E5BDA2E4B88BE68891E4BBACE58187E5AE9AE696B0E88A82E782B9E79A84E788B6E88A82E782B9E4B8BAE7BAA2E889B2EFBC8CE68980E4BBA5E5AE83E69C89E7A596E788B6E88A82E782B9EFBC9BE59BA0E4B8BAE5A682E69E9CE788B6E88A82E782B9E698AFE6A0B9E88A82E782B9EFBC8CE982A3E788B6E88A82E782B9E5B0B1E5BA94E5BD93E698AFE9BB91E889B2E38082E68980E4BBA5E696B0E88A82E782B9E680BBE69C89E4B880E4B8AAE58F94E788B6E88A82E782B9EFBC8CE5B0BDE7AEA1E59CA8E68385E5BDA234E5928C35E4B88BE5AE83E58FAFE883BDE698AFE58FB6E5AD90E88A82E782B9E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('378', 0xE68F92E585A5EFBC9A0AE68385E5BDA2333AE5A682E69E9CE788B6E88A82E782B950E5928CE58F94E788B6E88A82E782B955E4BA8CE88085E983BDE698AFE7BAA2E889B2EFBC8CEFBC88E6ADA4E697B6E696B0E68F92E585A5E88A82E782B94EE5819AE4B8BA50E79A84E5B7A6E5AD90E88A82E782B9E68896E58FB3E5AD90E88A82E782B9E983BDE5B19EE4BA8EE68385E5BDA233EFBC8CE8BF99E9878CE58FB3E59BBEE4BB85E698BEE7A4BA4EE5819AE4B8BA50E5B7A6E5AD90E79A84E68385E5BDA2EFBC89E58899E68891E4BBACE58FAFE4BBA5E5B086E5AE83E4BBACE4B8A4E4B8AAE9878DE7BB98E4B8BAE9BB91E889B2E5B9B6E9878DE7BB98E7A596E788B6E88A82E782B947E4B8BAE7BAA2E889B2EFBC88E794A8E69DA5E4BF9DE68C81E680A7E8B4A835EFBC89E38082E78EB0E59CA8E68891E4BBACE79A84E696B0E88A82E782B94EE69C89E4BA86E4B880E4B8AAE9BB91E889B2E79A84E788B6E88A82E782B950E38082E59BA0E4B8BAE9809AE8BF87E788B6E88A82E782B950E68896E58F94E788B6E88A82E782B955E79A84E4BBBBE4BD95E8B7AFE5BE84E983BDE5BF85E5AE9AE9809AE8BF87E7A596E788B6E88A82E782B947EFBC8CE59CA8E8BF99E4BA9BE8B7AFE5BE84E4B88AE79A84E9BB91E88A82E782B9E695B0E79BAEE6B2A1E69C89E694B9E58F98E38082E4BD86E698AFEFBC8CE7BAA2E889B2E79A84E7A596E788B6E88A82E782B947E58FAFE883BDE698AFE6A0B9E88A82E782B9EFBC8CE8BF99E5B0B1E8BF9DE58F8DE4BA86E680A7E8B4A832EFBC8CE4B99FE69C89E58FAFE883BDE7A596E788B6E88A82E782B947E79A84E788B6E88A82E782B9E698AFE7BAA2E889B2E79A84EFBC8CE8BF99E5B0B1E8BF9DE58F8DE4BA86E680A7E8B4A834E38082E4B8BAE4BA86E8A7A3E586B3E8BF99E4B8AAE997AEE9A298EFBC8CE68891E4BBACE59CA8E7A596E788B6E88A82E782B947E4B88AE98092E5BD92E59CB0E8BF9BE8A18CE68385E5BDA231E79A84E695B4E4B8AAE8BF87E7A88BE38082EFBC88E68A8A47E5BD93E68890E698AFE696B0E58AA0E585A5E79A84E88A82E782B9E8BF9BE8A18CE59084E7A78DE68385E5BDA2E79A84E6A380E69FA5EFBC89, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('379', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('380', 0xE68F92E585A5EFBC9A0AE6B3A8E6848FEFBC9AE59CA8E4BD99E4B88BE79A84E68385E5BDA2E4B88BEFBC8CE68891E4BBACE58187E5AE9AE788B6E88A82E782B950E698AFE585B6E788B6E4BAB247E79A84E5B7A6E5AD90E88A82E782B9E38082E5A682E69E9CE5AE83E698AFE58FB3E5AD90E88A82E782B9EFBC8CE68385E5BDA234E5928CE68385E5BDA235E4B8ADE79A84E5B7A6E5928CE58FB3E5BA94E5BD93E5AFB9E8B083E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('381', 0xE68F92E585A5EFBC9A0AE68385E5BDA2343AE788B6E88A82E782B950E698AFE7BAA2E889B2E8808CE58F94E788B6E88A82E782B955E698AFE9BB91E889B2E68896E7BCBAE5B091EFBC8CE5B9B6E4B894E696B0E88A82E782B94EE698AFE585B6E788B6E88A82E782B950E79A84E58FB3E5AD90E88A82E782B9E8808CE788B6E88A82E782B950E58F88E698AFE585B6E788B6E88A82E782B9E79A84E5B7A6E5AD90E88A82E782B9E38082E59CA8E8BF99E7A78DE68385E5BDA2E4B88BEFBC8CE68891E4BBACE8BF9BE8A18CE4B880E6ACA1E5B7A6E6978BE8BDACE8B083E68DA2E696B0E88A82E782B9E5928CE585B6E788B6E88A82E782B9E79A84E8A792E889B23BE68EA5E79D80EFBC8CE68891E4BBACE68C89E68385E5BDA235E5A484E79086E4BBA5E5898DE79A84E788B6E88A82E782B950E4BBA5E8A7A3E586B3E4BB8DE784B6E5A4B1E69588E79A84E680A7E8B4A834E38082E6B3A8E6848FE8BF99E4B8AAE694B9E58F98E4BC9AE5AFBCE887B4E69F90E4BA9BE8B7AFE5BE84E9809AE8BF87E5AE83E4BBACE4BBA5E5898DE4B88DE9809AE8BF87E79A84E696B0E88A82E782B94EEFBC88E6AF94E5A682E59BBEE4B8AD31E58FB7E58FB6E5AD90E88A82E782B9EFBC89E68896E4B88DE9809AE8BF87E88A82E782B950EFBC88E6AF94E5A682E59BBEE4B8AD33E58FB7E58FB6E5AD90E88A82E782B9EFBC89EFBC8CE4BD86E794B1E4BA8EE8BF99E4B8A4E4B8AAE88A82E782B9E983BDE698AFE7BAA2E889B2E79A84EFBC8CE68980E4BBA5E680A7E8B4A835E4BB8DE69C89E69588E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('382', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('383', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('384', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('385', 0xE68F92E585A5EFBC9A0AE6B3A8E6848FE68F92E585A5E5AE9EE99985E4B88AE698AFE58E9FE59CB0E7AE97E6B395EFBC8CE59BA0E4B8BAE4B88AE8BFB0E68980E69C89E8B083E794A8E983BDE4BDBFE794A8E4BA86E5B0BEE983A8E98092E5BD92E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('386', 0xE588A0E999A4EFBC9A0AE5A682E69E9CE99C80E8A681E588A0E999A4E79A84E88A82E782B9E69C89E4B8A4E4B8AAE584BFE5AD90EFBC8CE982A3E4B988E997AEE9A298E58FAFE4BBA5E8A2ABE8BDACE58C96E68890E588A0E999A4E58FA6E4B880E4B8AAE58FAAE69C89E4B880E4B8AAE584BFE5AD90E79A84E88A82E782B9E79A84E997AEE9A298EFBC88E4B8BAE4BA86E8A1A8E8BFB0E696B9E4BEBFEFBC8CE8BF99E9878CE68980E68C87E79A84E584BFE5AD90EFBC8CE4B8BAE99D9EE58FB6E5AD90E88A82E782B9E79A84E584BFE5AD90EFBC89E38082E5AFB9E4BA8EE4BA8CE58F89E69FA5E689BEE6A091EFBC8CE59CA8E588A0E999A4E5B8A6E69C89E4B8A4E4B8AAE99D9EE58FB6E5AD90E584BFE5AD90E79A84E88A82E782B9E79A84E697B6E58099EFBC8CE68891E4BBACE689BEE588B0E8A681E4B988E59CA8E5AE83E79A84E5B7A6E5AD90E6A091E4B8ADE79A84E69C80E5A4A7E58583E7B4A0E38081E8A681E4B988E59CA8E5AE83E79A84E58FB3E5AD90E6A091E4B8ADE79A84E69C80E5B08FE58583E7B4A0EFBC8CE5B9B6E68A8AE5AE83E79A84E580BCE8BDACE7A7BBE588B0E8A681E588A0E999A4E79A84E88A82E782B9E4B8ADEFBC88E5A682E59CA8E8BF99E9878CE68980E5B195E7A4BAE79A84E982A3E6A0B7EFBC89E38082E68891E4BBACE68EA5E79D80E588A0E999A4E68891E4BBACE4BB8EE4B8ADE5A48DE588B6E587BAE580BCE79A84E982A3E4B8AAE88A82E782B9EFBC8CE5AE83E5BF85E5AE9AE69C89E5B091E4BA8EE4B8A4E4B8AAE99D9EE58FB6E5AD90E79A84E584BFE5AD90E38082E59BA0E4B8BAE58FAAE698AFE5A48DE588B6E4BA86E4B880E4B8AAE580BCEFBC8CE4B88DE8BF9DE58F8DE4BBBBE4BD95E680A7E8B4A8EFBC8CE8BF99E5B0B1E68A8AE997AEE9A298E7AE80E58C96E4B8BAE5A682E4BD95E588A0E999A4E69C80E5A49AE69C89E4B880E4B8AAE584BFE5AD90E79A84E88A82E782B9E79A84E997AEE9A298E38082E5AE83E4B88DE585B3E5BF83E8BF99E4B8AAE88A82E782B9E698AFE69C80E5889DE8A681E588A0E999A4E79A84E88A82E782B9E8BF98E698AFE68891E4BBACE4BB8EE4B8ADE5A48DE588B6E587BAE580BCE79A84E982A3E4B8AAE88A82E782B9E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('387', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('388', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('389', 0xE588A0E999A4EFBC9A0A737472756374206E6F6465202A0A7369626C696E6728737472756374206E6F6465202A6E290A7B0A20202020202020206966286E203D3D206E2D3E706172656E742D3E6C656674290A2020202020202020202020202020202072657475726E206E2D3E706172656E742D3E72696768743B0A2020202020202020656C73650A2020202020202020202020202020202072657475726E206E2D3E706172656E742D3E6C6566743B0A7D, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('390', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('391', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('392', 0xE588A0E999A4EFBC9A0AE5A682E69E9C4EE5928CE5AE83E5889DE5A78BE79A84E788B6E4BAB2E698AFE9BB91E889B2EFBC8CE58899E588A0E999A4E5AE83E79A84E788B6E4BAB2E5AFBCE887B4E9809AE8BF874EE79A84E8B7AFE5BE84E983BDE6AF94E4B88DE9809AE8BF87E5AE83E79A84E8B7AFE5BE84E5B091E4BA86E4B880E4B8AAE9BB91E889B2E88A82E782B9E38082E59BA0E4B8BAE8BF99E8BF9DE58F8DE4BA86E680A7E8B4A835EFBC8CE6A091E99C80E8A681E8A2ABE9878DE696B0E5B9B3E8A1A1E38082E69C89E587A0E7A78DE68385E5BDA2E99C80E8A681E88083E89991EFBC9A, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('393', 0xE588A0E999A4EFBC9A0AE68385E5BDA2313A204EE698AFE696B0E79A84E6A0B9E38082E59CA8E8BF99E7A78DE68385E5BDA2E4B88BEFBC8CE68891E4BBACE5B0B1E5819AE5AE8CE4BA86E38082E68891E4BBACE4BB8EE68980E69C89E8B7AFE5BE84E58EBBE999A4E4BA86E4B880E4B8AAE9BB91E889B2E88A82E782B9EFBC8CE8808CE696B0E6A0B9E698AFE9BB91E889B2E79A84EFBC8CE68980E4BBA5E680A7E8B4A8E983BDE4BF9DE68C81E79D80E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('394', 0xE588A0E999A4EFBC9A0A766F69640A64656C6574655F636173653128737472756374206E6F6465202A6E290A7B0A20202020202020206966286E2D3E706172656E7420213D204E554C4C290A2020202020202020202020202020202064656C6574655F636173653220286E293B0A7D, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('395', 0xE588A0E999A4EFBC9A0AE6B3A8E6848FEFBC9AE59CA8E68385E5BDA232E3808135E5928C36E4B88BEFBC8CE68891E4BBACE58187E5AE9A4EE698AFE5AE83E788B6E4BAB2E79A84E5B7A6E584BFE5AD90E38082E5A682E69E9CE5AE83E698AFE58FB3E584BFE5AD90EFBC8CE58899E59CA8E8BF99E4BA9BE68385E5BDA2E4B88BE79A84E5B7A6E5928CE58FB3E5BA94E5BD93E5AFB9E8B083E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('396', 0xE588A0E999A4EFBC9A0AE68385E5BDA232EFBC9A2053E698AFE7BAA2E889B2E38082E59CA8E8BF99E7A78DE68385E5BDA2E4B88BE68891E4BBACE59CA84EE79A84E788B6E4BAB2E4B88AE5819AE5B7A6E6978BE8BDACEFBC8CE68A8AE7BAA2E889B2E58584E5BC9FE8BDACE68DA2E688904EE79A84E7A596E788B6EFBC8CE68891E4BBACE68EA5E79D80E5AFB9E8B0834EE79A84E788B6E4BAB2E5928CE7A596E788B6E79A84E9A29CE889B2E38082E5AE8CE68890E8BF99E4B8A4E4B8AAE6938DE4BD9CE5908EEFBC8CE5B0BDE7AEA1E68980E69C89E8B7AFE5BE84E4B88AE9BB91E889B2E88A82E782B9E79A84E695B0E79BAEE6B2A1E69C89E694B9E58F98EFBC8CE4BD86E78EB0E59CA84EE69C89E4BA86E4B880E4B8AAE9BB91E889B2E79A84E58584E5BC9FE5928CE4B880E4B8AAE7BAA2E889B2E79A84E788B6E4BAB2EFBC88E5AE83E79A84E696B0E58584E5BC9FE698AFE9BB91E889B2E59BA0E4B8BAE5AE83E698AFE7BAA2E889B253E79A84E4B880E4B8AAE584BFE5AD90EFBC89EFBC8CE68980E4BBA5E68891E4BBACE58FAFE4BBA5E68EA5E4B88BE58EBBE68C89E68385E5BDA234E38081E68385E5BDA235E68896E68385E5BDA236E69DA5E5A484E79086E3808220EFBC88E6B3A8E6848FEFBC9AE8BF99E9878CE79A84E59BBEE4B8ADE6B2A1E69C89E698BEE7A4BAE587BAE69DA5EFBC8C4EE698AFE588A0E999A4E4BA86E9BB91E889B2E88A82E782B9E5908EE69BBFE68DA2E4B88AE69DA5E79A84E5AD90E88A82E782B9EFBC8CE68980E4BBA5E8BF99E4B8AAE8BF87E7A88BE4B8ADE794B1502D3E582D3E4EE58F98E68890E4BA86502D3E4EEFBC8CE5AE9EE99985E4B88AE698AFE5B091E4BA86E4B880E4B8AAE9BB91E889B2E88A82E782B9EFBC8CE4B99FE58FAFE4BBA5E79086E8A7A3E4B8BA506172656E7428426C61636B29E5928C53696C62696E672852656429E982A3E4B988E4BB96E4BBACE79A84E5ADA9E5AD90E9BB91E889B2E88A82E782B9E79A84E695B0E79BAEE882AFE5AE9AE4B88DE7AD89EFBC8CE8AEA9E4BB96E4BBACE5819AE696B0E58584E5BC9FE882AFE5AE9AE698AFE4B88DE5B9B3E8A1A1E79A84EFBC8CE8BF98E99C80E5908EE99DA2E7BBA7E7BBADE5A484E79086E38082E8BF99E9878CE79C8BE88BB1E69687E78988E69CACE79A845B315DE6AF94E8BE83E79A84E6988EE4BA86EFBC89, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('397', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('398', 0xE588A0E999A4EFBC9A0AE68385E5BDA233EFBC9A204EE79A84E788B6E4BAB2E3808153E5928C53E79A84E584BFE5AD90E983BDE698AFE9BB91E889B2E79A84E38082E59CA8E8BF99E7A78DE68385E5BDA2E4B88BEFBC8CE68891E4BBACE7AE80E58D95E79A84E9878DE7BB9853E4B8BAE7BAA2E889B2E38082E7BB93E69E9CE698AFE9809AE8BF8753E79A84E68980E69C89E8B7AFE5BE84EFBC8CE5AE83E4BBACE5B0B1E698AFE4BBA5E5898DE4B88DE9809AE8BF874EE79A84E982A3E4BA9BE8B7AFE5BE84EFBC8CE983BDE5B091E4BA86E4B880E4B8AAE9BB91E889B2E88A82E782B9E38082E59BA0E4B8BAE588A0E999A44EE79A84E5889DE5A78BE79A84E788B6E4BAB2E4BDBFE9809AE8BF874EE79A84E68980E69C89E8B7AFE5BE84E5B091E4BA86E4B880E4B8AAE9BB91E889B2E88A82E782B9EFBC8CE8BF99E4BDBFE4BA8BE68385E983BDE5B9B3E8A1A1E4BA86E8B5B7E69DA5E38082E4BD86E698AFEFBC8CE9809AE8BF8750E79A84E68980E69C89E8B7AFE5BE84E78EB0E59CA8E6AF94E4B88DE9809AE8BF8750E79A84E8B7AFE5BE84E5B091E4BA86E4B880E4B8AAE9BB91E889B2E88A82E782B9EFBC8CE68980E4BBA5E4BB8DE784B6E8BF9DE58F8DE680A7E8B4A835E38082E8A681E4BFAEE6ADA3E8BF99E4B8AAE997AEE9A298EFBC8CE68891E4BBACE8A681E4BB8EE68385E5BDA231E5BC80E5A78BEFBC8CE59CA850E4B88AE5819AE9878DE696B0E5B9B3E8A1A1E5A484E79086E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('399', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:06', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('400', 0xE588A0E999A4EFBC9A0AE68385E5BDA234EFBC9A2053E5928C53E79A84E584BFE5AD90E983BDE698AFE9BB91E889B2EFBC8CE4BD86E698AF4EE79A84E788B6E4BAB2E698AFE7BAA2E889B2E38082E59CA8E8BF99E7A78DE68385E5BDA2E4B88BEFBC8CE68891E4BBACE7AE80E58D95E79A84E4BAA4E68DA24EE79A84E58584E5BC9FE5928CE788B6E4BAB2E79A84E9A29CE889B2E38082E8BF99E4B88DE5BDB1E5938DE4B88DE9809AE8BF874EE79A84E8B7AFE5BE84E79A84E9BB91E889B2E88A82E782B9E79A84E695B0E79BAEEFBC8CE4BD86E698AFE5AE83E59CA8E9809AE8BF874EE79A84E8B7AFE5BE84E4B88AE5AFB9E9BB91E889B2E88A82E782B9E695B0E79BAEE5A29EE58AA0E4BA86E4B880EFBC8CE6B7BBE8A1A5E4BA86E59CA8E8BF99E4BA9BE8B7AFE5BE84E4B88AE588A0E999A4E79A84E9BB91E889B2E88A82E782B9E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('401', 0xE588A0E999A4EFBC9A0A766F69640A64656C6574655F636173653428737472756374206E6F6465202A6E290A7B0A2020202020202020737472756374206E6F6465202A73203D207369626C696E6720286E293B0A200A20202020202020206966EFBC88286E2D3E706172656E742D3E636F6C6F72203D3D205245442926260A28732D3E636F6C6F72203D3D20424C41434B2926260A28732D3E6C6566742D3E636F6C6F72203D3D20424C41434B2926260A28732D3E72696768742D3E636F6C6F72203D3D20424C41434B2929207B0A20202020202020202020202020202020732D3E636F6C6F72203D205245443B0A202020202020202020202020202020206E2D3E706172656E742D3E636F6C6F72203D20424C41434B3B0A20202020202020207D20656C73650A2020202020202020202020202020202064656C6574655F636173653520286E293B0A7D, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('402', 0xE588A0E999A4EFBC9A0AE68385E5BDA235EFBC9A2053E698AFE9BB91E889B2EFBC8C53E79A84E5B7A6E584BFE5AD90E698AFE7BAA2E889B2EFBC8C53E79A84E58FB3E584BFE5AD90E698AFE9BB91E889B2EFBC8CE8808C4EE698AFE5AE83E788B6E4BAB2E79A84E5B7A6E584BFE5AD90E38082E59CA8E8BF99E7A78DE68385E5BDA2E4B88BE68891E4BBACE59CA853E4B88AE5819AE58FB3E6978BE8BDACEFBC8CE8BF99E6A0B753E79A84E5B7A6E584BFE5AD90E68890E4B8BA53E79A84E788B6E4BAB2E5928C4EE79A84E696B0E58584E5BC9FE38082E68891E4BBACE68EA5E79D80E4BAA4E68DA253E5928CE5AE83E79A84E696B0E788B6E4BAB2E79A84E9A29CE889B2E38082E68980E69C89E8B7AFE5BE84E4BB8DE69C89E5908CE6A0B7E695B0E79BAEE79A84E9BB91E889B2E88A82E782B9EFBC8CE4BD86E698AFE78EB0E59CA84EE69C89E4BA86E4B880E4B8AAE9BB91E889B2E58584E5BC9FEFBC8CE4BB96E79A84E58FB3E584BFE5AD90E698AFE7BAA2E889B2E79A84EFBC8CE68980E4BBA5E68891E4BBACE8BF9BE585A5E4BA86E68385E5BDA236E380824EE5928CE5AE83E79A84E788B6E4BAB2E983BDE4B88DE58F97E8BF99E4B8AAE58F98E68DA2E79A84E5BDB1E5938DE38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('403', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('404', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('405', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('406', 0xE588A0E999A4EFBC9A0AE5908CE6A0B7E79A84EFBC8CE587BDE695B0E8B083E794A8E983BDE4BDBFE794A8E4BA86E5B0BEE983A8E98092E5BD92EFBC8CE68980E4BBA5E7AE97E6B395E698AFE58E9FE59CB0E7AE97E6B395E38082E6ADA4E5A496EFBC8CE59CA8E6978BE8BDACE4B98BE5908EE4B88DE5868DE5819AE98092E5BD92E8B083E794A8EFBC8CE68980E4BBA5E8BF9BE8A18CE4BA86E68192E5AE9AE695B0E79BAEEFBC88E69C80E5A49A33E6ACA1EFBC89E79A84E6978BE8BDACE38082, 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('407', , 'https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91', '2016-11-03 03:29:00', '2016-12-20 09:42:07', '31', '红黑树', '数据结构');
INSERT INTO `spider_text` VALUES ('408', 0xhttps://zh.wikipedia.org/wiki/%E8%BF%9E%E9%80%9A%E5%9B%BE', '2015-12-14 17:43:00', '2016-12-20 09:42:18', '32', '连通图', '数据结构');
INSERT INTO `spider_text` VALUES ('409', 0xhttps://zh.wikipedia.org/wiki/%E8%BF%9E%E9%80%9A%E5%9B%BE', '2015-12-14 17:43:00', '2016-12-20 09:42:18', '32', '连通图', '数据结构');
INSERT INTO `spider_text` VALUES ('410', 0xhttps://zh.wikipedia.org/wiki/%E8%BF%9E%E9%80%9A%E5%9B%BE', '2015-12-14 17:43:00', '2016-12-20 09:42:18', '32', '连通图', '数据结构');
INSERT INTO `spider_text` VALUES ('411', 0xE680A7E8B4A8EFBC9A0AE4B880E4B8AAE697A0E59091E59BBE473D2028562C4529E698AFE8BF9EE9809AE79A84EFBC8CE982A3E4B988E8BEB9E79A84E695B0E79BAEE5A4A7E4BA8EE7AD89E4BA8EE9A1B6E782B9E79A84E695B0E79BAEE5878FE4B880EFBC9A207C2045207C20E289A5207C2056207C20E288922031207B5C646973706C61797374796C65207C457C5C676571207C567C2D317D20EFBC8CE8808CE58F8DE4B98BE4B88DE68890E7AB8BE38082, 'https://zh.wikipedia.org/wiki/%E8%BF%9E%E9%80%9A%E5%9B%BE', '2015-12-14 17:43:00', '2016-12-20 09:42:18', '32', '连通图', '数据结构');
INSERT INTO `spider_text` VALUES ('412', 0xE680A7E8B4A8EFBC9A0AE5A682E69E9C473D2028562C4529E698AFE69C89E59091E59BBEEFBC8CE982A3E4B988E5AE83E698AFE5BCBAE8BF9EE9809AE59BBEE79A84E5BF85E8A681E69DA1E4BBB6E698AFE8BEB9E79A84E695B0E79BAEE5A4A7E4BA8EE7AD89E4BA8EE9A1B6E782B9E79A84E695B0E79BAEEFBC9A207C2045207C20E289A5207C2056207C207B5C646973706C61797374796C65207C457C5C676571207C567C7D20EFBC8CE8808CE58F8DE4B98BE4B88DE68890E7AB8BE38082, 'https://zh.wikipedia.org/wiki/%E8%BF%9E%E9%80%9A%E5%9B%BE', '2015-12-14 17:43:00', '2016-12-20 09:42:18', '32', '连通图', '数据结构');
INSERT INTO `spider_text` VALUES ('413', 0xE680A7E8B4A8EFBC9A0AE6B2A1E69C89E59B9EE8B7AFE79A84E697A0E59091E59BBEE698AFE8BF9EE9809AE79A84E5BD93E4B894E4BB85E5BD93E5AE83E698AFE6A091EFBC8CE58DB3E7AD89E4BBB7E4BA8EEFBC9A207C2045207C203D207C2056207C20E288922031207B5C646973706C61797374796C65205C646973706C61797374796C65207C457C3D7C567C2D317D20E38082, 'https://zh.wikipedia.org/wiki/%E8%BF%9E%E9%80%9A%E5%9B%BE', '2015-12-14 17:43:00', '2016-12-20 09:42:18', '32', '连通图', '数据结构');
INSERT INTO `spider_text` VALUES ('414', 0xE58F82E88083E69DA5E6BA90EFBC9A0A46726564204275636B6C65792C4D61727479204C6577696E746572E38082E3808AE59BBEE8AEBAE7AE80E6988EE69599E7A88BE3808BE38082E69D8EE685A7E99CB8E78E8BE587A4E88AB9E8AF91E38082E58C97E4BAACEFBC9AE6B885E58D8EE5A4A7E5ADA6E587BAE78988E7A4BEE3808232303035E5B9B4E3808220572E542E54757474652C204772617068205468656F7279202E2043616D62726964676520556E6976657273697479205072657373202E2032303034202E, 'https://zh.wikipedia.org/wiki/%E8%BF%9E%E9%80%9A%E5%9B%BE', '2015-12-14 17:43:00', '2016-12-20 09:42:18', '32', '连通图', '数据结构');
INSERT INTO `spider_text` VALUES ('416', 0xE69198E8A681EFBC9A0AE69CACE69DA1E79BAEE99C80E8A681E7BC96E4BFAEEFBC8CE4BBA5E7A1AEE4BF9DE69687E6B395E38081E794A8E8AF8DE38081E8AFADE6B094E38081E6A0BCE5BC8FE38081E6A087E782B9E7AD89E4BDBFE794A8E681B0E5BD93E38082EFBC8832303130E5B9B438E69C883136E697A5EFBC8920E8AFB7E68C89E785A7E6A0A1E5AFB9E68C87E5BC95EFBC8CE5B8AEE58AA9E7BC96E8BE91E8BF99E4B8AAE69DA1E79BAEE38082EFBC88E5B8AEE58AA9E38081E8AEA8E8AEBAEFBC89, 'https://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:42:27', '33', '佩特森图', '数据结构');
INSERT INTO `spider_text` VALUES ('417', 0xE69198E8A681EFBC9A0AE4BDA9E789B9E6A3AEE59BBEE698AFE4B880E4B8AAE789B9E5AE9AE79A84E59BBEE38082E69CB1E588A9E58FB6E696AFC2B7E4BDA9E789B9E6A3AEE59CA831383938E5B9B4E69E84E4BD9CE5AE83E38082E899BDE784B6E5AE83E4BBA5E4BDA9E789B9E6A3AEE591BDE5908DEFBC8CE4BD8631383836E5B9B4E5B7B2E69C89E4BABAE68F90E58F8AE5AE83E4BA865B315DE38082, 'https://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:42:27', '33', '佩特森图', '数据结构');
INSERT INTO `spider_text` VALUES ('418', 0xhttps://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:42:28', '33', '佩特森图', '数据结构');
INSERT INTO `spider_text` VALUES ('419', 0xhttps://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:42:28', '33', '佩特森图', '数据结构');
INSERT INTO `spider_text` VALUES ('420', 0xE8849AE6B3A8EFBC9A0A5E20E5889DE8A781E4BA8E412E422E204B656D7065E79A84E8AEBAE69687EFBC8CE58F82E8A781E88BB1E69687E7898877696B69EFBC88506574657273656E206772617068EFBC89, 'https://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:42:28', '33', '佩特森图', '数据结构');
INSERT INTO `spider_text` VALUES ('421', 0xE8849AE6B3A8EFBC9A0AE7BBB4E59FBAE585B1E4BAABE8B584E6BA90E4B8ADE79BB8E585B3E79A84E5A49AE5AA92E4BD93E8B584E6BA90EFBC9AE4BDA9E789B9E6A3AEE59BBE, 'https://zh.wikipedia.org/wiki/%E4%BD%A9%E7%89%B9%E6%A3%AE%E5%9B%BE', '2015-12-14 17:42:00', '2016-12-20 09:42:28', '33', '佩特森图', '数据结构');
INSERT INTO `spider_text` VALUES ('422', 0xhttps://zh.wikipedia.org/wiki/%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%AB', '2016-06-20 09:59:00', '2016-12-20 09:42:49', '35', '原始型别', '数据结构');
INSERT INTO `spider_text` VALUES ('423', 0xE69198E8A681EFBC9A0A5072696D69746976652074797065E4B99FE69C89E7A7B0E4BD9CE58685E7BDAEE7B1BBE59E8BE38081E59FBAE7A180E7B1BBE59E8BE68896E88085E59FBAE69CACE7B1BBE59E8BE38082, 'https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%AB', '2016-06-20 09:59:00', '2016-12-20 09:42:49', '35', '原始型别', '数据结构');
INSERT INTO `spider_text` VALUES ('424', 0xE6A682E8A788EFBC9A0AE58E9FE5A78BE7B1BBE59E8BE79A84E5AE9EE99985E88C83E59BB4EFBC8CE58F96E586B3E4BA8EE68980E4BDBFE794A8E79A84E789B9E5AE9AE7BC96E7A88BE8AFADE8A880E38082E4BE8BE5A682EFBC8CE59CA843E8AFADE8A880E4B8ADEFBC8CE5AD97E7ACA6E4B8B2E698AFE4B880E4B8AAE5A48DE59088E7B1BBE59E8BEFBC8CE4B88DE8BF87E59CA8E5908EE69DA5E79A844261736963E4B8ADEFBC8CE5AD97E7ACA6E4B8B2E698AFE58E9FE5A78BE7B1BBE59E8BE38082, 'https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%AB', '2016-06-20 09:59:00', '2016-12-20 09:42:49', '35', '原始型别', '数据结构');
INSERT INTO `spider_text` VALUES ('425', 0xhttps://zh.wikipedia.org/wiki/%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%AB', '2016-06-20 09:59:00', '2016-12-20 09:42:49', '35', '原始型别', '数据结构');
INSERT INTO `spider_text` VALUES ('426', 0xE6A682E8A788EFBC9A0AE5A49AE58583E7BB84EFBC8CE587BAE78EB0E4BA8E4D4CE38081507974686F6E20E993BEE8A1A8EFBC8CE587BAE78EB0E4BA8E4C69737020E5A48DE695B0EFBC8CE587BAE78EB0E4BA8E466F727472616EE3808143EFBC88433939EFBC89E38081507974686F6E20E69C89E79086E695B0EFBC8CE587BAE78EB0E4BA8E4C69737020E4B880E7AD89E587BDE695B0E38081E997ADE58C85E38081E7BBADE5BBB6EFBC8CE587BAE78EB0E4BA8EE587BDE695B0E5BC8FE7BC96E7A88BE8AFADE8A880EFBC8CE5A6824C697370E5928C4D4C, 'https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%AB', '2016-06-20 09:59:00', '2016-12-20 09:42:49', '35', '原始型别', '数据结构');
INSERT INTO `spider_text` VALUES ('427', 0xE6A682E8A788EFBC9A0AE9809AE5B8B8E9A284E69C9FE4BBA5E59FBAE4BA8EE58E9FE5A78BE7B1BBE59E8BE79A84E8BF90E7AE97EFBC8CE69E84E68890E8BE83E5BFABE9809FE79A84E8AFADE8A880E38082E695B4E695B0E58AA0E6B395EFBC8CE4BE8BE5A682EFBC8CE58FAFE4BBA5E8BF90E8A18CE58D95E4B880E79A84E69CBAE599A8E68C87E4BBA4EFBC8CE4B894E983A8E58886E5A484E79086E599A8E68F90E4BE9BE789B9E5AE9AE79A84E68C87E4BBA4EFBC8CE4BBA5E58D95E4B880E68C87E4BBA4E5A484E79086E4B880E7B3BBE58897E79A84E5AD97E7ACA6E38082E5B0A4E585B6E698AFEFBC8C43E8AFADE8A880E6A087E58786E4B8ADE68F90E588B0EFBC8CE2809CE4B880E4B8AAE28098E7AE80E58D95E28099E79A84696E74E5AFB9E8B1A1EFBC8CE585B7E69C89E58E9FE5A78BE79A84E5A4A7E5B08FEFBC8CE585B6E5A4A7E5B08FE4BBA5E8BF90E8A18CE78EAFE5A283E79A84E69EB6E69E84E68980E69A97E7A4BAE38082E2809DE6848FE58DB3E59CA83332E4BD8DE69EB6E69E84E4B88BE79A84696E74EFBC8CE58FAFE883BDE5B0B1E698AF3332E4BD8DE79A84E995BFE5BAA6E38082, 'https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%AB', '2016-06-20 09:59:00', '2016-12-20 09:42:49', '35', '原始型别', '数据结构');
INSERT INTO `spider_text` VALUES ('428', 0xE6A682E8A788EFBC9A0AE5A4A7E983A8E58886E8AFADE8A880E4B88DE58581E8AEB8E4BBA5E7A88BE5BA8FE4BFAEE694B9E58E9FE5A78BE7B1BBE59E8BE79A84E8A18CE4B8BAE68896E680A7E883BDE38082E4BE8BE5A496E79A84E69C89536D616C6C74616C6BEFBC8CE585B6E58581E8AEB8E59CA8E7A88BE5BA8FE58685E983A8E689A9E5B195E58E9FE5A78BE7B1BBE59E8BE38082E58FAFE4BBA5E59CA8E585B6E4B88AE8BF90E8A18CE58AA0E585A5E79A84E8BF90E7AE97EFBC8CE7949AE887B3E9878DE696B0E5AE9AE4B989E58685E7BDAEE79A84E8BF90E7AE97E38082, 'https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%AB', '2016-06-20 09:59:00', '2016-12-20 09:42:49', '35', '原始型别', '数据结构');
INSERT INTO `spider_text` VALUES ('430', 0xE69198E8A681EFBC9A0AE69BBFE7BDAAE7BE8AE6A091E698AFE8AEA1E7AE97E69CBAE7A791E5ADA6E4B8ADEFBC8CE4B880E7A78DE59FBAE4BA8EE983A8E58886E9878DE5BBBAE79A84E887AAE5B9B3E8A1A1E4BA8CE58F89E6909CE7B4A2E6A091E38082E59CA8E69BBFE7BDAAE7BE8AE6A091E4B88AEFBC8CE68F92E585A5E68896E588A0E999A4E88A82E782B9E79A84E5B9B3E6918AE69C80E59D8FE697B6E997B4E5A48DE69D82E5BAA6E698AF4F286C6F67206E29EFBC8CE6909CE7B4A2E88A82E782B9E79A84E69C80E59D8FE697B6E997B4E5A48DE69D82E5BAA6E698AF4F286C6F67206E29E38082, 'https://zh.wikipedia.org/wiki/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91', '2015-12-09 16:14:00', '2016-12-20 09:42:58', '36', '替罪羊树', '数据结构');
INSERT INTO `spider_text` VALUES ('431', 0xE69198E8A681EFBC9A0AE59CA8E99D9EE5B9B3E8A1A1E79A84E4BA8CE58F89E6909CE7B4A2E6A091E4B8ADEFBC8CE6AF8FE6ACA1E6938DE4BD9CE4BBA5E5908EE6A380E69FA5E6938DE4BD9CE8B7AFE5BE84EFBC8CE689BEE588B0E69C80E9AB98E79A84E6BBA1E8B6B36D61782873697A6528736F6E5F4C292C73697A6528736F6E5F5229293E616C7068612A73697A65287468697329E79A84E7BB93E782B9EFBC8CE9878DE5BBBAE695B4E4B8AAE5AD90E6A091E3808220E8BF99E6A0B7E5B0B1E5BE97E588B0E4BA86E69BBFE7BDAAE7BE8AE6A091EFBC8CE8808CE8A2ABE9878DE5BBBAE79A84E5AD90E6A091E79A84E58E9FE69DA5E79A84E6A0B9E5B0B1E8A2ABE7A7B0E4B8BAE69BBFE7BDAAE7BE8AE88A82E782B9E3808220E5B8B8E695B0616C706861E4B880E888ACE98089E68BA9E4B8BA302E37E5B7A6E58FB3E3808220E9809AE8BF87E58ABFE883BDE58886E69E90EFBC8CE887B3E5B091E5AFB9E4BA8EE58FAAE69C89E68F92E585A5E6938DE4BD9CE79A84E69BBFE7BDAAE7BE8AE6A091EFBC8CE58D95E6938DE4BD9CE59D87E6918AE5A48DE69D82E5BAA6E4B8BA4F286C6F67206E29E3808220E588A0E999A4E6938DE4BD9CE58FAFE4BBA5E9809AE8BF87E8AEBEE7BDAEE2809CE588A0E999A4E2809DE6A087E8AEB0E5AE8CE68890EFBC8CE5A48DE69D82E5BAA6E58DB3E4B8BAE69FA5E689BEE5A48DE69D82E5BAA64F286C6F67206E29E38082, 'https://zh.wikipedia.org/wiki/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91', '2015-12-09 16:14:00', '2016-12-20 09:42:58', '36', '替罪羊树', '数据结构');
INSERT INTO `spider_text` VALUES ('432', 0xE69198E8A681EFBC9A0AE6ADA3E58899E59BBEE698AFE6AF8FE4B8AAE9A1B6E782B9E983BDE69C89E79BB8E5908CE695B0E79BAEE79A84E982BBE5B185E79A84E59BBEEFBC8CE58DB3E6AF8FE4B8AAE9A1B6E782B9E79A84E5BAA6E79BB8E5908CE38082E88BA5E6AF8FE4B8AAE9A1B6E782B9E79A84E5BAA6E59D87E4B8BA206B207B5C646973706C61797374796C65206B7D20EFBC8CE7A7B0E4B8BA206B207B5C646973706C61797374796C65206B7D202DE6ADA3E58899E59BBEE38082, 'https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', '2016-03-22 12:47:00', '2016-12-20 09:43:15', '38', '正则图', '数据结构');
INSERT INTO `spider_text` VALUES ('433', 0xhttps://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', '2016-03-22 12:47:00', '2016-12-20 09:43:15', '38', '正则图', '数据结构');
INSERT INTO `spider_text` VALUES ('434', 0xE69198E8A681EFBC9A0AE59CA8E5BCBAE6ADA3E58899E59BBEEFBC8CE6AF8FE5AFB9E79BB8E982BBE9A1B6E782B9E983BDE698AFE79BB8E5908CE695B0E79BAEE79A84E585B1E5908CE982BBE5B185E38082E69C80E5B08FE79A84E6ADA3E58899E8808CE99D9EE5BCBAE6ADA3E58899E79A84E59BBEE698AF36E4B8AAE9A1B6E782B9E79A84E78EAFE78AB6E59BBEE68896E59C88E38082, 'https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', '2016-03-22 12:47:00', '2016-12-20 09:43:15', '38', '正则图', '数据结构');
INSERT INTO `spider_text` VALUES ('435', 0xE69198E8A681EFBC9A0A302DE6ADA3E58899E59BBE20312DE6ADA3E58899E59BBE20322DE6ADA3E58899E59BBE20332DE6ADA3E58899E59BBE, 'https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', '2016-03-22 12:47:00', '2016-12-20 09:43:15', '38', '正则图', '数据结构');
INSERT INTO `spider_text` VALUES ('436', 0xhttps://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', '2016-03-22 12:47:00', '2016-12-20 09:43:15', '38', '正则图', '数据结构');
INSERT INTO `spider_text` VALUES ('437', 0xE4BBA3E695B0E680A7E8B4A8EFBC9A0AE8AEBE2041207B5C646973706C61797374796C6520417D20E4B8BAE59BBE2047207B5C646973706C61797374796C6520477D20E79A84E982BBE68EA5E79FA9E998B5E380822047207B5C646973706C61797374796C6520477D20E698AFE6ADA3E58899E59BBEE5BD93E4B894E4BB85E5BD93205B203120E28BAE2031205D207B5C646973706C61797374796C65207B5C626567696E7B626D61747269787D315C5C5C76646F7473205C5C315C656E647B626D61747269787D7D7D20E698AF41E79A84E789B9E5BE81E59091E9878FE38082, 'https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', '2016-03-22 12:47:00', '2016-12-20 09:43:15', '38', '正则图', '数据结构');
INSERT INTO `spider_text` VALUES ('438', 0xE4BBA3E695B0E680A7E8B4A8EFBC9A0AE59BBE2047207B5C646973706C61797374796C6520477D20E698AFE6ADA3E58899E58F88E8BF9EE9809AE79A84E59BBEE5BD93E4B894E4BB85E5BD93E79FA9E998B5204A207B5C646973706C61797374796C65204A7D20EFBC88204A2069206A203D2031207B5C646973706C61797374796C65204A5F7B696A7D3D317D20EFBC89E59CA8E59BBEE79A84E982BBE68EA5E4BBA3E695B0E58685E38082, 'https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E5%9B%BE', '2016-03-22 12:47:00', '2016-12-20 09:43:15', '38', '正则图', '数据结构');
INSERT INTO `spider_text` VALUES ('440', 0xhttps://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:33', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('441', 0xE69198E8A681EFBC9A0AE4B880E4B8AAE9809AE4BF97E79A84E4BE8BE5AD90E698AFEFBC8CE4B8BAE4BA86E69FA5E689BEE794B5E8AF9DE7B0BFE4B8ADE69F90E4BABAE79A84E58FB7E7A081EFBC8CE58FAFE4BBA5E5889BE5BBBAE4B880E4B8AAE68C89E785A7E4BABAE5908DE9A696E5AD97E6AF8DE9A1BAE5BA8FE68E92E58897E79A84E8A1A8EFBC88E58DB3E5BBBAE7AB8BE4BABAE5908D2078207B5C646973706C61797374796C6520787D20E588B0E9A696E5AD97E6AF8D2046202820782029207B5C646973706C61797374796C6520462878297D20E79A84E4B880E4B8AAE587BDE695B0E585B3E7B3BBEFBC89EFBC8CE59CA8E9A696E5AD97E6AF8DE4B8BA57E79A84E8A1A8E4B8ADE69FA5E689BEE2809CE78E8BE2809DE5A793E79A84E794B5E8AF9DE58FB7E7A081EFBC8CE698BEE784B6E6AF94E79BB4E68EA5E69FA5E689BEE5B0B1E8A681E5BFABE5BE97E5A49AE38082E8BF99E9878CE4BDBFE794A8E4BABAE5908DE4BD9CE4B8BAE585B3E994AEE5AD97EFBC8CE2809CE58F96E9A696E5AD97E6AF8DE2809DE698AFE8BF99E4B8AAE4BE8BE5AD90E4B8ADE695A3E58897E587BDE695B0E79A84E587BDE695B0E6B395E58899204620282029207B5C646973706C61797374796C65204628297D20EFBC8CE5AD98E694BEE9A696E5AD97E6AF8DE79A84E8A1A8E5AFB9E5BA94E695A3E58897E8A1A8E38082E585B3E994AEE5AD97E5928CE587BDE695B0E6B395E58899E79086E8AEBAE4B88AE58FAFE4BBA5E4BBBBE6848FE7A1AEE5AE9AE38082, 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:33', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('442', 0xhttps://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:33', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('443', 0xhttps://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:33', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('444', 0xE59FBAE69CACE6A682E5BFB5EFBC9A0AE88BA5E5AFB9E4BA8EE585B3E994AEE5AD97E99B86E59088E4B8ADE79A84E4BBBBE4B880E4B8AAE585B3E994AEE5AD97EFBC8CE7BB8FE695A3E58897E587BDE695B0E698A0E8B1A1E588B0E59CB0E59D80E99B86E59088E4B8ADE4BBBBE4BD95E4B880E4B8AAE59CB0E59D80E79A84E6A682E78E87E698AFE79BB8E7AD89E79A84EFBC8CE58899E7A7B0E6ADA4E7B1BBE695A3E58897E587BDE695B0E4B8BAE59D87E58C80E695A3E58897E587BDE695B0EFBC88556E69666F726D20486173682066756E6374696F6EEFBC89EFBC8CE8BF99E5B0B1E698AFE4BDBFE585B3E994AEE5AD97E7BB8FE8BF87E695A3E58897E587BDE695B0E5BE97E588B0E4B880E4B8AAE2809CE99A8FE69CBAE79A84E59CB0E59D80E2809DEFBC8CE4BB8EE8808CE5878FE5B091E586B2E7AA81E38082, 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:33', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('445', 0xE69E84E980A0E695A3E58897E587BDE695B0EFBC9A0AE695A3E58897E587BDE695B0E883BDE4BDBFE5AFB9E4B880E4B8AAE695B0E68DAEE5BA8FE58897E79A84E8AEBFE997AEE8BF87E7A88BE69BB4E58AA0E8BF85E9809FE69C89E69588EFBC8CE9809AE8BF87E695A3E58897E587BDE695B0EFBC8CE695B0E68DAEE58583E7B4A0E5B086E8A2ABE69BB4E5BFABE5AE9AE4BD8DE38082, 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:33', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('446', 0xhttps://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:33', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('447', 0xE5A484E79086E586B2E7AA81EFBC9A0AE4B8BAE4BA86E79FA5E98193E586B2E7AA81E4BAA7E7949FE79A84E79BB8E5908CE695A3E58897E587BDE695B0E59CB0E59D80E68980E5AFB9E5BA94E79A84E585B3E994AEE5AD97EFBC8CE5BF85E9A1BBE98089E794A8E58FA6E5A496E79A84E695A3E58897E587BDE695B0EFBC8CE68896E88085E5AFB9E586B2E7AA81E7BB93E69E9CE8BF9BE8A18CE5A484E79086E38082E8808CE4B88DE58F91E7949FE586B2E7AA81E79A84E58FAFE883BDE680A7E698AFE99D9EE5B8B8E4B98BE5B08FE79A84EFBC8CE68980E4BBA5E9809AE5B8B8E5AFB9E586B2E7AA81E8BF9BE8A18CE5A484E79086E38082E5B8B8E794A8E696B9E6B395E69C89E4BBA5E4B88BE587A0E7A78DEFBC9A, 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:33', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('448', 0xhttps://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:33', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('449', 0xE5A484E79086E586B2E7AA81EFBC9A0A642069203D2031202C2032202C20332E2E2E2028206D20E2889220312029207B5C646973706C61797374796C6520645F7B697D3D312C322C332E2E2E286D2D31297D20E7A7B0E4B8BA20E7BABFE680A7E68EA2E6B58B284C696E6561722050726F62696E6729EFBC9BE58DB320642069203D2069207B5C646973706C61797374796C6520645F7B697D3D697D20EFBC8CE68896E88085E4B8BAE585B6E4BB96E7BABFE680A7E587BDE695B0E38082E79BB8E5BD93E4BA8EE98090E4B8AAE68EA2E6B58BE5AD98E694BEE59CB0E59D80E79A84E8A1A8EFBC8CE79BB4E588B0E69FA5E689BEE588B0E4B880E4B8AAE7A9BAE58D95E58583EFBC8CE68A8AE695A3E58897E59CB0E59D80E5AD98E694BEE59CA8E8AFA5E7A9BAE58D95E58583E3808220642069203D20C2B120312032202C20C2B120322032202C20C2B120332032202E202E202E20C2B1206B2032207B5C646973706C61797374796C6520645F7B697D3D5C706D20315E7B327D2C5C706D20325E7B327D2C5C706D20335E7B327D2E2E2E5C706D206B5E7B327D7D2028206B20E289A4206D202F20322029207B5C646973706C61797374796C6520286B5C6C6571206D2F32297D20E7A7B0E4B8BA20E5B9B3E696B9E68EA2E6B58B285175616472617469632050726F62696E6729E38082E79BB8E5AFB9E7BABFE680A7E68EA2E6B58BEFBC8CE79BB8E5BD93E4BA8EE58F91E7949FE586B2E7AA81E697B6E68EA2E6B58BE997B4E99A9420642069203D20692032207B5C646973706C61797374796C6520645F7B697D3D695E7B327D7D20E4B8AAE58D95E58583E79A84E4BD8DE7BDAEE698AFE590A6E4B8BAE7A9BAEFBC8CE5A682E69E9CE4B8BAE7A9BAEFBC8CE5B086E59CB0E59D80E5AD98E694BEE8BF9BE58EBBE3808220642069203D207B5C646973706C61797374796C6520645F7B697D3D7D20E4BCAAE99A8FE69CBAE695B0E5BA8FE58897EFBC8CE7A7B0E4B8BA20E4BCAAE99A8FE69CBAE68EA2E6B58BE38082, 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('450', 0xE5A484E79086E586B2E7AA81EFBC9A0AE698BEE7A4BAE7BABFE680A7E68EA2E6B58BE5A1ABE8A385E4B880E4B8AAE695A3E58897E8A1A8E79A84E8BF87E7A88BEFBC9A, 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('451', 0xE5A484E79086E586B2E7AA81EFBC9A0AE585B3E994AEE5AD97E4B8BA7B38392C31382C34392C35382C36397DE68F92E585A5E588B0E4B880E4B8AAE695A3E58897E8A1A8E4B8ADE79A84E68385E586B5E38082E6ADA4E697B6E7BABFE680A7E68EA2E6B58BE79A84E696B9E6B395E698AFE58F9620642069203D2069207B5C646973706C61797374796C6520645F7B697D3D697D20E38082E5B9B6E58187E5AE9AE58F96E585B3E994AEE5AD97E999A4E4BBA53130E79A84E4BD99E695B0E4B8BAE695A3E58897E587BDE695B0E6B395E58899E38082, 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('452', 0xE5A484E79086E586B2E7AA81EFBC9A0AE695A3E58897E59CB0E59D8020E7A9BAE8A1A820E68F92E585A5383920E68F92E585A5313820E68F92E585A5343920E68F92E585A5353820E68F92E585A536392030203439203439203439203120353820353820322036392033203420352036203720382031382031382031382031382039203839203839203839203839203839, 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('453', 0xhttps://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('454', 0xE5A484E79086E586B2E7AA81EFBC9A0AE8819AE99B86EFBC88436C7573746572EFBC8CE4B99FE7BFBBE8AF91E5819AE2809CE5A086E7A7AFE2809DEFBC89E79A84E6848FE6809DE698AFEFBC8CE59CA8E587BDE695B0E59CB0E59D80E79A84E8A1A8E4B8ADEFBC8CE695A3E58897E587BDE695B0E79A84E7BB93E69E9CE4B88DE59D87E58C80E59CB0E58DA0E68DAEE8A1A8E79A84E58D95E58583EFBC8CE5BDA2E68890E58CBAE59D97EFBC8CE980A0E68890E7BABFE680A7E68EA2E6B58BE4BAA7E7949FE4B880E6ACA1E8819AE99B86EFBC887072696D61727920636C7573746572696E67EFBC89E5928CE5B9B3E696B9E68EA2E6B58BE79A84E4BA8CE6ACA1E8819AE99B86EFBC887365636F6E6461727920636C7573746572696E67EFBC89EFBC8CE695A3E58897E588B0E58CBAE59D97E4B8ADE79A84E4BBBBE4BD95E585B3E994AEE5AD97E99C80E8A681E69FA5E689BEE5A49AE6ACA1E8AF95E98089E58D95E58583E6898DE883BDE68F92E585A5E8A1A8E4B8ADEFBC8CE8A7A3E586B3E586B2E7AA81EFBC8CE980A0E68890E697B6E997B4E6B5AAE8B4B9E38082E5AFB9E4BA8EE5BC80E694BEE5AE9AE59D80E6B395EFBC8CE8819AE99B86E4BC9AE980A0E68890E680A7E883BDE79A84E781BEE99ABEE680A7E68D9FE5A4B1EFBC8CE698AFE5BF85E9A1BBE981BFE5858DE79A84E38082, 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('455', 0xE5A484E79086E586B2E7AA81EFBC9A0AE58D95E78BACE993BEE8A1A8E6B395EFBC9AE5B086E695A3E58897E588B0E5908CE4B880E4B8AAE5AD98E582A8E4BD8DE7BDAEE79A84E68980E69C89E58583E7B4A0E4BF9DE5AD98E59CA8E4B880E4B8AAE993BEE8A1A8E4B8ADE38082E5AE9EE78EB0E697B6EFBC8CE4B880E7A78DE7AD96E795A5E698AFE695A3E58897E8A1A8E5908CE4B880E4BD8DE7BDAEE79A84E68980E69C89E586B2E7AA81E7BB93E69E9CE983BDE698AFE794A8E6A088E5AD98E694BEE79A84EFBC8CE696B0E58583E7B4A0E8A2ABE68F92E585A5E588B0E8A1A8E79A84E5898DE7ABAFE8BF98E698AFE5908EE7ABAFE5AE8CE585A8E58F96E586B3E4BA8EE6808EE6A0B7E696B9E4BEBFE38082, 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('456', 0xhttps://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('457', 0xE4BE8BE7A88BEFBC9A0AE59CA843E8AFADE8A880E4B8ADEFBC8CE5AE9EE78EB0E4BBA5E4B88AE8BF87E7A88BE79A84E7AE80E8A681E7A88BE5BA8F5B315DEFBC9A, 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('458', 0xhttps://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('459', 0xhttps://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('460', 0xE4B8BEE4BE8BEFBC9A4C696E7578E58685E6A0B8E79A84626361636865EFBC9A0A4C696E7578E6938DE4BD9CE7B3BBE7BB9FE59CA8E789A9E79086E69687E4BBB6E7B3BBE7BB9FE4B88EE59D97E8AEBEE5A487E9A9B1E58AA8E7A88BE5BA8FE4B98BE997B4E5BC95E585A5E4BA86E2809CE7BC93E586B2E58CBAE7BC93E5AD98E2809DEFBC88427566666572204361636865EFBC8CE7AE80E7A7B0626361636865EFBC89E38082E5BD93E8AFBBE58699E7A381E79B98E69687E4BBB6E79A84E695B0E68DAEEFBC8CE5AE9EE99985E4B88AE983BDE698AFE5AFB9626361636865E6938DE4BD9CEFBC8CE8BF99E5A4A7E5A4A7E68F90E9AB98E4BA86E8AFBBE58699E695B0E68DAEE79A84E9809FE5BAA6E38082E5A682E69E9CE8A681E8AFBBE58699E79A84E7A381E79B98E695B0E68DAEE4B88DE59CA8626361636865E4B8ADEFBC8CE58DB3E7BC93E5AD98E4B88DE591BDE4B8ADEFBC886D697373EFBC89EFBC8CE58899E68A8AE79BB8E5BA94E695B0E68DAEE4BB8EE7A381E79B98E58AA0E8BDBDE588B0626361636865E4B8ADE38082E4B880E4B8AAE7BC93E5AD98E695B0E68DAEE5A4A7E5B08FE698AFE4B88EE69687E4BBB6E7B3BBE7BB9FE4B88AE4B880E4B8AAE980BBE8BE91E59D97E79A84E5A4A7E5B08FE79BB8E5AFB9E5BA94E79A84EFBC88E4BE8BE5A682314B6942E5AD97E88A82EFBC89EFBC8CE59CA8626361636865E4B8ADE6AF8FE4B8AAE7BC93E5AD98E695B0E68DAEE59D97E794A8737472756374206275666665725F68656164E8AEB0E8BDBDE585B6E58583E4BFA1E681AFEFBC9A, 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('461', 0xhttps://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('462', 0xE4B8BEE4BE8BEFBC9A4C696E7578E58685E6A0B8E79A84626361636865EFBC9A0AE695B4E4B8AA626361636865E4BBA5737472756374206275666665725F68656164E4B8BAE59FBAE69CACE695B0E68DAEE58D95E58583EFBC8CE7BB84E7BB87E4B8BAE4B880E4B8AAE5B081E997ADE5AE9AE59D80EFBC88636C6F73652061646472657373696E67EFBC8CE58DB3E2809CE58D95E78BACE993BEE8A1A8E6B395E2809DE8A7A3E586B3E586B2E7AA81EFBC89E79A84E695A3E58897E8A1A8737472756374206275666665725F68656164202A20686173685F7461626C655B4E525F484153485D3B20E695A3E58897E587BDE695B0E79A84E8BE93E585A5E585B3E994AEE5AD97E698AF625F626C6F636B6E72EFBC88E980BBE8BE91E59D97E58FB7EFBC89E4B88E625F646576EFBC88E8AEBEE5A487E58FB7EFBC89E38082E8AEA1E7AE9768617368E580BCE79A84E695A3E58897E587BDE695B0E8A1A8E8BEBEE5BC8FE4B8BAEFBC9A, 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('463', 0xE4B8BEE4BE8BEFBC9A4C696E7578E58685E6A0B8E79A84626361636865EFBC9A0AE585B6E4B8AD4E525F48415348E698AFE695A3E58897E8A1A8E79A84E69DA1E79BAEE680BBE695B0E38082E58F91E7949FE2809C20E586B2E7AA81E2809DE79A84737472756374206275666665725F68656164EFBC8CE4BBA5625F70726576E4B88E625F6E657874E68C87E99288E7BB84E68890E4B880E4B8AAE58F8CE59091EFBC88E4B88DE5BEAAE78EAFEFBC89E993BEE8A1A8E38082626361636865E4B8ADE68980E69C89E79A84737472756374206275666665725F68656164EFBC8CE58C85E68BACE4BDBFE794A8E4B8ADE4B88DE7A9BAE997B2E4B88EE69CAAE4BDBFE794A8E7A9BAE997B2E79A84737472756374206275666665725F68656164EFBC8CE4BBA5625F707265765F66726565E5928C625F6E6578745F66726565E68C87E99288E7BB84E68890E4B880E4B8AAE58F8CE59091E5BEAAE78EAFE993BEE8A1A8667265655F6C697374EFBC8CE585B6E4B8ADE69CAAE4BDBFE794A8E7A9BAE997B2E79A84737472756374206275666665725F68656164E694BEE59CA8E8AFA5E993BEE8A1A8E79A84E5898DE983A8E38082, 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('464', 0xE4B8BEE4BE8BEFBC9A4C696E7578E58685E6A0B8E79A84626361636865EFBC9A0A5E205B687474702F2F75736572732E6369732E6669752E6564752F7E77656973732F647361615F6332652F66696C65732E68746D6C5D2C2044617461205374727563747572657320616E6420416C676F726974686D20416E616C7973697320696E20432028326E642065646974696F6E292E, 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('466', 0xE8BDBDE88DB7E59BA0E5AD90EFBC9A0AE695A3E58897E8A1A8E79A84E8BDBDE88DB7E59BA0E5AD90E5AE9AE4B989E4B8BAEFBC9A20CEB1207B5C646973706C61797374796C65205C616C706861207D203D20E5A1ABE585A5E8A1A8E4B8ADE79A84E58583E7B4A0E4B8AAE695B0202F20E695A3E58897E8A1A8E79A84E995BFE5BAA6, 'https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('467', 0xhttps://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('468', 0xhttps://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8', '2016-07-19 04:07:00', '2016-12-20 09:43:34', '40', '哈希表', '数据结构');
INSERT INTO `spider_text` VALUES ('469', 0xE69198E8A681EFBC9A0AE69CACE69DA1E79BAEE58FAFE883BDE58C85E590ABE8BF87E5BAA6E38081E4BD8EE8B4A8E38081E68896E4B88DE681B0E5BD93E79A84E88C83E4BE8BE68896E4B8BEE4BE8BE38082E8AFB7E58D8FE58AA9E694B9E59684E69DA1E79BAEEFBC8CE5A29EE58AA0E58F99E8BFB0E69687E5AD97E38081E999A4E58EBBE4B88DE58887E9A298E4B88EE8BF87E5A49AE79A84E88C83E4BE8BE38081E7B2BEE7AE80E88C83E4BE8BE58886E9878FE38082EFBC8832303135E5B9B434E69C8838E697A5EFBC89, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:55', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('470', 0xE69198E8A681EFBC9A0AE69CACE69DA1E79BAEE5AD98E59CA8E99A90E8978FE79A84E58685E5AEB9EFBC8CE58FAFE883BDE68D9FE5AEB3E68896E694B9E59684E8AFBBE88085E79A84E99885E8A788E4BD93E9AA8CE38082E8AFB7E58D8FE58AA9E694B9E59684E69DA1E79BAEEFBC8CE4BBA5E7ACA6E59088E7BBB4E59FBAE799BEE7A791E79A84E6A087E58786E38082EFBC8832303135E5B9B433E69C8832E697A5EFBC8920E4B880E888ACE5BA94E8AFA5E4BB85E794B1E789B9E5AE9AE6A087E58786E58C96E6A8A1E69DBFE68F90E4BE9BE68A98E58FA0E8B584E69699E8A1A8E6A0BCEFBC8CE58BBFE59BA0E69585E4BA8BE589A7E68385E68896E9A1B9E79BAEE6B7B7E69D82E8808CE99A90E8978FEFBC9BE58685E5AEB9E5BA94E8AFA5E88083E89991E585B6E4BB96E696B9E5BC8FE59188E78EB0E38082E9878DE5A48DE8AEB0E8BDBDE38081E8BF87E5BAA6E7BB86E88A82E4B88EE697A0E58AA9E4BA86E8A7A3E4B8BBE9A298E79A84E5A086E7A08CE58685E5AEB9E7AD89E99C80E8A681E88083E89991E999A4E58EBBE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:55', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('471', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:55', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('472', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:55', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('473', 0xE69198E8A681EFBC9A0AE4B880E6A3B5E6B7B1E5BAA6E4B8BA6BEFBC8CE4B894E69C892032206B202B203120E288922031207B5C646973706C61797374796C6520325E7B5C626567696E7B616C69676E65647D6B2B315C656E647B616C69676E65647D7D2D317D20E4B8AAE88A82E782B9E7A7B0E4B98BE4B8BAE6BBA1E4BA8CE58F89E6A091EFBC9BE6B7B1E5BAA6E4B8BA6BEFBC8CE69C896EE4B8AAE88A82E782B9E79A84E4BA8CE58F89E6A091EFBC8CE5BD93E4B894E4BB85E5BD93E585B6E6AF8FE4B880E4B8AAE88A82E782B9E983BDE4B88EE6B7B1E5BAA6E4B8BA6BE79A84E6BBA1E4BA8CE58F89E6A091E4B8ADEFBC8CE5BA8FE58FB7E4B8BA31E887B36EE79A84E88A82E782B9E5AFB9E5BA94E697B6EFBC8CE7A7B0E4B98BE4B8BAE5AE8CE585A8E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('474', 0xE69198E8A681EFBC9A0AE4B88EE6A091E4B88DE5908CEFBC8CE6A091E79A84E88A82E782B9E4B8AAE695B0E887B3E5B091E4B8BA31EFBC8CE8808CE4BA8CE58F89E6A091E79A84E88A82E782B9E4B8AAE695B0E58FAFE4BBA5E4B8BA30EFBC9BE6A091E4B8ADE88A82E782B9E79A84E69C80E5A4A7E5BAA6E695B0E6B2A1E69C89E99990E588B6EFBC8CE8808CE4BA8CE58F89E6A091E88A82E782B9E79A84E69C80E5A4A7E5BAA6E695B0E4B8BA32EFBC9BE6A091E79A84E88A82E782B9E697A0E5B7A6E38081E58FB3E4B98BE58886EFBC8CE8808CE4BA8CE58F89E6A091E79A84E88A82E782B9E69C89E5B7A6E38081E58FB3E4B98BE58886E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('475', 0x5BE59BBEE8AEBA5DE4B8ADE79A84E5AE9AE4B989EFBC9A0AE4BA8CE58F89E6A091E698AFE4B880E4B8AAE8BF9EE9809AE79A84E697A0E78EAFE59BBEEFBC8CE5B9B6E4B894E6AF8FE4B880E4B8AAE9A1B6E782B9E79A84E5BAA6E4B88DE5A4A7E4BA8E33E38082E69C89E6A0B9E4BA8CE58F89E6A091E8BF98E8A681E6BBA1E8B6B3E6A0B9E88A82E782B9E79A84E5BAA6E4B88DE5A4A7E4BA8E32E38082E69C89E4BA86E6A0B9E88A82E782B9E4B98BE5908EEFBC8CE6AF8FE4B8AAE9A1B6E782B9E5AE9AE4B989E4BA86E594AFE4B880E79A84E788B6E88A82E782B9EFBC8CE5928CE69C80E5A49A32E4B8AAE5AD90E88A82E782B9E38082E784B6E8808CEFBC8CE6B2A1E69C89E8B6B3E5A49FE79A84E4BFA1E681AFE69DA5E58CBAE58886E5B7A6E88A82E782B9E5928CE58FB3E88A82E782B9E38082E5A682E69E9CE4B88DE88083E89991E8BF9EE9809AE680A7EFBC8CE58581E8AEB8E59BBEE4B8ADE69C89E5A49AE4B8AAE8BF9EE9809AE58886E9878FEFBC8CE8BF99E6A0B7E79A84E7BB93E69E84E58FABE5819AE6A3AEE69E97E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('476', 0xE4BA8CE58F89E6A0912842696E617279205472656529E79A84E7B1BBE59E8BEFBC9A0AE4BA8CE58F89E6A091E698AFE4B880E4B8AAE69C89E6A0B9E6A091EFBC8CE5B9B6E4B894E6AF8FE4B8AAE88A82E782B9E69C80E5A49AE69C8932E4B8AAE5AD90E88A82E782B9E38082E99D9EE7A9BAE79A84E4BA8CE58F89E6A091EFBC8CE88BA5E6A091E58FB6E680BBE695B0E4B8BA206E30EFBC8CE58886E694AFE5BAA6E4B8BA32E79A84E680BBE695B0E4B8BA206E32EFBC8CE58899206E30203D206E32202B2031E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('477', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('478', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('479', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('480', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('481', 0xE5898D28E5858829E5BA8FE38081E4B8ADE5BA8FE38081E5908EE5BA8FE9818DE58E86EFBC9A0AE59CA8E4BDBFE794A8E8AEB0E5BD95E68896E5AD98E582A8E599A8E59CB0E59D80E68C87E99288E79A84E7A88BE5BA8FE8AEBEE8AEA1E8AFADE8A880E4B8ADEFBC8CE4BA8CE58F89E6A091E9809AE5B8B8E794A8E6A091E7BB93E782B9E7BB93E69E84E69DA5E5AD98E582A8E38082E69C89E697B6E4B99FE58C85E590ABE68C87E59091E594AFE4B880E79A84E788B6E88A82E782B9E79A84E68C87E99288E38082E5A682E69E9CE4B880E4B8AAE7BB93E782B9E79A84E5AD90E7BB93E782B9E4B8AAE695B0E5B08FE4BA8E32EFBC8CE4B880E4BA9BE5AD90E7BB93E782B9E68C87E99288E58FAFE883BDE4B8BAE7A9BAE580BCEFBC8CE68896E88085E4B8BAE789B9E6AE8AE79A84E593A8E585B5E7BB93E782B9E3808220E4BDBFE794A8E993BEE8A1A8E883BDE981BFE5858DE9A1BAE5BA8FE5AD98E582A8E6B5AAE8B4B9E7A9BAE997B4E79A84E997AEE9A298EFBC8CE7AE97E6B395E5928CE7BB93E69E84E79BB8E5AFB9E7AE80E58D95EFBC8CE4BD86E4BDBFE794A8E4BA8CE58F89E993BEE8A1A8EFBC8CE794B1E4BA8EE7BCBAE4B98FE788B6E993BEE79A84E68C87E5BC95EFBC8CE59CA8E689BEE59B9EE788B6E88A82E782B9E697B6E99C80E8A681E9878DE696B0E689ABE68F8FE6A091E5BE97E79FA5E788B6E88A82E782B9E79A84E88A82E782B9E59CB0E59D80E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('482', 0xE6B7B1E5BAA6E4BC98E58588E9818DE58E86EFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A207479706564656620737472756374204269544E6F64650A207B0A20202054456C656D5479706520646174613B0A202020737472756374204269544E6F6465202A6C6368696C642C2A726368696C643B202F2A20E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D4269544E6F64652C2A4269547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('483', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('484', 0xE6B7B1E5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE694B9E8BF9BE4BA8EE4BA8CE58F89E993BEE8A1A8EFBC8CE5A29EE58AA0E788B6E88A82E782B9E79A84E68C87E5BC95EFBC8CE883BDE69BB4E5A5BDE59CB0E5AE9EE78EB0E88A82E782B9E997B4E79A84E8AEBFE997AEEFBC8CE4B88DE8BF87E7AE97E6B395E79BB8E5AFB9E5A48DE69D82E3808220E5BD93E4BA8CE58F89E6A091E794A8E4B889E58F89E993BEE8A1A8E8A1A8E7A4BAE697B6EFBC8CE69C894EE4B8AAE7BB93E782B9EFBC8CE5B0B1E4BC9AE69C894E2B32E4B8AAE7A9BAE68C87E99288E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('485', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4B889E58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A20747970656465662073747275637420426954504E6F64650A207B0A20202054456C656D5479706520646174613B0A20202073747275637420426954504E6F6465202A706172656E742C2A6C6368696C642C2A726368696C643B202F2A20E788B6E38081E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D426954504E6F64652C2A426950547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('486', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('487', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE68891E4BBACE7BB8FE5B8B8E5B88CE69C9BE8AEBFE997AEE6A091E4B8ADE79A84E6AF8FE4B880E4B8AAE7BB93E782B9E5B9B6E4B894E69FA5E79C8BE5AE83E79A84E580BCE38082E69C89E5BE88E5A49AE5B8B8E8A781E79A84E9A1BAE5BA8FE69DA5E8AEBFE997AEE68980E69C89E79A84E7BB93E782B9EFBC8CE8808CE4B894E6AF8FE4B880E7A78DE983BDE69C89E69C89E794A8E79A84E680A7E8B4A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('488', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE9818DE58E86E4BA8CE58F89E6A091EFBC9A4CE3808144E3808152E58886E588ABE8A1A8E7A4BAE9818DE58E86E5B7A6E5AD90E6A091E38081E8AEBFE997AEE6A0B9E7BB93E782B9E5928CE9818DE58E86E58FB3E5AD90E6A091EFBC8CE58899E5858828E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF444C52EFBC8CE4B8AD28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C4452EFBC8CE5908E28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C5244E38082E8BF98E69C89E68C89E5B182E9818DE58E86E4BA8CE58F89E6A091E38082E8BF99E4BA9BE696B9E6B395E79A84E697B6E997B4E5A48DE69D82E5BAA6E983BDE698AF4F286E29EFBC8C6EE4B8BAE7BB93E782B9E4B8AAE695B0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('489', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('490', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE58187E8AEBEE68891E4BBACE69C89E4B880E4B8AAE58C85E590ABE580BCE79A8476616C7565E5928CE68C87E59091E4B8A4E4B8AAE5AD90E7BB93E782B9E79A846C656674E5928C7269676874E79A84E6A091E7BB93E782B9E7BB93E69E84E38082E68891E4BBACE58FAFE4BBA5E58699E587BAE8BF99E6A0B7E79A84E8BF87E7A88BEFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('491', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0A7669736974286E6F6465290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('492', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE8BF99E6A0B7E4BC9AE794A8E5898DE5BA8FE68993E58DB0E587BAE6A091E4B8ADE79A84E580BCE38082E59CA8E5898DE5BA8FEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5AE83E79A84E5AD90E7BB93E782B9E4B98BE5898DE8AEBFE997AEE38082E7B1BBE4BCBCE59CB0EFBC8CE5A682E69E9CE68993E58DB0E8AFADE58FA5E59CA8E69C80E5908EEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE4BB96E79A84E5AD90E88A82E782B9E4B98BE5908EE8AEBFE997AEEFBC8CE6A091E4B8ADE79A84E580BCE4BC9AE794A8E5908EE5BA8FE69DA5E68993E58DB0E38082E59CA8E8BF99E4B8A4E7A78DE68385E586B5E4B8ADEFBC8CE5B7A6E5AD90E6A091E4B8ADE79A84E580BCE6AF94E58FB3E5AD90E6A091E4B8ADE5BE97E580BCE58588E68993E58DB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('493', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0A7669736974286E6F6465290A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('494', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE69C80E5908EEFBC8CE4B88AE99DA2E79A84E4B8ADE5BA8FE9818DE58E86EFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5B7A6E5AD90E6A091E5928CE58FB3E5AD90E6A091E4B98BE997B4E8AEBFE997AEE38082E8BF99E59CA8E9818DE58E86E4BA8CE58F89E6909CE7B4A2E6A091E697B6E5BE88E5B8B8E794A8EFBC8CE59BA0E4B8BAE5AE83E883BDE794A8E98092E5A29EE79A84E9A1BAE5BA8FE69DA5E9818DE58E86E68980E69C89E79A84E580BCE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('495', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('496', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE59CA8E8BF99E4B8AAE4BA8CE58F89E6A091E4B8ADEFBC8C20E5898DE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20322C20362C20352C2031312C20352C20392C203420E5908EE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20352C2031312C20362C20372C20342C20392C20352C203220E4B8ADE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20352C20362C2031312C20322C20352C20342C2039, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('497', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE4BBA5E4B88AE79A84E98092E5BD92E7AE97E6B395E4BDBFE794A8E4B88EE6A091E79A84E9AB98E5BAA6E68890E6AF94E4BE8BE79A84E6A088E7A9BAE997B4E38082E5A682E69E9CE68891E4BBACE59CA8E6AF8FE4B8AAE7BB93E782B9E4B8ADE5AD98E582A8E68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288EFBC8CE982A3E6A0B7E58FAFE4BBA5E4BDBFE794A8E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC8CE58FAAE4BDBFE794A8E5B8B8E695B0E7A9BAE997B4E5AE9EE78EB0E68980E69C89E8BF99E4BA9BE9818DE58E86E38082E784B6E8808CEFBC8CE68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288E58DA0E794A8E69BB4E5A49AE79A84E7A9BAE997B4E38082E8BF99E58FAAE59CA8E99C80E8A681E68C87E59091E788B6E88A82E782B9E79A84E68C87E99288E68896E6A088E7A9BAE997B4E69C89E99990E697B6E6898DE4BDBFE794A8E38082E4BE8BE5A682EFBC8C20E8BF99E698AFE4B880E4B8AAE4B8ADE5BA8FE9818DE58E86E79A84E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('498', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('499', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE794A8E4BA8CE58F89E6A091E8A1A8E7A4BAE4B88BE8BFB0E8A1A8E8BEBEE5BC8FEFBC9A612B622A28632D64292D652F6620E58588E5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A2D2B612A622D63642F656620E4B8ADE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A612B622A632D642D652F6620E5908EE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A616263642D2A2B65662F2D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('500', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE59CA8E6B7B1E5BAA6E4BC98E58588E7BAA7E4B8ADEFBC8CE68891E4BBACE5B88CE69C9BE4BB8EE6A0B9E7BB93E782B9E8AEBFE997AEE69C80E8BF9CE79A84E7BB93E782B9E38082E5928CE59BBEE79A84E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E4B88DE5908CE79A84E698AFEFBC8CE4B88DE99C80E8AEB0E4BD8FE8AEBFE997AEE8BF87E79A84E6AF8FE4B880E4B8AAE7BB93E782B9EFBC8CE59BA0E4B8BAE6A091E4B8ADE4B88DE4BC9AE69C89E78EAFE38082E5898DE5BA8FEFBC8CE4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E983BDE698AFE6B7B1E5BAA6E4BC98E58588E9818DE58E86E79A84E789B9E4BE8BE38082E58F82E8A781E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('501', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE5928CE6B7B1E5BAA6E4BC98E58588E9818DE58E86E4B88DE5908CEFBC8CE5B9BFE5BAA6E4BC98E58588E9818DE58E86E4BC9AE58588E8AEBFE997AEE7A6BBE6A0B9E88A82E782B9E69C80E8BF91E79A84E88A82E782B9E38082E58F82E8A781E5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E3808220E4BA8CE58F89E6A091E79A84E5B9BFE5BAA6E4BC98E58588E9818DE58E86E58F88E7A7B0E68C89E5B182E6ACA1E9818DE58E86E38082E7AE97E6B395E5809FE58AA9E9989FE58897E5AE9EE78EB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('502', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE4B880E888ACE69C89E5BA8FE6A091E5928CE4BA8CE58F89E6A091E4B98BE997B4E69C89E4B880E4B880E698A0E5B084E585B3E7B3BBEFBC8CE883BDE8BF9BE8A18CE79BB8E4BA92E8BDACE68DA2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:56', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('503', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0A6EE58F89E6A091E8BDACE68DA2E4B8BAE4BA8CE58F89E6A091E79A84E696B9E6B395EFBC9AE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9EFBC9BE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E58FB3E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E7ACACE4B880E4B8AAE58FB3E8BEB9E79A84E5908CE7BAA7E7BB93E782B979E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('504', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE4BE8BE5A682EFBC8CE59CA8E5B7A6E8BEB9E79A84E6A091E4B8ADEFBC8C41E69C8936E4B8AAE5AD90E7BB93E782B97B422C432C442C452C462C477DE38082E5AE83E883BDE8A2ABE8BDACE68DA2E68890E58FB3E8BEB9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('505', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE59CA8E58584E5BC9FE4B98BE997B4E58AA0E4B880E8BF9EE68EA5EFBC9B20E5AFB9E6AF8FE4B8AAE7BB93E782B9EFBC8CE999A4E4BA86E585B6E5B7A6E5ADA9E5AD90E5A496EFBC8CE58EBBE999A4E585B6E4B88EE585B6E4BD99E5ADA9E5AD90E4B98BE997B4E79A84E88194E7B3BBEFBC9B20E4BBA5E6A091E79A84E6A0B9E7BB93E782B9E4B8BAE8BDB4E5BF83EFBC8CE5B086E695B4E6A091E9A1BAE697B6E99288E8BDAC3435E5BAA6E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('506', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E6A087E8AEB0E6B395EFBC88E5ADA9E5AD90E58584E5BC9FE6A087E8AEB0E6B395EFBC89E698AFE6A091E5928CE4BA8CE58F89E6A091E8BDACE68DA2E79A84E5AA92E4BB8BE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('507', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0A2F2A20E6A091E79A84E4BA8CE58F89E993BEE8A1A828E5ADA9E5AD90E28094E58584E5BC9F29E5AD98E582A8E8A1A8E7A4BA202A2F0A2074797065646566207374727563742043534E6F64650A207B0A20202054456C656D5479706520646174613B0A2020207374727563742043534E6F6465202A66697273746368696C642C2A6E6578747369626C696E673B0A207D43534E6F64652C2A4353547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('508', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9C5BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('509', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('510', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE7BABFE7B4A2E4BA8CE58F89E6A091202874687265616465642062696E6172792074726565295BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('511', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE7BABFE7B4A2E4BA8CE58F89E6A09128E4BF9DE79599E9818DE58E86E697B6E7BB93E782B9E59CA8E4BBBBE4B880E5BA8FE58897E79A84E5898DE9A9B1E5928CE5908EE7BBA7E79A84E4BFA1E681AF29EFBC9AE88BA5E7BB93E782B9E69C89E5B7A6E5AD90E6A091EFBC8CE58899E585B66C6368696C64E59F9FE68C87E7A4BAE585B6E5B7A6E5ADA9E5AD90EFBC8CE590A6E58899E4BBA46C6368696C64E59F9FE68C87E7A4BAE585B6E5898DE9A9B1EFBC9BE88BA5E7BB93E782B9E69C89E58FB3E5AD90E6A091EFBC8CE58899E585B6726368696C64E59F9FE68C87E7A4BAE585B6E58FB3E5ADA9E5AD90EFBC8CE590A6E58899E4BBA4726368696C64E68C87E7A4BAE585B6E5908EE7BBA7E38082E8BF98E99C80E59CA8E7BB93E782B9E7BB93E69E84E4B8ADE5A29EE58AA0E4B8A4E4B8AAE6A087E5BF97E59F9F4C546167E5928C52546167E380824C5461673D30E697B6EFBC8C6C6368696C64E59F9FE68C87E7A4BAE7BB93E782B9E79A84E5B7A6E5ADA9E5AD90EFBC8C4C5461673D31E697B6EFBC8C6C6368696C64E59F9FE68C87E7A4BAE7BB93E782B9E79A84E5898DE9A9B1EFBC9B525461673D30E697B6EFBC8C726368696C64E59F9FE68C87E7A4BAE7BB93E782B9E79A84E58FB3E5ADA9E5AD90EFBC8C525461673D31E697B6EFBC8C726368696C64E59F9FE68C87E7A4BAE7BB93E782B9E79A84E5908EE7BBA7E38082E4BBA5E8BF99E7A78DE7BB93E782B9E7BB93E69E84E69E84E68890E79A84E4BA8CE58F89E993BEE8A1A8E4BD9CE4B8BAE4BA8CE58F89E6A091E79A84E5AD98E582A8E7BB93E69E84EFBC8CE58FABE5819AE7BABFE7B4A2E993BEE8A1A8EFBC8CE585B6E4B8ADE68C87E59091E7BB93E782B9E5898DE9A9B1E5928CE5908EE7BBA7E79A84E68C87E99288E58FABE5819AE7BABFE7B4A2EFBC8CE58AA0E4B88AE7BABFE7B4A2E79A84E4BA8CE58F89E6A091E7A7B0E4B8BAE7BABFE7B4A2E4BA8CE58F89E6A091E38082E5AFB9E4BA8CE58F89E6A091E4BBA5E69F90E7A78DE6ACA1E5BA8FE9818DE58E86E4BDBFE585B6E58F98E4B8BAE7BABFE7B4A2E4BA8CE58F89E6A091E79A84E8BF87E7A88BE58FABE5819AE7BABFE7B4A2E58C96E38082E88BA5E5AFB9E4BA8CE58F89E6A091E8BF9BE8A18CE4B8ADE5BA8FE9818DE58E86EFBC8CE58899E68980E5BE97E79A84E7BABFE7B4A2E4BA8CE58F89E6A091E7A7B0E4B8BAE4B8ADE5BA8FE7BABFE7B4A2E4BA8CE58F89E6A091EFBC8CE7BABFE7B4A2E993BEE8A1A8E7A7B0E4B8BAE4B8BAE4B8ADE5BA8FE7BABFE7B4A2E993BEE8A1A8E38082E7BABFE7B4A2E4BA8CE58F89E6A091E698AFE4B880E7A78DE789A9E79086E7BB93E69E84E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('512', 0xE5B9BFE5BAA6E4BC98E58588E9818DE58E86EFBC9A0AE59CA8E4B8ADE5BA8FE7BABFE7B4A2E6A091E689BEE7BB93E782B9E5908EE7BBA7E79A84E8A784E5BE8BE698AFEFBC9AE88BA5E585B6E58FB3E6A087E5BF97E4B8BA31EFBC8CE58899E58FB3E993BEE4B8BAE7BABFE7B4A2EFBC8CE68C87E7A4BAE585B6E5908EE7BBA7EFBC8CE590A6E58899E9818DE58E86E585B6E58FB3E5AD90E6A091E697B6E8AEBFE997AEE79A84E7ACACE4B880E4B8AAE7BB93E782B9EFBC88E58FB3E5AD90E6A091E69C80E5B7A6E4B88BE79A84E7BB93E782B9EFBC89E4B8BAE585B6E5908EE7BBA7EFBC9BE689BEE7BB93E782B9E5898DE9A9B1E79A84E8A784E5BE8BE698AFEFBC9AE88BA5E585B6E5B7A6E6A087E5BF97E4B8BA31EFBC8CE58899E5B7A6E993BEE4B8BAE7BABFE7B4A2EFBC8CE68C87E7A4BAE585B6E5898DE9A9B1EFBC8CE590A6E58899E9818DE58E86E5B7A6E5AD90E6A091E697B6E69C80E5908EE8AEBFE997AEE79A84E4B880E4B8AAE7BB93E782B9EFBC88E5B7A6E5AD90E6A091E4B8ADE69C80E58FB3E4B88BE79A84E7BB93E782B9EFBC89E4B8BAE585B6E5898DE9A9B1E3808220E59CA8E5908EE5BA8FE7BABFE7B4A2E6A091E4B8ADE689BEE588B0E7BB93E782B9E79A84E5908EE7BBA7E58886E4B889E7A78DE68385E586B5EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('513', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('514', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('515', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('516', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E4BDBFE794A8E8AEB0E5BD95E68896E5AD98E582A8E599A8E59CB0E59D80E68C87E99288E79A84E7A88BE5BA8FE8AEBEE8AEA1E8AFADE8A880E4B8ADEFBC8CE4BA8CE58F89E6A091E9809AE5B8B8E794A8E6A091E7BB93E782B9E7BB93E69E84E69DA5E5AD98E582A8E38082E69C89E697B6E4B99FE58C85E590ABE68C87E59091E594AFE4B880E79A84E788B6E88A82E782B9E79A84E68C87E99288E38082E5A682E69E9CE4B880E4B8AAE7BB93E782B9E79A84E5AD90E7BB93E782B9E4B8AAE695B0E5B08FE4BA8E32EFBC8CE4B880E4BA9BE5AD90E7BB93E782B9E68C87E99288E58FAFE883BDE4B8BAE7A9BAE580BCEFBC8CE68896E88085E4B8BAE789B9E6AE8AE79A84E593A8E585B5E7BB93E782B9E3808220E4BDBFE794A8E993BEE8A1A8E883BDE981BFE5858DE9A1BAE5BA8FE5AD98E582A8E6B5AAE8B4B9E7A9BAE997B4E79A84E997AEE9A298EFBC8CE7AE97E6B395E5928CE7BB93E69E84E79BB8E5AFB9E7AE80E58D95EFBC8CE4BD86E4BDBFE794A8E4BA8CE58F89E993BEE8A1A8EFBC8CE794B1E4BA8EE7BCBAE4B98FE788B6E993BEE79A84E68C87E5BC95EFBC8CE59CA8E689BEE59B9EE788B6E88A82E782B9E697B6E99C80E8A681E9878DE696B0E689ABE68F8FE6A091E5BE97E79FA5E788B6E88A82E782B9E79A84E88A82E782B9E59CB0E59D80E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('517', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('518', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('519', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E4BDBFE794A8E8AEB0E5BD95E68896E5AD98E582A8E599A8E59CB0E59D80E68C87E99288E79A84E7A88BE5BA8FE8AEBEE8AEA1E8AFADE8A880E4B8ADEFBC8CE4BA8CE58F89E6A091E9809AE5B8B8E794A8E6A091E7BB93E782B9E7BB93E69E84E69DA5E5AD98E582A8E38082E69C89E697B6E4B99FE58C85E590ABE68C87E59091E594AFE4B880E79A84E788B6E88A82E782B9E79A84E68C87E99288E38082E5A682E69E9CE4B880E4B8AAE7BB93E782B9E79A84E5AD90E7BB93E782B9E4B8AAE695B0E5B08FE4BA8E32EFBC8CE4B880E4BA9BE5AD90E7BB93E782B9E68C87E99288E58FAFE883BDE4B8BAE7A9BAE580BCEFBC8CE68896E88085E4B8BAE789B9E6AE8AE79A84E593A8E585B5E7BB93E782B9E3808220E4BDBFE794A8E993BEE8A1A8E883BDE981BFE5858DE9A1BAE5BA8FE5AD98E582A8E6B5AAE8B4B9E7A9BAE997B4E79A84E997AEE9A298EFBC8CE7AE97E6B395E5928CE7BB93E69E84E79BB8E5AFB9E7AE80E58D95EFBC8CE4BD86E4BDBFE794A8E4BA8CE58F89E993BEE8A1A8EFBC8CE794B1E4BA8EE7BCBAE4B98FE788B6E993BEE79A84E68C87E5BC95EFBC8CE59CA8E689BEE59B9EE788B6E88A82E782B9E697B6E99C80E8A681E9878DE696B0E689ABE68F8FE6A091E5BE97E79FA5E788B6E88A82E782B9E79A84E88A82E782B9E59CB0E59D80E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('520', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('521', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('522', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E4BDBFE794A8E8AEB0E5BD95E68896E5AD98E582A8E599A8E59CB0E59D80E68C87E99288E79A84E7A88BE5BA8FE8AEBEE8AEA1E8AFADE8A880E4B8ADEFBC8CE4BA8CE58F89E6A091E9809AE5B8B8E794A8E6A091E7BB93E782B9E7BB93E69E84E69DA5E5AD98E582A8E38082E69C89E697B6E4B99FE58C85E590ABE68C87E59091E594AFE4B880E79A84E788B6E88A82E782B9E79A84E68C87E99288E38082E5A682E69E9CE4B880E4B8AAE7BB93E782B9E79A84E5AD90E7BB93E782B9E4B8AAE695B0E5B08FE4BA8E32EFBC8CE4B880E4BA9BE5AD90E7BB93E782B9E68C87E99288E58FAFE883BDE4B8BAE7A9BAE580BCEFBC8CE68896E88085E4B8BAE789B9E6AE8AE79A84E593A8E585B5E7BB93E782B9E3808220E4BDBFE794A8E993BEE8A1A8E883BDE981BFE5858DE9A1BAE5BA8FE5AD98E582A8E6B5AAE8B4B9E7A9BAE997B4E79A84E997AEE9A298EFBC8CE7AE97E6B395E5928CE7BB93E69E84E79BB8E5AFB9E7AE80E58D95EFBC8CE4BD86E4BDBFE794A8E4BA8CE58F89E993BEE8A1A8EFBC8CE794B1E4BA8EE7BCBAE4B98FE788B6E993BEE79A84E68C87E5BC95EFBC8CE59CA8E689BEE59B9EE788B6E88A82E782B9E697B6E99C80E8A681E9878DE696B0E689ABE68F8FE6A091E5BE97E79FA5E788B6E88A82E782B9E79A84E88A82E782B9E59CB0E59D80E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('523', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('524', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('525', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E4BDBFE794A8E8AEB0E5BD95E68896E5AD98E582A8E599A8E59CB0E59D80E68C87E99288E79A84E7A88BE5BA8FE8AEBEE8AEA1E8AFADE8A880E4B8ADEFBC8CE4BA8CE58F89E6A091E9809AE5B8B8E794A8E6A091E7BB93E782B9E7BB93E69E84E69DA5E5AD98E582A8E38082E69C89E697B6E4B99FE58C85E590ABE68C87E59091E594AFE4B880E79A84E788B6E88A82E782B9E79A84E68C87E99288E38082E5A682E69E9CE4B880E4B8AAE7BB93E782B9E79A84E5AD90E7BB93E782B9E4B8AAE695B0E5B08FE4BA8E32EFBC8CE4B880E4BA9BE5AD90E7BB93E782B9E68C87E99288E58FAFE883BDE4B8BAE7A9BAE580BCEFBC8CE68896E88085E4B8BAE789B9E6AE8AE79A84E593A8E585B5E7BB93E782B9E3808220E4BDBFE794A8E993BEE8A1A8E883BDE981BFE5858DE9A1BAE5BA8FE5AD98E582A8E6B5AAE8B4B9E7A9BAE997B4E79A84E997AEE9A298EFBC8CE7AE97E6B395E5928CE7BB93E69E84E79BB8E5AFB9E7AE80E58D95EFBC8CE4BD86E4BDBFE794A8E4BA8CE58F89E993BEE8A1A8EFBC8CE794B1E4BA8EE7BCBAE4B98FE788B6E993BEE79A84E68C87E5BC95EFBC8CE59CA8E689BEE59B9EE788B6E88A82E782B9E697B6E99C80E8A681E9878DE696B0E689ABE68F8FE6A091E5BE97E79FA5E788B6E88A82E782B9E79A84E88A82E782B9E59CB0E59D80E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('526', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A207479706564656620737472756374204269544E6F64650A207B0A20202054456C656D5479706520646174613B0A202020737472756374204269544E6F6465202A6C6368696C642C2A726368696C643B202F2A20E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D4269544E6F64652C2A4269547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('527', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:57', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('528', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE694B9E8BF9BE4BA8EE4BA8CE58F89E993BEE8A1A8EFBC8CE5A29EE58AA0E788B6E88A82E782B9E79A84E68C87E5BC95EFBC8CE883BDE69BB4E5A5BDE59CB0E5AE9EE78EB0E88A82E782B9E997B4E79A84E8AEBFE997AEEFBC8CE4B88DE8BF87E7AE97E6B395E79BB8E5AFB9E5A48DE69D82E3808220E5BD93E4BA8CE58F89E6A091E794A8E4B889E58F89E993BEE8A1A8E8A1A8E7A4BAE697B6EFBC8CE69C894EE4B8AAE7BB93E782B9EFBC8CE5B0B1E4BC9AE69C894E2B32E4B8AAE7A9BAE68C87E99288E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('529', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A207479706564656620737472756374204269544E6F64650A207B0A20202054456C656D5479706520646174613B0A202020737472756374204269544E6F6465202A6C6368696C642C2A726368696C643B202F2A20E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D4269544E6F64652C2A4269547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('530', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('531', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE694B9E8BF9BE4BA8EE4BA8CE58F89E993BEE8A1A8EFBC8CE5A29EE58AA0E788B6E88A82E782B9E79A84E68C87E5BC95EFBC8CE883BDE69BB4E5A5BDE59CB0E5AE9EE78EB0E88A82E782B9E997B4E79A84E8AEBFE997AEEFBC8CE4B88DE8BF87E7AE97E6B395E79BB8E5AFB9E5A48DE69D82E3808220E5BD93E4BA8CE58F89E6A091E794A8E4B889E58F89E993BEE8A1A8E8A1A8E7A4BAE697B6EFBC8CE69C894EE4B8AAE7BB93E782B9EFBC8CE5B0B1E4BC9AE69C894E2B32E4B8AAE7A9BAE68C87E99288E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('532', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A207479706564656620737472756374204269544E6F64650A207B0A20202054456C656D5479706520646174613B0A202020737472756374204269544E6F6465202A6C6368696C642C2A726368696C643B202F2A20E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D4269544E6F64652C2A4269547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('533', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('534', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE694B9E8BF9BE4BA8EE4BA8CE58F89E993BEE8A1A8EFBC8CE5A29EE58AA0E788B6E88A82E782B9E79A84E68C87E5BC95EFBC8CE883BDE69BB4E5A5BDE59CB0E5AE9EE78EB0E88A82E782B9E997B4E79A84E8AEBFE997AEEFBC8CE4B88DE8BF87E7AE97E6B395E79BB8E5AFB9E5A48DE69D82E3808220E5BD93E4BA8CE58F89E6A091E794A8E4B889E58F89E993BEE8A1A8E8A1A8E7A4BAE697B6EFBC8CE69C894EE4B8AAE7BB93E782B9EFBC8CE5B0B1E4BC9AE69C894E2B32E4B8AAE7A9BAE68C87E99288E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('535', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A207479706564656620737472756374204269544E6F64650A207B0A20202054456C656D5479706520646174613B0A202020737472756374204269544E6F6465202A6C6368696C642C2A726368696C643B202F2A20E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D4269544E6F64652C2A4269547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('536', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('537', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE694B9E8BF9BE4BA8EE4BA8CE58F89E993BEE8A1A8EFBC8CE5A29EE58AA0E788B6E88A82E782B9E79A84E68C87E5BC95EFBC8CE883BDE69BB4E5A5BDE59CB0E5AE9EE78EB0E88A82E782B9E997B4E79A84E8AEBFE997AEEFBC8CE4B88DE8BF87E7AE97E6B395E79BB8E5AFB9E5A48DE69D82E3808220E5BD93E4BA8CE58F89E6A091E794A8E4B889E58F89E993BEE8A1A8E8A1A8E7A4BAE697B6EFBC8CE69C894EE4B8AAE7BB93E782B9EFBC8CE5B0B1E4BC9AE69C894E2B32E4B8AAE7A9BAE68C87E99288E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('538', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('539', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E4BDBFE794A8E8AEB0E5BD95E68896E5AD98E582A8E599A8E59CB0E59D80E68C87E99288E79A84E7A88BE5BA8FE8AEBEE8AEA1E8AFADE8A880E4B8ADEFBC8CE4BA8CE58F89E6A091E9809AE5B8B8E794A8E6A091E7BB93E782B9E7BB93E69E84E69DA5E5AD98E582A8E38082E69C89E697B6E4B99FE58C85E590ABE68C87E59091E594AFE4B880E79A84E788B6E88A82E782B9E79A84E68C87E99288E38082E5A682E69E9CE4B880E4B8AAE7BB93E782B9E79A84E5AD90E7BB93E782B9E4B8AAE695B0E5B08FE4BA8E32EFBC8CE4B880E4BA9BE5AD90E7BB93E782B9E68C87E99288E58FAFE883BDE4B8BAE7A9BAE580BCEFBC8CE68896E88085E4B8BAE789B9E6AE8AE79A84E593A8E585B5E7BB93E782B9E3808220E4BDBFE794A8E993BEE8A1A8E883BDE981BFE5858DE9A1BAE5BA8FE5AD98E582A8E6B5AAE8B4B9E7A9BAE997B4E79A84E997AEE9A298EFBC8CE7AE97E6B395E5928CE7BB93E69E84E79BB8E5AFB9E7AE80E58D95EFBC8CE4BD86E4BDBFE794A8E4BA8CE58F89E993BEE8A1A8EFBC8CE794B1E4BA8EE7BCBAE4B98FE788B6E993BEE79A84E68C87E5BC95EFBC8CE59CA8E689BEE59B9EE788B6E88A82E782B9E697B6E99C80E8A681E9878DE696B0E689ABE68F8FE6A091E5BE97E79FA5E788B6E88A82E782B9E79A84E88A82E782B9E59CB0E59D80E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('540', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A207479706564656620737472756374204269544E6F64650A207B0A20202054456C656D5479706520646174613B0A202020737472756374204269544E6F6465202A6C6368696C642C2A726368696C643B202F2A20E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D4269544E6F64652C2A4269547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('541', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('542', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E4BDBFE794A8E8AEB0E5BD95E68896E5AD98E582A8E599A8E59CB0E59D80E68C87E99288E79A84E7A88BE5BA8FE8AEBEE8AEA1E8AFADE8A880E4B8ADEFBC8CE4BA8CE58F89E6A091E9809AE5B8B8E794A8E6A091E7BB93E782B9E7BB93E69E84E69DA5E5AD98E582A8E38082E69C89E697B6E4B99FE58C85E590ABE68C87E59091E594AFE4B880E79A84E788B6E88A82E782B9E79A84E68C87E99288E38082E5A682E69E9CE4B880E4B8AAE7BB93E782B9E79A84E5AD90E7BB93E782B9E4B8AAE695B0E5B08FE4BA8E32EFBC8CE4B880E4BA9BE5AD90E7BB93E782B9E68C87E99288E58FAFE883BDE4B8BAE7A9BAE580BCEFBC8CE68896E88085E4B8BAE789B9E6AE8AE79A84E593A8E585B5E7BB93E782B9E3808220E4BDBFE794A8E993BEE8A1A8E883BDE981BFE5858DE9A1BAE5BA8FE5AD98E582A8E6B5AAE8B4B9E7A9BAE997B4E79A84E997AEE9A298EFBC8CE7AE97E6B395E5928CE7BB93E69E84E79BB8E5AFB9E7AE80E58D95EFBC8CE4BD86E4BDBFE794A8E4BA8CE58F89E993BEE8A1A8EFBC8CE794B1E4BA8EE7BCBAE4B98FE788B6E993BEE79A84E68C87E5BC95EFBC8CE59CA8E689BEE59B9EE788B6E88A82E782B9E697B6E99C80E8A681E9878DE696B0E689ABE68F8FE6A091E5BE97E79FA5E788B6E88A82E782B9E79A84E88A82E782B9E59CB0E59D80E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('543', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A207479706564656620737472756374204269544E6F64650A207B0A20202054456C656D5479706520646174613B0A202020737472756374204269544E6F6465202A6C6368696C642C2A726368696C643B202F2A20E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D4269544E6F64652C2A4269547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('544', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('545', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E4BDBFE794A8E8AEB0E5BD95E68896E5AD98E582A8E599A8E59CB0E59D80E68C87E99288E79A84E7A88BE5BA8FE8AEBEE8AEA1E8AFADE8A880E4B8ADEFBC8CE4BA8CE58F89E6A091E9809AE5B8B8E794A8E6A091E7BB93E782B9E7BB93E69E84E69DA5E5AD98E582A8E38082E69C89E697B6E4B99FE58C85E590ABE68C87E59091E594AFE4B880E79A84E788B6E88A82E782B9E79A84E68C87E99288E38082E5A682E69E9CE4B880E4B8AAE7BB93E782B9E79A84E5AD90E7BB93E782B9E4B8AAE695B0E5B08FE4BA8E32EFBC8CE4B880E4BA9BE5AD90E7BB93E782B9E68C87E99288E58FAFE883BDE4B8BAE7A9BAE580BCEFBC8CE68896E88085E4B8BAE789B9E6AE8AE79A84E593A8E585B5E7BB93E782B9E3808220E4BDBFE794A8E993BEE8A1A8E883BDE981BFE5858DE9A1BAE5BA8FE5AD98E582A8E6B5AAE8B4B9E7A9BAE997B4E79A84E997AEE9A298EFBC8CE7AE97E6B395E5928CE7BB93E69E84E79BB8E5AFB9E7AE80E58D95EFBC8CE4BD86E4BDBFE794A8E4BA8CE58F89E993BEE8A1A8EFBC8CE794B1E4BA8EE7BCBAE4B98FE788B6E993BEE79A84E68C87E5BC95EFBC8CE59CA8E689BEE59B9EE788B6E88A82E782B9E697B6E99C80E8A681E9878DE696B0E689ABE68F8FE6A091E5BE97E79FA5E788B6E88A82E782B9E79A84E88A82E782B9E59CB0E59D80E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('546', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A207479706564656620737472756374204269544E6F64650A207B0A20202054456C656D5479706520646174613B0A202020737472756374204269544E6F6465202A6C6368696C642C2A726368696C643B202F2A20E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D4269544E6F64652C2A4269547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('547', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('548', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E4BDBFE794A8E8AEB0E5BD95E68896E5AD98E582A8E599A8E59CB0E59D80E68C87E99288E79A84E7A88BE5BA8FE8AEBEE8AEA1E8AFADE8A880E4B8ADEFBC8CE4BA8CE58F89E6A091E9809AE5B8B8E794A8E6A091E7BB93E782B9E7BB93E69E84E69DA5E5AD98E582A8E38082E69C89E697B6E4B99FE58C85E590ABE68C87E59091E594AFE4B880E79A84E788B6E88A82E782B9E79A84E68C87E99288E38082E5A682E69E9CE4B880E4B8AAE7BB93E782B9E79A84E5AD90E7BB93E782B9E4B8AAE695B0E5B08FE4BA8E32EFBC8CE4B880E4BA9BE5AD90E7BB93E782B9E68C87E99288E58FAFE883BDE4B8BAE7A9BAE580BCEFBC8CE68896E88085E4B8BAE789B9E6AE8AE79A84E593A8E585B5E7BB93E782B9E3808220E4BDBFE794A8E993BEE8A1A8E883BDE981BFE5858DE9A1BAE5BA8FE5AD98E582A8E6B5AAE8B4B9E7A9BAE997B4E79A84E997AEE9A298EFBC8CE7AE97E6B395E5928CE7BB93E69E84E79BB8E5AFB9E7AE80E58D95EFBC8CE4BD86E4BDBFE794A8E4BA8CE58F89E993BEE8A1A8EFBC8CE794B1E4BA8EE7BCBAE4B98FE788B6E993BEE79A84E68C87E5BC95EFBC8CE59CA8E689BEE59B9EE788B6E88A82E782B9E697B6E99C80E8A681E9878DE696B0E689ABE68F8FE6A091E5BE97E79FA5E788B6E88A82E782B9E79A84E88A82E782B9E59CB0E59D80E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('549', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A207479706564656620737472756374204269544E6F64650A207B0A20202054456C656D5479706520646174613B0A202020737472756374204269544E6F6465202A6C6368696C642C2A726368696C643B202F2A20E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D4269544E6F64652C2A4269547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('550', , 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('551', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE68891E4BBACE7BB8FE5B8B8E5B88CE69C9BE8AEBFE997AEE6A091E4B8ADE79A84E6AF8FE4B880E4B8AAE7BB93E782B9E5B9B6E4B894E69FA5E79C8BE5AE83E79A84E580BCE38082E69C89E5BE88E5A49AE5B8B8E8A781E79A84E9A1BAE5BA8FE69DA5E8AEBFE997AEE68980E69C89E79A84E7BB93E782B9EFBC8CE8808CE4B894E6AF8FE4B880E7A78DE983BDE69C89E69C89E794A8E79A84E680A7E8B4A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:58', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('552', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE9818DE58E86E4BA8CE58F89E6A091EFBC9A4CE3808144E3808152E58886E588ABE8A1A8E7A4BAE9818DE58E86E5B7A6E5AD90E6A091E38081E8AEBFE997AEE6A0B9E7BB93E782B9E5928CE9818DE58E86E58FB3E5AD90E6A091EFBC8CE58899E5858828E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF444C52EFBC8CE4B8AD28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C4452EFBC8CE5908E28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C5244E38082E8BF98E69C89E68C89E5B182E9818DE58E86E4BA8CE58F89E6A091E38082E8BF99E4BA9BE696B9E6B395E79A84E697B6E997B4E5A48DE69D82E5BAA6E983BDE698AF4F286E29EFBC8C6EE4B8BAE7BB93E782B9E4B8AAE695B0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('553', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE5A682E69E9C5432E698AFE794B1E69C89E5BA8FE6A09154E8BDACE68DA2E8808CE69DA5E79A84E4BA8CE58F89E6A091EFBC8CE982A3E4B98854E4B8ADE7BB93E782B9E79A84E5898DE5BA8FE5B0B1E698AF5432E4B8ADE7BB93E782B9E79A84E5898DE5BA8FEFBC8C54E4B8ADE7BB93E782B9E79A84E5908EE5BA8FE5B0B1E698AF5432E4B8ADE7BB93E782B9E79A84E4B8ADE5BA8FE38082E4BBBBE4BD95E4B880E6A3B5E4BA8CE58F89E6A091E79A84E58FB6E7BB93E782B9E59CA8E58588E5BA8FE38081E4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E4B8ADE79A84E79BB8E5AFB9E6ACA1E5BA8FE4B88DE58F91E694B9E58F98E38082E8AEBE6E2C6DE4B8BAE4B880E6A3B5E4BA8CE58F89E6A091E4B88AE79A84E4B8A4E4B8AAE7BB93E782B9EFBC8CE59CA8E4B8ADE5BA8FE9818DE58E86E697B6EFBC8C6EE59CA86DE5898DE79A84E69DA1E4BBB6E698AF6EE59CA86DE79A84E5B7A6E696B9E38082E5898DE5BA8FE5BA8FE58897E5928CE4B8ADE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BBBBE4B880E7BB93E782B9E59D87E697A0E5B7A6E5ADA9E5AD90E79A84E99D9EE7A9BAE4BA8CE58F89E6A091EFBC9BE4B8ADE5BA8FE5BA8FE58897E5928CE5908EE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BBBBE4B880E7BB93E782B9E59D87E697A0E58FB3E5ADA9E5AD90E79A84E99D9EE7A9BAE4BA8CE58F89E6A091EFBC9BE5898DE5BA8FE5BA8FE58897E5928CE5908EE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BB85E69C89E4B880E4B8AAE7BB93E782B9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('554', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE58187E8AEBEE68891E4BBACE69C89E4B880E4B8AAE58C85E590ABE580BCE79A8476616C7565E5928CE68C87E59091E4B8A4E4B8AAE5AD90E7BB93E782B9E79A846C656674E5928C7269676874E79A84E6A091E7BB93E782B9E7BB93E69E84E38082E68891E4BBACE58FAFE4BBA5E58699E587BAE8BF99E6A0B7E79A84E8BF87E7A88BEFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('555', 0xE5AD98E582A8E7BB93E69E84EFBC9A0A7669736974286E6F6465290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('556', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE8BF99E6A0B7E4BC9AE794A8E5898DE5BA8FE68993E58DB0E587BAE6A091E4B8ADE79A84E580BCE38082E59CA8E5898DE5BA8FEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5AE83E79A84E5AD90E7BB93E782B9E4B98BE5898DE8AEBFE997AEE38082E7B1BBE4BCBCE59CB0EFBC8CE5A682E69E9CE68993E58DB0E8AFADE58FA5E59CA8E69C80E5908EEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE4BB96E79A84E5AD90E88A82E782B9E4B98BE5908EE8AEBFE997AEEFBC8CE6A091E4B8ADE79A84E580BCE4BC9AE794A8E5908EE5BA8FE69DA5E68993E58DB0E38082E59CA8E8BF99E4B8A4E7A78DE68385E586B5E4B8ADEFBC8CE5B7A6E5AD90E6A091E4B8ADE79A84E580BCE6AF94E58FB3E5AD90E6A091E4B8ADE5BE97E580BCE58588E68993E58DB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('557', 0xE5AD98E582A8E7BB93E69E84EFBC9A0A7669736974286E6F6465290A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('558', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE69C80E5908EEFBC8CE4B88AE99DA2E79A84E4B8ADE5BA8FE9818DE58E86EFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5B7A6E5AD90E6A091E5928CE58FB3E5AD90E6A091E4B98BE997B4E8AEBFE997AEE38082E8BF99E59CA8E9818DE58E86E4BA8CE58F89E6909CE7B4A2E6A091E697B6E5BE88E5B8B8E794A8EFBC8CE59BA0E4B8BAE5AE83E883BDE794A8E98092E5A29EE79A84E9A1BAE5BA8FE69DA5E9818DE58E86E68980E69C89E79A84E580BCE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('559', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('560', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E8BF99E4B8AAE4BA8CE58F89E6A091E4B8ADEFBC8C20E5898DE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20322C20362C20352C2031312C20352C20392C203420E5908EE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20352C2031312C20362C20372C20342C20392C20352C203220E4B8ADE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20352C20362C2031312C20322C20352C20342C2039, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('561', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE4BBA5E4B88AE79A84E98092E5BD92E7AE97E6B395E4BDBFE794A8E4B88EE6A091E79A84E9AB98E5BAA6E68890E6AF94E4BE8BE79A84E6A088E7A9BAE997B4E38082E5A682E69E9CE68891E4BBACE59CA8E6AF8FE4B8AAE7BB93E782B9E4B8ADE5AD98E582A8E68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288EFBC8CE982A3E6A0B7E58FAFE4BBA5E4BDBFE794A8E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC8CE58FAAE4BDBFE794A8E5B8B8E695B0E7A9BAE997B4E5AE9EE78EB0E68980E69C89E8BF99E4BA9BE9818DE58E86E38082E784B6E8808CEFBC8CE68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288E58DA0E794A8E69BB4E5A49AE79A84E7A9BAE997B4E38082E8BF99E58FAAE59CA8E99C80E8A681E68C87E59091E788B6E88A82E782B9E79A84E68C87E99288E68896E6A088E7A9BAE997B4E69C89E99990E697B6E6898DE4BDBFE794A8E38082E4BE8BE5A682EFBC8C20E8BF99E698AFE4B880E4B8AAE4B8ADE5BA8FE9818DE58E86E79A84E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('562', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('563', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE794A8E4BA8CE58F89E6A091E8A1A8E7A4BAE4B88BE8BFB0E8A1A8E8BEBEE5BC8FEFBC9A612B622A28632D64292D652F6620E58588E5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A2D2B612A622D63642F656620E4B8ADE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A612B622A632D642D652F6620E5908EE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A616263642D2A2B65662F2D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('564', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E6B7B1E5BAA6E4BC98E58588E7BAA7E4B8ADEFBC8CE68891E4BBACE5B88CE69C9BE4BB8EE6A0B9E7BB93E782B9E8AEBFE997AEE69C80E8BF9CE79A84E7BB93E782B9E38082E5928CE59BBEE79A84E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E4B88DE5908CE79A84E698AFEFBC8CE4B88DE99C80E8AEB0E4BD8FE8AEBFE997AEE8BF87E79A84E6AF8FE4B880E4B8AAE7BB93E782B9EFBC8CE59BA0E4B8BAE6A091E4B8ADE4B88DE4BC9AE69C89E78EAFE38082E5898DE5BA8FEFBC8CE4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E983BDE698AFE6B7B1E5BAA6E4BC98E58588E9818DE58E86E79A84E789B9E4BE8BE38082E58F82E8A781E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('565', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE5928CE6B7B1E5BAA6E4BC98E58588E9818DE58E86E4B88DE5908CEFBC8CE5B9BFE5BAA6E4BC98E58588E9818DE58E86E4BC9AE58588E8AEBFE997AEE7A6BBE6A0B9E88A82E782B9E69C80E8BF91E79A84E88A82E782B9E38082E58F82E8A781E5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E3808220E4BA8CE58F89E6A091E79A84E5B9BFE5BAA6E4BC98E58588E9818DE58E86E58F88E7A7B0E68C89E5B182E6ACA1E9818DE58E86E38082E7AE97E6B395E5809FE58AA9E9989FE58897E5AE9EE78EB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('566', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE4B880E888ACE69C89E5BA8FE6A091E5928CE4BA8CE58F89E6A091E4B98BE997B4E69C89E4B880E4B880E698A0E5B084E585B3E7B3BBEFBC8CE883BDE8BF9BE8A18CE79BB8E4BA92E8BDACE68DA2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('567', 0xE5AD98E582A8E7BB93E69E84EFBC9A0A6EE58F89E6A091E8BDACE68DA2E4B8BAE4BA8CE58F89E6A091E79A84E696B9E6B395EFBC9AE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9EFBC9BE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E58FB3E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E7ACACE4B880E4B8AAE58FB3E8BEB9E79A84E5908CE7BAA7E7BB93E782B979E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('568', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE4BE8BE5A682EFBC8CE59CA8E5B7A6E8BEB9E79A84E6A091E4B8ADEFBC8C41E69C8936E4B8AAE5AD90E7BB93E782B97B422C432C442C452C462C477DE38082E5AE83E883BDE8A2ABE8BDACE68DA2E68890E58FB3E8BEB9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('569', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E58584E5BC9FE4B98BE997B4E58AA0E4B880E8BF9EE68EA5EFBC9B20E5AFB9E6AF8FE4B8AAE7BB93E782B9EFBC8CE999A4E4BA86E585B6E5B7A6E5ADA9E5AD90E5A496EFBC8CE58EBBE999A4E585B6E4B88EE585B6E4BD99E5ADA9E5AD90E4B98BE997B4E79A84E88194E7B3BBEFBC9B20E4BBA5E6A091E79A84E6A0B9E7BB93E782B9E4B8BAE8BDB4E5BF83EFBC8CE5B086E695B4E6A091E9A1BAE697B6E99288E8BDAC3435E5BAA6E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('570', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E6A087E8AEB0E6B395EFBC88E5ADA9E5AD90E58584E5BC9FE6A087E8AEB0E6B395EFBC89E698AFE6A091E5928CE4BA8CE58F89E6A091E8BDACE68DA2E79A84E5AA92E4BB8BE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('571', 0xE5AD98E582A8E7BB93E69E84EFBC9A0A2F2A20E6A091E79A84E4BA8CE58F89E993BEE8A1A828E5ADA9E5AD90E28094E58584E5BC9F29E5AD98E582A8E8A1A8E7A4BA202A2F0A2074797065646566207374727563742043534E6F64650A207B0A20202054456C656D5479706520646174613B0A2020207374727563742043534E6F6465202A66697273746368696C642C2A6E6578747369626C696E673B0A207D43534E6F64652C2A4353547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('572', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9C5BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:43:59', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('573', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('574', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE7BABFE7B4A2E4BA8CE58F89E6A091202874687265616465642062696E6172792074726565295BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('575', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('576', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E4B8ADE5BA8FE7BABFE7B4A2E6A091E689BEE7BB93E782B9E5908EE7BBA7E79A84E8A784E5BE8BE698AFEFBC9AE88BA5E585B6E58FB3E6A087E5BF97E4B8BA31EFBC8CE58899E58FB3E993BEE4B8BAE7BABFE7B4A2EFBC8CE68C87E7A4BAE585B6E5908EE7BBA7EFBC8CE590A6E58899E9818DE58E86E585B6E58FB3E5AD90E6A091E697B6E8AEBFE997AEE79A84E7ACACE4B880E4B8AAE7BB93E782B9EFBC88E58FB3E5AD90E6A091E69C80E5B7A6E4B88BE79A84E7BB93E782B9EFBC89E4B8BAE585B6E5908EE7BBA7EFBC9BE689BEE7BB93E782B9E5898DE9A9B1E79A84E8A784E5BE8BE698AFEFBC9AE88BA5E585B6E5B7A6E6A087E5BF97E4B8BA31EFBC8CE58899E5B7A6E993BEE4B8BAE7BABFE7B4A2EFBC8CE68C87E7A4BAE585B6E5898DE9A9B1EFBC8CE590A6E58899E9818DE58E86E5B7A6E5AD90E6A091E697B6E69C80E5908EE8AEBFE997AEE79A84E4B880E4B8AAE7BB93E782B9EFBC88E5B7A6E5AD90E6A091E4B8ADE69C80E58FB3E4B88BE79A84E7BB93E782B9EFBC89E4B8BAE585B6E5898DE9A9B1E3808220E59CA8E5908EE5BA8FE7BABFE7B4A2E6A091E4B8ADE689BEE588B0E7BB93E782B9E79A84E5908EE7BBA7E58886E4B889E7A78DE68385E586B5EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('577', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('578', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE4BA8CE58F89E6A091E79A84E4BA8CE58F89E7BABFE7B4A2E5AD98E582A8E8A1A8E7A4BAEFBC9AE59CA8E7BABFE7B4A2E993BEE8A1A8E4B88AE6B7BBE58AA0E4B880E4B8AAE5A4B4E7BB93E782B9EFBC8CE5B9B6E4BBA4E585B66C6368696C64E59F9FE79A84E68C87E99288E68C87E59091E4BA8CE58F89E6A091E79A84E6A0B9E7BB93E782B9EFBC8CE585B6726368696C64E59F9FE79A84E68C87E99288E68C87E59091E4B8ADE5BA8FE9818DE58E86E697B6E8AEBFE997AEE79A84E69C80E5908EE4B880E4B8AAE7BB93E782B9E38082E4BBA4E4BA8CE58F89E6A091E4B8ADE5BA8FE5BA8FE58897E4B8ADE79A84E7ACACE4B880E4B8AAE7BB93E782B9E79A846C6368696C64E59F9FE68C87E99288E5928CE69C80E5908EE4B880E4B8AAE7BB93E782B9E79A84726368696C64E59F9FE79A84E68C87E99288E59D87E68C87E59091E5A4B4E7BB93E782B9EFBC8CE8BF99E6A0B7E5B0B1E5889BE5BBBAE4BA86E4B880E4B8AAE58F8CE59091E7BABFE7B4A2E993BEE8A1A8E38082E4BA8CE58F89E6A091E5B8B8E98787E794A8E4BA8CE58F89E993BEE8A1A8E696B9E5BC8FE5AD98E582A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('579', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('580', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('581', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE68891E4BBACE7BB8FE5B8B8E5B88CE69C9BE8AEBFE997AEE6A091E4B8ADE79A84E6AF8FE4B880E4B8AAE7BB93E782B9E5B9B6E4B894E69FA5E79C8BE5AE83E79A84E580BCE38082E69C89E5BE88E5A49AE5B8B8E8A781E79A84E9A1BAE5BA8FE69DA5E8AEBFE997AEE68980E69C89E79A84E7BB93E782B9EFBC8CE8808CE4B894E6AF8FE4B880E7A78DE983BDE69C89E69C89E794A8E79A84E680A7E8B4A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('582', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE9818DE58E86E4BA8CE58F89E6A091EFBC9A4CE3808144E3808152E58886E588ABE8A1A8E7A4BAE9818DE58E86E5B7A6E5AD90E6A091E38081E8AEBFE997AEE6A0B9E7BB93E782B9E5928CE9818DE58E86E58FB3E5AD90E6A091EFBC8CE58899E5858828E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF444C52EFBC8CE4B8AD28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C4452EFBC8CE5908E28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C5244E38082E8BF98E69C89E68C89E5B182E9818DE58E86E4BA8CE58F89E6A091E38082E8BF99E4BA9BE696B9E6B395E79A84E697B6E997B4E5A48DE69D82E5BAA6E983BDE698AF4F286E29EFBC8C6EE4B8BAE7BB93E782B9E4B8AAE695B0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('583', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE5A682E69E9C5432E698AFE794B1E69C89E5BA8FE6A09154E8BDACE68DA2E8808CE69DA5E79A84E4BA8CE58F89E6A091EFBC8CE982A3E4B98854E4B8ADE7BB93E782B9E79A84E5898DE5BA8FE5B0B1E698AF5432E4B8ADE7BB93E782B9E79A84E5898DE5BA8FEFBC8C54E4B8ADE7BB93E782B9E79A84E5908EE5BA8FE5B0B1E698AF5432E4B8ADE7BB93E782B9E79A84E4B8ADE5BA8FE38082E4BBBBE4BD95E4B880E6A3B5E4BA8CE58F89E6A091E79A84E58FB6E7BB93E782B9E59CA8E58588E5BA8FE38081E4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E4B8ADE79A84E79BB8E5AFB9E6ACA1E5BA8FE4B88DE58F91E694B9E58F98E38082E8AEBE6E2C6DE4B8BAE4B880E6A3B5E4BA8CE58F89E6A091E4B88AE79A84E4B8A4E4B8AAE7BB93E782B9EFBC8CE59CA8E4B8ADE5BA8FE9818DE58E86E697B6EFBC8C6EE59CA86DE5898DE79A84E69DA1E4BBB6E698AF6EE59CA86DE79A84E5B7A6E696B9E38082E5898DE5BA8FE5BA8FE58897E5928CE4B8ADE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BBBBE4B880E7BB93E782B9E59D87E697A0E5B7A6E5ADA9E5AD90E79A84E99D9EE7A9BAE4BA8CE58F89E6A091EFBC9BE4B8ADE5BA8FE5BA8FE58897E5928CE5908EE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BBBBE4B880E7BB93E782B9E59D87E697A0E58FB3E5ADA9E5AD90E79A84E99D9EE7A9BAE4BA8CE58F89E6A091EFBC9BE5898DE5BA8FE5BA8FE58897E5928CE5908EE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BB85E69C89E4B880E4B8AAE7BB93E782B9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('584', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE58187E8AEBEE68891E4BBACE69C89E4B880E4B8AAE58C85E590ABE580BCE79A8476616C7565E5928CE68C87E59091E4B8A4E4B8AAE5AD90E7BB93E782B9E79A846C656674E5928C7269676874E79A84E6A091E7BB93E782B9E7BB93E69E84E38082E68891E4BBACE58FAFE4BBA5E58699E587BAE8BF99E6A0B7E79A84E8BF87E7A88BEFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('585', 0xE5AD98E582A8E7BB93E69E84EFBC9A0A7669736974286E6F6465290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('586', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE8BF99E6A0B7E4BC9AE794A8E5898DE5BA8FE68993E58DB0E587BAE6A091E4B8ADE79A84E580BCE38082E59CA8E5898DE5BA8FEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5AE83E79A84E5AD90E7BB93E782B9E4B98BE5898DE8AEBFE997AEE38082E7B1BBE4BCBCE59CB0EFBC8CE5A682E69E9CE68993E58DB0E8AFADE58FA5E59CA8E69C80E5908EEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE4BB96E79A84E5AD90E88A82E782B9E4B98BE5908EE8AEBFE997AEEFBC8CE6A091E4B8ADE79A84E580BCE4BC9AE794A8E5908EE5BA8FE69DA5E68993E58DB0E38082E59CA8E8BF99E4B8A4E7A78DE68385E586B5E4B8ADEFBC8CE5B7A6E5AD90E6A091E4B8ADE79A84E580BCE6AF94E58FB3E5AD90E6A091E4B8ADE5BE97E580BCE58588E68993E58DB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('587', 0xE5AD98E582A8E7BB93E69E84EFBC9A0A7669736974286E6F6465290A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('588', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE69C80E5908EEFBC8CE4B88AE99DA2E79A84E4B8ADE5BA8FE9818DE58E86EFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5B7A6E5AD90E6A091E5928CE58FB3E5AD90E6A091E4B98BE997B4E8AEBFE997AEE38082E8BF99E59CA8E9818DE58E86E4BA8CE58F89E6909CE7B4A2E6A091E697B6E5BE88E5B8B8E794A8EFBC8CE59BA0E4B8BAE5AE83E883BDE794A8E98092E5A29EE79A84E9A1BAE5BA8FE69DA5E9818DE58E86E68980E69C89E79A84E580BCE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('589', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('590', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E8BF99E4B8AAE4BA8CE58F89E6A091E4B8ADEFBC8C20E5898DE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20322C20362C20352C2031312C20352C20392C203420E5908EE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20352C2031312C20362C20372C20342C20392C20352C203220E4B8ADE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20352C20362C2031312C20322C20352C20342C2039, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('591', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE4BBA5E4B88AE79A84E98092E5BD92E7AE97E6B395E4BDBFE794A8E4B88EE6A091E79A84E9AB98E5BAA6E68890E6AF94E4BE8BE79A84E6A088E7A9BAE997B4E38082E5A682E69E9CE68891E4BBACE59CA8E6AF8FE4B8AAE7BB93E782B9E4B8ADE5AD98E582A8E68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288EFBC8CE982A3E6A0B7E58FAFE4BBA5E4BDBFE794A8E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC8CE58FAAE4BDBFE794A8E5B8B8E695B0E7A9BAE997B4E5AE9EE78EB0E68980E69C89E8BF99E4BA9BE9818DE58E86E38082E784B6E8808CEFBC8CE68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288E58DA0E794A8E69BB4E5A49AE79A84E7A9BAE997B4E38082E8BF99E58FAAE59CA8E99C80E8A681E68C87E59091E788B6E88A82E782B9E79A84E68C87E99288E68896E6A088E7A9BAE997B4E69C89E99990E697B6E6898DE4BDBFE794A8E38082E4BE8BE5A682EFBC8C20E8BF99E698AFE4B880E4B8AAE4B8ADE5BA8FE9818DE58E86E79A84E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('592', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('593', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE794A8E4BA8CE58F89E6A091E8A1A8E7A4BAE4B88BE8BFB0E8A1A8E8BEBEE5BC8FEFBC9A612B622A28632D64292D652F6620E58588E5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A2D2B612A622D63642F656620E4B8ADE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A612B622A632D642D652F6620E5908EE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A616263642D2A2B65662F2D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('594', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E6B7B1E5BAA6E4BC98E58588E7BAA7E4B8ADEFBC8CE68891E4BBACE5B88CE69C9BE4BB8EE6A0B9E7BB93E782B9E8AEBFE997AEE69C80E8BF9CE79A84E7BB93E782B9E38082E5928CE59BBEE79A84E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E4B88DE5908CE79A84E698AFEFBC8CE4B88DE99C80E8AEB0E4BD8FE8AEBFE997AEE8BF87E79A84E6AF8FE4B880E4B8AAE7BB93E782B9EFBC8CE59BA0E4B8BAE6A091E4B8ADE4B88DE4BC9AE69C89E78EAFE38082E5898DE5BA8FEFBC8CE4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E983BDE698AFE6B7B1E5BAA6E4BC98E58588E9818DE58E86E79A84E789B9E4BE8BE38082E58F82E8A781E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('595', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE5928CE6B7B1E5BAA6E4BC98E58588E9818DE58E86E4B88DE5908CEFBC8CE5B9BFE5BAA6E4BC98E58588E9818DE58E86E4BC9AE58588E8AEBFE997AEE7A6BBE6A0B9E88A82E782B9E69C80E8BF91E79A84E88A82E782B9E38082E58F82E8A781E5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E3808220E4BA8CE58F89E6A091E79A84E5B9BFE5BAA6E4BC98E58588E9818DE58E86E58F88E7A7B0E68C89E5B182E6ACA1E9818DE58E86E38082E7AE97E6B395E5809FE58AA9E9989FE58897E5AE9EE78EB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('596', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE4B880E888ACE69C89E5BA8FE6A091E5928CE4BA8CE58F89E6A091E4B98BE997B4E69C89E4B880E4B880E698A0E5B084E585B3E7B3BBEFBC8CE883BDE8BF9BE8A18CE79BB8E4BA92E8BDACE68DA2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('597', 0xE5AD98E582A8E7BB93E69E84EFBC9A0A6EE58F89E6A091E8BDACE68DA2E4B8BAE4BA8CE58F89E6A091E79A84E696B9E6B395EFBC9AE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9EFBC9BE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E58FB3E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E7ACACE4B880E4B8AAE58FB3E8BEB9E79A84E5908CE7BAA7E7BB93E782B979E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('598', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE4BE8BE5A682EFBC8CE59CA8E5B7A6E8BEB9E79A84E6A091E4B8ADEFBC8C41E69C8936E4B8AAE5AD90E7BB93E782B97B422C432C442C452C462C477DE38082E5AE83E883BDE8A2ABE8BDACE68DA2E68890E58FB3E8BEB9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('599', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E58584E5BC9FE4B98BE997B4E58AA0E4B880E8BF9EE68EA5EFBC9B20E5AFB9E6AF8FE4B8AAE7BB93E782B9EFBC8CE999A4E4BA86E585B6E5B7A6E5ADA9E5AD90E5A496EFBC8CE58EBBE999A4E585B6E4B88EE585B6E4BD99E5ADA9E5AD90E4B98BE997B4E79A84E88194E7B3BBEFBC9B20E4BBA5E6A091E79A84E6A0B9E7BB93E782B9E4B8BAE8BDB4E5BF83EFBC8CE5B086E695B4E6A091E9A1BAE697B6E99288E8BDAC3435E5BAA6E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('600', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E6A087E8AEB0E6B395EFBC88E5ADA9E5AD90E58584E5BC9FE6A087E8AEB0E6B395EFBC89E698AFE6A091E5928CE4BA8CE58F89E6A091E8BDACE68DA2E79A84E5AA92E4BB8BE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('601', 0xE5AD98E582A8E7BB93E69E84EFBC9A0A2F2A20E6A091E79A84E4BA8CE58F89E993BEE8A1A828E5ADA9E5AD90E28094E58584E5BC9F29E5AD98E582A8E8A1A8E7A4BA202A2F0A2074797065646566207374727563742043534E6F64650A207B0A20202054456C656D5479706520646174613B0A2020207374727563742043534E6F6465202A66697273746368696C642C2A6E6578747369626C696E673B0A207D43534E6F64652C2A4353547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('602', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9C5BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:00', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('603', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('604', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE7BABFE7B4A2E4BA8CE58F89E6A091202874687265616465642062696E6172792074726565295BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('605', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('606', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E4B8ADE5BA8FE7BABFE7B4A2E6A091E689BEE7BB93E782B9E5908EE7BBA7E79A84E8A784E5BE8BE698AFEFBC9AE88BA5E585B6E58FB3E6A087E5BF97E4B8BA31EFBC8CE58899E58FB3E993BEE4B8BAE7BABFE7B4A2EFBC8CE68C87E7A4BAE585B6E5908EE7BBA7EFBC8CE590A6E58899E9818DE58E86E585B6E58FB3E5AD90E6A091E697B6E8AEBFE997AEE79A84E7ACACE4B880E4B8AAE7BB93E782B9EFBC88E58FB3E5AD90E6A091E69C80E5B7A6E4B88BE79A84E7BB93E782B9EFBC89E4B8BAE585B6E5908EE7BBA7EFBC9BE689BEE7BB93E782B9E5898DE9A9B1E79A84E8A784E5BE8BE698AFEFBC9AE88BA5E585B6E5B7A6E6A087E5BF97E4B8BA31EFBC8CE58899E5B7A6E993BEE4B8BAE7BABFE7B4A2EFBC8CE68C87E7A4BAE585B6E5898DE9A9B1EFBC8CE590A6E58899E9818DE58E86E5B7A6E5AD90E6A091E697B6E69C80E5908EE8AEBFE997AEE79A84E4B880E4B8AAE7BB93E782B9EFBC88E5B7A6E5AD90E6A091E4B8ADE69C80E58FB3E4B88BE79A84E7BB93E782B9EFBC89E4B8BAE585B6E5898DE9A9B1E3808220E59CA8E5908EE5BA8FE7BABFE7B4A2E6A091E4B8ADE689BEE588B0E7BB93E782B9E79A84E5908EE7BBA7E58886E4B889E7A78DE68385E586B5EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('607', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('608', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE4BA8CE58F89E6A091E79A84E4BA8CE58F89E7BABFE7B4A2E5AD98E582A8E8A1A8E7A4BAEFBC9AE59CA8E7BABFE7B4A2E993BEE8A1A8E4B88AE6B7BBE58AA0E4B880E4B8AAE5A4B4E7BB93E782B9EFBC8CE5B9B6E4BBA4E585B66C6368696C64E59F9FE79A84E68C87E99288E68C87E59091E4BA8CE58F89E6A091E79A84E6A0B9E7BB93E782B9EFBC8CE585B6726368696C64E59F9FE79A84E68C87E99288E68C87E59091E4B8ADE5BA8FE9818DE58E86E697B6E8AEBFE997AEE79A84E69C80E5908EE4B880E4B8AAE7BB93E782B9E38082E4BBA4E4BA8CE58F89E6A091E4B8ADE5BA8FE5BA8FE58897E4B8ADE79A84E7ACACE4B880E4B8AAE7BB93E782B9E79A846C6368696C64E59F9FE68C87E99288E5928CE69C80E5908EE4B880E4B8AAE7BB93E782B9E79A84726368696C64E59F9FE79A84E68C87E99288E59D87E68C87E59091E5A4B4E7BB93E782B9EFBC8CE8BF99E6A0B7E5B0B1E5889BE5BBBAE4BA86E4B880E4B8AAE58F8CE59091E7BABFE7B4A2E993BEE8A1A8E38082E4BA8CE58F89E6A091E5B8B8E98787E794A8E4BA8CE58F89E993BEE8A1A8E696B9E5BC8FE5AD98E582A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('609', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('610', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('611', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE68891E4BBACE7BB8FE5B8B8E5B88CE69C9BE8AEBFE997AEE6A091E4B8ADE79A84E6AF8FE4B880E4B8AAE7BB93E782B9E5B9B6E4B894E69FA5E79C8BE5AE83E79A84E580BCE38082E69C89E5BE88E5A49AE5B8B8E8A781E79A84E9A1BAE5BA8FE69DA5E8AEBFE997AEE68980E69C89E79A84E7BB93E782B9EFBC8CE8808CE4B894E6AF8FE4B880E7A78DE983BDE69C89E69C89E794A8E79A84E680A7E8B4A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('612', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE9818DE58E86E4BA8CE58F89E6A091EFBC9A4CE3808144E3808152E58886E588ABE8A1A8E7A4BAE9818DE58E86E5B7A6E5AD90E6A091E38081E8AEBFE997AEE6A0B9E7BB93E782B9E5928CE9818DE58E86E58FB3E5AD90E6A091EFBC8CE58899E5858828E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF444C52EFBC8CE4B8AD28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C4452EFBC8CE5908E28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C5244E38082E8BF98E69C89E68C89E5B182E9818DE58E86E4BA8CE58F89E6A091E38082E8BF99E4BA9BE696B9E6B395E79A84E697B6E997B4E5A48DE69D82E5BAA6E983BDE698AF4F286E29EFBC8C6EE4B8BAE7BB93E782B9E4B8AAE695B0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('613', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE5A682E69E9C5432E698AFE794B1E69C89E5BA8FE6A09154E8BDACE68DA2E8808CE69DA5E79A84E4BA8CE58F89E6A091EFBC8CE982A3E4B98854E4B8ADE7BB93E782B9E79A84E5898DE5BA8FE5B0B1E698AF5432E4B8ADE7BB93E782B9E79A84E5898DE5BA8FEFBC8C54E4B8ADE7BB93E782B9E79A84E5908EE5BA8FE5B0B1E698AF5432E4B8ADE7BB93E782B9E79A84E4B8ADE5BA8FE38082E4BBBBE4BD95E4B880E6A3B5E4BA8CE58F89E6A091E79A84E58FB6E7BB93E782B9E59CA8E58588E5BA8FE38081E4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E4B8ADE79A84E79BB8E5AFB9E6ACA1E5BA8FE4B88DE58F91E694B9E58F98E38082E8AEBE6E2C6DE4B8BAE4B880E6A3B5E4BA8CE58F89E6A091E4B88AE79A84E4B8A4E4B8AAE7BB93E782B9EFBC8CE59CA8E4B8ADE5BA8FE9818DE58E86E697B6EFBC8C6EE59CA86DE5898DE79A84E69DA1E4BBB6E698AF6EE59CA86DE79A84E5B7A6E696B9E38082E5898DE5BA8FE5BA8FE58897E5928CE4B8ADE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BBBBE4B880E7BB93E782B9E59D87E697A0E5B7A6E5ADA9E5AD90E79A84E99D9EE7A9BAE4BA8CE58F89E6A091EFBC9BE4B8ADE5BA8FE5BA8FE58897E5928CE5908EE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BBBBE4B880E7BB93E782B9E59D87E697A0E58FB3E5ADA9E5AD90E79A84E99D9EE7A9BAE4BA8CE58F89E6A091EFBC9BE5898DE5BA8FE5BA8FE58897E5928CE5908EE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BB85E69C89E4B880E4B8AAE7BB93E782B9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('614', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE58187E8AEBEE68891E4BBACE69C89E4B880E4B8AAE58C85E590ABE580BCE79A8476616C7565E5928CE68C87E59091E4B8A4E4B8AAE5AD90E7BB93E782B9E79A846C656674E5928C7269676874E79A84E6A091E7BB93E782B9E7BB93E69E84E38082E68891E4BBACE58FAFE4BBA5E58699E587BAE8BF99E6A0B7E79A84E8BF87E7A88BEFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('615', 0xE5AD98E582A8E7BB93E69E84EFBC9A0A7669736974286E6F6465290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('616', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE8BF99E6A0B7E4BC9AE794A8E5898DE5BA8FE68993E58DB0E587BAE6A091E4B8ADE79A84E580BCE38082E59CA8E5898DE5BA8FEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5AE83E79A84E5AD90E7BB93E782B9E4B98BE5898DE8AEBFE997AEE38082E7B1BBE4BCBCE59CB0EFBC8CE5A682E69E9CE68993E58DB0E8AFADE58FA5E59CA8E69C80E5908EEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE4BB96E79A84E5AD90E88A82E782B9E4B98BE5908EE8AEBFE997AEEFBC8CE6A091E4B8ADE79A84E580BCE4BC9AE794A8E5908EE5BA8FE69DA5E68993E58DB0E38082E59CA8E8BF99E4B8A4E7A78DE68385E586B5E4B8ADEFBC8CE5B7A6E5AD90E6A091E4B8ADE79A84E580BCE6AF94E58FB3E5AD90E6A091E4B8ADE5BE97E580BCE58588E68993E58DB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('617', 0xE5AD98E582A8E7BB93E69E84EFBC9A0A7669736974286E6F6465290A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('618', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE69C80E5908EEFBC8CE4B88AE99DA2E79A84E4B8ADE5BA8FE9818DE58E86EFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5B7A6E5AD90E6A091E5928CE58FB3E5AD90E6A091E4B98BE997B4E8AEBFE997AEE38082E8BF99E59CA8E9818DE58E86E4BA8CE58F89E6909CE7B4A2E6A091E697B6E5BE88E5B8B8E794A8EFBC8CE59BA0E4B8BAE5AE83E883BDE794A8E98092E5A29EE79A84E9A1BAE5BA8FE69DA5E9818DE58E86E68980E69C89E79A84E580BCE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('619', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('620', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E8BF99E4B8AAE4BA8CE58F89E6A091E4B8ADEFBC8C20E5898DE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20322C20362C20352C2031312C20352C20392C203420E5908EE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20352C2031312C20362C20372C20342C20392C20352C203220E4B8ADE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20352C20362C2031312C20322C20352C20342C2039, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('621', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE4BBA5E4B88AE79A84E98092E5BD92E7AE97E6B395E4BDBFE794A8E4B88EE6A091E79A84E9AB98E5BAA6E68890E6AF94E4BE8BE79A84E6A088E7A9BAE997B4E38082E5A682E69E9CE68891E4BBACE59CA8E6AF8FE4B8AAE7BB93E782B9E4B8ADE5AD98E582A8E68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288EFBC8CE982A3E6A0B7E58FAFE4BBA5E4BDBFE794A8E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC8CE58FAAE4BDBFE794A8E5B8B8E695B0E7A9BAE997B4E5AE9EE78EB0E68980E69C89E8BF99E4BA9BE9818DE58E86E38082E784B6E8808CEFBC8CE68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288E58DA0E794A8E69BB4E5A49AE79A84E7A9BAE997B4E38082E8BF99E58FAAE59CA8E99C80E8A681E68C87E59091E788B6E88A82E782B9E79A84E68C87E99288E68896E6A088E7A9BAE997B4E69C89E99990E697B6E6898DE4BDBFE794A8E38082E4BE8BE5A682EFBC8C20E8BF99E698AFE4B880E4B8AAE4B8ADE5BA8FE9818DE58E86E79A84E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('622', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('623', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE794A8E4BA8CE58F89E6A091E8A1A8E7A4BAE4B88BE8BFB0E8A1A8E8BEBEE5BC8FEFBC9A612B622A28632D64292D652F6620E58588E5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A2D2B612A622D63642F656620E4B8ADE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A612B622A632D642D652F6620E5908EE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A616263642D2A2B65662F2D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('624', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E6B7B1E5BAA6E4BC98E58588E7BAA7E4B8ADEFBC8CE68891E4BBACE5B88CE69C9BE4BB8EE6A0B9E7BB93E782B9E8AEBFE997AEE69C80E8BF9CE79A84E7BB93E782B9E38082E5928CE59BBEE79A84E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E4B88DE5908CE79A84E698AFEFBC8CE4B88DE99C80E8AEB0E4BD8FE8AEBFE997AEE8BF87E79A84E6AF8FE4B880E4B8AAE7BB93E782B9EFBC8CE59BA0E4B8BAE6A091E4B8ADE4B88DE4BC9AE69C89E78EAFE38082E5898DE5BA8FEFBC8CE4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E983BDE698AFE6B7B1E5BAA6E4BC98E58588E9818DE58E86E79A84E789B9E4BE8BE38082E58F82E8A781E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('625', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE5928CE6B7B1E5BAA6E4BC98E58588E9818DE58E86E4B88DE5908CEFBC8CE5B9BFE5BAA6E4BC98E58588E9818DE58E86E4BC9AE58588E8AEBFE997AEE7A6BBE6A0B9E88A82E782B9E69C80E8BF91E79A84E88A82E782B9E38082E58F82E8A781E5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E3808220E4BA8CE58F89E6A091E79A84E5B9BFE5BAA6E4BC98E58588E9818DE58E86E58F88E7A7B0E68C89E5B182E6ACA1E9818DE58E86E38082E7AE97E6B395E5809FE58AA9E9989FE58897E5AE9EE78EB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('626', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE4B880E888ACE69C89E5BA8FE6A091E5928CE4BA8CE58F89E6A091E4B98BE997B4E69C89E4B880E4B880E698A0E5B084E585B3E7B3BBEFBC8CE883BDE8BF9BE8A18CE79BB8E4BA92E8BDACE68DA2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('627', 0xE5AD98E582A8E7BB93E69E84EFBC9A0A6EE58F89E6A091E8BDACE68DA2E4B8BAE4BA8CE58F89E6A091E79A84E696B9E6B395EFBC9AE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9EFBC9BE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E58FB3E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E7ACACE4B880E4B8AAE58FB3E8BEB9E79A84E5908CE7BAA7E7BB93E782B979E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('628', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE4BE8BE5A682EFBC8CE59CA8E5B7A6E8BEB9E79A84E6A091E4B8ADEFBC8C41E69C8936E4B8AAE5AD90E7BB93E782B97B422C432C442C452C462C477DE38082E5AE83E883BDE8A2ABE8BDACE68DA2E68890E58FB3E8BEB9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('629', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E58584E5BC9FE4B98BE997B4E58AA0E4B880E8BF9EE68EA5EFBC9B20E5AFB9E6AF8FE4B8AAE7BB93E782B9EFBC8CE999A4E4BA86E585B6E5B7A6E5ADA9E5AD90E5A496EFBC8CE58EBBE999A4E585B6E4B88EE585B6E4BD99E5ADA9E5AD90E4B98BE997B4E79A84E88194E7B3BBEFBC9B20E4BBA5E6A091E79A84E6A0B9E7BB93E782B9E4B8BAE8BDB4E5BF83EFBC8CE5B086E695B4E6A091E9A1BAE697B6E99288E8BDAC3435E5BAA6E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('630', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E6A087E8AEB0E6B395EFBC88E5ADA9E5AD90E58584E5BC9FE6A087E8AEB0E6B395EFBC89E698AFE6A091E5928CE4BA8CE58F89E6A091E8BDACE68DA2E79A84E5AA92E4BB8BE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:01', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('631', 0xE5AD98E582A8E7BB93E69E84EFBC9A0A2F2A20E6A091E79A84E4BA8CE58F89E993BEE8A1A828E5ADA9E5AD90E28094E58584E5BC9F29E5AD98E582A8E8A1A8E7A4BA202A2F0A2074797065646566207374727563742043534E6F64650A207B0A20202054456C656D5479706520646174613B0A2020207374727563742043534E6F6465202A66697273746368696C642C2A6E6578747369626C696E673B0A207D43534E6F64652C2A4353547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('632', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9C5BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('633', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('634', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE7BABFE7B4A2E4BA8CE58F89E6A091202874687265616465642062696E6172792074726565295BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('635', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('636', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E4B8ADE5BA8FE7BABFE7B4A2E6A091E689BEE7BB93E782B9E5908EE7BBA7E79A84E8A784E5BE8BE698AFEFBC9AE88BA5E585B6E58FB3E6A087E5BF97E4B8BA31EFBC8CE58899E58FB3E993BEE4B8BAE7BABFE7B4A2EFBC8CE68C87E7A4BAE585B6E5908EE7BBA7EFBC8CE590A6E58899E9818DE58E86E585B6E58FB3E5AD90E6A091E697B6E8AEBFE997AEE79A84E7ACACE4B880E4B8AAE7BB93E782B9EFBC88E58FB3E5AD90E6A091E69C80E5B7A6E4B88BE79A84E7BB93E782B9EFBC89E4B8BAE585B6E5908EE7BBA7EFBC9BE689BEE7BB93E782B9E5898DE9A9B1E79A84E8A784E5BE8BE698AFEFBC9AE88BA5E585B6E5B7A6E6A087E5BF97E4B8BA31EFBC8CE58899E5B7A6E993BEE4B8BAE7BABFE7B4A2EFBC8CE68C87E7A4BAE585B6E5898DE9A9B1EFBC8CE590A6E58899E9818DE58E86E5B7A6E5AD90E6A091E697B6E69C80E5908EE8AEBFE997AEE79A84E4B880E4B8AAE7BB93E782B9EFBC88E5B7A6E5AD90E6A091E4B8ADE69C80E58FB3E4B88BE79A84E7BB93E782B9EFBC89E4B8BAE585B6E5898DE9A9B1E3808220E59CA8E5908EE5BA8FE7BABFE7B4A2E6A091E4B8ADE689BEE588B0E7BB93E782B9E79A84E5908EE7BBA7E58886E4B889E7A78DE68385E586B5EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('637', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE88BA5E7BB93E782B9E698AFE4BA8CE58F89E6A091E79A84E6A0B9EFBC8CE58899E585B6E5908EE7BBA7E4B8BAE7A9BAEFBC9B20E88BA5E7BB93E782B9E698AFE585B6E58F8CE4BAB2E79A84E58FB3E5ADA9E5AD90EFBC8CE68896E698AFE585B6E58F8CE4BAB2E79A84E5B7A6E5ADA9E5AD90E4B894E585B6E58F8CE4BAB2E6B2A1E69C89E58FB3E5AD90E6A091EFBC8CE58899E585B6E5908EE7BBA7E58DB3E4B8BAE58F8CE4BAB2E7BB93E782B9EFBC9B20E88BA5E7BB93E782B9E698AFE585B6E58F8CE4BAB2E79A84E5B7A6E5ADA9E5AD90EFBC8CE4B894E585B6E58F8CE4BAB2E69C89E58FB3E5AD90E6A091EFBC8CE58899E585B6E5908EE7BBA7E4B8BAE58F8CE4BAB2E58FB3E5AD90E6A091E4B88AE68C89E5908EE5BA8FE9818DE58E86E58897E587BAE79A84E7ACACE4B880E4B8AAE7BB93E782B9E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('638', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE4BA8CE58F89E6A091E79A84E4BA8CE58F89E7BABFE7B4A2E5AD98E582A8E8A1A8E7A4BAEFBC9AE59CA8E7BABFE7B4A2E993BEE8A1A8E4B88AE6B7BBE58AA0E4B880E4B8AAE5A4B4E7BB93E782B9EFBC8CE5B9B6E4BBA4E585B66C6368696C64E59F9FE79A84E68C87E99288E68C87E59091E4BA8CE58F89E6A091E79A84E6A0B9E7BB93E782B9EFBC8CE585B6726368696C64E59F9FE79A84E68C87E99288E68C87E59091E4B8ADE5BA8FE9818DE58E86E697B6E8AEBFE997AEE79A84E69C80E5908EE4B880E4B8AAE7BB93E782B9E38082E4BBA4E4BA8CE58F89E6A091E4B8ADE5BA8FE5BA8FE58897E4B8ADE79A84E7ACACE4B880E4B8AAE7BB93E782B9E79A846C6368696C64E59F9FE68C87E99288E5928CE69C80E5908EE4B880E4B8AAE7BB93E782B9E79A84726368696C64E59F9FE79A84E68C87E99288E59D87E68C87E59091E5A4B4E7BB93E782B9EFBC8CE8BF99E6A0B7E5B0B1E5889BE5BBBAE4BA86E4B880E4B8AAE58F8CE59091E7BABFE7B4A2E993BEE8A1A8E38082E4BA8CE58F89E6A091E5B8B8E98787E794A8E4BA8CE58F89E993BEE8A1A8E696B9E5BC8FE5AD98E582A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('639', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('640', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('641', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE68891E4BBACE7BB8FE5B8B8E5B88CE69C9BE8AEBFE997AEE6A091E4B8ADE79A84E6AF8FE4B880E4B8AAE7BB93E782B9E5B9B6E4B894E69FA5E79C8BE5AE83E79A84E580BCE38082E69C89E5BE88E5A49AE5B8B8E8A781E79A84E9A1BAE5BA8FE69DA5E8AEBFE997AEE68980E69C89E79A84E7BB93E782B9EFBC8CE8808CE4B894E6AF8FE4B880E7A78DE983BDE69C89E69C89E794A8E79A84E680A7E8B4A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('642', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE9818DE58E86E4BA8CE58F89E6A091EFBC9A4CE3808144E3808152E58886E588ABE8A1A8E7A4BAE9818DE58E86E5B7A6E5AD90E6A091E38081E8AEBFE997AEE6A0B9E7BB93E782B9E5928CE9818DE58E86E58FB3E5AD90E6A091EFBC8CE58899E5858828E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF444C52EFBC8CE4B8AD28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C4452EFBC8CE5908E28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C5244E38082E8BF98E69C89E68C89E5B182E9818DE58E86E4BA8CE58F89E6A091E38082E8BF99E4BA9BE696B9E6B395E79A84E697B6E997B4E5A48DE69D82E5BAA6E983BDE698AF4F286E29EFBC8C6EE4B8BAE7BB93E782B9E4B8AAE695B0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('643', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE5A682E69E9C5432E698AFE794B1E69C89E5BA8FE6A09154E8BDACE68DA2E8808CE69DA5E79A84E4BA8CE58F89E6A091EFBC8CE982A3E4B98854E4B8ADE7BB93E782B9E79A84E5898DE5BA8FE5B0B1E698AF5432E4B8ADE7BB93E782B9E79A84E5898DE5BA8FEFBC8C54E4B8ADE7BB93E782B9E79A84E5908EE5BA8FE5B0B1E698AF5432E4B8ADE7BB93E782B9E79A84E4B8ADE5BA8FE38082E4BBBBE4BD95E4B880E6A3B5E4BA8CE58F89E6A091E79A84E58FB6E7BB93E782B9E59CA8E58588E5BA8FE38081E4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E4B8ADE79A84E79BB8E5AFB9E6ACA1E5BA8FE4B88DE58F91E694B9E58F98E38082E8AEBE6E2C6DE4B8BAE4B880E6A3B5E4BA8CE58F89E6A091E4B88AE79A84E4B8A4E4B8AAE7BB93E782B9EFBC8CE59CA8E4B8ADE5BA8FE9818DE58E86E697B6EFBC8C6EE59CA86DE5898DE79A84E69DA1E4BBB6E698AF6EE59CA86DE79A84E5B7A6E696B9E38082E5898DE5BA8FE5BA8FE58897E5928CE4B8ADE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BBBBE4B880E7BB93E782B9E59D87E697A0E5B7A6E5ADA9E5AD90E79A84E99D9EE7A9BAE4BA8CE58F89E6A091EFBC9BE4B8ADE5BA8FE5BA8FE58897E5928CE5908EE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BBBBE4B880E7BB93E782B9E59D87E697A0E58FB3E5ADA9E5AD90E79A84E99D9EE7A9BAE4BA8CE58F89E6A091EFBC9BE5898DE5BA8FE5BA8FE58897E5928CE5908EE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BB85E69C89E4B880E4B8AAE7BB93E782B9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('644', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE58187E8AEBEE68891E4BBACE69C89E4B880E4B8AAE58C85E590ABE580BCE79A8476616C7565E5928CE68C87E59091E4B8A4E4B8AAE5AD90E7BB93E782B9E79A846C656674E5928C7269676874E79A84E6A091E7BB93E782B9E7BB93E69E84E38082E68891E4BBACE58FAFE4BBA5E58699E587BAE8BF99E6A0B7E79A84E8BF87E7A88BEFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('645', 0xE5AD98E582A8E7BB93E69E84EFBC9A0A7669736974286E6F6465290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('646', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE8BF99E6A0B7E4BC9AE794A8E5898DE5BA8FE68993E58DB0E587BAE6A091E4B8ADE79A84E580BCE38082E59CA8E5898DE5BA8FEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5AE83E79A84E5AD90E7BB93E782B9E4B98BE5898DE8AEBFE997AEE38082E7B1BBE4BCBCE59CB0EFBC8CE5A682E69E9CE68993E58DB0E8AFADE58FA5E59CA8E69C80E5908EEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE4BB96E79A84E5AD90E88A82E782B9E4B98BE5908EE8AEBFE997AEEFBC8CE6A091E4B8ADE79A84E580BCE4BC9AE794A8E5908EE5BA8FE69DA5E68993E58DB0E38082E59CA8E8BF99E4B8A4E7A78DE68385E586B5E4B8ADEFBC8CE5B7A6E5AD90E6A091E4B8ADE79A84E580BCE6AF94E58FB3E5AD90E6A091E4B8ADE5BE97E580BCE58588E68993E58DB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('647', 0xE5AD98E582A8E7BB93E69E84EFBC9A0A7669736974286E6F6465290A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('648', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE69C80E5908EEFBC8CE4B88AE99DA2E79A84E4B8ADE5BA8FE9818DE58E86EFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5B7A6E5AD90E6A091E5928CE58FB3E5AD90E6A091E4B98BE997B4E8AEBFE997AEE38082E8BF99E59CA8E9818DE58E86E4BA8CE58F89E6909CE7B4A2E6A091E697B6E5BE88E5B8B8E794A8EFBC8CE59BA0E4B8BAE5AE83E883BDE794A8E98092E5A29EE79A84E9A1BAE5BA8FE69DA5E9818DE58E86E68980E69C89E79A84E580BCE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('649', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('650', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E8BF99E4B8AAE4BA8CE58F89E6A091E4B8ADEFBC8C20E5898DE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20322C20362C20352C2031312C20352C20392C203420E5908EE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20352C2031312C20362C20372C20342C20392C20352C203220E4B8ADE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20352C20362C2031312C20322C20352C20342C2039, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('651', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE4BBA5E4B88AE79A84E98092E5BD92E7AE97E6B395E4BDBFE794A8E4B88EE6A091E79A84E9AB98E5BAA6E68890E6AF94E4BE8BE79A84E6A088E7A9BAE997B4E38082E5A682E69E9CE68891E4BBACE59CA8E6AF8FE4B8AAE7BB93E782B9E4B8ADE5AD98E582A8E68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288EFBC8CE982A3E6A0B7E58FAFE4BBA5E4BDBFE794A8E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC8CE58FAAE4BDBFE794A8E5B8B8E695B0E7A9BAE997B4E5AE9EE78EB0E68980E69C89E8BF99E4BA9BE9818DE58E86E38082E784B6E8808CEFBC8CE68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288E58DA0E794A8E69BB4E5A49AE79A84E7A9BAE997B4E38082E8BF99E58FAAE59CA8E99C80E8A681E68C87E59091E788B6E88A82E782B9E79A84E68C87E99288E68896E6A088E7A9BAE997B4E69C89E99990E697B6E6898DE4BDBFE794A8E38082E4BE8BE5A682EFBC8C20E8BF99E698AFE4B880E4B8AAE4B8ADE5BA8FE9818DE58E86E79A84E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('652', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('653', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE794A8E4BA8CE58F89E6A091E8A1A8E7A4BAE4B88BE8BFB0E8A1A8E8BEBEE5BC8FEFBC9A612B622A28632D64292D652F6620E58588E5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A2D2B612A622D63642F656620E4B8ADE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A612B622A632D642D652F6620E5908EE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A616263642D2A2B65662F2D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:02', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('654', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E6B7B1E5BAA6E4BC98E58588E7BAA7E4B8ADEFBC8CE68891E4BBACE5B88CE69C9BE4BB8EE6A0B9E7BB93E782B9E8AEBFE997AEE69C80E8BF9CE79A84E7BB93E782B9E38082E5928CE59BBEE79A84E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E4B88DE5908CE79A84E698AFEFBC8CE4B88DE99C80E8AEB0E4BD8FE8AEBFE997AEE8BF87E79A84E6AF8FE4B880E4B8AAE7BB93E782B9EFBC8CE59BA0E4B8BAE6A091E4B8ADE4B88DE4BC9AE69C89E78EAFE38082E5898DE5BA8FEFBC8CE4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E983BDE698AFE6B7B1E5BAA6E4BC98E58588E9818DE58E86E79A84E789B9E4BE8BE38082E58F82E8A781E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('655', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE5928CE6B7B1E5BAA6E4BC98E58588E9818DE58E86E4B88DE5908CEFBC8CE5B9BFE5BAA6E4BC98E58588E9818DE58E86E4BC9AE58588E8AEBFE997AEE7A6BBE6A0B9E88A82E782B9E69C80E8BF91E79A84E88A82E782B9E38082E58F82E8A781E5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E3808220E4BA8CE58F89E6A091E79A84E5B9BFE5BAA6E4BC98E58588E9818DE58E86E58F88E7A7B0E68C89E5B182E6ACA1E9818DE58E86E38082E7AE97E6B395E5809FE58AA9E9989FE58897E5AE9EE78EB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('656', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE4B880E888ACE69C89E5BA8FE6A091E5928CE4BA8CE58F89E6A091E4B98BE997B4E69C89E4B880E4B880E698A0E5B084E585B3E7B3BBEFBC8CE883BDE8BF9BE8A18CE79BB8E4BA92E8BDACE68DA2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('657', 0xE5AD98E582A8E7BB93E69E84EFBC9A0A6EE58F89E6A091E8BDACE68DA2E4B8BAE4BA8CE58F89E6A091E79A84E696B9E6B395EFBC9AE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9EFBC9BE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E58FB3E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E7ACACE4B880E4B8AAE58FB3E8BEB9E79A84E5908CE7BAA7E7BB93E782B979E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('658', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE4BE8BE5A682EFBC8CE59CA8E5B7A6E8BEB9E79A84E6A091E4B8ADEFBC8C41E69C8936E4B8AAE5AD90E7BB93E782B97B422C432C442C452C462C477DE38082E5AE83E883BDE8A2ABE8BDACE68DA2E68890E58FB3E8BEB9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('659', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E58584E5BC9FE4B98BE997B4E58AA0E4B880E8BF9EE68EA5EFBC9B20E5AFB9E6AF8FE4B8AAE7BB93E782B9EFBC8CE999A4E4BA86E585B6E5B7A6E5ADA9E5AD90E5A496EFBC8CE58EBBE999A4E585B6E4B88EE585B6E4BD99E5ADA9E5AD90E4B98BE997B4E79A84E88194E7B3BBEFBC9B20E4BBA5E6A091E79A84E6A0B9E7BB93E782B9E4B8BAE8BDB4E5BF83EFBC8CE5B086E695B4E6A091E9A1BAE697B6E99288E8BDAC3435E5BAA6E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('660', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E6A087E8AEB0E6B395EFBC88E5ADA9E5AD90E58584E5BC9FE6A087E8AEB0E6B395EFBC89E698AFE6A091E5928CE4BA8CE58F89E6A091E8BDACE68DA2E79A84E5AA92E4BB8BE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('661', 0xE5AD98E582A8E7BB93E69E84EFBC9A0A2F2A20E6A091E79A84E4BA8CE58F89E993BEE8A1A828E5ADA9E5AD90E28094E58584E5BC9F29E5AD98E582A8E8A1A8E7A4BA202A2F0A2074797065646566207374727563742043534E6F64650A207B0A20202054456C656D5479706520646174613B0A2020207374727563742043534E6F6465202A66697273746368696C642C2A6E6578747369626C696E673B0A207D43534E6F64652C2A4353547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('662', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9C5BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('663', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59FBAE4BA8E432F432B2BE79A84E7AE97E6B395E5AE9EE78EB0E698BEE7A4BAE296BC20202F2A20E6A091E79A84E4BA8CE58F89E993BEE8A1A828E5ADA9E5AD90E28094E58584E5BC9F29E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9C283137E4B8AA29202A2F0A2023646566696E6520436C656172547265652044657374726F7954726565202F2A20E4BA8CE88085E6938DE4BD9CE79BB8E5908C202A2F0A2023696E636C7564652266756E63362D322E6322202F2A20E58C85E68BAC5072654F7264657254726176657273652829202A2F0A20766F696420496E69745472656528435354726565202A54290A207B202F2A20E6938DE4BD9CE7BB93E69E9CEFBC9AE69E84E980A0E7A9BAE6A09154202A2F0A2020202A543D4E554C4C3B0A207D0A2020766F69642044657374726F795472656528435354726565202A54290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE6A09154E5AD98E59CA8E38082E6938DE4BD9CE7BB93E69E9CEFBC9AE99480E6AF81E6A09154202A2F0A2020206966282A54290A2020207B0A2020202020696628282A54292D3E66697273746368696C6429202F2A2054E69C89E995BFE5AD90202A2F0A2020202020202044657374726F79547265652826282A54292D3E66697273746368696C64293B202F2A20E99480E6AF8154E79A84E995BFE5AD90E4B8BAE6A0B9E7BB93E782B9E79A84E5AD90E6A091202A2F0A2020202020696628282A54292D3E6E6578747369626C696E6729202F2A2054E69C89E4B88BE4B880E4B8AAE58584E5BC9F202A2F0A2020202020202044657374726F79547265652826282A54292D3E6E6578747369626C696E67293B202F2A20E99480E6AF8154E79A84E4B88BE4B880E4B8AAE58584E5BC9FE4B8BAE6A0B9E7BB93E782B9E79A84E5AD90E6A091202A2F0A202020202066726565282A54293B202F2A20E9878AE694BEE6A0B9E7BB93E782B9202A2F0A20202020202A543D4E554C4C3B0A2020207D0A207D0A202074797065646566204353547265652051456C656D547970653B202F2A20E5AE9AE4B989E4BCABE58897E58583E7B4A0E7B1BBE59E8B202A2F0A2023696E636C7564652263332D322E6822202F2A20E5AE9AE4B9894C696E6B5175657565E7B1BBE59E8B28E993BEE4BCABE5889729202A2F0A2023696E636C75646522626F332D322E6322202F2A204C696E6B5175657565E7B1BBE59E8BE79A84E59FBAE69CACE6938DE4BD9C202A2F0A20766F6964204372656174655472656528435354726565202A54290A207B202F2A20E69E84E980A0E6A09154202A2F0A2020206368617220635B32305D3B202F2A20E4B8B4E697B6E5AD98E694BEE5ADA9E5AD90E7BB93E782B928E8AEBEE4B88DE8B685E8BF873230E4B8AA29E79A84E580BC202A2F0A20202043535472656520702C70313B0A2020204C696E6B517565756520713B0A202020696E7420692C6C3B0A202020496E69745175657565282671293B0A2020207072696E74662822E8AFB7E8BE93E585A5E6A0B9E7BB93E782B928E5AD97E58583E59E8B2CE7A9BAE6A0BCE4B8BAE7A9BA293A2022293B0A2020207363616E6628222563252A63222C26635B305D293B0A202020696628635B305D213D4E696C29202F2A20E99D9EE7A9BAE6A091202A2F0A2020207B0A20202020202A543D28435354726565296D616C6C6F632873697A656F662843534E6F646529293B202F2A20E5BBBAE7AB8BE6A0B9E7BB93E782B9202A2F0A2020202020282A54292D3E646174613D635B305D3B0A2020202020282A54292D3E6E6578747369626C696E673D4E554C4C3B0A2020202020456E51756575652826712C2A54293B202F2A20E585A5E9989FE6A0B9E7BB93E782B9E79A84E68C87E99288202A2F0A20202020207768696C6528215175657565456D70747928712929202F2A20E9989FE4B88DE7A9BA202A2F0A20202020207B0A20202020202020446551756575652826712C2670293B202F2A20E587BAE9989FE4B880E4B8AAE7BB93E782B9E79A84E68C87E6A087202A2F0A202020202020207072696E74662822E8AFB7E68C89E995BFE5B9BCE9A1BAE5BA8FE8BE93E585A5E7BB93E782B92563E79A84E68980E69C89E5ADA9E5AD903A20222C702D3E64617461293B0A20202020202020676574732863293B0A202020202020206C3D7374726C656E2863293B0A202020202020206966286C3E3029202F2A20E69C89E5ADA9E5AD90202A2F0A202020202020207B0A20202020202020202070313D702D3E66697273746368696C643D28435354726565296D616C6C6F632873697A656F662843534E6F646529293B202F2A20E5BBBAE7AB8BE995BFE5AD90E7BB93E782B9202A2F0A20202020202020202070312D3E646174613D635B305D3B0A202020202020202020666F7228693D313B693C6C3B692B2B290A2020202020202020207B0A202020202020202020202070312D3E6E6578747369626C696E673D28435354726565296D616C6C6F632873697A656F662843534E6F646529293B202F2A20E5BBBAE7AB8BE4B88BE4B880E4B8AAE58584E5BC9FE7BB93E782B9202A2F0A2020202020202020202020456E51756575652826712C7031293B202F2A20E585A5E9989FE4B88AE4B880E4B8AAE7BB93E782B9202A2F0A202020202020202020202070313D70312D3E6E6578747369626C696E673B0A202020202020202020202070312D3E646174613D635B695D3B0A2020202020202020207D0A20202020202020202070312D3E6E6578747369626C696E673D4E554C4C3B0A202020202020202020456E51756575652826712C7031293B202F2A20E585A5E9989FE69C80E5908EE4B880E4B8AAE7BB93E782B9202A2F0A202020202020207D0A20202020202020656C73650A202020202020202020702D3E66697273746368696C643D4E554C4C3B202F2A20E995BFE5AD90E68C87E99288E4B8BAE7A9BA202A2F0A20202020207D0A2020207D0A202020656C73650A20202020202A543D4E554C4C3B202F2A20E7A9BAE6A091202A2F0A207D0A20205374617475732054726565456D707479284353547265652054290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE6A09154E5AD98E59CA8E38082E6938DE4BD9CE7BB93E69E9CEFBC9AE88BA554E4B8BAE7A9BAE6A091EFBC8CE58899E8BF94E59B9E54555245EFBC8CE590A6E58899E8BF94E59B9E46414C5345202A2F0A2020206966285429202F2A2054E4B88DE7A9BA202A2F0A202020202072657475726E2046414C53453B0A202020656C73650A202020202072657475726E20545255453B0A207D0A2020696E7420547265654465707468284353547265652054290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE6A09154E5AD98E59CA8E38082E6938DE4BD9CE7BB93E69E9CEFBC9AE8BF94E59B9E54E79A84E6B7B1E5BAA6202A2F0A20202043535472656520703B0A202020696E742064657074682C6D61783D303B0A202020696628215429202F2A20E6A091E7A9BA202A2F0A202020202072657475726E20303B0A20202069662821542D3E66697273746368696C6429202F2A20E6A091E697A0E995BFE5AD90202A2F0A202020202072657475726E20313B0A202020666F7228703D542D3E66697273746368696C643B703B703D702D3E6E6578747369626C696E67290A2020207B202F2A20E6B182E5AD90E6A091E6B7B1E5BAA6E79A84E69C80E5A4A7E580BC202A2F0A202020202064657074683D5472656544657074682870293B0A202020202069662864657074683E6D6178290A202020202020206D61783D64657074683B0A2020207D0A20202072657475726E206D61782B313B202F2A20E6A091E79A84E6B7B1E5BAA63DE5AD90E6A091E6B7B1E5BAA6E69C80E5A4A7E580BC2B31202A2F0A207D0A202054456C656D547970652056616C7565284353547265652070290A207B202F2A20E8BF94E59B9E70E68980E68C87E7BB93E782B9E79A84E580BC202A2F0A20202072657475726E20702D3E646174613B0A207D0A202054456C656D5479706520526F6F74284353547265652054290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE6A09154E5AD98E59CA8E38082E6938DE4BD9CE7BB93E69E9CEFBC9AE8BF94E59B9E54E79A84E6A0B9202A2F0A20202069662854290A202020202072657475726E2056616C75652854293B0A202020656C73650A202020202072657475726E204E696C3B0A207D0A202043535472656520506F696E742843535472656520542C54456C656D547970652073290A207B202F2A20E8BF94E59B9EE4BA8CE58F89E993BEE8A1A828E5ADA9E5AD90E28094E58584E5BC9F29E6A09154E4B8ADE68C87E59091E58583E7B4A0E580BCE4B8BA73E79A84E7BB93E782B9E79A84E68C87E6A087E38082E58FA6E58AA0202A2F0A2020204C696E6B517565756520713B0A20202051456C656D5479706520613B0A2020206966285429202F2A20E99D9EE7A9BAE6A091202A2F0A2020207B0A2020202020496E69745175657565282671293B202F2A20E5889DE5A78BE58C96E4BCABE58897202A2F0A2020202020456E51756575652826712C54293B202F2A20E6A0B9E7BB93E782B9E585A5E9989F202A2F0A20202020207768696C6528215175657565456D70747928712929202F2A20E9989FE4B88DE7A9BA202A2F0A20202020207B0A20202020202020446551756575652826712C2661293B202F2A20E587BAE9989F2CE4BCABE58897E58583E7B4A0E8B58BE7BB9961202A2F0A20202020202020696628612D3E646174613D3D73290A092072657475726E20613B0A20202020202020696628612D3E66697273746368696C6429202F2A20E69C89E995BFE5AD90202A2F0A202020202020202020456E51756575652826712C612D3E66697273746368696C64293B202F2A20E585A5E9989FE995BFE5AD90202A2F0A20202020202020696628612D3E6E6578747369626C696E6729202F2A20E69C89E4B88BE4B880E4B8AAE58584E5BC9F202A2F0A202020202020202020456E51756575652826712C612D3E6E6578747369626C696E67293B202F2A20E585A5E9989FE4B88BE4B880E4B8AAE58584E5BC9F202A2F0A20202020207D0A2020207D0A20202072657475726E204E554C4C3B0A207D0A20205374617475732041737369676E28435354726565202A542C54456C656D54797065206375725F652C54456C656D547970652076616C7565290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE6A09154E5AD98E59CA8EFBC8C6375725F65E698AFE6A09154E4B8ADE7BB93E782B9E79A84E580BCE38082E6938DE4BD9CE7BB93E69E9CEFBC9AE694B96375725F65E4B8BA76616C7565202A2F0A20202043535472656520703B0A2020206966282A5429202F2A20E99D9EE7A9BAE6A091202A2F0A2020207B0A2020202020703D506F696E74282A542C6375725F65293B202F2A2070E4B8BA6375725F65E79A84E68C87E99288202A2F0A20202020206966287029202F2A20E689BEE588B06375725F65202A2F0A20202020207B0A20202020202020702D3E646174613D76616C75653B202F2A20E8B58BE696B0E580BC202A2F0A2020202020202072657475726E204F4B3B0A20202020207D0A2020207D0A20202072657475726E204552524F523B202F2A20E6A091E7A9BAE68896E6B2A1E689BEE588B0202A2F0A207D0A202054456C656D5479706520506172656E742843535472656520542C54456C656D54797065206375725F65290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE6A09154E5AD98E59CA8EFBC8C6375725F65E698AF54E4B8ADE69F90E4B8AAE7BB93E782B9202A2F0A2020202F2A20E6938DE4BD9CE7BB93E69E9CEFBC9AE88BA56375725F65E698AF54E79A84E99D9EE6A0B9E7BB93E782B9EFBC8CE58899E8BF94E59B9EE5AE83E79A84E58F8CE4BAB2EFBC8CE590A6E58899E587BDE695B0E580BCE4B8BAEFBC82E7A9BAEFBC822A2F0A20202043535472656520702C743B0A2020204C696E6B517565756520713B0A202020496E69745175657565282671293B0A2020206966285429202F2A20E6A091E99D9EE7A9BA202A2F0A2020207B0A202020202069662856616C75652854293D3D6375725F6529202F2A20E6A0B9E7BB93E782B9E580BCE4B8BA6375725F65202A2F0A2020202020202072657475726E204E696C3B0A2020202020456E51756575652826712C54293B202F2A20E6A0B9E7BB93E782B9E585A5E9989F202A2F0A20202020207768696C6528215175657565456D707479287129290A20202020207B0A20202020202020446551756575652826712C2670293B0A20202020202020696628702D3E66697273746368696C6429202F2A2070E69C89E995BFE5AD90202A2F0A202020202020207B0A202020202020202020696628702D3E66697273746368696C642D3E646174613D3D6375725F6529202F2A20E995BFE5AD90E4B8BA6375725F65202A2F0A202020202020202020202072657475726E2056616C75652870293B202F2A20E8BF94E59B9EE58F8CE4BAB2202A2F0A202020202020202020743D703B202F2A20E58F8CE4BAB2E68C87E99288E8B58BE7BB9974202A2F0A202020202020202020703D702D3E66697273746368696C643B202F2A2070E68C87E59091E995BFE5AD90202A2F0A202020202020202020456E51756575652826712C70293B202F2A20E585A5E9989FE995BFE5AD90202A2F0A2020202020202020207768696C6528702D3E6E6578747369626C696E6729202F2A20E69C89E4B88BE4B880E4B8AAE58584E5BC9F202A2F0A2020202020202020207B0A2020202020202020202020703D702D3E6E6578747369626C696E673B202F2A2070E68C87E59091E4B88BE4B880E4B8AAE58584E5BC9F202A2F0A092069662856616C75652870293D3D6375725F6529202F2A20E4B88BE4B880E4B8AAE58584E5BC9FE4B8BA6375725F65202A2F0A092072657475726E2056616C75652874293B202F2A20E8BF94E59B9EE58F8CE4BAB2202A2F0A0920456E51756575652826712C70293B202F2A20E585A5E9989FE4B88BE4B880E4B8AAE58584E5BC9F202A2F0A09207D0A202020202020207D0A20202020207D0A2020207D0A20202072657475726E204E696C3B202F2A20E6A091E7A9BAE68896E6B2A1E689BEE588B06375725F65202A2F0A207D0A202054456C656D54797065204C6566744368696C642843535472656520542C54456C656D54797065206375725F65290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE6A09154E5AD98E59CA8EFBC8C6375725F65E698AF54E4B8ADE69F90E4B8AAE7BB93E782B9202A2F0A2020202F2A20E6938DE4BD9CE7BB93E69E9CEFBC9AE88BA56375725F65E698AF54E79A84E99D9EE58FB6E5AD90E7BB93E782B9EFBC8CE58899E8BF94E59B9EE5AE83E79A84E69C80E5B7A6E5ADA9E5AD90EFBC8CE590A6E58899E8BF94E59B9EEFBC82E7A9BAEFBC822A2F0A20202043535472656520663B0A202020663D506F696E7428542C6375725F65293B202F2A2066E68C87E59091E7BB93E782B96375725F65202A2F0A202020696628662626662D3E66697273746368696C6429202F2A20E689BEE588B0E7BB93E782B96375725F65E4B894E7BB93E782B96375725F65E69C89E995BFE5AD90202A2F0A202020202072657475726E20662D3E66697273746368696C642D3E646174613B0A202020656C73650A202020202072657475726E204E696C3B0A207D0A202054456C656D547970652052696768745369626C696E672843535472656520542C54456C656D54797065206375725F65290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE6A09154E5AD98E59CA8EFBC8C6375725F65E698AF54E4B8ADE69F90E4B8AAE7BB93E782B9202A2F0A2020202F2A20E6938DE4BD9CE7BB93E69E9CEFBC9AE88BA56375725F65E69C89E58FB3E58584E5BC9FEFBC8CE58899E8BF94E59B9EE5AE83E79A84E58FB3E58584E5BC9FEFBC8CE590A6E58899E8BF94E59B9EEFBC82E7A9BAEFBC822A2F0A20202043535472656520663B0A202020663D506F696E7428542C6375725F65293B202F2A2066E68C87E59091E7BB93E782B96375725F65202A2F0A202020696628662626662D3E6E6578747369626C696E6729202F2A20E689BEE588B0E7BB93E782B96375725F65E4B894E7BB93E782B96375725F65E69C89E58FB3E58584E5BC9F202A2F0A202020202072657475726E20662D3E6E6578747369626C696E672D3E646174613B0A202020656C73650A202020202072657475726E204E696C3B202F2A20E6A091E7A9BA202A2F0A207D0A202053746174757320496E736572744368696C6428435354726565202A542C43535472656520702C696E7420692C4353547265652063290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE6A09154E5AD98E59CA8EFBC8C70E68C87E5909154E4B8ADE69F90E4B8AAE7BB93E782B9EFBC8C31E289A669E289A670E68980E68C87E7BB93E782B9E79A84E5BAA62B31EFBC8CE99D9EE7A9BAE6A09163E4B88E54E4B88DE79BB8E4BAA4202A2F0A2020202F2A20E6938DE4BD9CE7BB93E69E9CEFBC9AE68F92E585A563E4B8BA54E4B8AD70E7BB93E782B9E79A84E7ACAC69E6A3B5E5AD90E6A091202A2F0A2020202F2A20E59BA0E4B8BA70E68980E68C87E7BB93E782B9E79A84E4BD8DE59D80E4B88DE4BC9AE694B9E58F98EFBC8CE6958570E4B88DE99C80E698AFE58F82E88083E7B1BBE59E8B202A2F0A202020696E74206A3B0A2020206966282A5429202F2A2054E4B88DE7A9BA202A2F0A2020207B0A2020202020696628693D3D3129202F2A20E68F92E585A563E4B8BA70E79A84E995BFE5AD90202A2F0A20202020207B0A20202020202020632D3E6E6578747369626C696E673D702D3E66697273746368696C643B202F2A2070E79A84E58E9FE995BFE5AD90E78EB0E698AF63E79A84E4B88BE4B880E4B8AAE58584E5BC9F2863E69CACE697A0E58584E5BC9F29202A2F0A20202020202020702D3E66697273746368696C643D633B0A20202020207D0A2020202020656C7365202F2A20E689BEE68F92E585A5E782B9202A2F0A20202020207B0A20202020202020703D702D3E66697273746368696C643B202F2A20E68C87E5909170E79A84E995BFE5AD90202A2F0A202020202020206A3D323B0A202020202020207768696C6528702626693E6A290A202020202020207B0A202020202020202020703D702D3E6E6578747369626C696E673B0A2020202020202020206A2B2B3B0A202020202020207D0A202020202020206966286A3D3D6929202F2A20E689BEE588B0E68F92E585A5E4BD8DE7BDAE202A2F0A202020202020207B0A202020202020202020632D3E6E6578747369626C696E673D702D3E6E6578747369626C696E673B0A202020202020202020702D3E6E6578747369626C696E673D633B0A202020202020207D0A20202020202020656C7365202F2A2070E58E9FE69C89E5ADA9E5AD90E695B0E5B08FE4BA8E692D31202A2F0A20202020202020202072657475726E204552524F523B0A20202020207D0A202020202072657475726E204F4B3B0A2020207D0A202020656C7365202F2A2054E7A9BA202A2F0A202020202072657475726E204552524F523B0A207D0A20205374617475732044656C6574654368696C6428435354726565202A542C43535472656520702C696E742069290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE6A09154E5AD98E59CA8EFBC8C70E68C87E5909154E4B8ADE69F90E4B8AAE7BB93E782B9EFBC8C31E289A669E289A670E68980E68C87E7BB93E782B9E79A84E5BAA6202A2F0A2020202F2A20E6938DE4BD9CE7BB93E69E9CEFBC9AE588A0E999A454E4B8AD70E68980E68C87E7BB93E782B9E79A84E7ACAC69E6A3B5E5AD90E6A091202A2F0A2020202F2A20E59BA0E4B8BA70E68980E68C87E7BB93E782B9E79A84E4BD8DE59D80E4B88DE4BC9AE694B9E58F98EFBC8CE6958570E4B88DE99C80E698AFE58F82E88083E7B1BBE59E8B202A2F0A20202043535472656520623B0A202020696E74206A3B0A2020206966282A5429202F2A2054E4B88DE7A9BA202A2F0A2020207B0A2020202020696628693D3D3129202F2A20E588A0E999A4E995BFE5AD90202A2F0A20202020207B0A20202020202020623D702D3E66697273746368696C643B0A20202020202020702D3E66697273746368696C643D622D3E6E6578747369626C696E673B202F2A2070E79A84E58E9FE6ACA1E5AD90E78EB0E698AFE995BFE5AD90202A2F0A20202020202020622D3E6E6578747369626C696E673D4E554C4C3B0A2020202020202044657374726F7954726565282662293B0A20202020207D0A2020202020656C7365202F2A20E588A0E999A4E99D9EE995BFE5AD90202A2F0A20202020207B0A20202020202020703D702D3E66697273746368696C643B202F2A2070E68C87E59091E995BFE5AD90202A2F0A202020202020206A3D323B0A202020202020207768696C6528702626693E6A290A202020202020207B0A202020202020202020703D702D3E6E6578747369626C696E673B0A2020202020202020206A2B2B3B0A202020202020207D0A202020202020206966286A3D3D6929202F2A20E689BEE588B0E7ACAC69E6A3B5E5AD90E6A091202A2F0A202020202020207B0A202020202020202020623D702D3E6E6578747369626C696E673B0A202020202020202020702D3E6E6578747369626C696E673D622D3E6E6578747369626C696E673B0A202020202020202020622D3E6E6578747369626C696E673D4E554C4C3B0A20202020202020202044657374726F7954726565282662293B0A202020202020207D0A20202020202020656C7365202F2A2070E58E9FE69C89E5ADA9E5AD90E695B0E5B08FE4BA8E69202A2F0A20202020202020202072657475726E204552524F523B0A20202020207D0A202020202072657475726E204F4B3B0A2020207D0A202020656C73650A202020202072657475726E204552524F523B0A207D0A2020766F696420506F73744F7264657254726176657273652843535472656520542C766F6964282A5669736974292854456C656D5479706529290A207B202F2A20E5908EE6A0B9E9818DE58E86E5ADA9E5AD90E28094E58584E5BC9FE4BA8CE58F89E993BEE8A1A8E7BB93E69E84E79A84E6A09154202A2F0A20202043535472656520703B0A20202069662854290A2020207B0A2020202020696628542D3E66697273746368696C6429202F2A20E69C89E995BFE5AD90202A2F0A20202020207B0A20202020202020506F73744F72646572547261766572736528542D3E66697273746368696C642C5669736974293B202F2A20E5908EE6A0B9E9818DE58E86E995BFE5AD90E5AD90E6A091202A2F0A20202020202020703D542D3E66697273746368696C642D3E6E6578747369626C696E673B202F2A2070E68C87E59091E995BFE5AD90E79A84E4B88BE4B880E4B8AAE58584E5BC9F202A2F0A202020202020207768696C652870290A202020202020207B0A202020202020202020506F73744F72646572547261766572736528702C5669736974293B202F2A20E5908EE6A0B9E9818DE58E86E4B88BE4B880E4B8AAE58584E5BC9FE5AD90E6A091202A2F0A202020202020202020703D702D3E6E6578747369626C696E673B202F2A2070E68C87E59091E5868DE4B88BE4B880E4B8AAE58584E5BC9F202A2F0A202020202020207D0A20202020207D0A202020202056697369742856616C7565285429293B202F2A20E69C80E5908EE8AEBFE997AEE6A0B9E7BB93E782B9202A2F0A2020207D0A207D0A2020766F6964204C6576656C4F7264657254726176657273652843535472656520542C766F6964282A5669736974292854456C656D5479706529290A207B202F2A20E5B182E5BA8FE9818DE58E86E5ADA9E5AD90E28094E58584E5BC9FE4BA8CE58F89E993BEE8A1A8E7BB93E69E84E79A84E6A09154202A2F0A20202043535472656520703B0A2020204C696E6B517565756520713B0A202020496E69745175657565282671293B0A20202069662854290A2020207B0A202020202056697369742856616C7565285429293B202F2A20E58588E8AEBFE997AEE6A0B9E7BB93E782B9202A2F0A2020202020456E51756575652826712C54293B202F2A20E585A5E9989FE6A0B9E7BB93E782B9E79A84E68C87E99288202A2F0A20202020207768696C6528215175657565456D70747928712929202F2A20E9989FE4B88DE7A9BA202A2F0A20202020207B0A20202020202020446551756575652826712C2670293B202F2A20E587BAE9989FE4B880E4B8AAE7BB93E782B9E79A84E68C87E6A087202A2F0A20202020202020696628702D3E66697273746368696C6429202F2A20E69C89E995BFE5AD90202A2F0A202020202020207B0A202020202020202020703D702D3E66697273746368696C643B0A20202020202020202056697369742856616C7565287029293B202F2A20E8AEBFE997AEE995BFE5AD90E7BB93E782B9202A2F0A202020202020202020456E51756575652826712C70293B202F2A20E585A5E9989FE995BFE5AD90E7BB93E782B9E79A84E68C87E99288202A2F0A2020202020202020207768696C6528702D3E6E6578747369626C696E6729202F2A20E69C89E4B88BE4B880E4B8AAE58584E5BC9F202A2F0A2020202020202020207B0A2020202020202020202020703D702D3E6E6578747369626C696E673B0A202020202020202020202056697369742856616C7565287029293B202F2A20E8AEBFE997AEE4B88BE4B880E4B8AAE58584E5BC9F202A2F0A2020202020202020202020456E51756575652826712C70293B202F2A20E585A5E9989FE58584E5BC9FE7BB93E782B9E79A84E68C87E99288202A2F0A2020202020202020207D0A202020202020207D0A20202020207D0A2020207D0A207D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('664', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE7BABFE7B4A2E4BA8CE58F89E6A091202874687265616465642062696E6172792074726565295BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('665', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('666', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E4B8ADE5BA8FE7BABFE7B4A2E6A091E689BEE7BB93E782B9E5908EE7BBA7E79A84E8A784E5BE8BE698AFEFBC9AE88BA5E585B6E58FB3E6A087E5BF97E4B8BA31EFBC8CE58899E58FB3E993BEE4B8BAE7BABFE7B4A2EFBC8CE68C87E7A4BAE585B6E5908EE7BBA7EFBC8CE590A6E58899E9818DE58E86E585B6E58FB3E5AD90E6A091E697B6E8AEBFE997AEE79A84E7ACACE4B880E4B8AAE7BB93E782B9EFBC88E58FB3E5AD90E6A091E69C80E5B7A6E4B88BE79A84E7BB93E782B9EFBC89E4B8BAE585B6E5908EE7BBA7EFBC9BE689BEE7BB93E782B9E5898DE9A9B1E79A84E8A784E5BE8BE698AFEFBC9AE88BA5E585B6E5B7A6E6A087E5BF97E4B8BA31EFBC8CE58899E5B7A6E993BEE4B8BAE7BABFE7B4A2EFBC8CE68C87E7A4BAE585B6E5898DE9A9B1EFBC8CE590A6E58899E9818DE58E86E5B7A6E5AD90E6A091E697B6E69C80E5908EE8AEBFE997AEE79A84E4B880E4B8AAE7BB93E782B9EFBC88E5B7A6E5AD90E6A091E4B8ADE69C80E58FB3E4B88BE79A84E7BB93E782B9EFBC89E4B8BAE585B6E5898DE9A9B1E3808220E59CA8E5908EE5BA8FE7BABFE7B4A2E6A091E4B8ADE689BEE588B0E7BB93E782B9E79A84E5908EE7BBA7E58886E4B889E7A78DE68385E586B5EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('667', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('668', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE4BA8CE58F89E6A091E79A84E4BA8CE58F89E7BABFE7B4A2E5AD98E582A8E8A1A8E7A4BAEFBC9AE59CA8E7BABFE7B4A2E993BEE8A1A8E4B88AE6B7BBE58AA0E4B880E4B8AAE5A4B4E7BB93E782B9EFBC8CE5B9B6E4BBA4E585B66C6368696C64E59F9FE79A84E68C87E99288E68C87E59091E4BA8CE58F89E6A091E79A84E6A0B9E7BB93E782B9EFBC8CE585B6726368696C64E59F9FE79A84E68C87E99288E68C87E59091E4B8ADE5BA8FE9818DE58E86E697B6E8AEBFE997AEE79A84E69C80E5908EE4B880E4B8AAE7BB93E782B9E38082E4BBA4E4BA8CE58F89E6A091E4B8ADE5BA8FE5BA8FE58897E4B8ADE79A84E7ACACE4B880E4B8AAE7BB93E782B9E79A846C6368696C64E59F9FE68C87E99288E5928CE69C80E5908EE4B880E4B8AAE7BB93E782B9E79A84726368696C64E59F9FE79A84E68C87E99288E59D87E68C87E59091E5A4B4E7BB93E782B9EFBC8CE8BF99E6A0B7E5B0B1E5889BE5BBBAE4BA86E4B880E4B8AAE58F8CE59091E7BABFE7B4A2E993BEE8A1A8E38082E4BA8CE58F89E6A091E5B8B8E98787E794A8E4BA8CE58F89E993BEE8A1A8E696B9E5BC8FE5AD98E582A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('669', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('670', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BAEFBC9A0AE59FBAE4BA8E432F432B2BE79A84E5AE9EE78EB0E7AE97E6B395E698BEE7A4BAE296BC20202F2A20E4BA8CE58F89E6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9C283232E4B8AA29202A2F0A2023646566696E6520436C6561724269547265652044657374726F79426954726565202F2A20E6B885E7A9BAE4BA8CE58F89E6A091E5928CE99480E6AF81E4BA8CE58F89E6A091E79A84E6938DE4BD9CE4B880E6A0B7202A2F0A2023696E636C7564652266756E63362D332E63220A202F2A20E58C85E68BAC496E69744269547265652829E3808144657374726F794269547265652829E380815072654F7264657254726176657273652829E5928C496E4F726465725472617665727365282934E587BDE695B0202A2F0A2020766F69642043726561746542695472656528426954726565202A54290A207B202F2A20E6BC94E7AE97E6B395362E34EFBC9AE68C89E58588E5BA8FE6ACA1E5BA8FE8BE93E585A5E4BA8CE58F89E6A091E4B8ADE7BB93E782B9E79A84E580BC28E58FAFE4B8BAE5AD97E58583E59E8BE68896E695B4E59E8BEFBC8CE59CA8E4B8BBE7A88BE4B8ADE5AE9AE4B98929EFBC8C2A2F0A2020202F2A20E69E84E980A0E4BA8CE58F89E993BEE8A1A8E8A1A8E7A4BAE79A84E4BA8CE58F89E6A09154E38082E58F98E695B04E696CE8A1A8E7A4BAE7A9BA28E5AD9029E6A091E38082E69C89E694B9E58AA8202A2F0A20202054456C656D547970652063683B0A2020207363616E6628666F726D2C266368293B0A20202069662863683D3D4E696C29202F2A20E7A9BA202A2F0A20202020202A543D4E554C4C3B0A202020656C73650A2020207B0A20202020202A543D28426954726565296D616C6C6F632873697A656F66284269544E6F646529293B202F2A20E7949FE68890E6A0B9E7BB93E782B9202A2F0A2020202020696628212A54290A2020202020202065786974284F564552464C4F57293B0A2020202020282A54292D3E646174613D63683B0A20202020204372656174654269547265652826282A54292D3E6C6368696C64293B202F2A20E69E84E980A0E5B7A6E5AD90E6A091202A2F0A20202020204372656174654269547265652826282A54292D3E726368696C64293B202F2A20E69E84E980A0E58FB3E5AD90E6A091202A2F0A2020207D0A207D0A202053746174757320426954726565456D707479284269547265652054290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE4BA8CE58F89E6A09154E5AD98E59CA8E38082E6938DE4BD9CE7BB93E69E9CEFBC9AE88BA554E4B8BAE7A9BAE4BA8CE58F89E6A091EFBC8CE58899E8BF94E59B9E54525545EFBC8CE590A6E5889946414C5345202A2F0A20202069662854290A202020202072657475726E2046414C53453B0A202020656C73650A202020202072657475726E20545255453B0A207D0A2020696E74204269547265654465707468284269547265652054290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE4BA8CE58F89E6A09154E5AD98E59CA8E38082E6938DE4BD9CE7BB93E69E9CEFBC9AE8BF94E59B9E54E79A84E6B7B1E5BAA6202A2F0A202020696E7420692C6A3B0A202020696628543D3D4E554C4C2920202F2AE5A682E69E9C543D4E554C4C2CE8BF99E6A0B7E58699E4BEBFE4BA8EE79086E8A7A3EFBC8CE5BD93E784B6E4B99FE58FAFE4BBA5E58699E688906966EFBC882154EFBC892A2F3B200A202020202072657475726E20303B202F2A20E7A9BAE6A091E6B7B1E5BAA6E4B8BA30202A2F0A202020696628542D3E6C6368696C64290A2020202020693D426954726565446570746828542D3E6C6368696C64293B202F2A2069E4B8BAE5B7A6E5AD90E6A091E79A84E6B7B1E5BAA6202A2F0A202020656C73650A2020202020693D303B0A202020696628542D3E726368696C64290A20202020206A3D426954726565446570746828542D3E726368696C64293B202F2A206AE4B8BAE58FB3E5AD90E6A091E79A84E6B7B1E5BAA6202A2F0A202020656C73650A20202020206A3D303B0A20202072657475726E20693E6A3F692B313A6A2B313B202F2A2054E79A84E6B7B1E5BAA6E4B8BAE585B6E5B7A6E58FB3E5AD90E6A091E79A84E6B7B1E5BAA6E4B8ADE79A84E5A4A7E880852B31202A2F0A207D0A202054456C656D5479706520526F6F74284269547265652054290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE4BA8CE58F89E6A09154E5AD98E59CA8E38082E6938DE4BD9CE7BB93E69E9CEFBC9AE8BF94E59B9E54E79A84E6A0B9202A2F0A202020696628426954726565456D707479285429290A202020202072657475726E204E696C3B0A202020656C73650A202020202072657475726E20542D3E646174613B0A207D0A202054456C656D547970652056616C7565284269547265652070290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE4BA8CE58F89E6A09154E5AD98E59CA8EFBC8C70E68C87E5909154E4B8ADE69F90E4B8AAE7BB93E782B9E38082E6938DE4BD9CE7BB93E69E9CEFBC9AE8BF94E59B9E70E68980E68C87E7BB93E782B9E79A84E580BC202A2F0A20202072657475726E20702D3E646174613B0A207D0A2020766F69642041737369676E2842695472656520702C54456C656D547970652076616C7565290A207B202F2A20E7BB9970E68980E68C87E7BB93E782B9E8B58BE580BCE4B8BA76616C7565202A2F0A202020702D3E646174613D76616C75653B0A207D0A202074797065646566204269547265652051456C656D547970653B202F2A20E8AEBEE4BCABE58897E58583E7B4A0E4B8BAE4BA8CE58F89E6A091E79A84E68C87E99288E7B1BBE59E8B202A2F0A2023696E636C7564652263332D322E6822202F2A20E993BEE4BCABE58897202A2F0A2023696E636C75646522626F332D322E6322202F2A20E993BEE4BCABE58897E79A84E59FBAE69CACE6938DE4BD9C202A2F0A2054456C656D5479706520506172656E742842695472656520542C54456C656D547970652065290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE4BA8CE58F89E6A09154E5AD98E59CA8EFBC8C65E698AF54E4B8ADE69F90E4B8AAE7BB93E782B9202A2F0A2020202F2A20E6938DE4BD9CE7BB93E69E9CEFBC9AE88BA565E698AF54E79A84E99D9EE6A0B9E7BB93E782B9EFBC8CE58899E8BF94E59B9EE5AE83E79A84E58F8CE4BAB2EFBC8CE590A6E58899E8BF94E59B9EEFBC82E7A9BAEFBC822A2F0A2020204C696E6B517565756520713B0A20202051456C656D5479706520613B0A2020206966285429202F2A20E99D9EE7A9BAE6A091202A2F0A2020207B0A2020202020496E69745175657565282671293B202F2A20E5889DE5A78BE58C96E4BCABE58897202A2F0A2020202020456E51756575652826712C54293B202F2A20E6A091E6A0B9E68C87E99288E585A5E9989F202A2F0A20202020207768696C6528215175657565456D70747928712929202F2A20E9989FE4B88DE7A9BA202A2F0A20202020207B0A20202020202020446551756575652826712C2661293B202F2A20E587BAE9989FEFBC8CE4BCABE58897E58583E7B4A0E8B58BE7BB9961202A2F0A20202020202020696628612D3E6C6368696C642626612D3E6C6368696C642D3E646174613D3D657C7C612D3E726368696C642626612D3E726368696C642D3E646174613D3D65290A202020202020202F2A20E689BEE588B06528E698AFE585B6E5B7A6E68896E58FB3E5ADA9E5AD9029202A2F0A20202020202020202072657475726E20612D3E646174613B202F2A20E8BF94E59B9E65E79A84E58F8CE4BAB2E79A84E580BC202A2F0A20202020202020656C7365202F2A20E6B2A1E689BEE588B065EFBC8CE58899E585A5E9989FE585B6E5B7A6E58FB3E5ADA9E5AD90E68C87E9928828E5A682E69E9CE99D9EE7A9BA29202A2F0A202020202020207B0A202020202020202020696628612D3E6C6368696C64290A2020202020202020202020456E51756575652826712C612D3E6C6368696C64293B0A202020202020202020696628612D3E726368696C64290A2020202020202020202020456E51756575652826712C612D3E726368696C64293B0A202020202020207D0A20202020207D0A2020207D0A20202072657475726E204E696C3B202F2A20E6A091E7A9BAE68896E6B2A1E689BEE588B065202A2F0A207D0A202042695472656520506F696E742842695472656520542C54456C656D547970652073290A207B202F2A20E8BF94E59B9EE4BA8CE58F89E6A09154E4B8ADE68C87E59091E58583E7B4A0E580BCE4B8BA73E79A84E7BB93E782B9E79A84E68C87E6A087E38082E58FA6E58AA0202A2F0A2020204C696E6B517565756520713B0A20202051456C656D5479706520613B0A2020206966285429202F2A20E99D9EE7A9BAE6A091202A2F0A2020207B0A2020202020496E69745175657565282671293B202F2A20E5889DE5A78BE58C96E4BCABE58897202A2F0A2020202020456E51756575652826712C54293B202F2A20E6A0B9E68C87E99288E585A5E9989F202A2F0A20202020207768696C6528215175657565456D70747928712929202F2A20E9989FE4B88DE7A9BA202A2F0A20202020207B0A20202020202020446551756575652826712C2661293B202F2A20E587BAE9989FEFBC8CE4BCABE58897E58583E7B4A0E8B58BE7BB9961202A2F0A20202020202020696628612D3E646174613D3D73290A20202020202020202072657475726E20613B0A20202020202020696628612D3E6C6368696C6429202F2A20E69C89E5B7A6E5ADA9E5AD90202A2F0A202020202020202020456E51756575652826712C612D3E6C6368696C64293B202F2A20E585A5E9989FE5B7A6E5ADA9E5AD90202A2F0A20202020202020696628612D3E726368696C6429202F2A20E69C89E58FB3E5ADA9E5AD90202A2F0A202020202020202020456E51756575652826712C612D3E726368696C64293B202F2A20E585A5E9989FE58FB3E5ADA9E5AD90202A2F0A20202020207D0A2020207D0A20202072657475726E204E554C4C3B0A207D0A202054456C656D54797065204C6566744368696C642842695472656520542C54456C656D547970652065290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE4BA8CE58F89E6A09154E5AD98E59CA8EFBC8C65E698AF54E4B8ADE69F90E4B8AAE7BB93E782B9E38082E6938DE4BD9CE7BB93E69E9CEFBC9AE8BF94E59B9E65E79A84E5B7A6E5ADA9E5AD90E38082E88BA565E697A0E5B7A6E5ADA9E5AD902CE58899E8BF94E59B9E22E7A9BA22202A2F0A20202042695472656520613B0A2020206966285429202F2A20E99D9EE7A9BAE6A091202A2F0A2020207B0A2020202020613D506F696E7428542C65293B202F2A2061E698AFE7BB93E782B965E79A84E68C87E99288202A2F0A2020202020696628612626612D3E6C6368696C6429202F2A2054E4B8ADE5AD98E59CA8E7BB93E782B965E4B89465E5AD98E59CA8E5B7A6E5ADA9E5AD90202A2F0A2020202020202072657475726E20612D3E6C6368696C642D3E646174613B202F2A20E8BF94E59B9E65E79A84E5B7A6E5ADA9E5AD90E79A84E580BC202A2F0A2020207D0A20202072657475726E204E696C3B202F2A20E585B6E4BD99E68385E586B5E8BF94E59B9EE7A9BA202A2F0A207D0A202054456C656D547970652052696768744368696C642842695472656520542C54456C656D547970652065290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE4BA8CE58F89E6A09154E5AD98E59CA8EFBC8C65E698AF54E4B8ADE69F90E4B8AAE7BB93E782B9E38082E6938DE4BD9CE7BB93E69E9CEFBC9AE8BF94E59B9E65E79A84E58FB3E5ADA9E5AD90E38082E88BA565E697A0E58FB3E5ADA9E5AD902CE58899E8BF94E59B9E22E7A9BA22202A2F0A20202042695472656520613B0A2020206966285429202F2A20E99D9EE7A9BAE6A091202A2F0A2020207B0A2020202020613D506F696E7428542C65293B202F2A2061E698AFE7BB93E782B965E79A84E68C87E99288202A2F0A2020202020696628612626612D3E726368696C6429202F2A2054E4B8ADE5AD98E59CA8E7BB93E782B965E4B89465E5AD98E59CA8E58FB3E5ADA9E5AD90202A2F0A2020202020202072657475726E20612D3E726368696C642D3E646174613B202F2A20E8BF94E59B9E65E79A84E58FB3E5ADA9E5AD90E79A84E580BC202A2F0A2020207D0A20202072657475726E204E696C3B202F2A20E585B6E4BD99E68385E586B5E8BF94E59B9EE7A9BA202A2F0A207D0A202054456C656D54797065204C6566745369626C696E672842695472656520542C54456C656D547970652065290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE4BA8CE58F89E6A09154E5AD98E59CA8EFBC8C65E698AF54E4B8ADE69F90E4B8AAE7BB93E782B9202A2F0A2020202F2A20E6938DE4BD9CE7BB93E69E9CEFBC9AE8BF94E59B9E65E79A84E5B7A6E58584E5BC9FE38082E88BA565E698AF54E79A84E5B7A6E5ADA9E5AD90E68896E697A0E5B7A6E58584E5BC9FEFBC8CE58899E8BF94E59B9EEFBC82E7A9BAEFBC822A2F0A20202054456C656D5479706520613B0A20202042695472656520703B0A2020206966285429202F2A20E99D9EE7A9BAE6A091202A2F0A2020207B0A2020202020613D506172656E7428542C65293B202F2A2061E4B8BA65E79A84E58F8CE4BAB2202A2F0A202020202069662861213D4E696C29202F2A20E689BEE588B065E79A84E58F8CE4BAB2202A2F0A20202020207B0A20202020202020703D506F696E7428542C61293B202F2A2070E4B8BAE68C87E59091E7BB93E782B961E79A84E68C87E6A087202A2F0A20202020202020696628702D3E6C6368696C642626702D3E726368696C642626702D3E726368696C642D3E646174613D3D6529202F2A2070E5AD98E59CA8E5B7A6E58FB3E5ADA9E5AD90E4B894E58FB3E5ADA9E5AD90E698AF65202A2F0A20202020202020202072657475726E20702D3E6C6368696C642D3E646174613B202F2A20E8BF94E59B9E70E79A84E5B7A6E5ADA9E5AD902865E79A84E5B7A6E58584E5BC9F29202A2F0A20202020207D0A2020207D0A20202072657475726E204E696C3B202F2A20E585B6E4BD99E68385E586B5E8BF94E59B9EE7A9BA202A2F0A207D0A202054456C656D547970652052696768745369626C696E672842695472656520542C54456C656D547970652065290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE4BA8CE58F89E6A09154E5AD98E59CA8EFBC8C65E698AF54E4B8ADE69F90E4B8AAE7BB93E782B9202A2F0A2020202F2A20E6938DE4BD9CE7BB93E69E9CEFBC9AE8BF94E59B9E65E79A84E58FB3E58584E5BC9FE38082E88BA565E698AF54E79A84E58FB3E5ADA9E5AD90E68896E697A0E58FB3E58584E5BC9FEFBC8CE58899E8BF94E59B9EEFBC82E7A9BAEFBC822A2F0A20202054456C656D5479706520613B0A20202042695472656520703B0A2020206966285429202F2A20E99D9EE7A9BAE6A091202A2F0A2020207B0A2020202020613D506172656E7428542C65293B202F2A2061E4B8BA65E79A84E58F8CE4BAB2202A2F0A202020202069662861213D4E696C29202F2A20E689BEE588B065E79A84E58F8CE4BAB2202A2F0A20202020207B0A20202020202020703D506F696E7428542C61293B202F2A2070E4B8BAE68C87E59091E7BB93E782B961E79A84E68C87E6A087202A2F0A20202020202020696628702D3E6C6368696C642626702D3E726368696C642626702D3E6C6368696C642D3E646174613D3D6529202F2A2070E5AD98E59CA8E5B7A6E58FB3E5ADA9E5AD90E4B894E5B7A6E5ADA9E5AD90E698AF65202A2F0A20202020202020202072657475726E20702D3E726368696C642D3E646174613B202F2A20E8BF94E59B9E70E79A84E58FB3E5ADA9E5AD902865E79A84E58FB3E58584E5BC9F29202A2F0A20202020207D0A2020207D0A20202072657475726E204E696C3B202F2A20E585B6E4BD99E68385E586B5E8BF94E59B9EE7A9BA202A2F0A207D0A202053746174757320496E736572744368696C642842695472656520702C696E74204C522C426954726565206329202F2A20E5BDA2E58F8254E697A0E794A8202A2F0A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE4BA8CE58F89E6A09154E5AD98E59CA8EFBC8C70E68C87E5909154E4B8ADE69F90E4B8AAE7BB93E782B9EFBC8C4C52E4B8BA30E6889631EFBC8CE99D9EE7A9BAE4BA8CE58F89E6A09163E4B88E54E4B88DE79BB8E4BAA4E4B894E58FB3E5AD90E6A091E4B8BAE7A9BA202A2F0A2020202F2A20E6938DE4BD9CE7BB93E69E9CEFBC9AE6A0B9E68DAE4C52E4B8BA30E6889631EFBC8CE68F92E585A563E4B8BA54E4B8AD70E68980E68C87E7BB93E782B9E79A84E5B7A6E68896E58FB3E5AD90E6A091E3808270E68980E68C87E7BB93E782B9E79A84202A2F0A2020202F2A2020202020202020202020E58E9FE69C89E5B7A6E68896E58FB3E5AD90E6A091E58899E68890E4B8BA63E79A84E58FB3E5AD90E6A091202A2F0A2020206966287029202F2A2070E4B88DE7A9BA202A2F0A2020207B0A20202020206966284C523D3D30290A20202020207B0A20202020202020632D3E726368696C643D702D3E6C6368696C643B0A20202020202020702D3E6C6368696C643D633B0A20202020207D0A2020202020656C7365202F2A204C523D3D31202A2F0A20202020207B0A20202020202020632D3E726368696C643D702D3E726368696C643B0A20202020202020702D3E726368696C643D633B0A20202020207D0A202020202072657475726E204F4B3B0A2020207D0A20202072657475726E204552524F523B202F2A2070E7A9BA202A2F0A207D0A20205374617475732044656C6574654368696C642842695472656520702C696E74204C5229202F2A20E5BDA2E58F8254E697A0E794A8202A2F0A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE4BA8CE58F89E6A09154E5AD98E59CA8EFBC8C70E68C87E5909154E4B8ADE69F90E4B8AAE7BB93E782B9EFBC8C4C52E4B8BA30E6889631202A2F0A2020202F2A20E6938DE4BD9CE7BB93E69E9CEFBC9AE6A0B9E68DAE4C52E4B8BA30E6889631EFBC8CE588A0E999A454E4B8AD70E68980E68C87E7BB93E782B9E79A84E5B7A6E68896E58FB3E5AD90E6A091202A2F0A2020206966287029202F2A2070E4B88DE7A9BA202A2F0A2020207B0A20202020206966284C523D3D3029202F2A20E588A0E999A4E5B7A6E5AD90E6A091202A2F0A20202020202020436C6561724269547265652826702D3E6C6368696C64293B0A2020202020656C7365202F2A20E588A0E999A4E58FB3E5AD90E6A091202A2F0A20202020202020436C6561724269547265652826702D3E726368696C64293B0A202020202072657475726E204F4B3B0A2020207D0A20202072657475726E204552524F523B202F2A2070E7A9BA202A2F0A207D0A202074797065646566204269547265652053456C656D547970653B202F2A20E8AEBEE6A088E58583E7B4A0E4B8BAE4BA8CE58F89E6A091E79A84E68C87E99288E7B1BBE59E8B202A2F0A2023696E636C7564652263332D312E6822202F2A20E9A1BAE5BA8FE6A088202A2F0A2023696E636C75646522626F332D312E6322202F2A20E9A1BAE5BA8FE6A088E79A84E59FBAE69CACE6938DE4BD9C202A2F0A20766F696420496E4F726465725472617665727365312842695472656520542C766F6964282A5669736974292854456C656D5479706529290A207B202F2A20E98787E794A8E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E7BB93E69E84EFBC8C5669736974E698AFE5AFB9E8B584E69699E58583E7B4A0E6938DE4BD9CE79A84E5BA94E794A8E587BDE695B0E38082E6BC94E7AE97E6B395362E33EFBC8CE69C89E694B9E58AA8202A2F0A2020202F2A20E4B8ADE5BA8FE9818DE58E86E4BA8CE58F89E6A09154E79A84E99D9EE98092E59B9EE6BC94E7AE97E6B39528E588A9E794A8E6A08829EFBC8CE5AFB9E6AF8FE4B8AAE8B584E69699E58583E7B4A0E8B083E794A8E587BDE695B05669736974202A2F0A2020205371537461636B20533B0A202020496E6974537461636B282653293B0A2020207768696C6528547C7C21537461636B456D707479285329290A2020207B0A202020202069662854290A20202020207B202F2A20E6A0B9E68C87E99288E8BF9BE6A088EFBC8CE9818DE58E86E5B7A6E5AD90E6A091202A2F0A20202020202020507573682826532C54293B0A20202020202020543D542D3E6C6368696C643B0A20202020207D0A2020202020656C73650A20202020207B202F2A20E6A0B9E68C87E99288E98080E6A088EFBC8CE8AEBFE997AEE6A0B9E7BB93E782B9EFBC8CE9818DE58E86E58FB3E5AD90E6A091202A2F0A20202020202020506F702826532C2654293B0A20202020202020566973697428542D3E64617461293B0A20202020202020543D542D3E726368696C643B0A20202020207D0A2020207D0A2020207072696E746628225C6E22293B0A207D0A2020766F696420496E4F726465725472617665727365322842695472656520542C766F6964282A5669736974292854456C656D5479706529290A207B202F2A20E98787E794A8E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E7BB93E69E84EFBC8C5669736974E698AFE5AFB9E8B584E69699E58583E7B4A0E6938DE4BD9CE79A84E5BA94E794A8E587BDE695B0E38082E6BC94E7AE97E6B395362E32EFBC8CE69C89E694B9E58AA8202A2F0A2020202F2A20E4B8ADE5BA8FE9818DE58E86E4BA8CE58F89E6A09154E79A84E99D9EE98092E59B9EE6BC94E7AE97E6B39528E588A9E794A8E6A08829EFBC8CE5AFB9E6AF8FE4B8AAE8B584E69699E58583E7B4A0E8B083E794A8E587BDE695B05669736974202A2F0A2020205371537461636B20533B0A20202042695472656520703B0A202020496E6974537461636B282653293B0A202020507573682826532C54293B202F2A20E6A0B9E68C87E99288E8BF9BE6A088202A2F0A2020207768696C652821537461636B456D707479285329290A2020207B0A20202020207768696C6528476574546F7028532C267029262670290A20202020202020507573682826532C702D3E6C6368696C64293B202F2A20E59091E5B7A6E8B5B0E588B0E5B0BDE5A4B4202A2F0A2020202020506F702826532C2670293B202F2A20E7A9BAE68C87E99288E98080E6A088202A2F0A202020202069662821537461636B456D707479285329290A20202020207B202F2A20E8AEBFE997AEE7BB93E782B9EFBC8CE59091E58FB3E4B880E6ADA5202A2F0A20202020202020506F702826532C2670293B0A20202020202020566973697428702D3E64617461293B0A20202020202020507573682826532C702D3E726368696C64293B0A20202020207D0A2020207D0A2020207072696E746628225C6E22293B0A207D0A2020766F696420506F73744F7264657254726176657273652842695472656520542C766F6964282A5669736974292854456C656D5479706529290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE4BA8CE58F89E6A09154E5AD98E59CA8EFBC8C5669736974E698AFE5AFB9E7BB93E782B9E6938DE4BD9CE79A84E5BA94E794A8E587BDE695B0202A2F0A2020202F2A20E6938DE4BD9CE7BB93E69E9CEFBC9AE5908EE5BA8FE98092E59B9EE9818DE58E8654EFBC8CE5AFB9E6AF8FE4B8AAE7BB93E782B9E8B083E794A8E587BDE695B05669736974E4B880E6ACA1E4B894E4BB85E4B880E6ACA1202A2F0A2020206966285429202F2A2054E4B88DE7A9BA202A2F0A2020207B0A2020202020506F73744F72646572547261766572736528542D3E6C6368696C642C5669736974293B202F2A20E58588E5908EE5BA8FE9818DE58E86E5B7A6E5AD90E6A091202A2F0A2020202020506F73744F72646572547261766572736528542D3E726368696C642C5669736974293B202F2A20E5868DE5908EE5BA8FE9818DE58E86E58FB3E5AD90E6A091202A2F0A2020202020566973697428542D3E64617461293B202F2A20E69C80E5908EE8AEBFE997AEE6A0B9E7BB93E782B9202A2F0A2020207D0A207D0A2020766F6964204C6576656C4F7264657254726176657273652842695472656520542C766F6964282A5669736974292854456C656D5479706529290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE4BA8CE58F89E6A09154E5AD98E59CA8EFBC8C5669736974E698AFE5AFB9E7BB93E782B9E6938DE4BD9CE79A84E5BA94E794A8E587BDE695B0202A2F0A2020202F2A20E6938DE4BD9CE7BB93E69E9CEFBC9AE5B182E5BA8FE98092E59B9EE9818DE58E865428E588A9E794A8E4BCABE5889729EFBC8CE5AFB9E6AF8FE4B8AAE7BB93E782B9E8B083E794A8E587BDE695B05669736974E4B880E6ACA1E4B894E4BB85E4B880E6ACA1202A2F0A2020204C696E6B517565756520713B0A20202051456C656D5479706520613B0A20202069662854290A2020207B0A2020202020496E69745175657565282671293B202F2A20E5889DE5A78BE58C96E4BCABE5889771202A2F0A2020202020456E51756575652826712C54293B202F2A20E6A0B9E68C87E99288E585A5E9989F202A2F0A20202020207768696C6528215175657565456D70747928712929202F2A20E4BCABE58897E4B88DE7A9BA202A2F0A20202020207B0A20202020202020446551756575652826712C2661293B202F2A20E587BAE9989FE58583E7B4A028E68C87E6A087292CE8B58BE7BB9961202A2F0A20202020202020566973697428612D3E64617461293B202F2A20E8AEBFE997AE61E68980E68C87E7BB93E782B9202A2F0A20202020202020696628612D3E6C6368696C64213D4E554C4C29202F2A2061E69C89E5B7A6E5ADA9E5AD90202A2F0A202020202020202020456E51756575652826712C612D3E6C6368696C64293B202F2A20E585A5E9989F61E79A84E5B7A6E5ADA9E5AD90202A2F0A20202020202020696628612D3E726368696C64213D4E554C4C29202F2A2061E69C89E58FB3E5ADA9E5AD90202A2F0A202020202020202020456E51756575652826712C612D3E726368696C64293B202F2A20E585A5E9989F61E79A84E58FB3E5ADA9E5AD90202A2F0A20202020207D0A20202020207072696E746628225C6E22293B0A2020207D0A207D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('671', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BAEFBC9A0AE694B9E8BF9BE4BA8EE4BA8CE58F89E993BEE8A1A8EFBC8CE5A29EE58AA0E788B6E88A82E782B9E79A84E68C87E5BC95EFBC8CE883BDE69BB4E5A5BDE59CB0E5AE9EE78EB0E88A82E782B9E997B4E79A84E8AEBFE997AEEFBC8CE4B88DE8BF87E7AE97E6B395E79BB8E5AFB9E5A48DE69D82E3808220E5BD93E4BA8CE58F89E6A091E794A8E4B889E58F89E993BEE8A1A8E8A1A8E7A4BAE697B6EFBC8CE69C894EE4B8AAE7BB93E782B9EFBC8CE5B0B1E4BC9AE69C894E2B32E4B8AAE7A9BAE68C87E99288E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('672', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BAEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4B889E58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A20747970656465662073747275637420426954504E6F64650A207B0A20202054456C656D5479706520646174613B0A20202073747275637420426954504E6F6465202A706172656E742C2A6C6368696C642C2A726368696C643B202F2A20E788B6E38081E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D426954504E6F64652C2A426950547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('673', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('674', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE68891E4BBACE7BB8FE5B8B8E5B88CE69C9BE8AEBFE997AEE6A091E4B8ADE79A84E6AF8FE4B880E4B8AAE7BB93E782B9E5B9B6E4B894E69FA5E79C8BE5AE83E79A84E580BCE38082E69C89E5BE88E5A49AE5B8B8E8A781E79A84E9A1BAE5BA8FE69DA5E8AEBFE997AEE68980E69C89E79A84E7BB93E782B9EFBC8CE8808CE4B894E6AF8FE4B880E7A78DE983BDE69C89E69C89E794A8E79A84E680A7E8B4A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('675', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE9818DE58E86E4BA8CE58F89E6A091EFBC9A4CE3808144E3808152E58886E588ABE8A1A8E7A4BAE9818DE58E86E5B7A6E5AD90E6A091E38081E8AEBFE997AEE6A0B9E7BB93E782B9E5928CE9818DE58E86E58FB3E5AD90E6A091EFBC8CE58899E5858828E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF444C52EFBC8CE4B8AD28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C4452EFBC8CE5908E28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C5244E38082E8BF98E69C89E68C89E5B182E9818DE58E86E4BA8CE58F89E6A091E38082E8BF99E4BA9BE696B9E6B395E79A84E697B6E997B4E5A48DE69D82E5BAA6E983BDE698AF4F286E29EFBC8C6EE4B8BAE7BB93E782B9E4B8AAE695B0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('676', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('677', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE58187E8AEBEE68891E4BBACE69C89E4B880E4B8AAE58C85E590ABE580BCE79A8476616C7565E5928CE68C87E59091E4B8A4E4B8AAE5AD90E7BB93E782B9E79A846C656674E5928C7269676874E79A84E6A091E7BB93E782B9E7BB93E69E84E38082E68891E4BBACE58FAFE4BBA5E58699E587BAE8BF99E6A0B7E79A84E8BF87E7A88BEFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:03', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('678', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0A7669736974286E6F6465290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('679', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE8BF99E6A0B7E4BC9AE794A8E5898DE5BA8FE68993E58DB0E587BAE6A091E4B8ADE79A84E580BCE38082E59CA8E5898DE5BA8FEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5AE83E79A84E5AD90E7BB93E782B9E4B98BE5898DE8AEBFE997AEE38082E7B1BBE4BCBCE59CB0EFBC8CE5A682E69E9CE68993E58DB0E8AFADE58FA5E59CA8E69C80E5908EEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE4BB96E79A84E5AD90E88A82E782B9E4B98BE5908EE8AEBFE997AEEFBC8CE6A091E4B8ADE79A84E580BCE4BC9AE794A8E5908EE5BA8FE69DA5E68993E58DB0E38082E59CA8E8BF99E4B8A4E7A78DE68385E586B5E4B8ADEFBC8CE5B7A6E5AD90E6A091E4B8ADE79A84E580BCE6AF94E58FB3E5AD90E6A091E4B8ADE5BE97E580BCE58588E68993E58DB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('680', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0A7669736974286E6F6465290A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('681', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE69C80E5908EEFBC8CE4B88AE99DA2E79A84E4B8ADE5BA8FE9818DE58E86EFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5B7A6E5AD90E6A091E5928CE58FB3E5AD90E6A091E4B98BE997B4E8AEBFE997AEE38082E8BF99E59CA8E9818DE58E86E4BA8CE58F89E6909CE7B4A2E6A091E697B6E5BE88E5B8B8E794A8EFBC8CE59BA0E4B8BAE5AE83E883BDE794A8E98092E5A29EE79A84E9A1BAE5BA8FE69DA5E9818DE58E86E68980E69C89E79A84E580BCE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('682', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE4B8BAE4BB80E4B988E591A2EFBC9FE5A682E69E9C6EE698AFE4BA8CE58F89E6909CE7B4A2E6A091E79A84E7BB93E782B9EFBC8CE982A3E4B9886EE79A84E5B7A6E5AD90E6A091E79A84E68980E69C89E7BB93E782B9E79A84E580BCE983BDE6AF946EE79A84E580BCE8A681E5B08FEFBC8CE8808CE4B8946EE79A84E58FB3E5AD90E6A091E79A84E68980E69C89E88A82E782B9E79A84E580BCE983BDE6AF946EE79A84E580BCE8A681E5A4A7E38082E59BA0E6ADA4EFBC8CE5A682E69E9CE68891E4BBACE9A1BAE5BA8FE9818DE58E86E5B7A6E5AD90E6A091EFBC8CE784B6E5908EE8AEBFE997AE6EEFBC8CE784B6E5908EE9A1BAE5BA8FE9818DE58E86E58FB3E5AD90E6A091E38082E68891E4BBACE5B0B1E5B7B2E7BB8FE5BEAAE5BA8FE8AEBFE997AEE4BA86E695B4E4B8AAE6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('683', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E8BF99E4B8AAE4BA8CE58F89E6A091E4B8ADEFBC8C20E5898DE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20322C20362C20352C2031312C20352C20392C203420E5908EE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20352C2031312C20362C20372C20342C20392C20352C203220E4B8ADE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20352C20362C2031312C20322C20352C20342C2039, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('684', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE4BBA5E4B88AE79A84E98092E5BD92E7AE97E6B395E4BDBFE794A8E4B88EE6A091E79A84E9AB98E5BAA6E68890E6AF94E4BE8BE79A84E6A088E7A9BAE997B4E38082E5A682E69E9CE68891E4BBACE59CA8E6AF8FE4B8AAE7BB93E782B9E4B8ADE5AD98E582A8E68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288EFBC8CE982A3E6A0B7E58FAFE4BBA5E4BDBFE794A8E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC8CE58FAAE4BDBFE794A8E5B8B8E695B0E7A9BAE997B4E5AE9EE78EB0E68980E69C89E8BF99E4BA9BE9818DE58E86E38082E784B6E8808CEFBC8CE68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288E58DA0E794A8E69BB4E5A49AE79A84E7A9BAE997B4E38082E8BF99E58FAAE59CA8E99C80E8A681E68C87E59091E788B6E88A82E782B9E79A84E68C87E99288E68896E6A088E7A9BAE997B4E69C89E99990E697B6E6898DE4BDBFE794A8E38082E4BE8BE5A682EFBC8C20E8BF99E698AFE4B880E4B8AAE4B8ADE5BA8FE9818DE58E86E79A84E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('685', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('686', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE794A8E4BA8CE58F89E6A091E8A1A8E7A4BAE4B88BE8BFB0E8A1A8E8BEBEE5BC8FEFBC9A612B622A28632D64292D652F6620E58588E5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A2D2B612A622D63642F656620E4B8ADE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A612B622A632D642D652F6620E5908EE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A616263642D2A2B65662F2D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('687', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E6B7B1E5BAA6E4BC98E58588E7BAA7E4B8ADEFBC8CE68891E4BBACE5B88CE69C9BE4BB8EE6A0B9E7BB93E782B9E8AEBFE997AEE69C80E8BF9CE79A84E7BB93E782B9E38082E5928CE59BBEE79A84E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E4B88DE5908CE79A84E698AFEFBC8CE4B88DE99C80E8AEB0E4BD8FE8AEBFE997AEE8BF87E79A84E6AF8FE4B880E4B8AAE7BB93E782B9EFBC8CE59BA0E4B8BAE6A091E4B8ADE4B88DE4BC9AE69C89E78EAFE38082E5898DE5BA8FEFBC8CE4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E983BDE698AFE6B7B1E5BAA6E4BC98E58588E9818DE58E86E79A84E789B9E4BE8BE38082E58F82E8A781E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('688', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE5928CE6B7B1E5BAA6E4BC98E58588E9818DE58E86E4B88DE5908CEFBC8CE5B9BFE5BAA6E4BC98E58588E9818DE58E86E4BC9AE58588E8AEBFE997AEE7A6BBE6A0B9E88A82E782B9E69C80E8BF91E79A84E88A82E782B9E38082E58F82E8A781E5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E3808220E4BA8CE58F89E6A091E79A84E5B9BFE5BAA6E4BC98E58588E9818DE58E86E58F88E7A7B0E68C89E5B182E6ACA1E9818DE58E86E38082E7AE97E6B395E5809FE58AA9E9989FE58897E5AE9EE78EB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('689', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE4B880E888ACE69C89E5BA8FE6A091E5928CE4BA8CE58F89E6A091E4B98BE997B4E69C89E4B880E4B880E698A0E5B084E585B3E7B3BBEFBC8CE883BDE8BF9BE8A18CE79BB8E4BA92E8BDACE68DA2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('690', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0A6EE58F89E6A091E8BDACE68DA2E4B8BAE4BA8CE58F89E6A091E79A84E696B9E6B395EFBC9AE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9EFBC9BE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E58FB3E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E7ACACE4B880E4B8AAE58FB3E8BEB9E79A84E5908CE7BAA7E7BB93E782B979E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('691', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE4BE8BE5A682EFBC8CE59CA8E5B7A6E8BEB9E79A84E6A091E4B8ADEFBC8C41E69C8936E4B8AAE5AD90E7BB93E782B97B422C432C442C452C462C477DE38082E5AE83E883BDE8A2ABE8BDACE68DA2E68890E58FB3E8BEB9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('692', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E58584E5BC9FE4B98BE997B4E58AA0E4B880E8BF9EE68EA5EFBC9B20E5AFB9E6AF8FE4B8AAE7BB93E782B9EFBC8CE999A4E4BA86E585B6E5B7A6E5ADA9E5AD90E5A496EFBC8CE58EBBE999A4E585B6E4B88EE585B6E4BD99E5ADA9E5AD90E4B98BE997B4E79A84E88194E7B3BBEFBC9B20E4BBA5E6A091E79A84E6A0B9E7BB93E782B9E4B8BAE8BDB4E5BF83EFBC8CE5B086E695B4E6A091E9A1BAE697B6E99288E8BDAC3435E5BAA6E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('693', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E6A087E8AEB0E6B395EFBC88E5ADA9E5AD90E58584E5BC9FE6A087E8AEB0E6B395EFBC89E698AFE6A091E5928CE4BA8CE58F89E6A091E8BDACE68DA2E79A84E5AA92E4BB8BE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('694', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E6A091E79A84E4BA8CE58F89E993BEE8A1A828E5ADA9E5AD90E28094E58584E5BC9F29E5AD98E582A8E8A1A8E7A4BA202A2F0A2074797065646566207374727563742043534E6F64650A207B0A20202054456C656D5479706520646174613B0A2020207374727563742043534E6F6465202A66697273746368696C642C2A6E6578747369626C696E673B0A207D43534E6F64652C2A4353547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('695', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9C5BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('696', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('697', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE7BABFE7B4A2E4BA8CE58F89E6A091202874687265616465642062696E6172792074726565295BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('698', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('699', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E4B8ADE5BA8FE7BABFE7B4A2E6A091E689BEE7BB93E782B9E5908EE7BBA7E79A84E8A784E5BE8BE698AFEFBC9AE88BA5E585B6E58FB3E6A087E5BF97E4B8BA31EFBC8CE58899E58FB3E993BEE4B8BAE7BABFE7B4A2EFBC8CE68C87E7A4BAE585B6E5908EE7BBA7EFBC8CE590A6E58899E9818DE58E86E585B6E58FB3E5AD90E6A091E697B6E8AEBFE997AEE79A84E7ACACE4B880E4B8AAE7BB93E782B9EFBC88E58FB3E5AD90E6A091E69C80E5B7A6E4B88BE79A84E7BB93E782B9EFBC89E4B8BAE585B6E5908EE7BBA7EFBC9BE689BEE7BB93E782B9E5898DE9A9B1E79A84E8A784E5BE8BE698AFEFBC9AE88BA5E585B6E5B7A6E6A087E5BF97E4B8BA31EFBC8CE58899E5B7A6E993BEE4B8BAE7BABFE7B4A2EFBC8CE68C87E7A4BAE585B6E5898DE9A9B1EFBC8CE590A6E58899E9818DE58E86E5B7A6E5AD90E6A091E697B6E69C80E5908EE8AEBFE997AEE79A84E4B880E4B8AAE7BB93E782B9EFBC88E5B7A6E5AD90E6A091E4B8ADE69C80E58FB3E4B88BE79A84E7BB93E782B9EFBC89E4B8BAE585B6E5898DE9A9B1E3808220E59CA8E5908EE5BA8FE7BABFE7B4A2E6A091E4B8ADE689BEE588B0E7BB93E782B9E79A84E5908EE7BBA7E58886E4B889E7A78DE68385E586B5EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('700', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('701', 0xE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9CEFBC9A0AE4BA8CE58F89E6A091E79A84E4BA8CE58F89E7BABFE7B4A2E5AD98E582A8E8A1A8E7A4BAEFBC9AE59CA8E7BABFE7B4A2E993BEE8A1A8E4B88AE6B7BBE58AA0E4B880E4B8AAE5A4B4E7BB93E782B9EFBC8CE5B9B6E4BBA4E585B66C6368696C64E59F9FE79A84E68C87E99288E68C87E59091E4BA8CE58F89E6A091E79A84E6A0B9E7BB93E782B9EFBC8CE585B6726368696C64E59F9FE79A84E68C87E99288E68C87E59091E4B8ADE5BA8FE9818DE58E86E697B6E8AEBFE997AEE79A84E69C80E5908EE4B880E4B8AAE7BB93E782B9E38082E4BBA4E4BA8CE58F89E6A091E4B8ADE5BA8FE5BA8FE58897E4B8ADE79A84E7ACACE4B880E4B8AAE7BB93E782B9E79A846C6368696C64E59F9FE68C87E99288E5928CE69C80E5908EE4B880E4B8AAE7BB93E782B9E79A84726368696C64E59F9FE79A84E68C87E99288E59D87E68C87E59091E5A4B4E7BB93E782B9EFBC8CE8BF99E6A0B7E5B0B1E5889BE5BBBAE4BA86E4B880E4B8AAE58F8CE59091E7BABFE7B4A2E993BEE8A1A8E38082E4BA8CE58F89E6A091E5B8B8E98787E794A8E4BA8CE58F89E993BEE8A1A8E696B9E5BC8FE5AD98E582A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('702', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:04', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('703', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('704', , 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('705', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E4BDBFE794A8E8AEB0E5BD95E68896E5AD98E582A8E599A8E59CB0E59D80E68C87E99288E79A84E7A88BE5BA8FE8AEBEE8AEA1E8AFADE8A880E4B8ADEFBC8CE4BA8CE58F89E6A091E9809AE5B8B8E794A8E6A091E7BB93E782B9E7BB93E69E84E69DA5E5AD98E582A8E38082E69C89E697B6E4B99FE58C85E590ABE68C87E59091E594AFE4B880E79A84E788B6E88A82E782B9E79A84E68C87E99288E38082E5A682E69E9CE4B880E4B8AAE7BB93E782B9E79A84E5AD90E7BB93E782B9E4B8AAE695B0E5B08FE4BA8E32EFBC8CE4B880E4BA9BE5AD90E7BB93E782B9E68C87E99288E58FAFE883BDE4B8BAE7A9BAE580BCEFBC8CE68896E88085E4B8BAE789B9E6AE8AE79A84E593A8E585B5E7BB93E782B9E3808220E4BDBFE794A8E993BEE8A1A8E883BDE981BFE5858DE9A1BAE5BA8FE5AD98E582A8E6B5AAE8B4B9E7A9BAE997B4E79A84E997AEE9A298EFBC8CE7AE97E6B395E5928CE7BB93E69E84E79BB8E5AFB9E7AE80E58D95EFBC8CE4BD86E4BDBFE794A8E4BA8CE58F89E993BEE8A1A8EFBC8CE794B1E4BA8EE7BCBAE4B98FE788B6E993BEE79A84E68C87E5BC95EFBC8CE59CA8E689BEE59B9EE788B6E88A82E782B9E697B6E99C80E8A681E9878DE696B0E689ABE68F8FE6A091E5BE97E79FA5E788B6E88A82E782B9E79A84E88A82E782B9E59CB0E59D80E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('706', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('707', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('708', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E4BDBFE794A8E8AEB0E5BD95E68896E5AD98E582A8E599A8E59CB0E59D80E68C87E99288E79A84E7A88BE5BA8FE8AEBEE8AEA1E8AFADE8A880E4B8ADEFBC8CE4BA8CE58F89E6A091E9809AE5B8B8E794A8E6A091E7BB93E782B9E7BB93E69E84E69DA5E5AD98E582A8E38082E69C89E697B6E4B99FE58C85E590ABE68C87E59091E594AFE4B880E79A84E788B6E88A82E782B9E79A84E68C87E99288E38082E5A682E69E9CE4B880E4B8AAE7BB93E782B9E79A84E5AD90E7BB93E782B9E4B8AAE695B0E5B08FE4BA8E32EFBC8CE4B880E4BA9BE5AD90E7BB93E782B9E68C87E99288E58FAFE883BDE4B8BAE7A9BAE580BCEFBC8CE68896E88085E4B8BAE789B9E6AE8AE79A84E593A8E585B5E7BB93E782B9E3808220E4BDBFE794A8E993BEE8A1A8E883BDE981BFE5858DE9A1BAE5BA8FE5AD98E582A8E6B5AAE8B4B9E7A9BAE997B4E79A84E997AEE9A298EFBC8CE7AE97E6B395E5928CE7BB93E69E84E79BB8E5AFB9E7AE80E58D95EFBC8CE4BD86E4BDBFE794A8E4BA8CE58F89E993BEE8A1A8EFBC8CE794B1E4BA8EE7BCBAE4B98FE788B6E993BEE79A84E68C87E5BC95EFBC8CE59CA8E689BEE59B9EE788B6E88A82E782B9E697B6E99C80E8A681E9878DE696B0E689ABE68F8FE6A091E5BE97E79FA5E788B6E88A82E782B9E79A84E88A82E782B9E59CB0E59D80E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('709', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('710', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('711', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E4BDBFE794A8E8AEB0E5BD95E68896E5AD98E582A8E599A8E59CB0E59D80E68C87E99288E79A84E7A88BE5BA8FE8AEBEE8AEA1E8AFADE8A880E4B8ADEFBC8CE4BA8CE58F89E6A091E9809AE5B8B8E794A8E6A091E7BB93E782B9E7BB93E69E84E69DA5E5AD98E582A8E38082E69C89E697B6E4B99FE58C85E590ABE68C87E59091E594AFE4B880E79A84E788B6E88A82E782B9E79A84E68C87E99288E38082E5A682E69E9CE4B880E4B8AAE7BB93E782B9E79A84E5AD90E7BB93E782B9E4B8AAE695B0E5B08FE4BA8E32EFBC8CE4B880E4BA9BE5AD90E7BB93E782B9E68C87E99288E58FAFE883BDE4B8BAE7A9BAE580BCEFBC8CE68896E88085E4B8BAE789B9E6AE8AE79A84E593A8E585B5E7BB93E782B9E3808220E4BDBFE794A8E993BEE8A1A8E883BDE981BFE5858DE9A1BAE5BA8FE5AD98E582A8E6B5AAE8B4B9E7A9BAE997B4E79A84E997AEE9A298EFBC8CE7AE97E6B395E5928CE7BB93E69E84E79BB8E5AFB9E7AE80E58D95EFBC8CE4BD86E4BDBFE794A8E4BA8CE58F89E993BEE8A1A8EFBC8CE794B1E4BA8EE7BCBAE4B98FE788B6E993BEE79A84E68C87E5BC95EFBC8CE59CA8E689BEE59B9EE788B6E88A82E782B9E697B6E99C80E8A681E9878DE696B0E689ABE68F8FE6A091E5BE97E79FA5E788B6E88A82E782B9E79A84E88A82E782B9E59CB0E59D80E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('712', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('713', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('714', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE59CA8E4BDBFE794A8E8AEB0E5BD95E68896E5AD98E582A8E599A8E59CB0E59D80E68C87E99288E79A84E7A88BE5BA8FE8AEBEE8AEA1E8AFADE8A880E4B8ADEFBC8CE4BA8CE58F89E6A091E9809AE5B8B8E794A8E6A091E7BB93E782B9E7BB93E69E84E69DA5E5AD98E582A8E38082E69C89E697B6E4B99FE58C85E590ABE68C87E59091E594AFE4B880E79A84E788B6E88A82E782B9E79A84E68C87E99288E38082E5A682E69E9CE4B880E4B8AAE7BB93E782B9E79A84E5AD90E7BB93E782B9E4B8AAE695B0E5B08FE4BA8E32EFBC8CE4B880E4BA9BE5AD90E7BB93E782B9E68C87E99288E58FAFE883BDE4B8BAE7A9BAE580BCEFBC8CE68896E88085E4B8BAE789B9E6AE8AE79A84E593A8E585B5E7BB93E782B9E3808220E4BDBFE794A8E993BEE8A1A8E883BDE981BFE5858DE9A1BAE5BA8FE5AD98E582A8E6B5AAE8B4B9E7A9BAE997B4E79A84E997AEE9A298EFBC8CE7AE97E6B395E5928CE7BB93E69E84E79BB8E5AFB9E7AE80E58D95EFBC8CE4BD86E4BDBFE794A8E4BA8CE58F89E993BEE8A1A8EFBC8CE794B1E4BA8EE7BCBAE4B98FE788B6E993BEE79A84E68C87E5BC95EFBC8CE59CA8E689BEE59B9EE788B6E88A82E782B9E697B6E99C80E8A681E9878DE696B0E689ABE68F8FE6A091E5BE97E79FA5E788B6E88A82E782B9E79A84E88A82E782B9E59CB0E59D80E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('715', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A207479706564656620737472756374204269544E6F64650A207B0A20202054456C656D5479706520646174613B0A202020737472756374204269544E6F6465202A6C6368696C642C2A726368696C643B202F2A20E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D4269544E6F64652C2A4269547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('716', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('717', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE694B9E8BF9BE4BA8EE4BA8CE58F89E993BEE8A1A8EFBC8CE5A29EE58AA0E788B6E88A82E782B9E79A84E68C87E5BC95EFBC8CE883BDE69BB4E5A5BDE59CB0E5AE9EE78EB0E88A82E782B9E997B4E79A84E8AEBFE997AEEFBC8CE4B88DE8BF87E7AE97E6B395E79BB8E5AFB9E5A48DE69D82E3808220E5BD93E4BA8CE58F89E6A091E794A8E4B889E58F89E993BEE8A1A8E8A1A8E7A4BAE697B6EFBC8CE69C894EE4B8AAE7BB93E782B9EFBC8CE5B0B1E4BC9AE69C894E2B32E4B8AAE7A9BAE68C87E99288E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('718', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4B889E58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A20747970656465662073747275637420426954504E6F64650A207B0A20202054456C656D5479706520646174613B0A20202073747275637420426954504E6F6465202A706172656E742C2A6C6368696C642C2A726368696C643B202F2A20E788B6E38081E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D426954504E6F64652C2A426950547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('719', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('720', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE68891E4BBACE7BB8FE5B8B8E5B88CE69C9BE8AEBFE997AEE6A091E4B8ADE79A84E6AF8FE4B880E4B8AAE7BB93E782B9E5B9B6E4B894E69FA5E79C8BE5AE83E79A84E580BCE38082E69C89E5BE88E5A49AE5B8B8E8A781E79A84E9A1BAE5BA8FE69DA5E8AEBFE997AEE68980E69C89E79A84E7BB93E782B9EFBC8CE8808CE4B894E6AF8FE4B880E7A78DE983BDE69C89E69C89E794A8E79A84E680A7E8B4A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('721', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE9818DE58E86E4BA8CE58F89E6A091EFBC9A4CE3808144E3808152E58886E588ABE8A1A8E7A4BAE9818DE58E86E5B7A6E5AD90E6A091E38081E8AEBFE997AEE6A0B9E7BB93E782B9E5928CE9818DE58E86E58FB3E5AD90E6A091EFBC8CE58899E5858828E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF444C52EFBC8CE4B8AD28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C4452EFBC8CE5908E28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C5244E38082E8BF98E69C89E68C89E5B182E9818DE58E86E4BA8CE58F89E6A091E38082E8BF99E4BA9BE696B9E6B395E79A84E697B6E997B4E5A48DE69D82E5BAA6E983BDE698AF4F286E29EFBC8C6EE4B8BAE7BB93E782B9E4B8AAE695B0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('722', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE5A682E69E9C5432E698AFE794B1E69C89E5BA8FE6A09154E8BDACE68DA2E8808CE69DA5E79A84E4BA8CE58F89E6A091EFBC8CE982A3E4B98854E4B8ADE7BB93E782B9E79A84E5898DE5BA8FE5B0B1E698AF5432E4B8ADE7BB93E782B9E79A84E5898DE5BA8FEFBC8C54E4B8ADE7BB93E782B9E79A84E5908EE5BA8FE5B0B1E698AF5432E4B8ADE7BB93E782B9E79A84E4B8ADE5BA8FE38082E4BBBBE4BD95E4B880E6A3B5E4BA8CE58F89E6A091E79A84E58FB6E7BB93E782B9E59CA8E58588E5BA8FE38081E4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E4B8ADE79A84E79BB8E5AFB9E6ACA1E5BA8FE4B88DE58F91E694B9E58F98E38082E8AEBE6E2C6DE4B8BAE4B880E6A3B5E4BA8CE58F89E6A091E4B88AE79A84E4B8A4E4B8AAE7BB93E782B9EFBC8CE59CA8E4B8ADE5BA8FE9818DE58E86E697B6EFBC8C6EE59CA86DE5898DE79A84E69DA1E4BBB6E698AF6EE59CA86DE79A84E5B7A6E696B9E38082E5898DE5BA8FE5BA8FE58897E5928CE4B8ADE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BBBBE4B880E7BB93E782B9E59D87E697A0E5B7A6E5ADA9E5AD90E79A84E99D9EE7A9BAE4BA8CE58F89E6A091EFBC9BE4B8ADE5BA8FE5BA8FE58897E5928CE5908EE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BBBBE4B880E7BB93E782B9E59D87E697A0E58FB3E5ADA9E5AD90E79A84E99D9EE7A9BAE4BA8CE58F89E6A091EFBC9BE5898DE5BA8FE5BA8FE58897E5928CE5908EE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BB85E69C89E4B880E4B8AAE7BB93E782B9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('723', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE58187E8AEBEE68891E4BBACE69C89E4B880E4B8AAE58C85E590ABE580BCE79A8476616C7565E5928CE68C87E59091E4B8A4E4B8AAE5AD90E7BB93E782B9E79A846C656674E5928C7269676874E79A84E6A091E7BB93E782B9E7BB93E69E84E38082E68891E4BBACE58FAFE4BBA5E58699E587BAE8BF99E6A0B7E79A84E8BF87E7A88BEFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('724', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A7669736974286E6F6465290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('725', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE8BF99E6A0B7E4BC9AE794A8E5898DE5BA8FE68993E58DB0E587BAE6A091E4B8ADE79A84E580BCE38082E59CA8E5898DE5BA8FEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5AE83E79A84E5AD90E7BB93E782B9E4B98BE5898DE8AEBFE997AEE38082E7B1BBE4BCBCE59CB0EFBC8CE5A682E69E9CE68993E58DB0E8AFADE58FA5E59CA8E69C80E5908EEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE4BB96E79A84E5AD90E88A82E782B9E4B98BE5908EE8AEBFE997AEEFBC8CE6A091E4B8ADE79A84E580BCE4BC9AE794A8E5908EE5BA8FE69DA5E68993E58DB0E38082E59CA8E8BF99E4B8A4E7A78DE68385E586B5E4B8ADEFBC8CE5B7A6E5AD90E6A091E4B8ADE79A84E580BCE6AF94E58FB3E5AD90E6A091E4B8ADE5BE97E580BCE58588E68993E58DB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('726', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A7669736974286E6F6465290A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('727', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE69C80E5908EEFBC8CE4B88AE99DA2E79A84E4B8ADE5BA8FE9818DE58E86EFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5B7A6E5AD90E6A091E5928CE58FB3E5AD90E6A091E4B98BE997B4E8AEBFE997AEE38082E8BF99E59CA8E9818DE58E86E4BA8CE58F89E6909CE7B4A2E6A091E697B6E5BE88E5B8B8E794A8EFBC8CE59BA0E4B8BAE5AE83E883BDE794A8E98092E5A29EE79A84E9A1BAE5BA8FE69DA5E9818DE58E86E68980E69C89E79A84E580BCE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:05', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('728', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4B8BAE4BB80E4B988E591A2EFBC9FE5A682E69E9C6EE698AFE4BA8CE58F89E6909CE7B4A2E6A091E79A84E7BB93E782B9EFBC8CE982A3E4B9886EE79A84E5B7A6E5AD90E6A091E79A84E68980E69C89E7BB93E782B9E79A84E580BCE983BDE6AF946EE79A84E580BCE8A681E5B08FEFBC8CE8808CE4B8946EE79A84E58FB3E5AD90E6A091E79A84E68980E69C89E88A82E782B9E79A84E580BCE983BDE6AF946EE79A84E580BCE8A681E5A4A7E38082E59BA0E6ADA4EFBC8CE5A682E69E9CE68891E4BBACE9A1BAE5BA8FE9818DE58E86E5B7A6E5AD90E6A091EFBC8CE784B6E5908EE8AEBFE997AE6EEFBC8CE784B6E5908EE9A1BAE5BA8FE9818DE58E86E58FB3E5AD90E6A091E38082E68891E4BBACE5B0B1E5B7B2E7BB8FE5BEAAE5BA8FE8AEBFE997AEE4BA86E695B4E4B8AAE6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('729', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E8BF99E4B8AAE4BA8CE58F89E6A091E4B8ADEFBC8C20E5898DE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20322C20362C20352C2031312C20352C20392C203420E5908EE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20352C2031312C20362C20372C20342C20392C20352C203220E4B8ADE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20352C20362C2031312C20322C20352C20342C2039, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('730', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4BBA5E4B88AE79A84E98092E5BD92E7AE97E6B395E4BDBFE794A8E4B88EE6A091E79A84E9AB98E5BAA6E68890E6AF94E4BE8BE79A84E6A088E7A9BAE997B4E38082E5A682E69E9CE68891E4BBACE59CA8E6AF8FE4B8AAE7BB93E782B9E4B8ADE5AD98E582A8E68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288EFBC8CE982A3E6A0B7E58FAFE4BBA5E4BDBFE794A8E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC8CE58FAAE4BDBFE794A8E5B8B8E695B0E7A9BAE997B4E5AE9EE78EB0E68980E69C89E8BF99E4BA9BE9818DE58E86E38082E784B6E8808CEFBC8CE68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288E58DA0E794A8E69BB4E5A49AE79A84E7A9BAE997B4E38082E8BF99E58FAAE59CA8E99C80E8A681E68C87E59091E788B6E88A82E782B9E79A84E68C87E99288E68896E6A088E7A9BAE997B4E69C89E99990E697B6E6898DE4BDBFE794A8E38082E4BE8BE5A682EFBC8C20E8BF99E698AFE4B880E4B8AAE4B8ADE5BA8FE9818DE58E86E79A84E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('731', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A766973697428726F6F74290A2020202070726576202020203A3D206E756C6C0A2020202063757272656E74203A3D20726F6F740A202020206E657874202020203A3D206E756C6C0A202020200A202020207768696C652063757272656E7420213D206E756C6C0A202020202020202069662070726576203D3D2063757272656E742E706172656E740A20202020202020202020202070726576203A3D2063757272656E740A2020202020202020202020206E657874203A3D2063757272656E742E6C6566740A20202020202020206966206E657874203D3D206E756C6C206F722070726576203D3D2063757272656E742E6C6566740A2020202020202020202020207072696E742063757272656E742E76616C75650A20202020202020202020202070726576203A3D2063757272656E740A2020202020202020202020206E657874203A3D2063757272656E742E72696768740A20202020202020206966206E657874203D3D206E756C6C206F722070726576203D3D2063757272656E742E72696768740A20202020202020202020202070726576203A3D2063757272656E740A2020202020202020202020206E657874203A3D2063757272656E742E706172656E740A202020202020202063757272656E74203A3D206E657874, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('732', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE794A8E4BA8CE58F89E6A091E8A1A8E7A4BAE4B88BE8BFB0E8A1A8E8BEBEE5BC8FEFBC9A612B622A28632D64292D652F6620E58588E5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A2D2B612A622D63642F656620E4B8ADE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A612B622A632D642D652F6620E5908EE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A616263642D2A2B65662F2D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('733', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E6B7B1E5BAA6E4BC98E58588E7BAA7E4B8ADEFBC8CE68891E4BBACE5B88CE69C9BE4BB8EE6A0B9E7BB93E782B9E8AEBFE997AEE69C80E8BF9CE79A84E7BB93E782B9E38082E5928CE59BBEE79A84E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E4B88DE5908CE79A84E698AFEFBC8CE4B88DE99C80E8AEB0E4BD8FE8AEBFE997AEE8BF87E79A84E6AF8FE4B880E4B8AAE7BB93E782B9EFBC8CE59BA0E4B8BAE6A091E4B8ADE4B88DE4BC9AE69C89E78EAFE38082E5898DE5BA8FEFBC8CE4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E983BDE698AFE6B7B1E5BAA6E4BC98E58588E9818DE58E86E79A84E789B9E4BE8BE38082E58F82E8A781E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('734', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE5928CE6B7B1E5BAA6E4BC98E58588E9818DE58E86E4B88DE5908CEFBC8CE5B9BFE5BAA6E4BC98E58588E9818DE58E86E4BC9AE58588E8AEBFE997AEE7A6BBE6A0B9E88A82E782B9E69C80E8BF91E79A84E88A82E782B9E38082E58F82E8A781E5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E3808220E4BA8CE58F89E6A091E79A84E5B9BFE5BAA6E4BC98E58588E9818DE58E86E58F88E7A7B0E68C89E5B182E6ACA1E9818DE58E86E38082E7AE97E6B395E5809FE58AA9E9989FE58897E5AE9EE78EB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('735', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4B880E888ACE69C89E5BA8FE6A091E5928CE4BA8CE58F89E6A091E4B98BE997B4E69C89E4B880E4B880E698A0E5B084E585B3E7B3BBEFBC8CE883BDE8BF9BE8A18CE79BB8E4BA92E8BDACE68DA2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('736', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A6EE58F89E6A091E8BDACE68DA2E4B8BAE4BA8CE58F89E6A091E79A84E696B9E6B395EFBC9AE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9EFBC9BE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E58FB3E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E7ACACE4B880E4B8AAE58FB3E8BEB9E79A84E5908CE7BAA7E7BB93E782B979E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('737', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4BE8BE5A682EFBC8CE59CA8E5B7A6E8BEB9E79A84E6A091E4B8ADEFBC8C41E69C8936E4B8AAE5AD90E7BB93E782B97B422C432C442C452C462C477DE38082E5AE83E883BDE8A2ABE8BDACE68DA2E68890E58FB3E8BEB9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('738', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E58584E5BC9FE4B98BE997B4E58AA0E4B880E8BF9EE68EA5EFBC9B20E5AFB9E6AF8FE4B8AAE7BB93E782B9EFBC8CE999A4E4BA86E585B6E5B7A6E5ADA9E5AD90E5A496EFBC8CE58EBBE999A4E585B6E4B88EE585B6E4BD99E5ADA9E5AD90E4B98BE997B4E79A84E88194E7B3BBEFBC9B20E4BBA5E6A091E79A84E6A0B9E7BB93E782B9E4B8BAE8BDB4E5BF83EFBC8CE5B086E695B4E6A091E9A1BAE697B6E99288E8BDAC3435E5BAA6E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('739', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E6A087E8AEB0E6B395EFBC88E5ADA9E5AD90E58584E5BC9FE6A087E8AEB0E6B395EFBC89E698AFE6A091E5928CE4BA8CE58F89E6A091E8BDACE68DA2E79A84E5AA92E4BB8BE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('740', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E6A091E79A84E4BA8CE58F89E993BEE8A1A828E5ADA9E5AD90E28094E58584E5BC9F29E5AD98E582A8E8A1A8E7A4BA202A2F0A2074797065646566207374727563742043534E6F64650A207B0A20202054456C656D5479706520646174613B0A2020207374727563742043534E6F6465202A66697273746368696C642C2A6E6578747369626C696E673B0A207D43534E6F64652C2A4353547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('741', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9C5BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('742', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('743', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE7BABFE7B4A2E4BA8CE58F89E6A091202874687265616465642062696E6172792074726565295BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('744', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('745', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('746', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('747', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4BA8CE58F89E6A091E79A84E4BA8CE58F89E7BABFE7B4A2E5AD98E582A8E8A1A8E7A4BAEFBC9AE59CA8E7BABFE7B4A2E993BEE8A1A8E4B88AE6B7BBE58AA0E4B880E4B8AAE5A4B4E7BB93E782B9EFBC8CE5B9B6E4BBA4E585B66C6368696C64E59F9FE79A84E68C87E99288E68C87E59091E4BA8CE58F89E6A091E79A84E6A0B9E7BB93E782B9EFBC8CE585B6726368696C64E59F9FE79A84E68C87E99288E68C87E59091E4B8ADE5BA8FE9818DE58E86E697B6E8AEBFE997AEE79A84E69C80E5908EE4B880E4B8AAE7BB93E782B9E38082E4BBA4E4BA8CE58F89E6A091E4B8ADE5BA8FE5BA8FE58897E4B8ADE79A84E7ACACE4B880E4B8AAE7BB93E782B9E79A846C6368696C64E59F9FE68C87E99288E5928CE69C80E5908EE4B880E4B8AAE7BB93E782B9E79A84726368696C64E59F9FE79A84E68C87E99288E59D87E68C87E59091E5A4B4E7BB93E782B9EFBC8CE8BF99E6A0B7E5B0B1E5889BE5BBBAE4BA86E4B880E4B8AAE58F8CE59091E7BABFE7B4A2E993BEE8A1A8E38082E4BA8CE58F89E6A091E5B8B8E98787E794A8E4BA8CE58F89E993BEE8A1A8E696B9E5BC8FE5AD98E582A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('748', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('749', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('751', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A207479706564656620737472756374204269544E6F64650A207B0A20202054456C656D5479706520646174613B0A202020737472756374204269544E6F6465202A6C6368696C642C2A726368696C643B202F2A20E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D4269544E6F64652C2A4269547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('752', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('753', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE694B9E8BF9BE4BA8EE4BA8CE58F89E993BEE8A1A8EFBC8CE5A29EE58AA0E788B6E88A82E782B9E79A84E68C87E5BC95EFBC8CE883BDE69BB4E5A5BDE59CB0E5AE9EE78EB0E88A82E782B9E997B4E79A84E8AEBFE997AEEFBC8CE4B88DE8BF87E7AE97E6B395E79BB8E5AFB9E5A48DE69D82E3808220E5BD93E4BA8CE58F89E6A091E794A8E4B889E58F89E993BEE8A1A8E8A1A8E7A4BAE697B6EFBC8CE69C894EE4B8AAE7BB93E782B9EFBC8CE5B0B1E4BC9AE69C894E2B32E4B8AAE7A9BAE68C87E99288E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('754', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4B889E58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A20747970656465662073747275637420426954504E6F64650A207B0A20202054456C656D5479706520646174613B0A20202073747275637420426954504E6F6465202A706172656E742C2A6C6368696C642C2A726368696C643B202F2A20E788B6E38081E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D426954504E6F64652C2A426950547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('755', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('756', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE68891E4BBACE7BB8FE5B8B8E5B88CE69C9BE8AEBFE997AEE6A091E4B8ADE79A84E6AF8FE4B880E4B8AAE7BB93E782B9E5B9B6E4B894E69FA5E79C8BE5AE83E79A84E580BCE38082E69C89E5BE88E5A49AE5B8B8E8A781E79A84E9A1BAE5BA8FE69DA5E8AEBFE997AEE68980E69C89E79A84E7BB93E782B9EFBC8CE8808CE4B894E6AF8FE4B880E7A78DE983BDE69C89E69C89E794A8E79A84E680A7E8B4A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:06', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('757', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE9818DE58E86E4BA8CE58F89E6A091EFBC9A4CE3808144E3808152E58886E588ABE8A1A8E7A4BAE9818DE58E86E5B7A6E5AD90E6A091E38081E8AEBFE997AEE6A0B9E7BB93E782B9E5928CE9818DE58E86E58FB3E5AD90E6A091EFBC8CE58899E5858828E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF444C52EFBC8CE4B8AD28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C4452EFBC8CE5908E28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C5244E38082E8BF98E69C89E68C89E5B182E9818DE58E86E4BA8CE58F89E6A091E38082E8BF99E4BA9BE696B9E6B395E79A84E697B6E997B4E5A48DE69D82E5BAA6E983BDE698AF4F286E29EFBC8C6EE4B8BAE7BB93E782B9E4B8AAE695B0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('758', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE5A682E69E9C5432E698AFE794B1E69C89E5BA8FE6A09154E8BDACE68DA2E8808CE69DA5E79A84E4BA8CE58F89E6A091EFBC8CE982A3E4B98854E4B8ADE7BB93E782B9E79A84E5898DE5BA8FE5B0B1E698AF5432E4B8ADE7BB93E782B9E79A84E5898DE5BA8FEFBC8C54E4B8ADE7BB93E782B9E79A84E5908EE5BA8FE5B0B1E698AF5432E4B8ADE7BB93E782B9E79A84E4B8ADE5BA8FE38082E4BBBBE4BD95E4B880E6A3B5E4BA8CE58F89E6A091E79A84E58FB6E7BB93E782B9E59CA8E58588E5BA8FE38081E4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E4B8ADE79A84E79BB8E5AFB9E6ACA1E5BA8FE4B88DE58F91E694B9E58F98E38082E8AEBE6E2C6DE4B8BAE4B880E6A3B5E4BA8CE58F89E6A091E4B88AE79A84E4B8A4E4B8AAE7BB93E782B9EFBC8CE59CA8E4B8ADE5BA8FE9818DE58E86E697B6EFBC8C6EE59CA86DE5898DE79A84E69DA1E4BBB6E698AF6EE59CA86DE79A84E5B7A6E696B9E38082E5898DE5BA8FE5BA8FE58897E5928CE4B8ADE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BBBBE4B880E7BB93E782B9E59D87E697A0E5B7A6E5ADA9E5AD90E79A84E99D9EE7A9BAE4BA8CE58F89E6A091EFBC9BE4B8ADE5BA8FE5BA8FE58897E5928CE5908EE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BBBBE4B880E7BB93E782B9E59D87E697A0E58FB3E5ADA9E5AD90E79A84E99D9EE7A9BAE4BA8CE58F89E6A091EFBC9BE5898DE5BA8FE5BA8FE58897E5928CE5908EE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BB85E69C89E4B880E4B8AAE7BB93E782B9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('759', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE58187E8AEBEE68891E4BBACE69C89E4B880E4B8AAE58C85E590ABE580BCE79A8476616C7565E5928CE68C87E59091E4B8A4E4B8AAE5AD90E7BB93E782B9E79A846C656674E5928C7269676874E79A84E6A091E7BB93E782B9E7BB93E69E84E38082E68891E4BBACE58FAFE4BBA5E58699E587BAE8BF99E6A0B7E79A84E8BF87E7A88BEFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('760', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A7669736974286E6F6465290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('761', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE8BF99E6A0B7E4BC9AE794A8E5898DE5BA8FE68993E58DB0E587BAE6A091E4B8ADE79A84E580BCE38082E59CA8E5898DE5BA8FEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5AE83E79A84E5AD90E7BB93E782B9E4B98BE5898DE8AEBFE997AEE38082E7B1BBE4BCBCE59CB0EFBC8CE5A682E69E9CE68993E58DB0E8AFADE58FA5E59CA8E69C80E5908EEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE4BB96E79A84E5AD90E88A82E782B9E4B98BE5908EE8AEBFE997AEEFBC8CE6A091E4B8ADE79A84E580BCE4BC9AE794A8E5908EE5BA8FE69DA5E68993E58DB0E38082E59CA8E8BF99E4B8A4E7A78DE68385E586B5E4B8ADEFBC8CE5B7A6E5AD90E6A091E4B8ADE79A84E580BCE6AF94E58FB3E5AD90E6A091E4B8ADE5BE97E580BCE58588E68993E58DB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('762', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A7669736974286E6F6465290A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('763', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE69C80E5908EEFBC8CE4B88AE99DA2E79A84E4B8ADE5BA8FE9818DE58E86EFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5B7A6E5AD90E6A091E5928CE58FB3E5AD90E6A091E4B98BE997B4E8AEBFE997AEE38082E8BF99E59CA8E9818DE58E86E4BA8CE58F89E6909CE7B4A2E6A091E697B6E5BE88E5B8B8E794A8EFBC8CE59BA0E4B8BAE5AE83E883BDE794A8E98092E5A29EE79A84E9A1BAE5BA8FE69DA5E9818DE58E86E68980E69C89E79A84E580BCE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('764', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4B8BAE4BB80E4B988E591A2EFBC9FE5A682E69E9C6EE698AFE4BA8CE58F89E6909CE7B4A2E6A091E79A84E7BB93E782B9EFBC8CE982A3E4B9886EE79A84E5B7A6E5AD90E6A091E79A84E68980E69C89E7BB93E782B9E79A84E580BCE983BDE6AF946EE79A84E580BCE8A681E5B08FEFBC8CE8808CE4B8946EE79A84E58FB3E5AD90E6A091E79A84E68980E69C89E88A82E782B9E79A84E580BCE983BDE6AF946EE79A84E580BCE8A681E5A4A7E38082E59BA0E6ADA4EFBC8CE5A682E69E9CE68891E4BBACE9A1BAE5BA8FE9818DE58E86E5B7A6E5AD90E6A091EFBC8CE784B6E5908EE8AEBFE997AE6EEFBC8CE784B6E5908EE9A1BAE5BA8FE9818DE58E86E58FB3E5AD90E6A091E38082E68891E4BBACE5B0B1E5B7B2E7BB8FE5BEAAE5BA8FE8AEBFE997AEE4BA86E695B4E4B8AAE6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('765', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E8BF99E4B8AAE4BA8CE58F89E6A091E4B8ADEFBC8C20E5898DE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20322C20362C20352C2031312C20352C20392C203420E5908EE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20352C2031312C20362C20372C20342C20392C20352C203220E4B8ADE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20352C20362C2031312C20322C20352C20342C2039, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('766', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4BBA5E4B88AE79A84E98092E5BD92E7AE97E6B395E4BDBFE794A8E4B88EE6A091E79A84E9AB98E5BAA6E68890E6AF94E4BE8BE79A84E6A088E7A9BAE997B4E38082E5A682E69E9CE68891E4BBACE59CA8E6AF8FE4B8AAE7BB93E782B9E4B8ADE5AD98E582A8E68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288EFBC8CE982A3E6A0B7E58FAFE4BBA5E4BDBFE794A8E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC8CE58FAAE4BDBFE794A8E5B8B8E695B0E7A9BAE997B4E5AE9EE78EB0E68980E69C89E8BF99E4BA9BE9818DE58E86E38082E784B6E8808CEFBC8CE68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288E58DA0E794A8E69BB4E5A49AE79A84E7A9BAE997B4E38082E8BF99E58FAAE59CA8E99C80E8A681E68C87E59091E788B6E88A82E782B9E79A84E68C87E99288E68896E6A088E7A9BAE997B4E69C89E99990E697B6E6898DE4BDBFE794A8E38082E4BE8BE5A682EFBC8C20E8BF99E698AFE4B880E4B8AAE4B8ADE5BA8FE9818DE58E86E79A84E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('767', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('768', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE794A8E4BA8CE58F89E6A091E8A1A8E7A4BAE4B88BE8BFB0E8A1A8E8BEBEE5BC8FEFBC9A612B622A28632D64292D652F6620E58588E5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A2D2B612A622D63642F656620E4B8ADE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A612B622A632D642D652F6620E5908EE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A616263642D2A2B65662F2D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('769', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E6B7B1E5BAA6E4BC98E58588E7BAA7E4B8ADEFBC8CE68891E4BBACE5B88CE69C9BE4BB8EE6A0B9E7BB93E782B9E8AEBFE997AEE69C80E8BF9CE79A84E7BB93E782B9E38082E5928CE59BBEE79A84E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E4B88DE5908CE79A84E698AFEFBC8CE4B88DE99C80E8AEB0E4BD8FE8AEBFE997AEE8BF87E79A84E6AF8FE4B880E4B8AAE7BB93E782B9EFBC8CE59BA0E4B8BAE6A091E4B8ADE4B88DE4BC9AE69C89E78EAFE38082E5898DE5BA8FEFBC8CE4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E983BDE698AFE6B7B1E5BAA6E4BC98E58588E9818DE58E86E79A84E789B9E4BE8BE38082E58F82E8A781E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('770', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE5928CE6B7B1E5BAA6E4BC98E58588E9818DE58E86E4B88DE5908CEFBC8CE5B9BFE5BAA6E4BC98E58588E9818DE58E86E4BC9AE58588E8AEBFE997AEE7A6BBE6A0B9E88A82E782B9E69C80E8BF91E79A84E88A82E782B9E38082E58F82E8A781E5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E3808220E4BA8CE58F89E6A091E79A84E5B9BFE5BAA6E4BC98E58588E9818DE58E86E58F88E7A7B0E68C89E5B182E6ACA1E9818DE58E86E38082E7AE97E6B395E5809FE58AA9E9989FE58897E5AE9EE78EB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('771', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4B880E888ACE69C89E5BA8FE6A091E5928CE4BA8CE58F89E6A091E4B98BE997B4E69C89E4B880E4B880E698A0E5B084E585B3E7B3BBEFBC8CE883BDE8BF9BE8A18CE79BB8E4BA92E8BDACE68DA2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('772', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A6EE58F89E6A091E8BDACE68DA2E4B8BAE4BA8CE58F89E6A091E79A84E696B9E6B395EFBC9AE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9EFBC9BE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E58FB3E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E7ACACE4B880E4B8AAE58FB3E8BEB9E79A84E5908CE7BAA7E7BB93E782B979E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('773', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4BE8BE5A682EFBC8CE59CA8E5B7A6E8BEB9E79A84E6A091E4B8ADEFBC8C41E69C8936E4B8AAE5AD90E7BB93E782B97B422C432C442C452C462C477DE38082E5AE83E883BDE8A2ABE8BDACE68DA2E68890E58FB3E8BEB9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('774', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E58584E5BC9FE4B98BE997B4E58AA0E4B880E8BF9EE68EA5EFBC9B20E5AFB9E6AF8FE4B8AAE7BB93E782B9EFBC8CE999A4E4BA86E585B6E5B7A6E5ADA9E5AD90E5A496EFBC8CE58EBBE999A4E585B6E4B88EE585B6E4BD99E5ADA9E5AD90E4B98BE997B4E79A84E88194E7B3BBEFBC9B20E4BBA5E6A091E79A84E6A0B9E7BB93E782B9E4B8BAE8BDB4E5BF83EFBC8CE5B086E695B4E6A091E9A1BAE697B6E99288E8BDAC3435E5BAA6E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('775', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E6A087E8AEB0E6B395EFBC88E5ADA9E5AD90E58584E5BC9FE6A087E8AEB0E6B395EFBC89E698AFE6A091E5928CE4BA8CE58F89E6A091E8BDACE68DA2E79A84E5AA92E4BB8BE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('776', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E6A091E79A84E4BA8CE58F89E993BEE8A1A828E5ADA9E5AD90E28094E58584E5BC9F29E5AD98E582A8E8A1A8E7A4BA202A2F0A2074797065646566207374727563742043534E6F64650A207B0A20202054456C656D5479706520646174613B0A2020207374727563742043534E6F6465202A66697273746368696C642C2A6E6578747369626C696E673B0A207D43534E6F64652C2A4353547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('777', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9C5BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('778', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('779', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE7BABFE7B4A2E4BA8CE58F89E6A091202874687265616465642062696E6172792074726565295BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('780', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('781', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('782', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE88BA5E7BB93E782B9E698AFE4BA8CE58F89E6A091E79A84E6A0B9EFBC8CE58899E585B6E5908EE7BBA7E4B8BAE7A9BAEFBC9B20E88BA5E7BB93E782B9E698AFE585B6E58F8CE4BAB2E79A84E58FB3E5ADA9E5AD90EFBC8CE68896E698AFE585B6E58F8CE4BAB2E79A84E5B7A6E5ADA9E5AD90E4B894E585B6E58F8CE4BAB2E6B2A1E69C89E58FB3E5AD90E6A091EFBC8CE58899E585B6E5908EE7BBA7E58DB3E4B8BAE58F8CE4BAB2E7BB93E782B9EFBC9B20E88BA5E7BB93E782B9E698AFE585B6E58F8CE4BAB2E79A84E5B7A6E5ADA9E5AD90EFBC8CE4B894E585B6E58F8CE4BAB2E69C89E58FB3E5AD90E6A091EFBC8CE58899E585B6E5908EE7BBA7E4B8BAE58F8CE4BAB2E58FB3E5AD90E6A091E4B88AE68C89E5908EE5BA8FE9818DE58E86E58897E587BAE79A84E7ACACE4B880E4B8AAE7BB93E782B9E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('783', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4BA8CE58F89E6A091E79A84E4BA8CE58F89E7BABFE7B4A2E5AD98E582A8E8A1A8E7A4BAEFBC9AE59CA8E7BABFE7B4A2E993BEE8A1A8E4B88AE6B7BBE58AA0E4B880E4B8AAE5A4B4E7BB93E782B9EFBC8CE5B9B6E4BBA4E585B66C6368696C64E59F9FE79A84E68C87E99288E68C87E59091E4BA8CE58F89E6A091E79A84E6A0B9E7BB93E782B9EFBC8CE585B6726368696C64E59F9FE79A84E68C87E99288E68C87E59091E4B8ADE5BA8FE9818DE58E86E697B6E8AEBFE997AEE79A84E69C80E5908EE4B880E4B8AAE7BB93E782B9E38082E4BBA4E4BA8CE58F89E6A091E4B8ADE5BA8FE5BA8FE58897E4B8ADE79A84E7ACACE4B880E4B8AAE7BB93E782B9E79A846C6368696C64E59F9FE68C87E99288E5928CE69C80E5908EE4B880E4B8AAE7BB93E782B9E79A84726368696C64E59F9FE79A84E68C87E99288E59D87E68C87E59091E5A4B4E7BB93E782B9EFBC8CE8BF99E6A0B7E5B0B1E5889BE5BBBAE4BA86E4B880E4B8AAE58F8CE59091E7BABFE7B4A2E993BEE8A1A8E38082E4BA8CE58F89E6A091E5B8B8E98787E794A8E4BA8CE58F89E993BEE8A1A8E696B9E5BC8FE5AD98E582A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('784', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('785', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:07', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('787', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A207479706564656620737472756374204269544E6F64650A207B0A20202054456C656D5479706520646174613B0A202020737472756374204269544E6F6465202A6C6368696C642C2A726368696C643B202F2A20E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D4269544E6F64652C2A4269547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('788', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('789', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE694B9E8BF9BE4BA8EE4BA8CE58F89E993BEE8A1A8EFBC8CE5A29EE58AA0E788B6E88A82E782B9E79A84E68C87E5BC95EFBC8CE883BDE69BB4E5A5BDE59CB0E5AE9EE78EB0E88A82E782B9E997B4E79A84E8AEBFE997AEEFBC8CE4B88DE8BF87E7AE97E6B395E79BB8E5AFB9E5A48DE69D82E3808220E5BD93E4BA8CE58F89E6A091E794A8E4B889E58F89E993BEE8A1A8E8A1A8E7A4BAE697B6EFBC8CE69C894EE4B8AAE7BB93E782B9EFBC8CE5B0B1E4BC9AE69C894E2B32E4B8AAE7A9BAE68C87E99288E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('790', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4B889E58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A20747970656465662073747275637420426954504E6F64650A207B0A20202054456C656D5479706520646174613B0A20202073747275637420426954504E6F6465202A706172656E742C2A6C6368696C642C2A726368696C643B202F2A20E788B6E38081E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D426954504E6F64652C2A426950547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('791', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('792', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE68891E4BBACE7BB8FE5B8B8E5B88CE69C9BE8AEBFE997AEE6A091E4B8ADE79A84E6AF8FE4B880E4B8AAE7BB93E782B9E5B9B6E4B894E69FA5E79C8BE5AE83E79A84E580BCE38082E69C89E5BE88E5A49AE5B8B8E8A781E79A84E9A1BAE5BA8FE69DA5E8AEBFE997AEE68980E69C89E79A84E7BB93E782B9EFBC8CE8808CE4B894E6AF8FE4B880E7A78DE983BDE69C89E69C89E794A8E79A84E680A7E8B4A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('793', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE9818DE58E86E4BA8CE58F89E6A091EFBC9A4CE3808144E3808152E58886E588ABE8A1A8E7A4BAE9818DE58E86E5B7A6E5AD90E6A091E38081E8AEBFE997AEE6A0B9E7BB93E782B9E5928CE9818DE58E86E58FB3E5AD90E6A091EFBC8CE58899E5858828E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF444C52EFBC8CE4B8AD28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C4452EFBC8CE5908E28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C5244E38082E8BF98E69C89E68C89E5B182E9818DE58E86E4BA8CE58F89E6A091E38082E8BF99E4BA9BE696B9E6B395E79A84E697B6E997B4E5A48DE69D82E5BAA6E983BDE698AF4F286E29EFBC8C6EE4B8BAE7BB93E782B9E4B8AAE695B0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('794', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE5A682E69E9C5432E698AFE794B1E69C89E5BA8FE6A09154E8BDACE68DA2E8808CE69DA5E79A84E4BA8CE58F89E6A091EFBC8CE982A3E4B98854E4B8ADE7BB93E782B9E79A84E5898DE5BA8FE5B0B1E698AF5432E4B8ADE7BB93E782B9E79A84E5898DE5BA8FEFBC8C54E4B8ADE7BB93E782B9E79A84E5908EE5BA8FE5B0B1E698AF5432E4B8ADE7BB93E782B9E79A84E4B8ADE5BA8FE38082E4BBBBE4BD95E4B880E6A3B5E4BA8CE58F89E6A091E79A84E58FB6E7BB93E782B9E59CA8E58588E5BA8FE38081E4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E4B8ADE79A84E79BB8E5AFB9E6ACA1E5BA8FE4B88DE58F91E694B9E58F98E38082E8AEBE6E2C6DE4B8BAE4B880E6A3B5E4BA8CE58F89E6A091E4B88AE79A84E4B8A4E4B8AAE7BB93E782B9EFBC8CE59CA8E4B8ADE5BA8FE9818DE58E86E697B6EFBC8C6EE59CA86DE5898DE79A84E69DA1E4BBB6E698AF6EE59CA86DE79A84E5B7A6E696B9E38082E5898DE5BA8FE5BA8FE58897E5928CE4B8ADE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BBBBE4B880E7BB93E782B9E59D87E697A0E5B7A6E5ADA9E5AD90E79A84E99D9EE7A9BAE4BA8CE58F89E6A091EFBC9BE4B8ADE5BA8FE5BA8FE58897E5928CE5908EE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BBBBE4B880E7BB93E782B9E59D87E697A0E58FB3E5ADA9E5AD90E79A84E99D9EE7A9BAE4BA8CE58F89E6A091EFBC9BE5898DE5BA8FE5BA8FE58897E5928CE5908EE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BB85E69C89E4B880E4B8AAE7BB93E782B9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('795', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE58187E8AEBEE68891E4BBACE69C89E4B880E4B8AAE58C85E590ABE580BCE79A8476616C7565E5928CE68C87E59091E4B8A4E4B8AAE5AD90E7BB93E782B9E79A846C656674E5928C7269676874E79A84E6A091E7BB93E782B9E7BB93E69E84E38082E68891E4BBACE58FAFE4BBA5E58699E587BAE8BF99E6A0B7E79A84E8BF87E7A88BEFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('796', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A7669736974286E6F6465290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('797', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE8BF99E6A0B7E4BC9AE794A8E5898DE5BA8FE68993E58DB0E587BAE6A091E4B8ADE79A84E580BCE38082E59CA8E5898DE5BA8FEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5AE83E79A84E5AD90E7BB93E782B9E4B98BE5898DE8AEBFE997AEE38082E7B1BBE4BCBCE59CB0EFBC8CE5A682E69E9CE68993E58DB0E8AFADE58FA5E59CA8E69C80E5908EEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE4BB96E79A84E5AD90E88A82E782B9E4B98BE5908EE8AEBFE997AEEFBC8CE6A091E4B8ADE79A84E580BCE4BC9AE794A8E5908EE5BA8FE69DA5E68993E58DB0E38082E59CA8E8BF99E4B8A4E7A78DE68385E586B5E4B8ADEFBC8CE5B7A6E5AD90E6A091E4B8ADE79A84E580BCE6AF94E58FB3E5AD90E6A091E4B8ADE5BE97E580BCE58588E68993E58DB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('798', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A7669736974286E6F6465290A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('799', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE69C80E5908EEFBC8CE4B88AE99DA2E79A84E4B8ADE5BA8FE9818DE58E86EFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5B7A6E5AD90E6A091E5928CE58FB3E5AD90E6A091E4B98BE997B4E8AEBFE997AEE38082E8BF99E59CA8E9818DE58E86E4BA8CE58F89E6909CE7B4A2E6A091E697B6E5BE88E5B8B8E794A8EFBC8CE59BA0E4B8BAE5AE83E883BDE794A8E98092E5A29EE79A84E9A1BAE5BA8FE69DA5E9818DE58E86E68980E69C89E79A84E580BCE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('800', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4B8BAE4BB80E4B988E591A2EFBC9FE5A682E69E9C6EE698AFE4BA8CE58F89E6909CE7B4A2E6A091E79A84E7BB93E782B9EFBC8CE982A3E4B9886EE79A84E5B7A6E5AD90E6A091E79A84E68980E69C89E7BB93E782B9E79A84E580BCE983BDE6AF946EE79A84E580BCE8A681E5B08FEFBC8CE8808CE4B8946EE79A84E58FB3E5AD90E6A091E79A84E68980E69C89E88A82E782B9E79A84E580BCE983BDE6AF946EE79A84E580BCE8A681E5A4A7E38082E59BA0E6ADA4EFBC8CE5A682E69E9CE68891E4BBACE9A1BAE5BA8FE9818DE58E86E5B7A6E5AD90E6A091EFBC8CE784B6E5908EE8AEBFE997AE6EEFBC8CE784B6E5908EE9A1BAE5BA8FE9818DE58E86E58FB3E5AD90E6A091E38082E68891E4BBACE5B0B1E5B7B2E7BB8FE5BEAAE5BA8FE8AEBFE997AEE4BA86E695B4E4B8AAE6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('801', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E8BF99E4B8AAE4BA8CE58F89E6A091E4B8ADEFBC8C20E5898DE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20322C20362C20352C2031312C20352C20392C203420E5908EE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20352C2031312C20362C20372C20342C20392C20352C203220E4B8ADE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20352C20362C2031312C20322C20352C20342C2039, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('802', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4BBA5E4B88AE79A84E98092E5BD92E7AE97E6B395E4BDBFE794A8E4B88EE6A091E79A84E9AB98E5BAA6E68890E6AF94E4BE8BE79A84E6A088E7A9BAE997B4E38082E5A682E69E9CE68891E4BBACE59CA8E6AF8FE4B8AAE7BB93E782B9E4B8ADE5AD98E582A8E68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288EFBC8CE982A3E6A0B7E58FAFE4BBA5E4BDBFE794A8E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC8CE58FAAE4BDBFE794A8E5B8B8E695B0E7A9BAE997B4E5AE9EE78EB0E68980E69C89E8BF99E4BA9BE9818DE58E86E38082E784B6E8808CEFBC8CE68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288E58DA0E794A8E69BB4E5A49AE79A84E7A9BAE997B4E38082E8BF99E58FAAE59CA8E99C80E8A681E68C87E59091E788B6E88A82E782B9E79A84E68C87E99288E68896E6A088E7A9BAE997B4E69C89E99990E697B6E6898DE4BDBFE794A8E38082E4BE8BE5A682EFBC8C20E8BF99E698AFE4B880E4B8AAE4B8ADE5BA8FE9818DE58E86E79A84E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('803', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('804', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE794A8E4BA8CE58F89E6A091E8A1A8E7A4BAE4B88BE8BFB0E8A1A8E8BEBEE5BC8FEFBC9A612B622A28632D64292D652F6620E58588E5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A2D2B612A622D63642F656620E4B8ADE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A612B622A632D642D652F6620E5908EE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A616263642D2A2B65662F2D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('805', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E6B7B1E5BAA6E4BC98E58588E7BAA7E4B8ADEFBC8CE68891E4BBACE5B88CE69C9BE4BB8EE6A0B9E7BB93E782B9E8AEBFE997AEE69C80E8BF9CE79A84E7BB93E782B9E38082E5928CE59BBEE79A84E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E4B88DE5908CE79A84E698AFEFBC8CE4B88DE99C80E8AEB0E4BD8FE8AEBFE997AEE8BF87E79A84E6AF8FE4B880E4B8AAE7BB93E782B9EFBC8CE59BA0E4B8BAE6A091E4B8ADE4B88DE4BC9AE69C89E78EAFE38082E5898DE5BA8FEFBC8CE4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E983BDE698AFE6B7B1E5BAA6E4BC98E58588E9818DE58E86E79A84E789B9E4BE8BE38082E58F82E8A781E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('806', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE5928CE6B7B1E5BAA6E4BC98E58588E9818DE58E86E4B88DE5908CEFBC8CE5B9BFE5BAA6E4BC98E58588E9818DE58E86E4BC9AE58588E8AEBFE997AEE7A6BBE6A0B9E88A82E782B9E69C80E8BF91E79A84E88A82E782B9E38082E58F82E8A781E5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E3808220E4BA8CE58F89E6A091E79A84E5B9BFE5BAA6E4BC98E58588E9818DE58E86E58F88E7A7B0E68C89E5B182E6ACA1E9818DE58E86E38082E7AE97E6B395E5809FE58AA9E9989FE58897E5AE9EE78EB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('807', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4B880E888ACE69C89E5BA8FE6A091E5928CE4BA8CE58F89E6A091E4B98BE997B4E69C89E4B880E4B880E698A0E5B084E585B3E7B3BBEFBC8CE883BDE8BF9BE8A18CE79BB8E4BA92E8BDACE68DA2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('808', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A6EE58F89E6A091E8BDACE68DA2E4B8BAE4BA8CE58F89E6A091E79A84E696B9E6B395EFBC9AE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9EFBC9BE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E58FB3E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E7ACACE4B880E4B8AAE58FB3E8BEB9E79A84E5908CE7BAA7E7BB93E782B979E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('809', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4BE8BE5A682EFBC8CE59CA8E5B7A6E8BEB9E79A84E6A091E4B8ADEFBC8C41E69C8936E4B8AAE5AD90E7BB93E782B97B422C432C442C452C462C477DE38082E5AE83E883BDE8A2ABE8BDACE68DA2E68890E58FB3E8BEB9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('810', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E58584E5BC9FE4B98BE997B4E58AA0E4B880E8BF9EE68EA5EFBC9B20E5AFB9E6AF8FE4B8AAE7BB93E782B9EFBC8CE999A4E4BA86E585B6E5B7A6E5ADA9E5AD90E5A496EFBC8CE58EBBE999A4E585B6E4B88EE585B6E4BD99E5ADA9E5AD90E4B98BE997B4E79A84E88194E7B3BBEFBC9B20E4BBA5E6A091E79A84E6A0B9E7BB93E782B9E4B8BAE8BDB4E5BF83EFBC8CE5B086E695B4E6A091E9A1BAE697B6E99288E8BDAC3435E5BAA6E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('811', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E6A087E8AEB0E6B395EFBC88E5ADA9E5AD90E58584E5BC9FE6A087E8AEB0E6B395EFBC89E698AFE6A091E5928CE4BA8CE58F89E6A091E8BDACE68DA2E79A84E5AA92E4BB8BE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('812', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E6A091E79A84E4BA8CE58F89E993BEE8A1A828E5ADA9E5AD90E28094E58584E5BC9F29E5AD98E582A8E8A1A8E7A4BA202A2F0A2074797065646566207374727563742043534E6F64650A207B0A20202054456C656D5479706520646174613B0A2020207374727563742043534E6F6465202A66697273746368696C642C2A6E6578747369626C696E673B0A207D43534E6F64652C2A4353547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('813', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9C5BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:08', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('814', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('815', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE7BABFE7B4A2E4BA8CE58F89E6A091202874687265616465642062696E6172792074726565295BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('816', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('817', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E4B8ADE5BA8FE7BABFE7B4A2E6A091E689BEE7BB93E782B9E5908EE7BBA7E79A84E8A784E5BE8BE698AFEFBC9AE88BA5E585B6E58FB3E6A087E5BF97E4B8BA31EFBC8CE58899E58FB3E993BEE4B8BAE7BABFE7B4A2EFBC8CE68C87E7A4BAE585B6E5908EE7BBA7EFBC8CE590A6E58899E9818DE58E86E585B6E58FB3E5AD90E6A091E697B6E8AEBFE997AEE79A84E7ACACE4B880E4B8AAE7BB93E782B9EFBC88E58FB3E5AD90E6A091E69C80E5B7A6E4B88BE79A84E7BB93E782B9EFBC89E4B8BAE585B6E5908EE7BBA7EFBC9BE689BEE7BB93E782B9E5898DE9A9B1E79A84E8A784E5BE8BE698AFEFBC9AE88BA5E585B6E5B7A6E6A087E5BF97E4B8BA31EFBC8CE58899E5B7A6E993BEE4B8BAE7BABFE7B4A2EFBC8CE68C87E7A4BAE585B6E5898DE9A9B1EFBC8CE590A6E58899E9818DE58E86E5B7A6E5AD90E6A091E697B6E69C80E5908EE8AEBFE997AEE79A84E4B880E4B8AAE7BB93E782B9EFBC88E5B7A6E5AD90E6A091E4B8ADE69C80E58FB3E4B88BE79A84E7BB93E782B9EFBC89E4B8BAE585B6E5898DE9A9B1E3808220E59CA8E5908EE5BA8FE7BABFE7B4A2E6A091E4B8ADE689BEE588B0E7BB93E782B9E79A84E5908EE7BBA7E58886E4B889E7A78DE68385E586B5EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('818', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('819', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4BA8CE58F89E6A091E79A84E4BA8CE58F89E7BABFE7B4A2E5AD98E582A8E8A1A8E7A4BAEFBC9AE59CA8E7BABFE7B4A2E993BEE8A1A8E4B88AE6B7BBE58AA0E4B880E4B8AAE5A4B4E7BB93E782B9EFBC8CE5B9B6E4BBA4E585B66C6368696C64E59F9FE79A84E68C87E99288E68C87E59091E4BA8CE58F89E6A091E79A84E6A0B9E7BB93E782B9EFBC8CE585B6726368696C64E59F9FE79A84E68C87E99288E68C87E59091E4B8ADE5BA8FE9818DE58E86E697B6E8AEBFE997AEE79A84E69C80E5908EE4B880E4B8AAE7BB93E782B9E38082E4BBA4E4BA8CE58F89E6A091E4B8ADE5BA8FE5BA8FE58897E4B8ADE79A84E7ACACE4B880E4B8AAE7BB93E782B9E79A846C6368696C64E59F9FE68C87E99288E5928CE69C80E5908EE4B880E4B8AAE7BB93E782B9E79A84726368696C64E59F9FE79A84E68C87E99288E59D87E68C87E59091E5A4B4E7BB93E782B9EFBC8CE8BF99E6A0B7E5B0B1E5889BE5BBBAE4BA86E4B880E4B8AAE58F8CE59091E7BABFE7B4A2E993BEE8A1A8E38082E4BA8CE58F89E6A091E5B8B8E98787E794A8E4BA8CE58F89E993BEE8A1A8E696B9E5BC8FE5AD98E582A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('820', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('821', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('823', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A207479706564656620737472756374204269544E6F64650A207B0A20202054456C656D5479706520646174613B0A202020737472756374204269544E6F6465202A6C6368696C642C2A726368696C643B202F2A20E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D4269544E6F64652C2A4269547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('824', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('825', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE694B9E8BF9BE4BA8EE4BA8CE58F89E993BEE8A1A8EFBC8CE5A29EE58AA0E788B6E88A82E782B9E79A84E68C87E5BC95EFBC8CE883BDE69BB4E5A5BDE59CB0E5AE9EE78EB0E88A82E782B9E997B4E79A84E8AEBFE997AEEFBC8CE4B88DE8BF87E7AE97E6B395E79BB8E5AFB9E5A48DE69D82E3808220E5BD93E4BA8CE58F89E6A091E794A8E4B889E58F89E993BEE8A1A8E8A1A8E7A4BAE697B6EFBC8CE69C894EE4B8AAE7BB93E782B9EFBC8CE5B0B1E4BC9AE69C894E2B32E4B8AAE7A9BAE68C87E99288E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('826', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4B889E58F89E993BEE8A1A8E5AD98E582A8E8A1A8E7A4BA202A2F0A20747970656465662073747275637420426954504E6F64650A207B0A20202054456C656D5479706520646174613B0A20202073747275637420426954504E6F6465202A706172656E742C2A6C6368696C642C2A726368696C643B202F2A20E788B6E38081E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A207D426954504E6F64652C2A426950547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('827', https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('828', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE68891E4BBACE7BB8FE5B8B8E5B88CE69C9BE8AEBFE997AEE6A091E4B8ADE79A84E6AF8FE4B880E4B8AAE7BB93E782B9E5B9B6E4B894E69FA5E79C8BE5AE83E79A84E580BCE38082E69C89E5BE88E5A49AE5B8B8E8A781E79A84E9A1BAE5BA8FE69DA5E8AEBFE997AEE68980E69C89E79A84E7BB93E782B9EFBC8CE8808CE4B894E6AF8FE4B880E7A78DE983BDE69C89E69C89E794A8E79A84E680A7E8B4A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('829', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE9818DE58E86E4BA8CE58F89E6A091EFBC9A4CE3808144E3808152E58886E588ABE8A1A8E7A4BAE9818DE58E86E5B7A6E5AD90E6A091E38081E8AEBFE997AEE6A0B9E7BB93E782B9E5928CE9818DE58E86E58FB3E5AD90E6A091EFBC8CE58899E5858828E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF444C52EFBC8CE4B8AD28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C4452EFBC8CE5908E28E6A0B929E5BA8FE9818DE58E86E4BA8CE58F89E6A091E79A84E9A1BAE5BA8FE698AF4C5244E38082E8BF98E69C89E68C89E5B182E9818DE58E86E4BA8CE58F89E6A091E38082E8BF99E4BA9BE696B9E6B395E79A84E697B6E997B4E5A48DE69D82E5BAA6E983BDE698AF4F286E29EFBC8C6EE4B8BAE7BB93E782B9E4B8AAE695B0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('830', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE5A682E69E9C5432E698AFE794B1E69C89E5BA8FE6A09154E8BDACE68DA2E8808CE69DA5E79A84E4BA8CE58F89E6A091EFBC8CE982A3E4B98854E4B8ADE7BB93E782B9E79A84E5898DE5BA8FE5B0B1E698AF5432E4B8ADE7BB93E782B9E79A84E5898DE5BA8FEFBC8C54E4B8ADE7BB93E782B9E79A84E5908EE5BA8FE5B0B1E698AF5432E4B8ADE7BB93E782B9E79A84E4B8ADE5BA8FE38082E4BBBBE4BD95E4B880E6A3B5E4BA8CE58F89E6A091E79A84E58FB6E7BB93E782B9E59CA8E58588E5BA8FE38081E4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E4B8ADE79A84E79BB8E5AFB9E6ACA1E5BA8FE4B88DE58F91E694B9E58F98E38082E8AEBE6E2C6DE4B8BAE4B880E6A3B5E4BA8CE58F89E6A091E4B88AE79A84E4B8A4E4B8AAE7BB93E782B9EFBC8CE59CA8E4B8ADE5BA8FE9818DE58E86E697B6EFBC8C6EE59CA86DE5898DE79A84E69DA1E4BBB6E698AF6EE59CA86DE79A84E5B7A6E696B9E38082E5898DE5BA8FE5BA8FE58897E5928CE4B8ADE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BBBBE4B880E7BB93E782B9E59D87E697A0E5B7A6E5ADA9E5AD90E79A84E99D9EE7A9BAE4BA8CE58F89E6A091EFBC9BE4B8ADE5BA8FE5BA8FE58897E5928CE5908EE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BBBBE4B880E7BB93E782B9E59D87E697A0E58FB3E5ADA9E5AD90E79A84E99D9EE7A9BAE4BA8CE58F89E6A091EFBC9BE5898DE5BA8FE5BA8FE58897E5928CE5908EE5BA8FE5BA8FE58897E79BB8E5908CE79A84E4BA8CE58F89E6A091E4B8BAE7A9BAE6A091E68896E4BB85E69C89E4B880E4B8AAE7BB93E782B9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('831', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE58187E8AEBEE68891E4BBACE69C89E4B880E4B8AAE58C85E590ABE580BCE79A8476616C7565E5928CE68C87E59091E4B8A4E4B8AAE5AD90E7BB93E782B9E79A846C656674E5928C7269676874E79A84E6A091E7BB93E782B9E7BB93E69E84E38082E68891E4BBACE58FAFE4BBA5E58699E587BAE8BF99E6A0B7E79A84E8BF87E7A88BEFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('832', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A7669736974286E6F6465290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('833', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE8BF99E6A0B7E4BC9AE794A8E5898DE5BA8FE68993E58DB0E587BAE6A091E4B8ADE79A84E580BCE38082E59CA8E5898DE5BA8FEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5AE83E79A84E5AD90E7BB93E782B9E4B98BE5898DE8AEBFE997AEE38082E7B1BBE4BCBCE59CB0EFBC8CE5A682E69E9CE68993E58DB0E8AFADE58FA5E59CA8E69C80E5908EEFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE4BB96E79A84E5AD90E88A82E782B9E4B98BE5908EE8AEBFE997AEEFBC8CE6A091E4B8ADE79A84E580BCE4BC9AE794A8E5908EE5BA8FE69DA5E68993E58DB0E38082E59CA8E8BF99E4B8A4E7A78DE68385E586B5E4B8ADEFBC8CE5B7A6E5AD90E6A091E4B8ADE79A84E580BCE6AF94E58FB3E5AD90E6A091E4B8ADE5BE97E580BCE58588E68993E58DB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('834', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A7669736974286E6F6465290A202020206966206E6F64652E6C6566742020213D206E756C6C207468656E207669736974286E6F64652E6C656674290A202020207072696E74206E6F64652E76616C75650A202020206966206E6F64652E726967687420213D206E756C6C207468656E207669736974286E6F64652E726967687429, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('835', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE69C80E5908EEFBC8CE4B88AE99DA2E79A84E4B8ADE5BA8FE9818DE58E86EFBC8CE6AF8FE4B8AAE7BB93E782B9E59CA8E8AEBFE997AEE5B7A6E5AD90E6A091E5928CE58FB3E5AD90E6A091E4B98BE997B4E8AEBFE997AEE38082E8BF99E59CA8E9818DE58E86E4BA8CE58F89E6909CE7B4A2E6A091E697B6E5BE88E5B8B8E794A8EFBC8CE59BA0E4B8BAE5AE83E883BDE794A8E98092E5A29EE79A84E9A1BAE5BA8FE69DA5E9818DE58E86E68980E69C89E79A84E580BCE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('836', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4B8BAE4BB80E4B988E591A2EFBC9FE5A682E69E9C6EE698AFE4BA8CE58F89E6909CE7B4A2E6A091E79A84E7BB93E782B9EFBC8CE982A3E4B9886EE79A84E5B7A6E5AD90E6A091E79A84E68980E69C89E7BB93E782B9E79A84E580BCE983BDE6AF946EE79A84E580BCE8A681E5B08FEFBC8CE8808CE4B8946EE79A84E58FB3E5AD90E6A091E79A84E68980E69C89E88A82E782B9E79A84E580BCE983BDE6AF946EE79A84E580BCE8A681E5A4A7E38082E59BA0E6ADA4EFBC8CE5A682E69E9CE68891E4BBACE9A1BAE5BA8FE9818DE58E86E5B7A6E5AD90E6A091EFBC8CE784B6E5908EE8AEBFE997AE6EEFBC8CE784B6E5908EE9A1BAE5BA8FE9818DE58E86E58FB3E5AD90E6A091E38082E68891E4BBACE5B0B1E5B7B2E7BB8FE5BEAAE5BA8FE8AEBFE997AEE4BA86E695B4E4B8AAE6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('837', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E8BF99E4B8AAE4BA8CE58F89E6A091E4B8ADEFBC8C20E5898DE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20322C20362C20352C2031312C20352C20392C203420E5908EE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20352C2031312C20362C20372C20342C20392C20352C203220E4B8ADE5BA8FE9818DE58E86E79A84E7BB93E69E9CEFBC9A322C20372C20352C20362C2031312C20322C20352C20342C2039, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('838', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4BBA5E4B88AE79A84E98092E5BD92E7AE97E6B395E4BDBFE794A8E4B88EE6A091E79A84E9AB98E5BAA6E68890E6AF94E4BE8BE79A84E6A088E7A9BAE997B4E38082E5A682E69E9CE68891E4BBACE59CA8E6AF8FE4B8AAE7BB93E782B9E4B8ADE5AD98E582A8E68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288EFBC8CE982A3E6A0B7E58FAFE4BBA5E4BDBFE794A8E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC8CE58FAAE4BDBFE794A8E5B8B8E695B0E7A9BAE997B4E5AE9EE78EB0E68980E69C89E8BF99E4BA9BE9818DE58E86E38082E784B6E8808CEFBC8CE68C87E59091E788B6E7BB93E782B9E79A84E68C87E99288E58DA0E794A8E69BB4E5A49AE79A84E7A9BAE997B4E38082E8BF99E58FAAE59CA8E99C80E8A681E68C87E59091E788B6E88A82E782B9E79A84E68C87E99288E68896E6A088E7A9BAE997B4E69C89E99990E697B6E6898DE4BDBFE794A8E38082E4BE8BE5A682EFBC8C20E8BF99E698AFE4B880E4B8AAE4B8ADE5BA8FE9818DE58E86E79A84E58F8DE5A48DE8BF90E7AE97E7AE97E6B395EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('839', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('840', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE794A8E4BA8CE58F89E6A091E8A1A8E7A4BAE4B88BE8BFB0E8A1A8E8BEBEE5BC8FEFBC9A612B622A28632D64292D652F6620E58588E5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A2D2B612A622D63642F656620E4B8ADE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A612B622A632D642D652F6620E5908EE5BA8FE9818DE58E86E79A84E5BA8FE58897E698AFEFBC9A616263642D2A2B65662F2D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('841', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E6B7B1E5BAA6E4BC98E58588E7BAA7E4B8ADEFBC8CE68891E4BBACE5B88CE69C9BE4BB8EE6A0B9E7BB93E782B9E8AEBFE997AEE69C80E8BF9CE79A84E7BB93E782B9E38082E5928CE59BBEE79A84E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E4B88DE5908CE79A84E698AFEFBC8CE4B88DE99C80E8AEB0E4BD8FE8AEBFE997AEE8BF87E79A84E6AF8FE4B880E4B8AAE7BB93E782B9EFBC8CE59BA0E4B8BAE6A091E4B8ADE4B88DE4BC9AE69C89E78EAFE38082E5898DE5BA8FEFBC8CE4B8ADE5BA8FE5928CE5908EE5BA8FE9818DE58E86E983BDE698AFE6B7B1E5BAA6E4BC98E58588E9818DE58E86E79A84E789B9E4BE8BE38082E58F82E8A781E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('842', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE5928CE6B7B1E5BAA6E4BC98E58588E9818DE58E86E4B88DE5908CEFBC8CE5B9BFE5BAA6E4BC98E58588E9818DE58E86E4BC9AE58588E8AEBFE997AEE7A6BBE6A0B9E88A82E782B9E69C80E8BF91E79A84E88A82E782B9E38082E58F82E8A781E5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E3808220E4BA8CE58F89E6A091E79A84E5B9BFE5BAA6E4BC98E58588E9818DE58E86E58F88E7A7B0E68C89E5B182E6ACA1E9818DE58E86E38082E7AE97E6B395E5809FE58AA9E9989FE58897E5AE9EE78EB0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:09', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('843', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4B880E888ACE69C89E5BA8FE6A091E5928CE4BA8CE58F89E6A091E4B98BE997B4E69C89E4B880E4B880E698A0E5B084E585B3E7B3BBEFBC8CE883BDE8BF9BE8A18CE79BB8E4BA92E8BDACE68DA2E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('844', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A6EE58F89E6A091E8BDACE68DA2E4B8BAE4BA8CE58F89E6A091E79A84E696B9E6B395EFBC9AE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E5B7A6E5AD90E7BB93E782B9EFBC9BE4BA8CE58F89E6A091E4B8ADE7BB93E782B978E79A84E58FB3E5AD90E7BB93E782B9E4B8BA6EE58F89E6A091E4B8ADE7BB93E782B978E79A84E7ACACE4B880E4B8AAE58FB3E8BEB9E79A84E5908CE7BAA7E7BB93E782B979E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('845', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4BE8BE5A682EFBC8CE59CA8E5B7A6E8BEB9E79A84E6A091E4B8ADEFBC8C41E69C8936E4B8AAE5AD90E7BB93E782B97B422C432C442C452C462C477DE38082E5AE83E883BDE8A2ABE8BDACE68DA2E68890E58FB3E8BEB9E79A84E4BA8CE58F89E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('846', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59CA8E58584E5BC9FE4B98BE997B4E58AA0E4B880E8BF9EE68EA5EFBC9B20E5AFB9E6AF8FE4B8AAE7BB93E782B9EFBC8CE999A4E4BA86E585B6E5B7A6E5ADA9E5AD90E5A496EFBC8CE58EBBE999A4E585B6E4B88EE585B6E4BD99E5ADA9E5AD90E4B98BE997B4E79A84E88194E7B3BBEFBC9B20E4BBA5E6A091E79A84E6A0B9E7BB93E782B9E4B8BAE8BDB4E5BF83EFBC8CE5B086E695B4E6A091E9A1BAE697B6E99288E8BDAC3435E5BAA6E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('847', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E6A087E8AEB0E6B395EFBC88E5ADA9E5AD90E58584E5BC9FE6A087E8AEB0E6B395EFBC89E698AFE6A091E5928CE4BA8CE58F89E6A091E8BDACE68DA2E79A84E5AA92E4BB8BE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('848', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E6A091E79A84E4BA8CE58F89E993BEE8A1A828E5ADA9E5AD90E28094E58584E5BC9F29E5AD98E582A8E8A1A8E7A4BA202A2F0A2074797065646566207374727563742043534E6F64650A207B0A20202054456C656D5479706520646174613B0A2020207374727563742043534E6F6465202A66697273746368696C642C2A6E6578747369626C696E673B0A207D43534E6F64652C2A4353547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('849', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE6A091E79A84E4BA8CE58F89E993BEE8A1A8E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9C5BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('850', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('851', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE7BABFE7B4A2E4BA8CE58F89E6A091202874687265616465642062696E6172792074726565295BE7BC96E8BE915D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('852', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('853', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('854', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('855', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE4BA8CE58F89E6A091E79A84E4BA8CE58F89E7BABFE7B4A2E5AD98E582A8E8A1A8E7A4BAEFBC9AE59CA8E7BABFE7B4A2E993BEE8A1A8E4B88AE6B7BBE58AA0E4B880E4B8AAE5A4B4E7BB93E782B9EFBC8CE5B9B6E4BBA4E585B66C6368696C64E59F9FE79A84E68C87E99288E68C87E59091E4BA8CE58F89E6A091E79A84E6A0B9E7BB93E782B9EFBC8CE585B6726368696C64E59F9FE79A84E68C87E99288E68C87E59091E4B8ADE5BA8FE9818DE58E86E697B6E8AEBFE997AEE79A84E69C80E5908EE4B880E4B8AAE7BB93E782B9E38082E4BBA4E4BA8CE58F89E6A091E4B8ADE5BA8FE5BA8FE58897E4B8ADE79A84E7ACACE4B880E4B8AAE7BB93E782B9E79A846C6368696C64E59F9FE68C87E99288E5928CE69C80E5908EE4B880E4B8AAE7BB93E782B9E79A84726368696C64E59F9FE79A84E68C87E99288E59D87E68C87E59091E5A4B4E7BB93E782B9EFBC8CE8BF99E6A0B7E5B0B1E5889BE5BBBAE4BA86E4B880E4B8AAE58F8CE59091E7BABFE7B4A2E993BEE8A1A8E38082E4BA8CE58F89E6A091E5B8B8E98787E794A8E4BA8CE58F89E993BEE8A1A8E696B9E5BC8FE5AD98E582A8E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('856', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0A2F2A20E4BA8CE58F89E6A091E79A84E4BA8CE58F89E7BABFE7B4A2E5AD98E582A8E8A1A8E7A4BA202A2F0A207479706564656620656E756D7B4C696E6B2C5468726561647D506F696E7465725461673B202F2A204C696E6B283029EFBC9AE68C87E99288EFBC8C546872656164283129EFBC9AE7BABFE7B4A2202A2F0A2074797065646566207374727563742042695468724E6F64650A207B0A20202054456C656D5479706520646174613B0A2020207374727563742042695468724E6F6465202A6C6368696C642C2A726368696C643B202F2A20E5B7A6E58FB3E5ADA9E5AD90E68C87E99288202A2F0A202020506F696E746572546167204C5461672C525461673B202F2A20E5B7A6E58FB3E6A087E5BF97202A2F0A207D42695468724E6F64652C2A4269546872547265653B, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('857', 0xE59FBAE69CACE6938DE4BD9CEFBC9A0AE59FBAE4BA8E432F432B2BE79A84E7AE97E6B395E5AE9EE78EB0E698BEE7A4BAE296BC20202F2A20E4BA8CE58F89E6A091E79A84E4BA8CE58F89E7BABFE7B4A2E5AD98E582A8E79A84E59FBAE69CACE6938DE4BD9C202A2F0A20766F69642043726561746542695468725472656528426954687254726565202A54290A207B202F2A20E68C89E58588E5BA8FE8BE93E585A5E7BABFE7B4A2E4BA8CE58F89E6A091E4B8ADE7BB93E782B9E79A84E580BCEFBC8CE69E84E980A0E7BABFE7B4A2E4BA8CE58F89E6A09154E380823028E695B4E59E8B292FE7A9BAE6A0BC28E5AD97E58583E59E8B29E8A1A8E7A4BAE7A9BAE7BB93E782B9202A2F0A20202054456C656D547970652063683B0A2020207363616E6628666F726D2C266368293B0A20202069662863683D3D4E696C290A20202020202A543D4E554C4C3B0A202020656C73650A2020207B0A20202020202A543D28426954687254726565296D616C6C6F632873697A656F662842695468724E6F646529293B202F2A20E7949FE68890E6A0B9E7BB93E782B928E58588E5BA8F29202A2F0A2020202020696628212A54290A2020202020202065786974284F564552464C4F57293B0A2020202020282A54292D3E646174613D63683B202F2A20E7BB99E6A0B9E7BB93E782B9E8B58BE6A48D202A2F0A20202020204372656174654269546872547265652826282A54292D3E6C6368696C64293B202F2A20E98092E59B9EE69E84E980A0E5B7A6E5AD90E6A091202A2F0A2020202020696628282A54292D3E6C6368696C6429202F2A20E69C89E5B7A6E5ADA9E5AD90202A2F0A20202020202020282A54292D3E4C5461673D4C696E6B3B202F2A20E7BB99E5B7A6E6A087E5BF97E8B58BE580BC28E68C87E6A08729202A2F0A20202020204372656174654269546872547265652826282A54292D3E726368696C64293B202F2A20E98092E59B9EE69E84E980A0E58FB3E5AD90E6A091202A2F0A2020202020696628282A54292D3E726368696C6429202F2A20E69C89E58FB3E5ADA9E5AD90202A2F0A20202020202020282A54292D3E525461673D4C696E6B3B202F2A20E7BB99E58FB3E6A087E5BF97E8B58BE580BC28E68C87E6A08729202A2F0A2020207D0A207D0A2020426954687254726565207072653B202F2A20E585A8E59F9FE58F98E695B0EFBC8CE5A78BE7BB88E68C87E59091E5889AE5889AE8AEBFE997AEE8BF87E79A84E7BB93E782B9202A2F0A20766F696420496E546872656164696E67284269546872547265652070290A207B202F2A20E9809AE8BF87E4B8ADE5BA8FE9818DE58E86E8BF9BE8A18CE4B8ADE5BA8FE7BABFE7B4A2E58C96EFBC8CE7BABFE7B4A2E58C96E4B98BE5908E707265E68C87E59091E69C80E5908EE4B880E4B8AAE7BB93E782B9E38082E6BC94E7AE97E6B395362E37202A2F0A2020206966287029202F2A20E7BABFE7B4A2E4BA8CE58F89E6A091E4B88DE7A9BA202A2F0A2020207B0A2020202020496E546872656164696E6728702D3E6C6368696C64293B202F2A20E98092E59B9EE5B7A6E5AD90E6A091E7BABFE7B4A2E58C96202A2F0A202020202069662821702D3E6C6368696C6429202F2A20E6B2A1E69C89E5B7A6E5ADA9E5AD90202A2F0A20202020207B0A20202020202020702D3E4C5461673D5468726561643B202F2A20E5B7A6E6A087E5BF97E4B8BAE7BABFE7B4A228E5898DE9A9B129202A2F0A20202020202020702D3E6C6368696C643D7072653B202F2A20E5B7A6E5ADA9E5AD90E68C87E6A087E68C87E59091E5898DE9A9B1202A2F0A20202020207D0A2020202020696628217072652D3E726368696C6429202F2A20E5898DE9A9B1E6B2A1E69C89E58FB3E5ADA9E5AD90202A2F0A20202020207B0A202020202020207072652D3E525461673D5468726561643B202F2A20E5898DE9A9B1E79A84E58FB3E6A087E5BF97E4B8BAE7BABFE7B4A228E5908EE7BBA729202A2F0A202020202020207072652D3E726368696C643D703B202F2A20E5898DE9A9B1E58FB3E5ADA9E5AD90E68C87E6A087E68C87E59091E585B6E5908EE7BBA728E5BD93E5898DE7BB93E782B97029202A2F0A20202020207D0A20202020207072653D703B202F2A20E4BF9DE68C81707265E68C87E5909170E79A84E5898DE9A9B1202A2F0A2020202020496E546872656164696E6728702D3E726368696C64293B202F2A20E98092E59B9EE58FB3E5AD90E6A091E7BABFE7B4A2E58C96202A2F0A2020207D0A207D0A2020766F696420496E4F72646572546872656164696E6728426954687254726565202A546872742C4269546872547265652054290A207B202F2A20E4B8ADE5BA8FE9818DE58E86E4BA8CE58F89E6A09154EFBC8CE5B9B6E5B086E585B6E4B8ADE5BA8FE7BABFE7B4A2E58C96EFBC8C54687274E68C87E59091E5A4B4E7BB93E782B9E38082E6BC94E7AE97E6B395362E36202A2F0A2020202A546872743D28426954687254726565296D616C6C6F632873697A656F662842695468724E6F646529293B0A202020696628212A5468727429202F2A20E7949FE68890E5A4B4E7BB93E782B9E4B88DE68890E58A9F202A2F0A202020202065786974284F564552464C4F57293B0A202020282A54687274292D3E4C5461673D4C696E6B3B202F2A20E5BBBAE5A4B4E7BB93E782B9EFBC8CE5B7A6E6A087E5BF97E4B8BAE68C87E6A087202A2F0A202020282A54687274292D3E525461673D5468726561643B202F2A20E58FB3E6A087E5BF97E4B8BAE7BABFE7B4A2202A2F0A202020282A54687274292D3E726368696C643D2A546872743B202F2A20E58FB3E68C87E99288E59B9EE68C87202A2F0A202020696628215429202F2A20E88BA5E4BA8CE58F89E6A091E7A9BAEFBC8CE58899E5B7A6E68C87E99288E59B9EE68C87202A2F0A2020202020282A54687274292D3E6C6368696C643D2A546872743B0A202020656C73650A2020207B0A2020202020282A54687274292D3E6C6368696C643D543B202F2A20E5A4B4E7BB93E782B9E79A84E5B7A6E68C87E6A087E68C87E59091E6A0B9E7BB93E782B9202A2F0A20202020207072653D2A546872743B202F2A2070726528E5898DE9A9B129E79A84E5889DE580BCE68C87E59091E5A4B4E7BB93E782B9202A2F0A2020202020496E546872656164696E672854293B202F2A20E4B8ADE5BA8FE9818DE58E86E8BF9BE8A18CE4B8ADE5BA8FE7BABFE7B4A2E58C96EFBC8C707265E68C87E59091E4B8ADE5BA8FE9818DE58E86E79A84E69C80E5908EE4B880E4B8AAE7BB93E782B9202A2F0A20202020207072652D3E726368696C643D2A546872743B202F2A20E69C80E5908EE4B880E4B8AAE7BB93E782B9E79A84E58FB3E68C87E6A087E68C87E59091E5A4B4E7BB93E782B9202A2F0A20202020207072652D3E525461673D5468726561643B202F2A20E69C80E5908EE4B880E4B8AAE7BB93E782B9E79A84E58FB3E6A087E5BF97E4B8BAE7BABFE7B4A2202A2F0A2020202020282A54687274292D3E726368696C643D7072653B202F2A20E5A4B4E7BB93E782B9E79A84E58FB3E68C87E6A087E68C87E59091E4B8ADE5BA8FE9818DE58E86E79A84E69C80E5908EE4B880E4B8AAE7BB93E782B9202A2F0A2020207D0A207D0A2020766F696420496E4F7264657254726176657273655F5468722842695468725472656520542C766F6964282A5669736974292854456C656D5479706529290A207B202F2A20E4B8ADE5BA8FE9818DE58E86E7BABFE7B4A2E4BA8CE58F89E6A0915428E5A4B4E7BB93E782B929E79A84E99D9EE98092E59B9EE6BC94E7AE97E6B395E38082E6BC94E7AE97E6B395362E35202A2F0A20202042695468725472656520703B0A202020703D542D3E6C6368696C643B202F2A2070E68C87E59091E6A0B9E7BB93E782B9202A2F0A2020207768696C652870213D54290A2020207B202F2A20E7A9BAE6A091E68896E9818DE58E86E7BB93E69D9FE697B6EFBC8C703D3D54202A2F0A20202020207768696C6528702D3E4C5461673D3D4C696E6B29202F2A20E794B1E6A0B9E7BB93E782B9E4B880E79BB4E689BEE588B0E4BA8CE58F89E6A091E79A84E69C80E5B7A6E7BB93E782B9202A2F0A20202020202020703D702D3E6C6368696C643B0A2020202020566973697428702D3E64617461293B202F2A20E8AEBFE997AEE6ADA4E7BB93E782B9202A2F0A20202020207768696C6528702D3E525461673D3D5468726561642626702D3E726368696C64213D5429202F2A20702D3E726368696C64E698AFE7BABFE7B4A228E5908EE7BBA729EFBC8CE4B894E4B88DE698AFE9818DE58E86E79A84E69C80E5908EE4B880E4B8AAE7BB93E782B9202A2F0A20202020207B0A20202020202020703D702D3E726368696C643B0A20202020202020566973697428702D3E64617461293B202F2A20E8AEBFE997AEE5908EE7BBA7E7BB93E782B9202A2F0A20202020207D0A2020202020703D702D3E726368696C643B202F2A20E88BA5702D3E726368696C64E4B88DE698AFE7BABFE7B4A228E698AFE58FB3E5ADA9E5AD9029EFBC8C70E68C87E59091E58FB3E5ADA9E5AD90EFBC8CE8BF94E59B9EE59B9EE59C88EFBC8C2A2F0A2020207D20202020202020202020202020202F2A20E689BEE8BF99E6A3B5E5AD90E6A091E4B8ADE5BA8FE9818DE58E86E79A84E7ACAC31E4B8AAE7BB93E782B9202A2F0A207D0A2020766F696420507265546872656164696E67284269546872547265652070290A207B202F2A205072654F72646572546872656164696E672829E8B083E794A8E79A84E98092E59B9EE587BDE695B0202A2F0A202020696628217072652D3E726368696C6429202F2A2070E79A84E5898DE9A9B1E6B2A1E69C89E58FB3E5ADA9E5AD90202A2F0A2020207B0A20202020207072652D3E726368696C643D703B202F2A2070E5898DE9A9B1E79A84E5908EE7BBA7E68C87E5909170202A2F0A20202020207072652D3E525461673D5468726561643B202F2A20707265E79A84E58FB3E5ADA9E5AD90E4B8BAE7BABFE7B4A2202A2F0A2020207D0A20202069662821702D3E6C6368696C6429202F2A2070E6B2A1E69C89E5B7A6E5ADA9E5AD90202A2F0A2020207B0A2020202020702D3E4C5461673D5468726561643B202F2A2070E79A84E5B7A6E5ADA9E5AD90E4B8BAE7BABFE7B4A2202A2F0A2020202020702D3E6C6368696C643D7072653B202F2A2070E79A84E5B7A6E5ADA9E5AD90E68C87E59091E5898DE9A9B1202A2F0A2020207D0A2020207072653D703B202F2A20E7A7BBE58AA8E5898DE9A9B1202A2F0A202020696628702D3E4C5461673D3D4C696E6B29202F2A2070E69C89E5B7A6E5ADA9E5AD90202A2F0A2020202020507265546872656164696E6728702D3E6C6368696C64293B202F2A20E5AFB970E79A84E5B7A6E5ADA9E5AD90E98092E59B9EE591BCE58FAB707265546872656164696E672829202A2F0A202020696628702D3E525461673D3D4C696E6B29202F2A2070E69C89E58FB3E5ADA9E5AD90202A2F0A2020202020507265546872656164696E6728702D3E726368696C64293B202F2A20E5AFB970E79A84E58FB3E5ADA9E5AD90E98092E59B9EE591BCE58FAB707265546872656164696E672829202A2F0A207D0A2020766F6964205072654F72646572546872656164696E6728426954687254726565202A546872742C4269546872547265652054290A207B202F2A20E58588E5BA8FE7BABFE7B4A2E58C96E4BA8CE58F89E6A09154EFBC8CE5A4B4E7BB93E782B9E79A84E58FB3E68C87E6A087E68C87E59091E58588E5BA8FE9818DE58E86E79A84E69C80E5908E31E4B8AAE7BB93E782B9202A2F0A2020202A546872743D28426954687254726565296D616C6C6F632873697A656F662842695468724E6F646529293B0A202020696628212A5468727429202F2A20E7949FE68890E5A4B4E7BB93E782B9202A2F0A202020202065786974284F564552464C4F57293B0A202020282A54687274292D3E4C5461673D4C696E6B3B202F2A20E5A4B4E7BB93E782B9E79A84E5B7A6E68C87E99288E4B8BAE5ADA9E5AD90202A2F0A202020282A54687274292D3E525461673D5468726561643B202F2A20E5A4B4E7BB93E782B9E79A84E58FB3E68C87E99288E4B8BAE7BABFE7B4A2202A2F0A202020282A54687274292D3E726368696C643D2A546872743B202F2A20E5A4B4E7BB93E782B9E79A84E58FB3E68C87E6A087E68C87E59091E887AAE8BAAB202A2F0A202020696628215429202F2A20E7A9BAE6A091202A2F0A2020202020282A54687274292D3E6C6368696C643D2A546872743B202F2A20E5A4B4E7BB93E782B9E79A84E5B7A6E68C87E6A087E4B99FE68C87E59091E887AAE8BAAB202A2F0A202020656C73650A2020207B202F2A20E99D9EE7A9BAE6A091202A2F0A2020202020282A54687274292D3E6C6368696C643D543B202F2A20E5A4B4E7BB93E782B9E79A84E5B7A6E68C87E6A087E68C87E59091E6A0B9E7BB93E782B9202A2F0A20202020207072653D2A546872743B202F2A20E5898DE9A9B1E4B8BAE5A4B4E7BB93E782B9202A2F0A2020202020507265546872656164696E672854293B202F2A20E4BB8EE5A4B4E7BB93E782B9E5BC80E5A78BE58588E5BA8FE98092E59B9EE7BABFE7B4A2E58C96202A2F0A20202020207072652D3E726368696C643D2A546872743B202F2A20E69C80E5908EE4B880E4B8AAE7BB93E782B9E79A84E5908EE7BBA7E68C87E59091E5A4B4E7BB93E782B9202A2F0A20202020207072652D3E525461673D5468726561643B0A2020202020282A54687274292D3E726368696C643D7072653B202F2A20E5A4B4E7BB93E782B9E79A84E5908EE7BBA7E68C87E59091E69C80E5908EE4B880E4B8AAE7BB93E782B9202A2F0A2020207D0A207D0A2020766F6964205072654F7264657254726176657273655F5468722842695468725472656520542C766F6964282A5669736974292854456C656D5479706529290A207B202F2A20E58588E5BA8FE9818DE58E86E7BABFE7B4A2E4BA8CE58F89E6A0915428E5A4B4E7BB93E782B929E79A84E99D9EE98092E59B9EE6BC94E7AE97E6B395202A2F0A20202042695468725472656520703D542D3E6C6368696C643B202F2A2070E68C87E59091E6A0B9E7BB93E782B9202A2F0A2020207768696C652870213D5429202F2A2070E6B2A1E68C87E59091E5A4B4E7BB93E782B928E9818DE58E86E79A84E69C80E5908E31E4B8AAE7BB93E782B9E79A84E5908EE7BBA7E68C87E59091E5A4B4E7BB93E782B929202A2F0A2020207B0A2020202020566973697428702D3E64617461293B202F2A20E8AEBFE997AEE6A0B9E7BB93E782B9202A2F0A2020202020696628702D3E4C5461673D3D4C696E6B29202F2A2070E69C89E5B7A6E5ADA9E5AD90202A2F0A20202020202020703D702D3E6C6368696C643B202F2A2070E68C87E59091E5B7A6E5ADA9E5AD9028E5908EE7BBA729202A2F0A2020202020656C7365202F2A2070E697A0E5B7A6E5ADA9E5AD90202A2F0A20202020202020703D702D3E726368696C643B202F2A2070E68C87E59091E58FB3E5ADA9E5AD90E68896E5908EE7BBA7202A2F0A2020207D0A207D0A2020766F696420506F7374546872656164696E67284269546872547265652070290A207B202F2A20506F73744F72646572546872656164696E672829E8B083E794A8E79A84E98092E59B9EE587BDE695B0202A2F0A2020206966287029202F2A2070E4B88DE7A9BA202A2F0A2020207B0A2020202020506F7374546872656164696E6728702D3E6C6368696C64293B202F2A20E5AFB970E79A84E5B7A6E5ADA9E5AD90E98092E59B9EE591BCE58FAB506F7374546872656164696E672829202A2F0A2020202020506F7374546872656164696E6728702D3E726368696C64293B202F2A20E5AFB970E79A84E58FB3E5ADA9E5AD90E98092E59B9EE591BCE58FAB506F7374546872656164696E672829202A2F0A202020202069662821702D3E6C6368696C6429202F2A2070E6B2A1E69C89E5B7A6E5ADA9E5AD90202A2F0A20202020207B0A20202020202020702D3E4C5461673D5468726561643B202F2A2070E79A84E5B7A6E5ADA9E5AD90E4B8BAE7BABFE7B4A2202A2F0A20202020202020702D3E6C6368696C643D7072653B202F2A2070E79A84E5B7A6E5ADA9E5AD90E68C87E59091E5898DE9A9B1202A2F0A20202020207D0A2020202020696628217072652D3E726368696C6429202F2A2070E79A84E5898DE9A9B1E6B2A1E69C89E58FB3E5ADA9E5AD90202A2F0A20202020207B0A202020202020207072652D3E525461673D5468726561643B202F2A2070E5898DE9A9B1E79A84E58FB3E5ADA9E5AD90E4B8BAE7BABFE7B4A2202A2F0A202020202020207072652D3E726368696C643D703B202F2A2070E5898DE9A9B1E79A84E5908EE7BBA7E68C87E5909170202A2F0A20202020207D0A20202020207072653D703B202F2A20E7A7BBE58AA8E5898DE9A9B1202A2F0A2020207D0A207D0A2020766F696420506F73744F72646572546872656164696E6728426954687254726565202A546872742C4269546872547265652054290A207B202F2A20E5908EE5BA8FE98092E59B9EE7BABFE7B4A2E58C96E4BA8CE58F89E6A091202A2F0A2020202A546872743D28426954687254726565296D616C6C6F632873697A656F662842695468724E6F646529293B0A202020696628212A5468727429202F2A20E7949FE68890E5A4B4E7BB93E782B9202A2F0A202020202065786974284F564552464C4F57293B0A202020282A54687274292D3E4C5461673D4C696E6B3B202F2A20E5A4B4E7BB93E782B9E79A84E5B7A6E68C87E99288E4B8BAE5ADA9E5AD90202A2F0A202020282A54687274292D3E525461673D5468726561643B202F2A20E5A4B4E7BB93E782B9E79A84E58FB3E68C87E99288E4B8BAE7BABFE7B4A2202A2F0A202020696628215429202F2A20E7A9BAE6A091202A2F0A2020202020282A54687274292D3E6C6368696C643D282A54687274292D3E726368696C643D2A546872743B202F2A20E5A4B4E7BB93E782B9E79A84E5B7A6E58FB3E68C87E6A087E68C87E59091E887AAE8BAAB202A2F0A202020656C73650A2020207B202F2A20E99D9EE7A9BAE6A091202A2F0A2020202020282A54687274292D3E6C6368696C643D282A54687274292D3E726368696C643D543B202F2A20E5A4B4E7BB93E782B9E79A84E5B7A6E58FB3E68C87E6A087E68C87E59091E6A0B9E7BB93E782B928E69C80E5908EE4B880E4B8AAE7BB93E782B929202A2F0A20202020207072653D2A546872743B202F2A20E5898DE9A9B1E4B8BAE5A4B4E7BB93E782B9202A2F0A2020202020506F7374546872656164696E672854293B202F2A20E4BB8EE5A4B4E7BB93E782B9E5BC80E5A78BE5908EE5BA8FE98092E59B9EE7BABFE7B4A2E58C96202A2F0A20202020206966287072652D3E52546167213D4C696E6B29202F2A20E69C80E5908EE4B880E4B8AAE7BB93E782B9E6B2A1E69C89E58FB3E5ADA9E5AD90202A2F0A20202020207B0A202020202020207072652D3E726368696C643D2A546872743B202F2A20E69C80E5908EE4B880E4B8AAE7BB93E782B9E79A84E5908EE7BBA7E68C87E59091E5A4B4E7BB93E782B9202A2F0A202020202020207072652D3E525461673D5468726561643B0A20202020207D0A2020207D0A207D0A2020766F69642044657374726F7942695472656528426954687254726565202A54290A207B202F2A2044657374726F79426954687254726565E8B083E794A8E79A84E98092E59B9EE587BDE695B0EFBC8C54E68C87E59091E6A0B9E7BB93E782B9202A2F0A2020206966282A5429202F2A20E99D9EE7A9BAE6A091202A2F0A2020207B0A2020202020696628282A54292D3E4C5461673D3D3029202F2A20E69C89E5B7A6E5ADA9E5AD90202A2F0A2020202020202044657374726F794269547265652826282A54292D3E6C6368696C64293B202F2A20E99480E6AF81E5B7A6E5ADA9E5AD90E5AD90E6A091202A2F0A2020202020696628282A54292D3E525461673D3D3029202F2A20E69C89E58FB3E5ADA9E5AD90202A2F0A2020202020202044657374726F794269547265652826282A54292D3E726368696C64293B202F2A20E99480E6AF81E58FB3E5ADA9E5AD90E5AD90E6A091202A2F0A202020202066726565282A54293B202F2A20E9878AE694BEE6A0B9E7BB93E782B9202A2F0A2020202020543D4E554C4C3B202F2A20E7A9BAE68C87E99288E8B58B30202A2F0A2020207D0A207D0A2020766F69642044657374726F7942695468725472656528426954687254726565202A54687274290A207B202F2A20E5889DE5A78BE69DA1E4BBB6EFBC9AE7BABFE7B4A2E4BA8CE58F89E6A09154687274E5AD98E59CA8E38082E6938DE4BD9CE7BB93E69E9CEFBC9AE99480E6AF81E7BABFE7B4A2E4BA8CE58F89E6A09154687274202A2F0A2020206966282A5468727429202F2A20E5A4B4E7BB93E782B9E5AD98E59CA8202A2F0A2020207B0A2020202020696628282A54687274292D3E6C6368696C6429202F2A20E6A0B9E7BB93E782B9E5AD98E59CA8202A2F0A2020202020202044657374726F794269547265652826282A54687274292D3E6C6368696C64293B202F2A20E98092E59B9EE99480E6AF81E5A4B4E7BB93E782B96C6368696C64E68980E68C87E4BA8CE58F89E6A091202A2F0A202020202066726565282A54687274293B202F2A20E9878AE694BEE5A4B4E7BB93E782B9202A2F0A20202020202A546872743D4E554C4C3B202F2A20E7BABFE7B4A2E4BA8CE58F89E6A09154687274E68C87E99288E8B58B30202A2F0A2020207D0A207D, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91', '2016-11-14 10:34:00', '2016-12-20 09:44:10', '42', '二叉树', '数据结构');
INSERT INTO `spider_text` VALUES ('859', 0xhttps://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('860', 0xE69198E8A681EFBC9A0AE794B1E4BA8E4A756479206172726179E59CA8E6938DE4BD9CE9809FE5BAA6E5928CE58685E5AD98E4BDBFE794A8E4B88AE983BDE99D9EE5B8B8E9AB98E69588EFBC8CE5908CE697B6E5B9B6E4B88DE99C80E8A681E789B9E6AE8AE9858DE7BDAEE68896E5889DE5A78BE58C96EFBC8CE4BDBFE5BE97E5AE83E58FAFE4BBA5E794A8E69DA5E69BBFE68DA2E68E89E5A49AE7A78DE5B8B8E8A781E695B0E68DAEE7BB93E69E84EFBC8CE4BE8BE5A682E8B7B3E8B783E58897E8A1A82CE993BEE8A1A82CE4BA8CE58F89E6A0912C42E6A0912CE695A3E58897E8A1A8EFBC8CE8808CE4B8946A756479206172726179E59CA8E6B5B7E9878FE695B0E68DAEE99B86E4B88AE79A84E8A1A8E78EB0E6AF94E982A3E4BA9BE695B0E68DAEE7BB93E69E84E69BB4E5A5BDE38082, 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('861', 0xE69198E8A681EFBC9A0AE7B297E795A5E59CB0E8AEB2EFBC8C4A756479206172726179E5838FE698AFE4B880E4B8AAE9AB98E5BAA6E4BC98E58C96E4BA86E79A84323536E58F89E6A091EFBC8CE4B8BAE4BA86E88A82E79C81E58685E5AD98EFBC8CE5AE83E4BDBFE794A8E4BA86E8B685E8BF873230E7A78DE4B88DE5908CE79A84E58E8BE7BCA9E68A80E69CAFE69DA5E58E8BE7BCA9E6A091E88A82E782B9E380822E5B315D, 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('862', 0xE69198E8A681EFBC9A0A4A75647920617272617920E698AF446F75676C6173204261736B696E73E58F91E6988EE79A84EFBC8CE4BB96E794A8E887AAE5B7B1E5A6B9E5A6B9E79A84E5908DE5AD97E591BDE5908DE4BA86E8BF99E7A78DE695B0E68DAEE7BB93E69E84E380825B325D, 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('863', 0xE69CAFE8AFADEFBC9A0AE5AEB9E9878FE38081E794A8E9878FE38081E5AF86E5BAA620E8BF99E4B889E4B8AAE6A682E5BFB5E698AFE4BCA0E7BB9FE6A091E5BDA2E7BB93E69E84E4B8ADE5BE88E5B091E4BDBFE794A8EFBC8CE4BD86E59CA84A756479206172726179E4B8ADE58F8DE5A48DE4BDBFE794A8E79A84E3808220E8BF99E4B8AAE79A84E6A682E5BFB5E79A84E5AE9AE4B989E5A682E4B88BEFBC9A, 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('864', 0xhttps://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('865', 0xE7AE97E6B395EFBC9A0AE4BB8E4A756479206172726179E79A84E58F91E6988EE88085E68980E692B0E58699E79A84E7AE80E4BB8BE4BBA5E58F8AE585B6E4BB96E4B880E4BA9BE79BB8E585B3E79A84E4B8ADE69687E8AEBAE69687E4B8ADE79C8BEFBC8CE8AEBEE8AEA1E4B8ADE4BDBFE794A8E4BA86E5A49AE7A78DE79A84E58E8BE7BCA9E6809DE683B3E4B88EE58E8BE7BCA9E7AE97E6B395EFBC8CE6A0B9E68DAEE4B88DE5908CE79A84E5AF86E5BAA6E68385E586B5EFBC8CE98089E68BA9E4B88DE5908CE79A84E58E8BE7BCA9E696B9E5BC8FEFBC8CE4BBA5E69C9FE5B0BDE58FAFE883BDE88A82E79C81E58685E5AD98EFBC8CE9998DE4BD8EE5AE9EE99985E5AD98E582A8E4B8ADE79A84E7A880E7968FE68385E586B5EFBC8CE68891E78C9CE6B58BEFBC8CE8BF99E883BDE5A49FE59CA8E7BC93E5AD98E591BDE4B8ADE78E87E4B88AE5B8A6E69DA5E4B88DE5B091E68F90E58D87EFBC8CE8BF9BE8808CE68F90E58D87E69588E78E87E38082, 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('866', 0xE7AE97E6B395EFBC9A0AE5AFB9E4BA8EE5AF86E5BAA6E5BE88E9AB98EFBC8CE7A9BAE6B49EE5BE88E5B091E79A84E88A82E782B9EFBC8CE4BDBFE794A8E4BD8DE59BBEEFBC886269746D6170EFBC89E69DA5E5AD98E582A8E3808220E5AFB9E4BA8EE5AF86E5BAA6E5BE88E4BD8EE79A84E68385E586B5EFBC8CE58FAAE5AD98E582A8E587BAE78EB0E79A84E994AEE580BC20E5AFB9E4BA8EE5AF86E5BAA6E69E81E4BD8EE79A84E68385E586B5EFBC8CE4BDBFE794A8E7B1BBE4BCBCE4BA8EE5AD97E585B8E6A091E79A84E7BB93E69E84EFBC8CE8B7A8E5B182E58E8BE7BCA9E695B0E68DAEE38082, 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('867', 0xE7AE97E6B395EFBC9A0A5E20416C616E2053696C766572737465696E2C20224A7564792049562053686F70204D616E75616C222C2032303032205E20687474703A2F2F6A7564792E736F75726365666F7267652E6E65742F205E20416476616E63657320696E206461746162617365733A20636F6E63657074732C2073797374656D7320616E64206170706C69636174696F6E73C2A03A204279204B6F7461676972692052616D616D6F68616E6172616F, 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('868', 0xE7AE97E6B395EFBC9A0A4D61696E204A75647920617272617973207369746520486F77204A7564792061727261797320776F726B20616E642077687920746865792061726520736F2066617374204120636F6D706C65746520746563686E6963616C206465736372697074696F6E206F66204A7564792061727261797320416E20696E646570656E64656E7420706572666F726D616E636520636F6D70617269736F6E206F66204A75647920746F2048617368205461626C6573204120636F6D7061637420696D706C656D656E746174696F6E206F66204A7564792061727261797320696E20314B206C696E6573206F66204320636F6465, 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('869', 0xhttps://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('870', 0xE9809FE5BAA6EFBC9A0A4A756479206172726179E59CA8E8AEBEE8AEA1E4B88AE5B0B1E58A9BE4BA89E4BF9DE68C81E5B0BDE58FAFE883BDE9AB98E79A84435055E7BC93E5AD98E591BDE4B8ADE78E87EFBC8CE4B8BAE4BA86E8BEBEE588B0E8BF99E4B8AAE79BAEE6A087EFBC8CE585B6E58685E983A8E7AE97E6B395E58D81E58886E5A48DE69D82E38082E794B1E4BA8EE69C89E4BA86E8BF99E4BA9BE99288E5AFB9E680A7E79A84E4BC98E58C96EFBC8CE4BDBFE5BE974A756479206172726179E59CA8E8BF90E8A18CE9809FE5BAA6E4B88AE58D81E58886E9AB98E69588EFBC8CE69C89E697B6E7949AE887B3E8B685E8BF87E695A3E58897E8A1A8EFBC8CE5B0A4E585B6E698AFE59CA8E5A484E79086E5A4A7E695B0E68DAEE99B86E79A84E697B6E58099E38082E794B1E4BA8E4A756479206172726179E698AFE4BE9DE68998E6A0912028E695B0E68DAEE7BB93E69E8429E5BDA2E7BB93E69E84E8AEBEE8AEA1E79A84EFBC8CE585B6E58685E5AD98E6B688E88097E6AF94E695A3E58897E8A1A8E5B08FE5BE88E5A49AEFBC8CE5908CE6A0B7E698AFE68B9CE6A091E5BDA2E7BB93E69E84E68980E8B590EFBC8CE4BDBFE5BE97E5AE83E58FAFE4BBA5E5AE8CE68890E994AEE580BCE79A84E9A1BAE5BA8FE9818DE58E86EFBC8CE8BF99E4B880E782B9E59CA8E695A3E58897E8A1A8E4B8ADE698AFE4B88DE58FAFE883BDE79A84E38082, 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('871', 0xE9809FE5BAA6EFBC9A0AE8AF91E88085E6B3A8EFBC9AE68891E5AE8CE585A8E6B2A1E6909EE6988EE799BD4A756479206172726179E698AFE5A682E4BD95E68F90E9AB98E7BC93E5AD98E591BDE4B8ADE78E87E79A84EFBC8CE5B88CE69C9BE69C89E9AB98E4BABAE59CA8E6ADA4E8A1A5E58585, 'https://zh.wikipedia.org/wiki/%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%98%B5', '2013-10-29 03:34:00', '2016-12-20 09:44:43', '43', '朱迪矩阵', '数据结构');
INSERT INTO `spider_text` VALUES ('872', 0xE69198E8A681EFBC9A0AE59CA8E7BC96E7A88BE8AFADE8A880E4B8ADEFBC8CE695B0E7BB84E695B0E68DAEE7BB93E69E84EFBC88E88BB1E8AFADEFBC9A6172726179206461746120737472756374757265EFBC89EFBC8CE7AE80E7A7B0E695B0E7BB84EFBC88E88BB1E8AFADEFBC9A4172726179EFBC89EFBC8CE698AFE4B880E7A78DE695B0E68DAEE7BB93E69E84EFBC8CE698AFE695B0E68DAEE58583E7B4A0EFBC88656C656D656E7473EFBC89E79A84E99B86E59088E38082E5AE83E58D81E58886E7B1BBE4BCBCE695B0E5ADA6E4B88AE79A84E2809CE79FA9E998B5E2809DEFBC8CE4BD86E698AFE59CA8E794B5E88491E7BC96E7A88BE8AFADE8A880E4B88AEFBC8CE8A1A8E7A4BAE696B9E6B395E5928CE6848FE4B989E4B88AE795A5E69C89E4B88DE5908CE38082, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:51', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('873', 0xE69198E8A681EFBC9A0AE695B0E5ADA6E4B88AE79A84E79FA9E998B5E79C8BE8B5B7E69DA5E5838FE8BF99E6A0B7EFBC9A2061203D205B2033203620322030203120E288922034203220E2889220312030205D207B5C646973706C61797374796C6520613D7B5C626567696E7B626D61747269787D33263626325C5C302631262D345C5C32262D3126305C656E647B626D61747269787D7D7D, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:51', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('874', 0xE69198E8A681EFBC9A0AE8808CE794B5E88491E4B88AE79A84E695B0E7BB84E79C8BE8B5B7E69DA5E5838FE8BF99E6A0B7EFBC8CE4BE8BE5A68243E8AFADE8A880E4B8ADE79A84E695B0E7BB84EFBC9A, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:51', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('875', 0xE69198E8A681EFBC9A0A696E7420615B335D5B335D3D7B200A20202020202020202020202020202020202020207B20332C2020362C202032207D2C0A20202020202020202020202020202020202020207B20302C2020312C202D34207D2C0A20202020202020202020202020202020202020207B20322C202D312C202030207D0A20202020202020202020202020202020207D3B, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:51', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('876', 0xE69198E8A681EFBC9A0AE899BDE784B6E695B0E7BB84E59CA8E59084E7A78DE794B5E88491E7BC96E7A88BE8AFADE8A880E4B8ADE79A84E8A1A8E7A4BAE5BC8FE795A5E69C89E4B88DE5908CEFBC8CE4BD86E698AFE587A0E4B98EE6AF8FE4B880E7A78DE7BC96E7A88BE8AFADE8A880E983BDE69C89E8BF99E7A78DE7BB93E69E84E5928CE8A782E5BFB5EFBC8CE5AE83E5B7B2E7BB8FE4B88DE58FAAE698AFE4B880E7A78DE7BC96E7A88BE4B893E794A8E79A84E69CAFE8AFADEFBC8CE8808CE698AFE794B5E88491E8BF90E4BD9CE4B8ADE99D9EE5B8B8E9878DE8A681E79A84E68A80E69CAFE5928CE6A682E5BFB5E38082E5BD93E5898DE794B5E88491E883BDE5A49FE698BEE7A4BAE38081E68993E58DB0E4B8ADE69687E5AD97EFBC8CE983BDE698AFE695B0E7BB84E79A84E8A782E5BFB5E5BA94E794A8EFBC9BE5AD97E7ACA6E4B8B2E4B99FE698AFE59FBAE4BA8EE695B0E7BB84E79A84E4B880E7A78DE9878DE8A681E695B0E68DAEE7BB93E69E84E38082E695B0E68DAEE5BA93E4B99FE698AFE695B0E7BB84E6A682E5BFB5E79A84E4B880E7A78DE689A9E58585E5928CE5BBB6E4BCB8E38082, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:51', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('877', 0xE5A49AE7BBB4E695B0E7BB84EFBC9A0AE699AEE9809AE695B0E7BB84E98787E794A8E4B880E4B8AAE695B4E695B0E69DA5E4BD9CE4B88BE6A087E38082E5A49AE7BBB4E695B0E7BB84E79A84E6A682E5BFB5E789B9E588ABE698AFE59CA8E695B0E580BCE8AEA1E7AE97E5928CE59BBEE5BDA2E5BA94E794A8E696B9E99DA2E99D9EE5B8B8E69C89E794A8E38082E68891E4BBACE59CA8E5A49AE7BBB4E695B0E7BB84E4B98BE4B8ADE98787E794A8E4B880E7B3BBE58897E69C89E5BA8FE79A84E695B4E695B0E69DA5E6A087E6B3A8EFBC8CE5A682E59CA85B20332C312C35205D20E38082E8BF99E7A78DE695B4E695B0E58897E8A1A8E4B98BE4B8ADE695B4E695B0E79A84E4B8AAE695B0E5A78BE7BB88E79BB8E5908CEFBC8CE4B894E8A2ABE7A7B0E4B8BAE695B0E7BB84E79A84E2809CE7BBB4E5BAA6E2809DE38082E585B3E4BA8EE6AF8FE4B8AAE695B0E7BB84E7BBB4E5BAA6E79A84E8BEB9E7958CE7A7B0E4B8BAE2809CE7BBB4E2809DE38082E7BBB4E5BAA6E4B8BA6BE79A84E695B0E7BB84E9809AE5B8B8E8A2ABE7A7B0E4B8BA6BE7BBB4E38082, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:51', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('878', 0xE5A49AE7BBB4E695B0E7BB84EFBC9A0AE5A49AE7BBB4E695B0E7BB84E79A84E695B0E7BB84E5908DE5AD97EFBC8CE59CA8E8A1A8E8BEBEE5BC8FE4B8ADE887AAE58AA8E8BDACE68DA2E4B8BAE695B0E7BB84E9A696E58583E7B4A0E59CB0E59D80E580BCEFBC8CE4BD86E8BF99E4B8AAE9A696E58583E7B4A0E5AE9EE99985E4B88AE698AFE58EBBE999A4E695B0E7BB84E4B88BE6A087E7ACACE4B880E7BBB4E4B98BE5908EE79A84E695B0E7BB84E589A9E4BD99E983A8E58886E38082E4BE8BE5A682EFBC9A, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:51', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('879', 0xE5A49AE7BBB4E695B0E7BB84EFBC9A0A696E7420615B31305D5B31355D3B0A20696E7420282A70295B31355D3D613B20202F2F2061E59CA8E8A1A8E8BEBEE5BC8FE4B8ADE887AAE58AA8E8BDACE68DA2E4B8BAE68C87E59091E585B7E69C893135E4B8AA696E74E79A84E695B0E7BB84E79A84E68C87E99288E580BCE38082, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:51', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('880', 0xE58FAFE58F98E995BFE695B0E7BB84EFBC9A0A433939E5BC95E585A5E4BA86E58FAFE58F98E995BFE695B0E7BB84EFBC887661726961626C65206C656E677468206172726179EFBC8CE7AE80E7A7B0564C41EFBC89EFBC8CE58FAAE883BDE5AE9AE4B989E59CA8E59D97E4BD9CE794A8E59F9FE68896E587BDE695B0E58E9FE59E8BE4BD9CE794A8E59F9FEFBC8CE5BF85E9A1BBE697A0E993BEE68EA5E680A7E38082E585B6E695B0E7BB84E995BFE5BAA6E59CA8E7BC96E8AF91E69C9FE58FAFE58F98EFBC8CE4BD86E59CA8E8BF90E8A18CE69C9FE8AFA5E695B0E7BB84E5AFB9E8B1A1E4B880E697A6E7949FE68890E5B0B1E4B88DE58FAFE694B9E58F98E695B0E7BB84E995BFE5BAA6E4BA86E38082E4BE8BE5A682EFBC9A, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:51', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('881', 0xE58FAFE58F98E995BFE695B0E7BB84EFBC9A0A766F696420666F6F28696E74206DEFBC8C696E74206E290A7B0A20202020696E7420765B6D5D5B6E5D3B200A20202020696E74202A705B6E5D3B0A7D, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:51', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('882', 0xE7A88BE5BA8FE8AEBEE8AEA1EFBC9A0AE695B0E7BB84E8AEBEE8AEA1E4B98BE5889DE698AFE59CA8E5BDA2E5BC8FE4B88AE4BE9DE8B596E58685E5AD98E58886E9858DE8808CE68890E79A84EFBC8CE68980E4BBA5E5BF85E9A1BBE59CA8E4BDBFE794A8E5898DE9A284E58588E8AFB7E6B182E7A9BAE997B4E38082E8BF99E4BDBFE5BE97E695B0E7BB84E69C89E4BBA5E4B88BE789B9E680A7EFBC9A, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('883', 0xE7A88BE5BA8FE8AEBEE8AEA1EFBC9A0AE8AFB7E6B182E7A9BAE997B4E4BBA5E5908EE5A4A7E5B08FE59BBAE5AE9AEFBC8CE4B88DE883BDE5868DE694B9E58F98EFBC88E695B0E68DAEE6BAA2E587BAE997AEE9A298EFBC89EFBC9B20E59CA8E58685E5AD98E4B8ADE69C89E7A9BAE997B4E8BF9EE7BBADE680A7E79A84E8A1A8E78EB0EFBC8CE4B8ADE997B4E4B88DE4BC9AE5AD98E59CA8E585B6E4BB96E7A88BE5BA8FE99C80E8A681E8B083E794A8E79A84E695B0E68DAEEFBC8CE4B8BAE6ADA4E695B0E7BB84E79A84E4B893E794A8E58685E5AD98E7A9BAE997B4EFBC9B20E59CA8E697A7E5BC8FE7BC96E7A88BE8AFADE8A880E4B8ADEFBC88E5A682E69C89E4B8ADE998B6E8AFADE8A880E4B98BE7A7B0E79A8443EFBC89EFBC8CE7A88BE5BA8FE4B88DE4BC9AE5AFB9E695B0E7BB84E79A84E6938DE4BD9CE5819AE4B88BE7958CE588A4E696ADEFBC8CE4B99FE5B0B1E69C89E6BD9CE59CA8E79A84E8B68AE7958CE6938DE4BD9CE79A84E9A38EE999A9EFBC88E6AF94E5A682E4BC9AE68A8AE695B0E68DAEE58699E59CA8E8BF90E8A18CE4B8ADE7A88BE5BA8FE99C80E8A681E8B083E794A8E79A84E6A0B8E5BF83E983A8E58886E79A84E58685E5AD98E4B88AEFBC89E38082, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('884', 0xhttps://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('885', 0xhttps://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('886', 0xE7A88BE5BA8FE8AEBEE8AEA1EFBC9A0A4E49535427732044696374696F6E617279206F6620416C676F726974686D7320616E64204461746120537472756374757265733A204172726179, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('888', 0xE69F94E680A7E695B0E7BB84E68890E59198EFBC9A0A433939E8A784E5AE9AEFBC8C737472756374E79A84E69C80E5908EE4B880E4B8AAE68890E59198E58FAFE4BBA5E698AFE4B88DE5AE8CE695B4E79A84E695B0E7BB84E7B1BBE59E8BE38082E4BE8BE5A682EFBC9A, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('889', 0xE69F94E680A7E695B0E7BB84E68890E59198EFBC9A0A73747275637420746573740A7B0A202020202020696E7420613B0A202020202020646F75626C6520623B0A2020202020206368617220635B5D3B0A7D3B, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('890', 0xE695B0E7BB84E4B88BE6A087E8BF90E7AE97E7ACA6EFBC9A0A43E8AFADE8A880E6A087E58786E4B8ADE5AE9AE4B989EFBC8CE695B0E7BB84E4B88BE6A087E8BF90E7AE97EFBC88417272617920737562736372697074696E67EFBC89E69C89E4B8A4E4B8AAE8BF90E7AE97E695B0EFBC8CE4B880E4B8AAE4B8BAE588B0E7B1BBE59E8B74797065E79A84E68C87E99288E8A1A8E8BEBEE5BC8FEFBC8CE58FA6E4B880E4B8AAE8BF90E7AE97E7ACA6E4B8BAE695B4E695B0E8A1A8E8BEBEE5BC8FEFBC8CE7BB93E69E9CE4B8BAE7B1BBE59E8B74797065E38082E4BD86E6B2A1E69C89E8A784E5AE9AE4B8A4E4B8AAE8BF90E7AE97E695B0E79A84E58588E5908EE6ACA1E5BA8F5BE6B3A820355DE38082E59BA0E6ADA4EFBC8CE69C89E4BBA5E4B88BE68EA8E8AEBAEFBC9A, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('891', 0xE695B0E7BB84E4B88BE6A087E8BF90E7AE97E7ACA6EFBC9A0AE4B8A4E4B8AAE8BF90E7AE97E695B0E58FAFE4BBA5E4BAA4E68DA2E9A1BAE5BA8FEFBC8CE58DB320705B4E5D20E4B88E204E5B705D20E698AFE7AD89E4BBB7E79A84EFBC8CE4B8BA202A28702B4E2920EFBC9B20E695B0E7BB84E4B88BE6A087E8BF90E7AE97EFBC8CE697A2E58FAFE4BBA5E98082E794A8E4BA8EE695B0E7BB84E5908DEFBC88E5AE9EE99985E4B88AE99A90E5BC8FE68A8AE695B0E7BB84E5908DE8BDACE68DA2E4B8BAE68C87E59091E695B0E7BB84E9A696E58583E7B4A0E79A84E68C87E99288E8A1A8E8BEBEE5BC8FEFBC89EFBC8CE4B99FE58FAFE4BBA5E98082E794A8E4BA8EE68C87E99288E8A1A8E8BEBEE5BC8FEFBC9B20E695B4E59E8BE8A1A8E8BEBEE5BC8FE58FAFE4BBA5E58F96E8B49FE580BCE38082, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('892', 0xE695B0E7BB84E4B88BE6A087E8BF90E7AE97E7ACA6EFBC9A0A696E7420615B31305D2C202A70203D20613B0A705B305D203D2031303B0A282070202B203120295B305D203D2032303B0A305B70202B20315D203D2031303B, 'https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84', '2016-01-01 00:00:00', '2016-12-20 09:44:52', '44', '数组', '数据结构');
INSERT INTO `spider_text` VALUES ('893', 0xhttps://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:02', '45', 'K-d树', '数据结构');
INSERT INTO `spider_text` VALUES ('894', 0xhttps://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:02', '45', 'K-d树', '数据结构');
INSERT INTO `spider_text` VALUES ('895', 0xE7AE80E4BB8BEFBC9A0A6B2D64E6A091E698AFE6AF8FE4B8AAE88A82E782B9E983BDE4B8BA6BE7BBB4E782B9E79A84E4BA8CE58F89E6A091E38082E68980E69C89E99D9EE58FB6E5AD90E88A82E782B9E58FAFE4BBA5E8A786E4BD9CE794A8E4B880E4B8AAE8B685E5B9B3E99DA2E68A8AE7A9BAE997B4E58886E58CBAE68890E4B8A4E4B8AAE58D8AE7A9BAE997B4282048616C662D73706163652029E38082E88A82E782B9E5B7A6E8BEB9E79A84E5AD90E6A091E4BBA3E8A1A8E59CA8E8B685E5B9B3E99DA2E5B7A6E8BEB9E79A84E782B9EFBC8CE88A82E782B9E58FB3E8BEB9E79A84E5AD90E6A091E4BBA3E8A1A8E59CA8E8B685E5B9B3E99DA2E58FB3E8BEB9E79A84E782B9E38082E98089E68BA9E8B685E5B9B3E99DA2E79A84E696B9E6B395E5A682E4B88BEFBC9AE6AF8FE4B8AAE88A82E782B9E983BDE4B88E6BE7BBB4E4B8ADE59E82E79BB4E4BA8EE8B685E5B9B3E99DA2E79A84E982A3E4B880E7BBB4E69C89E585B3E38082E59BA0E6ADA4EFBC8CE5A682E69E9CE98089E68BA9E68C89E785A778E8BDB4E58892E58886EFBC8CE68980E69C8978E580BCE5B08FE4BA8EE68C87E5AE9AE580BCE79A84E88A82E782B9E983BDE4BC9AE587BAE78EB0E59CA8E5B7A6E5AD90E6A091EFBC8CE68980E69C8978E580BCE5A4A7E4BA8EE68C87E5AE9AE580BCE79A84E88A82E782B9E983BDE4BC9AE587BAE78EB0E59CA8E58FB3E5AD90E6A091E38082E8BF99E6A0B7EFBC8CE8B685E5B9B3E99DA2E58FAFE4BBA5E794A8E8AFA578E580BCE69DA5E7A1AEE5AE9AEFBC8CE585B6E6B395E79FA2E4B8BA78E8BDB4E79A84E58D95E4BD8DE59091E9878FE38082, 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:02', '45', 'K-d树', '数据结构');
INSERT INTO `spider_text` VALUES ('896', 0xE5889BE5BBBA6B2D64E6A091EFBC9A0AE69C89E5BE88E5A49AE7A78DE696B9E6B395E58FAFE4BBA5E98089E68BA9E8BDB4E59E82E79BB4E58886E58CBAE99DA2EFBC8820617869732D616C69676E65642073706C697474696E6720706C616E657320EFBC89EFBC8CE68980E4BBA5E69C89E5BE88E5A49AE7A78DE5889BE5BBBA6B2D64E6A091E79A84E696B9E6B395E3808220E69C80E585B8E59E8BE79A84E696B9E6B395E5A682E4B88BEFBC9A, 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:02', '45', 'K-d树', '数据结构');
INSERT INTO `spider_text` VALUES ('897', 0xhttps://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:02', '45', 'K-d树', '数据结构');
INSERT INTO `spider_text` VALUES ('898', 0xE5889BE5BBBA6B2D64E6A091EFBC9A0AE8BF99E4B8AAE696B9E6B395E4BAA7E7949FE4B880E4B8AAE5B9B3E8A1A1E79A846B2D64E6A091E38082E6AF8FE4B8AAE58FB6E88A82E782B9E79A84E9AB98E5BAA6E983BDE58D81E58886E68EA5E8BF91E38082E784B6E8808CEFBC8CE5B9B3E8A1A1E79A84E6A091E4B88DE4B880E5AE9AE5AFB9E6AF8FE4B8AAE5BA94E794A8E983BDE698AFE69C80E4BDB3E79A84E38082, 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:02', '45', 'K-d树', '数据结构');
INSERT INTO `spider_text` VALUES ('899', 0xhttps://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:02', '45', 'K-d树', '数据结构');
INSERT INTO `spider_text` VALUES ('900', 0xE69C80E982BBE8BF91E6909CE7B4A2EFBC9A0AE69C80E982BBE8BF91E6909CE7B4A2E794A8E69DA5E689BEE587BAE59CA8E6A091E4B8ADE4B88EE8BE93E585A5E782B9E69C80E68EA5E8BF91E79A84E782B9E38082, 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:02', '45', 'K-d树', '数据结构');
INSERT INTO `spider_text` VALUES ('901', 0xE69C80E982BBE8BF91E6909CE7B4A2EFBC9A0AE4BB8EE6A0B9E88A82E782B9E5BC80E5A78BEFBC8CE98092E5BD92E79A84E5BE80E4B88BE7A7BBE38082E5BE80E5B7A6E8BF98E698AFE5BE80E58FB3E79A84E586B3E5AE9AE696B9E6B395E4B88EE68F92E585A5E58583E7B4A0E79A84E696B9E6B395E4B880E6A0B728E5A682E69E9CE8BE93E585A5E782B9E59CA8E58886E58CBAE99DA2E79A84E5B7A6E8BEB9E58899E8BF9BE585A5E5B7A6E5AD90E88A82E782B9EFBC8CE59CA8E58FB3E8BEB9E58899E8BF9BE585A5E58FB3E5AD90E88A82E782B929E3808220E4B880E697A6E7A7BBE58AA8E588B0E58FB6E88A82E782B9EFBC8CE5B086E8AFA5E88A82E782B9E5BD93E4BD9C22E79BAEE5898DE69C80E4BDB3E782B922E3808220E8A7A3E5BC80E98092E5BD92EFBC8CE5B9B6E5AFB9E6AF8FE4B8AAE7BB8FE8BF87E79A84E88A82E782B9E8BF90E8A18CE4B88BE58897E6ADA5E9AAA4EFBC9A20E5A682E69E9CE79BAEE5898DE68980E59CA8E782B9E6AF94E79BAEE5898DE69C80E4BDB3E782B9E69BB4E99DA0E8BF91E8BE93E585A5E782B9EFBC8CE58899E5B086E585B6E58F98E4B8BAE79BAEE5898DE69C80E4BDB3E782B9E3808220E6A380E69FA5E58FA6E4B880E8BEB9E5AD90E6A091E69C89E6B2A1E69C89E69BB4E8BF91E79A84E782B9EFBC8CE5A682E69E9CE69C89E58899E4BB8EE8AFA5E88A82E782B9E5BE80E4B88BE689BE20E5BD93E6A0B9E88A82E782B9E6909CE7B4A2E5AE8CE6AF95E5908EE5AE8CE68890E69C80E982BBE8BF91E6909CE7B4A2, 'https://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:02', '45', 'K-d树', '数据结构');
INSERT INTO `spider_text` VALUES ('902', 0xhttps://zh.wikipedia.org/wiki/K-d%E6%A0%91', '2015-11-12 14:43:00', '2016-12-20 09:45:03', '45', 'K-d树', '数据结构');
INSERT INTO `spider_text` VALUES ('904', 0xE69198E8A681EFBC9A0AE5AD97E7ACA6E4B8B2EFBC88537472696E67EFBC89EFBC8CE698AFE794B1E99BB6E4B8AAE68896E5A49AE4B8AAE5AD97E7ACA6E7BB84E68890E79A84E69C89E99990E5BA8FE58897E38082E4B880E888ACE8AEB0E4B8BA2073203D206120312061203220E280A62061206E207B5C646973706C61797374796C6520733D615F7B317D615F7B327D5C646F747320615F7B6E7D7D20EFBC88203020E289A4206E20E2AA8720E2889E207B5C646973706C61797374796C6520305C6C6571206E5C6C6E6571205C696E667479207D20EFBC89E38082E5AE83E698AFE7BC96E7A88BE8AFADE8A880E4B8ADE8A1A8E7A4BAE69687E69CACE79A84E695B0E68DAEE7B1BBE59E8BE38082, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:12', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('905', 0xE69198E8A681EFBC9A0AE9809AE5B8B8E4BBA5E4B8B2E79A84E695B4E4BD93E4BD9CE4B8BAE6938DE4BD9CE5AFB9E8B1A1EFBC8CE5A682EFBC9AE59CA8E4B8B2E4B8ADE69FA5E689BEE69F90E4B8AAE5AD90E4B8B2E38081E6B182E58F96E4B880E4B8AAE5AD90E4B8B2E38081E59CA8E4B8B2E79A84E69F90E4B8AAE4BD8DE7BDAEE4B88AE68F92E585A5E4B880E4B8AAE5AD90E4B8B2E4BBA5E58F8AE588A0E999A4E4B880E4B8AAE5AD90E4B8B2E7AD89E38082E4B8A4E4B8AAE5AD97E7ACA6E4B8B2E79BB8E7AD89E79A84E58585E8A681E69DA1E4BBB6E698AFEFBC9AE995BFE5BAA6E79BB8E7AD89EFBC8CE5B9B6E4B894E59084E4B8AAE5AFB9E5BA94E4BD8DE7BDAEE4B88AE79A84E5AD97E7ACA6E983BDE79BB8E7AD89E38082E8AEBE70E3808171E698AFE4B8A4E4B8AAE4B8B2EFBC8CE6B18271E59CA870E4B8ADE9A696E6ACA1E587BAE78EB0E79A84E4BD8DE7BDAEE79A84E8BF90E7AE97E58FABE5819AE6A8A1E5BC8FE58CB9E9858DE38082E4B8B2E79A84E4B8A4E7A78DE69C80E59FBAE69CACE79A84E5AD98E582A8E696B9E5BC8FE698AFE9A1BAE5BA8FE5AD98E582A8E696B9E5BC8FE5928CE993BEE68EA5E5AD98E582A8E696B9E5BC8FE38082, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:12', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('906', 0xE5AD97E7ACA6E4B8B2E5AE9EE794A8E7A88BE5BA8FEFBC9A0AE4B880E4BA9BE7BC96E7A88BE8AFADE8A880E8AEBEE8AEA1E4B8BAE7BC96E58699E5AD97E7ACA6E4B8B2E5A484E79086E7A88BE5BA8FE69BB4E5AEB9E69893E7BC96E58699E38082E8BF99E698AFE4B880E4BA9BE4BE8BE5AD90EFBC9A, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:12', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('907', 0xE5AD97E7ACA6E4B8B2E5AE9EE794A8E7A88BE5BA8FEFBC9A0AE5BE88E5A49A554E4958E5AE9EE794A8E7A88BE5BA8FE8BF9BE8A18CE7AE80E58D95E79A84E5AD97E7ACA6E4B8B2E5A484E79086EFBC8CE5B9B6E883BDE794A8E4BA8EE7AE80E58D95E59CB0E7BC96E58699E4B880E4BA9BE5BCBAE5A4A7E79A84E5AD97E7ACA6E4B8B2E5A484E79086E7AE97E6B395E38082E69687E4BBB6E5928CE69C89E99990E6B581E58FAFE4BBA5E5838FE5AD97E7ACA6E4B8B2E4B880E6A0B7E69FA5E79C8BE38082, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:12', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('908', 0xE5AD97E7ACA6E4B8B2E5AE9EE794A8E7A88BE5BA8FEFBC9A0AE4B880E4BA9BE696B0E79A84E7BC96E7A88BE8AFADE8A880EFBC8CE58C85E68BAC5065726CE38081507974686F6EE5928C52756279EFBC8CE5809FE58AA9E6ADA3E58899E8A1A8E8BEBEE5BC8FE69DA5E5B8AEE58AA9E69687E5AD97E5A484E79086E38082, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:12', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('909', 0xE5AD97E7ACA6E4B8B2E6938DE4BD9CEFBC9A0AE4B880E4B8AAE7AE80E58D95E79A84E5AD97E7ACA6E4B8B2E6938DE4BD9CE698AFE2809CE8BF9EE68EA5E2809DEFBC9AE4B99FE5B0B1E698AFE8AFB4E58588E58699E4B880E4B8AAE5AD97E7ACA6E4B8B253EFBC8CE99A8FE5908EE59CA8E5908EE99DA2E5868DE58699E4B880E4B8AA54E5BE97E588B05354E8BF99E6A0B7E4B880E4B8AAE8BF87E7A88BE3808220E585B6E5AE83E79A84E5B8B8E8A781E6938DE4BD9CE58C85E68BACE59CA8E4B880E4B8AAE995BFE5AD97E7ACA6E4B8B2E4B8ADE6909CE7B4A2E4B880E4B8AAE5AD90E4B8B2EFBC8CE68E92E58897E4B880E7BB84E5AD97E7ACA6E4B8B2E4BBA5E58F8AE58886E69E90E4B880E4B8AAE5AD97E7ACA6E4B8B2E38082E59BA0E4B8BAE5AD98E59CA8E5A682E6ADA4E5A49AE79A84E5AD97E7ACA6E4B8B2E5BA94E794A8E696B9E5BC8FEFBC8CE68980E4BBA5E79BB8E5BA94E59CB0E69C89E8AEB8E5A49AE69D83E8A1A1E4BA86E4B88DE5908CE5BA94E794A8E79A84E79BB8E585B3E7AE97E6B395E3808220E9AB98E7BAA7E79A84E5AD97E7ACA6E4B8B2E7AE97E6B395E9809AE5B8B8E4BDBFE794A8E58C85E68BACE5908EE59091E6A091E5928CE69C89E99990E78AB6E68081E69CBAE59CA8E58685E79A84E5A48DE69D82E69CBAE588B6E5928CE695B0E68DAEE7BB93E69E84E38082, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('910', 0xE7AE97E6B395EFBC9A0AE8BF99E698AFE4B880E4BA9BE5AD97E7ACA6E4B8B2E5A484E79086E7AE97E6B395EFBC8CE59CA8E5AD97E7ACA6E4B8B2E4B88AE8BF9BE8A18CE4B88DE5908CE79A84E5A484E79086EFBC9A, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('911', 0xE7AE97E6B395EFBC9A0AE5AD97E7ACA6E4B8B2E69FA5E689BEE7AE97E6B39520E6ADA3E58899E8A1A8E8BEBEE5BC8FE7AE97E6B39520E6A8A1E5BC8FE58CB9E9858D, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('912', 0xhttps://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('913', 0xhttps://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('914', 0xhttps://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('915', 0xhttps://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('916', 0xE4B8B2E68EA5E5928CE5AD90E4B8B2EFBC9A0AE5AD97E7ACA6E4B8B273E8A2ABE7A7B0E4B8BAE698AFE5AD97E7ACA6E4B8B274E79A84E2809CE5AD90E4B8B2E2809DE68896E2809CE59BA0E5AD90E2809DEFBC8CE5A682E69E9CE5AD98E59CA8EFBC88E58FAFE883BDE4B8BAE7A9BAEFBC89E5AD97E7ACA6E4B8B275E5928C76E4BDBFE5BE9774203D20757376E38082E2809CE698AFE585B6E5AD90E4B8B2E2809DE585B3E7B3BBE5AE9AE4B989E4BA86E59CA8CEA32AE4B88AE79A84E5818FE5BA8FEFBC8CE585B6E69C80E5B08FE58583E698AFE7A9BAE4B8B2E38082, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('917', 0xhttps://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('918', 0xE5AD97E7ACA6E4B8B2E8BF90E7AE97EFBC9A0AE59CA8E5BDA2E5BC8FE79086E8AEBAE4B8ADE7BB8FE5B8B8E587BAE78EB0E4B880E4BA9BE59CA8E5AD97E7ACA6E4B8B2E4B88AE79A84E9A29DE5A496E8BF90E7AE97E38082E5AE83E4BBACE59CA8E69DA1E79BAEE5AD97E7ACA6E4B8B2E8BF90E7AE97E4B8ADE7BB99E587BAE38082, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('919', 0xhttps://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('920', 0xE5AD97E7ACA6E7BC96E7A081EFBC9A0AE58E86E58FB2E4B88AEFBC8CE5AD97E7ACA6E4B8B2E695B0E68DAEE7B1BBE59E8BE4B8BAE6AF8FE4B8AAE5AD97E7ACA6E58886E9858DE4B880E4B8AAE5AD97E88A82EFBC8CE5B0BDE7AEA1E7B2BEE7A1AEE79A84E5AD97E7ACA6E99B86E99A8FE79D80E58CBAE59F9FE8808CE694B9E58F98EFBC8CE5AD97E7ACA6E7BC96E7A081E8B6B3E5A49FE7B1BBE4BCBCE5BE97E7A88BE5BA8FE59198E58FAFE4BBA5E5BFBDE795A5E5AE83E28094E5908CE4B880E4B8AAE7B3BBE7BB9FE59CA8E4B88DE5908CE79A84E58CBAE59F9FE4B8ADE4BDBFE794A8E79A84E5AD97E7ACA6E99B86E7BB84E8A681E4B988E8AEA9E4B880E4B8AAE5AD97E7ACA6E59CA8E5908CE6A0B7E4BD8DE7BDAEEFBC8CE8A681E4B988E6A0B9E69CACE5B0B1E6B2A1E69C89E5AE83E38082E8BF99E4BA9BE5AD97E7ACA6E99B86E585B8E59E8BE79A84E59FBAE4BA8E4153434949E7A081E68896454243444943E7A081E38082, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('921', 0xE5AD97E7ACA6E7BC96E7A081EFBC9A0AE6848FE99FB3E69687E5AD97E79A84E8AFADE8A880E6AF94E5A682E6B189E8AFADE38081E697A5E8AFADE5928CE69C9DE9B29CE8AFADEFBC88E59088E7A7B0E4B8BA434A4BEFBC89E79A84E59088E79086E8A1A8E7A4BAE99C80E8A681E5A49AE4BA8E323536E4B8AAE5AD97E7ACA6EFBC88E6AF8FE5AD97E7ACA6E4B880E4B8AAE5AD97E88A82E7BC96E7A081E79A84E69E81E99990EFBC89E38082E5B8B8E8A784E79A84E8A7A3E586B3E6B689E58F8AEFBC9AE4BF9DE68C81E5AFB94153434949E7A081E79A84E58D95E5AD97E88A82E8A1A8E7A4BAEFBC8CE5B9B6E4BDBFE794A8E58F8CE5AD97E88A82E69DA5E8A1A8E7A4BA434A4BE5AD97E5BDA2E38082E78EB0E5AD98E4BBA3E7A081E59CA8E794A8E588B0E5AE83E4BBACE4BC9AE5AFBCE887B4E4B880E4BA9BE5AD97E7ACA6E4B8B2E58CB9E9858DE5928CE58887E696ADE4B88AE79A84E997AEE9A298EFBC8CE4B8A5E9878DE7A88BE5BAA6E4BE9DE8B596E4BA8EE5AD97E7ACA6E7BC96E7A081E698AFE5A682E4BD95E8AEBEE8AEA1E79A84E38082, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('922', 0xE5AD97E7ACA6E7BC96E7A081EFBC9A0AE69F90E4BA9BE7BC96E7A081E6AF94E5A682455543E5AEB6E6978FE4BF9DE8AF81E59CA84153434949E7A081E88C83E59BB4E58685E79A84E5AD97E88A82E580BCE58FAAE8A1A8E7A4BA4153434949E5AD97E7ACA6EFBC8CE4BDBFE5BE97E4BDBFE794A8E8BF99E4BA9BE5AD97E7ACA6E4BD9CE4B8BAE5AD97E6AEB5E58886E99A94E7ACA6E79A84E7B3BBE7BB9FE5BE97E588B0E7BC96E7A081E5AE89E585A8E38082E585B6E4BB96E7BC96E7A081E5A68249534F2D32303232E5928C53686966742D4A4953E4B88DE5819AE8BF99E7A78DE68B85E4BF9DEFBC8CE4BDBFE5BE97E59FBAE4BA8EE5AD97E88A82E79A84E4BBA3E7A081E5819AE79A84E58CB9E9858DE4B88DE5AE89E585A8E3808220E58FA6E4B880E4B8AAE997AEE9A298E698AFE5A682E69E9CE4B880E4B8AAE5AD97E7ACA6E4B8B2E79A84E5BC80E5A4B4E8A2ABE588A0E999A4E4BA86EFBC8CE5AFB9E8A7A3E7A081E599A8E79A84E9878DE8A681E68C87E7A4BAE68896E585B3E4BA8EE59CA8E5A49AE5AD97E88A82E5BA8FE58897E4B8ADE79A84E4BD8DE7BDAEE79A84E4BFA1E681AFE58FAFE883BDE5B0B1E4B8A2E5A4B1E4BA86E3808220E58FA6E4B880E4B8AAE997AEE9A298E698AFE5A682E69E9CE5AD97E7ACA6E4B8B2E8A2ABE8BF9EE68EA5E588B0E4B880E8B5B7EFBC88E789B9E588ABE698AFE59CA8E8A2ABE4B88DE79FA5E98193E8BF99E4B8AAE7BC96E7A081E79A84E4BBA3E7A081E688AAE696ADE4BA86E5AE83E4BBACE79A84E7BB93E5B0BEE4B98BE5908EEFBC89EFBC8CE7ACACE4B880E4B8AAE5AD97E7ACA6E4B8B2E58FAFE883BDE4B88DE883BDE5AFBCE887B4E7BC96E7A081E599A8E8BF9BE585A5E98082E59088E5A484E79086E7ACACE4BA8CE4B8AAE5AD97E7ACA6E4B8B2E79A84E78AB6E68081E4B8ADE38082, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('923', 0xE5AD97E7ACA6E7BC96E7A081EFBC9A0A556E69636F6465E4B99FE69C89E4BA9BE5A48DE69D82E79A84E997AEE9A298E38082E5A49AE695B0E8AFADE8A880E69C89556E69636F6465E5AD97E7ACA6E4B8B2E695B0E68DAEE7B1BBE59E8BEFBC88E9809AE5B8B8E698AF5554462D3136EFBC8CE59BA0E4B8BAE5AE83E59CA8556E69636F6465E8A1A5E58585E4BD8DE99DA2E4BB8BE585A5E4B98BE5898DE5B0B1E8A2ABE5A29EE58AA0E4BA86EFBC89E38082E59CA8556E69636F6465E5928CE69CACE59CB0E7BC96E7A081E4B98BE997B4E8BDACE68DA2E8A681E6B182E79086E8A7A3E69CACE59CB0E7BC96E7A081EFBC8CE8BF99E5AFB9E4BA8EE78EB0E5AD98E7B3BBE7BB9FE8A681E4B880E8B5B7E4BCA0E8BE93E59084E7A78DE7BC96E7A081E79A84E5AD97E7ACA6E4B8B2E8808CE58F88E6B2A1E69C89E5AE9EE99985E6A087E8AEB0E587BAE5AE83E4BBACE794A8E4BA86E4BB80E4B988E7BC96E7A081E5B0B1E698AFE4B8AAE997AEE9A298E38082, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('924', 0xE5AE9EE78EB0EFBC9A0AE69F90E4BA9BE8AFADE8A880E5A682432B2BE68A8AE5AD97E7ACA6E4B8B2E5AE9EE78EB0E4B8BAE58FAFE4BBA5E794A8E4BA8EE4BBBBE4BD95E59FBAE69CACE7B1BBE59E8BE79A84E6A8A1E78988EFBC8CE4BD86E8BF99E698AFE4B8AAE4BE8BE5A496E8808CE4B88DE698AFE8A784E58899E38082, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('925', 0xhttps://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('926', 0xE5AE9EE78EB0EFBC9A0AE585B6E4BB96E8AFADE8A880EFBC8CE69C80E89197E5908DE79A84E69C8950726F6C6F67E5928C45726C616E67EFBC8CE981BFE5858DE5AE9EE78EB0E5AD97E7ACA6E4B8B2E695B0E68DAEE7B1BBE59E8BEFBC8CE8BDACE8808CE98787E794A8E68A8AE5AD97E7ACA6E4B8B2E8A1A8E7A4BAE4B8BAE5AD97E7ACA6E4BBA3E7A081E79A84E58897E8A1A8E79A84E7BAA6E5AE9AE38082, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('927', 0xhttps://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('928', 0xE8A1A8E7A4BAE6B395EFBC9A0AE8BF99E698AFE4B880E4B8AAE794A84E554CE7BB93E69D9FE79A84E5AD97E7ACA6E4B8B2E79A84E4BE8BE5AD90EFBC8CE5AE83E794A83130E4B8AA62797465E5AD98E582A8EFBC8CE794A84153434949E8A1A8E7A4BAE6B395EFBC9A, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('929', 0xE8A1A8E7A4BAE6B395EFBC9A0A4620522041204E204B204E554C206B206520662077203436203532203431203445203442203030203642203636203636203737, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('930', 0xE8A1A8E7A4BAE6B395EFBC9A0AE4B88AE99DA2E79A84E5AD97E7ACA6E4B8B2E79A84E995BFE5BAA6E4B8BA35E4B8AAE5AD97E7ACA6EFBC8CE4BD86E6B3A8E6848FE5AE83E58DA0E794A836E4B8AAE5AD97E88A82E38082E7BB93E69D9FE7ACA6E5908EE79A84E5AD97E7ACA6E6B2A1E69C89E4BBBBE4BD95E6848FE4B989E38082, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('931', 0xE8A1A8E7A4BAE6B395EFBC9A0A6C656E677468204620522041204E204B206B206520662077203035203436203532203431203445203442203642203636203636203737, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('932', 0xE8A1A8E7A4BAE6B395EFBC9A0AE5BD93E784B6EFBC8CE58FAFE883BDE8BF98E69C89E585B6E5AE83E79A84E8A1A8E7A4BAE6B395E38082E4BDBFE794A8E6A091E5928CE58897E8A1A8E58FAFE4BBA5E4BDBFE5BE97E4B880E4BA9BE5AD97E7ACA6E4B8B2E6938DE4BD9CEFBC88E5A682E68F92E585A5E5928CE588A0E999A4EFBC89E69BB4E9AB98E69588E38082, 'https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2', '2016-11-08 08:17:00', '2016-12-20 09:45:13', '46', '字符串', '数据结构');
INSERT INTO `spider_text` VALUES ('933', 0xE69198E8A681EFBC9A0AE5BBBAE8AEAEE5B086E695A3E58897E5B9B6E585A5E69CACE69DA1E79BAEE68896E7ABA0E88A82E38082EFBC88E8AEA8E8AEBAEFBC89, 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('934', 0xhttps://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('935', 0xhttps://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('936', 0xhttps://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('937', 0xE58F82E99885EFBC9A0A526F6275737420417564696F2048617368696E6720666F7220436F6E74656E74204964656E74696669636174696F6E, 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('938', 0xhttps://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('939', 0xE58AA0E5AF86EFBC9A0AE4B880E4B8AAE585B8E59E8BE79A84E58AA0E5AF86E58D95E59091E587BDE695B0E698AFE2809CE99D9EE5AFB9E7A7B0E2809DE79A84EFBC8CE5B9B6E4B894E794B1E4B880E4B8AAE9AB98E69588E79A84E695A3E58897E587BDE695B0E69E84E68890EFBC9BE4B880E4B8AAE585B8E59E8BE79A84E58AA0E5AF86E69A97E997A8E587BDE695B0E698AFE2809CE5AFB9E7A7B0E2809DE79A84EFBC8CE5B9B6E4B894E794B1E4B880E4B8AAE9AB98E69588E79A84E99A8FE69CBAE587BDE695B0E69E84E68890E38082, 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('940', 0xE7A1AEE4BF9DE4BCA0E98092E79C9FE5AE9EE79A84E4BFA1E681AFEFBC9A0AE6B688E681AFE68896E695B0E68DAEE79A84E68EA5E58F97E88085E7A1AEE8AEA4E6B688E681AFE698AFE590A6E8A2ABE7AFA1E694B9E79A84E680A7E8B4A8E58FABE695B0E68DAEE79A84E79C9FE5AE9EE680A7EFBC8CE4B99FE7A7B0E4B8BAE5AE8CE695B4E680A7E38082E58F91E4BFA1E4BABAE9809AE8BF87E5B086E58E9FE6B688E681AFE5928CE695A3E58897E580BCE4B880E8B5B7E58F91E98081EFBC8CE58FAFE4BBA5E4BF9DE8AF81E79C9FE5AE9EE680A7E38082, 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('941', 0xE695A3E58897E8A1A8EFBC9A0AE695A3E58897E8A1A8E698AFE695A3E58897E587BDE695B0E79A84E4B880E4B8AAE4B8BBE8A681E5BA94E794A8EFBC8CE4BDBFE794A8E695A3E58897E8A1A8E883BDE5A49FE5BFABE9809FE79A84E68C89E785A7E585B3E994AEE5AD97E69FA5E689BEE695B0E68DAEE8AEB0E5BD95E38082EFBC88E6B3A8E6848FEFBC9AE585B3E994AEE5AD97E4B88DE698AFE5838FE59CA8E58AA0E5AF86E4B8ADE68980E4BDBFE794A8E79A84E982A3E6A0B7E698AFE7A798E5AF86E79A84EFBC8CE4BD86E5AE83E4BBACE983BDE698AFE794A8E69DA5E2809CE8A7A3E99481E2809DE68896E88085E8AEBFE997AEE695B0E68DAEE79A84E38082EFBC89E4BE8BE5A682EFBC8CE59CA8E88BB1E8AFADE5AD97E585B8E4B8ADE79A84E585B3E994AEE5AD97E698AFE88BB1E69687E58D95E8AF8DEFBC8CE5928CE5AE83E4BBACE79BB8E585B3E79A84E8AEB0E5BD95E58C85E590ABE8BF99E4BA9BE58D95E8AF8DE79A84E5AE9AE4B989E38082E59CA8E8BF99E7A78DE68385E586B5E4B88BEFBC8CE695A3E58897E587BDE695B0E5BF85E9A1BBE68A8AE68C89E785A7E5AD97E6AF8DE9A1BAE5BA8FE68E92E58897E79A84E5AD97E7ACA6E4B8B2E698A0E5B084E588B0E4B8BAE695A3E58897E8A1A8E79A84E58685E983A8E695B0E7BB84E68980E5889BE5BBBAE79A84E7B4A2E5BC95E4B88AE38082, 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('942', 0xE695A3E58897E8A1A8EFBC9A0AE695A3E58897E8A1A8E695A3E58897E587BDE695B0E79A84E587A0E4B98EE4B88DE58FAFE883BD2FE4B88DE58887E5AE9EE99985E79A84E79086E683B3E698AFE68A8AE6AF8FE4B8AAE585B3E994AEE5AD97E698A0E5B084E588B0E594AFE4B880E79A84E7B4A2E5BC95E4B88AEFBC88E58F82E88083E5AE8CE7BE8EE695A3E58897EFBC89EFBC8CE59BA0E4B8BAE8BF99E6A0B7E883BDE5A49FE4BF9DE8AF81E79BB4E68EA5E8AEBFE997AEE8A1A8E4B8ADE79A84E6AF8FE4B880E4B8AAE695B0E68DAEE38082, 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('943', 0xE695A3E58897E8A1A8EFBC9A0AE4B880E4B8AAE5A5BDE79A84E695A3E58897E587BDE695B0EFBC88E58C85E68BACE5A4A7E5A49AE695B0E58AA0E5AF86E695A3E58897E587BDE695B0EFBC89E585B7E69C89E59D87E58C80E79A84E79C9FE6ADA3E99A8FE69CBAE8BE93E587BAEFBC8CE59BA0E8808CE5B9B3E59D87E58FAAE99C80E8A681E4B880E4B8A4E6ACA1E68EA2E6B58BEFBC88E4BE9DE8B596E4BA8EE8A385E5A1ABE59BA0E5AD90EFBC89E5B0B1E883BDE689BEE588B0E79BAEE6A087E38082E5908CE6A0B7E9878DE8A681E79A84E698AFEFBC8CE99A8FE69CBAE695A3E58897E587BDE695B0E4B88DE5A4AAE4BC9AE587BAE78EB0E99D9EE5B8B8E9AB98E79A84E586B2E7AA81E78E87E38082E4BD86E698AFEFBC8CE5B091E9878FE79A84E58FAFE4BBA5E4BCB0E8AEA1E79A84E586B2E7AA81E59CA8E5AE9EE99985E78AB6E586B5E4B88BE698AFE4B88DE58FAFE981BFE5858DE79A84EFBC88E58F82E88083E7949FE697A5E68296E8AEBAE68896E9B8BDE6B49EE58E9FE79086EFBC89E38082, 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('944', 0xE695A3E58897E8A1A8EFBC9A0AE59CA8E5BE88E5A49AE68385E586B5E4B88BEFBC8C686575726973746963E695A3E58897E587BDE695B0E68980E4BAA7E7949FE79A84E586B2E7AA81E6AF94E99A8FE69CBAE695A3E58897E587BDE695B0E5B091E79A84E5A49AE38082486575726973746963E587BDE695B0E588A9E794A8E4BA86E79BB8E4BCBCE585B3E994AEE5AD97E79A84E79BB8E4BCBCE680A7E38082E4BE8BE5A682EFBC8CE58FAFE4BBA5E8AEBEE8AEA1E4B880E4B8AA686575726973746963E587BDE695B0E4BDBFE5BE97E5838F46494C45303030302E43484B2C2046494C45303030312E43484B2C2046494C45303030322E43484BEFBC8CE7AD89E7AD89E8BF99E6A0B7E79A84E69687E4BBB6E5908DE698A0E5B084E588B0E8A1A8E79A84E8BF9EE7BBADE68C87E99288E4B88AEFBC8CE4B99FE5B0B1E698AFE8AFB4E8BF99E6A0B7E79A84E5BA8FE58897E4B88DE4BC9AE58F91E7949FE586B2E7AA81E38082E79BB8E6AF94E4B98BE4B88BEFBC8CE5AFB9E4BA8EE4B880E7BB84E5A5BDE79A84E585B3E994AEE5AD97E680A7E883BDE587BAE889B2E79A84E99A8FE69CBAE695A3E58897E587BDE695B0EFBC8CE5AFB9E4BA8EE4B880E7BB84E59D8FE79A84E585B3E994AEE5AD97E7BB8FE5B8B8E680A7E883BDE5BE88E5B7AEEFBC8CE8BF99E7A78DE59D8FE79A84E585B3E994AEE5AD97E4BC9AE887AAE784B6E4BAA7E7949FE8808CE4B88DE4BB85E4BB85E59CA8E694BBE587BBE4B8ADE6898DE587BAE78EB0E38082E680A7E883BDE4B88DE4BDB3E79A84E695A3E58897E587BDE695B0E8A1A8E6848FE591B3E79D80E69FA5E689BEE6938DE4BD9CE4BC9AE98080E58C96E4B8BAE8B4B9E697B6E79A84E7BABFE680A7E6909CE7B4A2E38082, 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('945', 0xhttps://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('946', 0xhttps://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('947', 0xE8AFADE99FB3E8AF86E588ABEFBC9A0AE5AFB9E4BA8EE5838FE4BB8EE4B880E4B8AAE5B7B2E79FA5E58897E8A1A8E4B8ADE58CB9E9858DE4B880E4B8AA4D5033E69687E4BBB6E8BF99E6A0B7E79A84E5BA94E794A8EFBC8CE4B880E7A78DE58FAFE883BDE79A84E696B9E6A188E698AFE4BDBFE794A8E4BCA0E7BB9FE79A84E695A3E58897E587BDE695B0E28094E28094E4BE8BE5A6824D4435EFBC8CE4BD86E698AFE8BF99E7A78DE696B9E6A188E4BC9AE5AFB9E697B6E997B4E5B9B3E7A7BBE380814344E8AFBBE58F96E99499E8AFAFE38081E4B88DE5908CE79A84E99FB3E9A291E58E8BE7BCA9E7AE97E6B395E68896E88085E99FB3E9878FE8B083E695B4E79A84E5AE9EE78EB0E69CBAE588B6E7AD89E68385E586B5E99D9EE5B8B8E6958FE6849FE38082E4BDBFE794A8E4B880E4BA9BE7B1BBE4BCBCE4BA8E4D4435E79A84E696B9E6B395E69C89E588A9E4BA8EE8BF85E9809FE689BEE588B0E982A3E4BA9BE4B8A5E6A0BCE79BB8E5908CEFBC88E4BB8EE99FB3E9A291E69687E4BBB6E79A84E4BA8CE8BF9BE588B6E695B0E68DAEE69DA5E79C8BEFBC89E79A84E99FB3E9A291E69687E4BBB6EFBC8CE4BD86E698AFE8A681E689BEE588B0E585A8E983A8E79BB8E5908CEFBC88E4BB8EE99FB3E9A291E69687E4BBB6E79A84E58685E5AEB9E69DA5E79C8BEFBC89E79A84E99FB3E9A291E69687E4BBB6E5B0B1E99C80E8A681E4BDBFE794A8E585B6E4BB96E69BB4E9AB98E7BAA7E79A84E7AE97E6B395E4BA86E38082, 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('948', 0xE8AFADE99FB3E8AF86E588ABEFBC9A0AE982A3E4BA9BE5B9B6E4B88DE7B4A7E99A8F4954E5B7A5E4B89AE6BDAEE6B581E79A84E4BABAE5BE80E5BE80E883BDE58F8DE585B6E98193E8808CE8A18CE4B98BEFBC8CE5AFB9E4BA8EE982A3E4BA9BE5BEAEE5B08FE5B7AEE5BC82E8B6B3E5A49FE581A5E5A3AEE79A84E695A3E58897E587BDE695B0E7A1AEE5AE9EE5AD98E59CA8E38082E78EB0E5AD98E79A84E7BB9DE5A4A7E5A49AE695B0E695A3E58897E7AE97E6B395E983BDE698AFE4B88DE5A49FE581A5E5A3AEE79A84EFBC8CE4BD86E698AFE69C89E5B091E695B0E695A3E58897E7AE97E6B395E883BDE5A49FE8BEBEE588B0E8BEA8E588ABE4BB8EE59888E69D82E688BFE997B4E9878CE79A84E689ACE5A3B0E599A8E9878CE692ADE694BEE587BAE69DA5E79A84E99FB3E4B990E79A84E581A5E5A3AEE680A7E38082E69C89E4B880E4B8AAE5AE9EE99985E79A84E4BE8BE5AD90E698AF5368617A616D5B315D20E69C8DE58AA1E38082E794A8E688B7E58FAFE4BBA5E794A8E794B5E8AF9DE69CBAE68BA8E68993E4B880E4B8AAE789B9E5AE9AE79A84E58FB7E7A081EFBC8CE5B9B6E5B086E794B5E8AF9DE69CBAE79A84E8AF9DE7AD92E99DA0E8BF91E794A8E4BA8EE692ADE694BEE99FB3E4B990E79A84E689ACE5A3B0E599A8E38082E8AFA5E9A1B9E69C8DE58AA1E4BC9AE58886E69E90E6ADA3E59CA8E692ADE694BEE79A84E99FB3E4B990EFBC8CE5B9B6E5B086E5AE83E4BA8EE5AD98E582A8E59CA8E695B0E68DAEE5BA93E4B8ADE79A84E5B7B2E79FA5E79A84E695A3E58897E580BCE8BF9BE8A18CE6AF94E8BE83E38082E794A8E688B7E5B0B1E883BDE5A49FE694B6E588B0E8A2ABE8AF86E588ABE79A84E99FB3E4B990E79A84E69BB2E5908DEFBC88E99C80E8A681E694B6E58F96E4B880E5AE9AE79A84E8B4B9E794A8EFBC89E38082, 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('949', 0x526162696E2D4B617270E5AD97E7ACA6E4B8B2E6909CE7B4A2E7AE97E6B395EFBC9A0A526162696E2D4B617270E5AD97E7ACA6E4B8B2E6909CE7B4A2E7AE97E6B395E698AFE4B880E4B8AAE79BB8E5AFB9E5BFABE9809FE79A84E5AD97E7ACA6E4B8B2E6909CE7B4A2E7AE97E6B395EFBC8CE5AE83E68980E99C80E8A681E79A84E5B9B3E59D87E6909CE7B4A2E697B6E997B4E698AF4F286E292EE8BF99E4B8AAE7AE97E6B395E698AFE5889BE5BBBAE59CA8E4BDBFE794A8E695A3E58897E69DA5E6AF94E8BE83E5AD97E7ACA6E4B8B2E79A84E59FBAE7A180E4B88AE79A84E38082, 'https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0', '2016-12-13 01:46:00', '2016-12-20 09:45:25', '47', '散列函数', '数据结构');
INSERT INTO `spider_text` VALUES ('950', 0xE69198E8A681EFBC9A0AE5B883E99A86E8BF87E6BBA4E599A8EFBC88E88BB1E8AFADEFBC9A426C6F6F6D2046696C746572EFBC89E698AF31393730E5B9B4E794B1E5B883E99A86E68F90E587BAE79A84E38082E5AE83E5AE9EE99985E4B88AE698AFE4B880E4B8AAE5BE88E995BFE79A84E4BA8CE8BF9BE588B6E59091E9878FE5928CE4B880E7B3BBE58897E99A8FE69CBAE698A0E5B084E587BDE695B0E38082E5B883E99A86E8BF87E6BBA4E599A8E58FAFE4BBA5E794A8E4BA8EE6A380E7B4A2E4B880E4B8AAE58583E7B4A0E698AFE590A6E59CA8E4B880E4B8AAE99B86E59088E4B8ADE38082E5AE83E79A84E4BC98E782B9E698AFE7A9BAE997B4E69588E78E87E5928CE69FA5E8AFA2E697B6E997B4E983BDE8BF9CE8BF9CE8B685E8BF87E4B880E888ACE79A84E7AE97E6B395EFBC8CE7BCBAE782B9E698AFE69C89E4B880E5AE9AE79A84E8AFAFE8AF86E588ABE78E87E5928CE588A0E999A4E59BB0E99ABEE38082, 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '数据结构');
INSERT INTO `spider_text` VALUES ('951', 0xE59FBAE69CACE6A682E5BFB5EFBC9A0AE5A682E69E9CE683B3E588A4E696ADE4B880E4B8AAE58583E7B4A0E698AFE4B88DE698AFE59CA8E4B880E4B8AAE99B86E59088E9878CEFBC8CE4B880E888ACE683B3E588B0E79A84E698AFE5B086E99B86E59088E4B8ADE68980E69C89E58583E7B4A0E4BF9DE5AD98E8B5B7E69DA5EFBC8CE784B6E5908EE9809AE8BF87E6AF94E8BE83E7A1AEE5AE9AE38082E993BEE8A1A8E38081E6A091E38081E695A3E58897E8A1A8EFBC88E58F88E58FABE59388E5B88CE8A1A8EFBC8C48617368207461626C65EFBC89E7AD89E7AD89E695B0E68DAEE7BB93E69E84E983BDE698AFE8BF99E7A78DE6809DE8B7AFE38082E4BD86E698AFE99A8FE79D80E99B86E59088E4B8ADE58583E7B4A0E79A84E5A29EE58AA0EFBC8CE68891E4BBACE99C80E8A681E79A84E5AD98E582A8E7A9BAE997B4E8B68AE69DA5E8B68AE5A4A7E38082E5908CE697B6E6A380E7B4A2E9809FE5BAA6E4B99FE8B68AE69DA5E8B68AE685A2EFBC8CE4B88AE8BFB0E4B889E7A78DE7BB93E69E84E79A84E6A380E7B4A2E697B6E997B4E5A48DE69D82E5BAA6E58886E588ABE4B8BA204F2028206E2029202C204F2028206C6F6720E281A1206E2029202C204F2028206E202F206B2029207B5C646973706C61797374796C65204F286E292C4F285C6C6F67206E292C4F286E2F6B297D20E38082, 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '数据结构');
INSERT INTO `spider_text` VALUES ('952', 0xE59FBAE69CACE6A682E5BFB5EFBC9A0AE5B883E99A86E8BF87E6BBA4E599A8E79A84E58E9FE79086E698AFEFBC8CE5BD93E4B880E4B8AAE58583E7B4A0E8A2ABE58AA0E585A5E99B86E59088E697B6EFBC8CE9809AE8BF874BE4B8AAE695A3E58897E587BDE695B0E5B086E8BF99E4B8AAE58583E7B4A0E698A0E5B084E68890E4B880E4B8AAE4BD8DE695B0E7BB84E4B8ADE79A844BE4B8AAE782B9EFBC8CE68A8AE5AE83E4BBACE7BDAEE4B8BA31E38082E6A380E7B4A2E697B6EFBC8CE68891E4BBACE58FAAE8A681E79C8BE79C8BE8BF99E4BA9BE782B9E698AFE4B88DE698AFE983BDE698AF31E5B0B1EFBC88E5A4A7E7BAA6EFBC89E79FA5E98193E99B86E59088E4B8ADE69C89E6B2A1E69C89E5AE83E4BA86EFBC9AE5A682E69E9CE8BF99E4BA9BE782B9E69C89E4BBBBE4BD95E4B880E4B8AA30EFBC8CE58899E8A2ABE6A380E58583E7B4A0E4B880E5AE9AE4B88DE59CA8EFBC9BE5A682E69E9CE983BDE698AF31EFBC8CE58899E8A2ABE6A380E58583E7B4A0E5BE88E58FAFE883BDE59CA8E38082E8BF99E5B0B1E698AFE5B883E99A86E8BF87E6BBA4E599A8E79A84E59FBAE69CACE6809DE683B3E38082, 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '数据结构');
INSERT INTO `spider_text` VALUES ('953', 0xE4BC98E782B9EFBC9A0AE79BB8E6AF94E4BA8EE585B6E5AE83E79A84E695B0E68DAEE7BB93E69E84EFBC8CE5B883E99A86E8BF87E6BBA4E599A8E59CA8E7A9BAE997B4E5928CE697B6E997B4E696B9E99DA2E983BDE69C89E5B7A8E5A4A7E79A84E4BC98E58ABFE38082E5B883E99A86E8BF87E6BBA4E599A8E5AD98E582A8E7A9BAE997B4E5928CE68F92E585A52FE69FA5E8AFA2E697B6E997B4E983BDE698AFE5B8B8E695B0EFBC88204F2028206B2029207B5C646973706C61797374796C65204F286B297D20EFBC89E38082E58FA6E5A496EFBC8CE695A3E58897E587BDE695B0E79BB8E4BA92E4B98BE997B4E6B2A1E69C89E585B3E7B3BBEFBC8CE696B9E4BEBFE794B1E7A1ACE4BBB6E5B9B6E8A18CE5AE9EE78EB0E38082E5B883E99A86E8BF87E6BBA4E599A8E4B88DE99C80E8A681E5AD98E582A8E58583E7B4A0E69CACE8BAABEFBC8CE59CA8E69F90E4BA9BE5AFB9E4BF9DE5AF86E8A681E6B182E99D9EE5B8B8E4B8A5E6A0BCE79A84E59CBAE59088E69C89E4BC98E58ABFE38082, 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '数据结构');
INSERT INTO `spider_text` VALUES ('954', 0xE4BC98E782B9EFBC9A0AE5B883E99A86E8BF87E6BBA4E599A8E58FAFE4BBA5E8A1A8E7A4BAE585A8E99B86EFBC8CE585B6E5AE83E4BBBBE4BD95E695B0E68DAEE7BB93E69E84E983BDE4B88DE883BDEFBC9B, 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '数据结构');
INSERT INTO `spider_text` VALUES ('955', 0xE4BC98E782B9EFBC9A0A6B207B5C646973706C61797374796C65206B7D20E5928C206D207B5C646973706C61797374796C65206D7D20E79BB8E5908CEFBC8CE4BDBFE794A8E5908CE4B880E7BB84E695A3E58897E587BDE695B0E79A84E4B8A4E4B8AAE5B883E99A86E8BF87E6BBA4E599A8E79A84E4BAA4E5B9B6E5B7AEE8BF90E7AE97E58FAFE4BBA5E4BDBFE794A8E4BD8DE6938DE4BD9CE8BF9BE8A18CE38082, 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '数据结构');
INSERT INTO `spider_text` VALUES ('956', 0xE7BCBAE782B9EFBC9A0AE4BD86E698AFE5B883E99A86E8BF87E6BBA4E599A8E79A84E7BCBAE782B9E5928CE4BC98E782B9E4B880E6A0B7E6988EE698BEE38082E8AFAFE7AE97E78E87E698AFE585B6E4B8ADE4B98BE4B880E38082E99A8FE79D80E5AD98E585A5E79A84E58583E7B4A0E695B0E9878FE5A29EE58AA0EFBC8CE8AFAFE7AE97E78E87E99A8FE4B98BE5A29EE58AA0E38082E4BD86E698AFE5A682E69E9CE58583E7B4A0E695B0E9878FE5A4AAE5B091EFBC8CE58899E4BDBFE794A8E695A3E58897E8A1A8E8B6B3E79FA3E38082, 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '数据结构');
INSERT INTO `spider_text` VALUES ('957', 0xE7BCBAE782B9EFBC9A0AE58FA6E5A496EFBC8CE4B880E888ACE68385E586B5E4B88BE4B88DE883BDE4BB8EE5B883E99A86E8BF87E6BBA4E599A8E4B8ADE588A0E999A4E58583E7B4A0E38082E68891E4BBACE5BE88E5AEB9E69893E683B3E588B0E68A8AE4BD8DE695B0E7BB84E58F98E68890E695B4E695B0E695B0E7BB84EFBC8CE6AF8FE68F92E585A5E4B880E4B8AAE58583E7B4A0E79BB8E5BA94E79A84E8AEA1E695B0E599A8E58AA0312C20E8BF99E6A0B7E588A0E999A4E58583E7B4A0E697B6E5B086E8AEA1E695B0E599A8E5878FE68E89E5B0B1E58FAFE4BBA5E4BA86E38082E784B6E8808CE8A681E4BF9DE8AF81E5AE89E585A8E59CB0E588A0E999A4E58583E7B4A0E5B9B6E99D9EE5A682E6ADA4E7AE80E58D95E38082E9A696E58588E68891E4BBACE5BF85E9A1BBE4BF9DE8AF81E588A0E999A4E79A84E58583E7B4A0E79A84E7A1AEE59CA8E5B883E99A86E8BF87E6BBA4E599A8E9878CE99DA2E38082E8BF99E4B880E782B9E58D95E587ADE8BF99E4B8AAE8BF87E6BBA4E599A8E698AFE697A0E6B395E4BF9DE8AF81E79A84E38082E58FA6E5A496E8AEA1E695B0E599A8E59B9EE7BB95E4B99FE4BC9AE980A0E68890E997AEE9A298E38082, 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '数据结构');
INSERT INTO `spider_text` VALUES ('958', 0xE7BCBAE782B9EFBC9A0AE59CA8E9998DE4BD8EE8AFAFE7AE97E78E87E696B9E99DA2EFBC8CE69C89E4B88DE5B091E5B7A5E4BD9CEFBC8CE4BDBFE5BE97E587BAE78EB0E4BA86E5BE88E5A49AE5B883E99A86E8BF87E6BBA4E599A8E79A84E58F98E7A78DE38082, 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '数据结构');
INSERT INTO `spider_text` VALUES ('959', 0xE7BCBAE782B9EFBC9A0A48617368E5928C426C6F6F6D2046696C746572E4BB8BE7BB8D20426C6F6F6D2046696C746572E28094E28094E5A4A7E8A784E6A8A1E695B0E68DAEE5A484E79086E588A9E599A8EFBC88E8A7A3E586B3E7A9BAE69FA5E997AEE9A298EFBC89, 'https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8', '2016-08-08 02:31:00', '2016-12-20 09:45:34', '48', '布隆过滤器', '数据结构');
INSERT INTO `spider_text` VALUES ('960', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:42', '49', '二分图', '数据结构');
INSERT INTO `spider_text` VALUES ('962', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:42', '49', '二分图', '数据结构');
INSERT INTO `spider_text` VALUES ('963', 0xE69198E8A681EFBC9A0AE4BA8CE58886E59BBEE58F88E7A7B0E4BD9CE4BA8CE983A8E59BBEEFBC8CE698AFE59BBEE8AEBAE4B8ADE79A84E4B880E7A78DE789B9E6AE8AE6A8A1E59E8BE3808220E8AEBE473D28562C4529E698AFE4B880E4B8AAE697A0E59091E59BBEEFBC8CE5A682E69E9CE9A1B6E782B956E58FAFE58886E589B2E4B8BAE4B8A4E4B8AAE4BA92E4B88DE79BB8E4BAA4E79A84E5AD90E99B8628552C5629EFBC8CE5B9B6E4B894E59BBEE4B8ADE79A84E6AF8FE69DA1E8BEB9EFBC8869EFBC8C6AEFBC89E68980E585B3E88194E79A84E4B8A4E4B8AAE9A1B6E782B969E5928C6AE58886E588ABE5B19EE4BA8EE8BF99E4B8A4E4B8AAE4B88DE5908CE79A84E9A1B6E782B9E99B86286920696E20552C6A20696E205629EFBC8CE58899E7A7B0E59BBE47E4B8BAE4B880E4B8AAE4BA8CE58886E59BBEE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:42', '49', '二分图', '数据结构');
INSERT INTO `spider_text` VALUES ('964', 0xE69198E8A681EFBC9A0AE697A0E59091E59BBE47E4B8BAE4BA8CE58886E59BBEE79A84E58585E58886E5BF85E8A681E69DA1E4BBB6E698AFEFBC8C47E887B3E5B091E69C89E4B8A4E4B8AAE9A1B6E782B9EFBC8CE4B894E585B6E68980E69C89E59B9EE8B7AFE79A84E995BFE5BAA6E59D87E4B8BAE581B6E695B0E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:42', '49', '二分图', '数据结构');
INSERT INTO `spider_text` VALUES ('965', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:42', '49', '二分图', '数据结构');
INSERT INTO `spider_text` VALUES ('966', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:42', '49', '二分图', '数据结构');
INSERT INTO `spider_text` VALUES ('967', 0xE69198E8A681EFBC9A0AE7BB99E5AE9AE4B880E4B8AAE4BA8CE58886E59BBE47EFBC8CE59CA847E79A84E4B880E4B8AAE5AD90E59BBE4DE4B8ADEFBC8C4DE79A84E8BEB9E99B86E4B8ADE79A84E4BBBBE6848FE4B8A4E69DA1E8BEB9E983BDE4B88DE4BE9DE99984E4BA8EE5908CE4B880E4B8AAE9A1B6E782B9EFBC8CE58899E7A7B04DE698AFE4B880E4B8AAE58CB9E9858DE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:42', '49', '二分图', '数据结构');
INSERT INTO `spider_text` VALUES ('968', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:42', '49', '二分图', '数据结构');
INSERT INTO `spider_text` VALUES ('969', 0xE59BBEE4B8BAE4BA8CE58886E59BBEE5BD93E4B894E4BB85E5BD93EFBC9A0AE5AE8CE585A8E4BA8CE58886E59BBE20E59BA0E5AD90E59BBE2054616E6E6572E59BBE205065747269E7BD91, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E5%9B%BE', '2016-10-31 13:47:00', '2016-12-20 09:45:42', '49', '二分图', '数据结构');
INSERT INTO `spider_text` VALUES ('971', 0xhttps://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:52', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('972', 0xE69198E8A681EFBC9A0AE4BE8BE5A682EFBC8CE68ABDE8B1A1E79A84E5A086E6A088EFBC88737461636BEFBC89E794B133E4B8AAE6938DE4BD9CE5AE9AE4B989EFBC9AE68EA8E585A570757368EFBC8CE5BCB9E587BA706F70EFBC88E68EA5E58F97E7BAA6E69D9FEFBC9AE6AF8FE6ACA1E5BCB9E587BAE8BF94E59B9EE79A84E698AFE69C80E696B0E8A2ABE68EA8E585A5E4B894E6B2A1E69C89E8A2ABE5BCB9E587BAE79A84E695B0E68DAEEFBC8CE4B99FE5B0B1E698AFE5908EE8BF9BE58588E587BAEFBC89EFBC8CE69FA5E79C8BE5A086E6A088E9A1B6E7ABAFE695B0E68DAE7065656BE38082E5BD93E58886E69E90E4BDBFE794A8E5A086E6A088E7AE97E6B395E79A84E69588E78E87EFBC8CE68980E69C89E8BF9933E4B8AAE6938DE4BD9CE794A8E697B6E79BB8E5908CEFBC8CE697A0E8AEBAE5A086E6A088E4B8ADE58C85E590ABE5A49AE5B091E9A1B9E695B0E68DAEEFBC9BE5B9B6E4B894E5AFB9E6AF8FE9A1B9E695B0E68DAEE6A088E4BDBFE794A8E4BA86E5B8B8E9878FE5A4A7E5B08FE79A84E5AD98E582A8E38082, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('973', 0xhttps://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('974', 0xE7A4BAE4BE8BEFBC9A0AE59CA8E7BC96E7A88BE8AFADE8A880EFBC88E68896E5BA93EFBC89E5928CE69599E7A791E4B9A6E4B8ADEFBC8CE5B8B8E8A781E79A84E587A0E4B8AAE68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE5A682E4B88BEFBC9A, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('975', 0xE7A4BAE4BE8BEFBC9A0AE585B3E88194E695B0E7BB8420E5A48DE695B020E5AEB9E599A820E58F8CE7ABAFE9989FE5889720E58897E8A1A8204D756C74696D617020E4BC98E58588E9989FE5889720E9989FE5889720E99B86E5908820E5A086E6A08820E5AD97E7ACA6E4B8B220E6A091, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('976', 0xE68EA5E58FA3E5928CE5AE9EE78EB0E79A84E58886E7A6BBEFBC9A0AE5AE9EE78EB0E4BA8EE7A88BE5BA8FE697B6EFBC8CE68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE58FAAE698BEE78EB0E587BAE585B6E68EA5E58FA3EFBC8CE5B9B6E5B086E5AE9EE78EB0E58AA0E4BBA5E99A90E8978FE38082E794A8E688B7E58FAAE99C80E585B3E5BF83E5AE83E79A84E68EA5E58FA3EFBC8CE8808CE4B88DE698AFE5A682E4BD95E5AE9EE78EB0E38082E69CAAE69DA5E69BB4E58FAFE4BBA5E694B9E58F98E5AE9EE78EB0E79A84E696B9E5BC8FE38082EFBC88E585B6E694AFE68C81E4BFA1E681AFE99A90E8978FE58E9FE79086EFBC8CE68896E4BF9DE68AA4E7A88BE5BA8FE5858DE58F97E58F98E58C96E79A84E586B2E587BBE38082EFBC89, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('977', 0xE68EA5E58FA3E5928CE5AE9EE78EB0E79A84E58886E7A6BBEFBC9A0AE68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE79A84E5BCBAE5A484E59CA8E4BA8EE5AFB9E794A8E688B7E99A90E8978FE4BA86E5AE9EE78EB0E7BB86E88A82EFBC8CE4BB85E585ACE5BC80E585B6E68EA5E58FA3E38082E8BF99E8A1A8E7A4BAE68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE58FAFE4BBA5E794A8E59084E7A78DE696B9E6B395E69DA5E5AE9EE78EB0EFBC8CE58FAAE8A681E981B5E5BEAAE585B6E68EA5E58FA3EFBC8CE5B0B1E4B88DE4BC9AE5BDB1E5938DE588B0E794A8E688B7E38082, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('978', 0xhttps://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('979', 0xE68EA5E58FA3E5928CE5AE9EE78EB0E79A84E58886E7A6BBEFBC9A0AE5908CE6A0B7E59CB0EFBC8CE4BA8CE58F89E6A091E6909CE7B4A2E6B395E79A84E68ABDE8B1A1E695B0E68DAEE7BB93E69E84E58FAFE4BBA5E587A0E4B8AAE696B9E5BC8FE5AE9EE78EB0EFBC9AE4BA8CE58F89E6A091E3808141564CE6A091E38081E7BAA2E9BB91E6A091E38081E695B0E7BB84E7AD89E7AD89E38082E4B894E697A0E9A1BBE585B3E5BF83E585B6E5AE9EE78EB0EFBC8CE4BA8CE58F89E6A091E6909CE7B4A2E6B395E680BBE698AFE69C89E79BB8E5908CE79A84E8BF90E7AE97EFBC88E68F92E585A5E38081E7A7BBE999A4E38081E69FA5E689BEE7AD89E7AD89EFBC89E38082, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('980', 0xhttps://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('981', 0xE68EA5E58FA3E5928CE5AE9EE78EB0E79A84E58886E7A6BBEFBC9A0AE59CA8E99DA2E59091E5AFB9E8B1A1E79A84E794A8E8AFADE4B8ADEFBC8CE68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE79BB8E5BD93E4BA8EE7B1BBE588ABEFBC9BE68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE79A84E5AE9EE4BD93E5B0B1E79BB8E5BD93E4BA8EE5AFB9E8B1A1E38082E69F90E4BA9BE8AFADE8A880E58C85E590ABE4BA86E794A8E4BA8EE5AEA3E5918AE68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE79A84E69E84E980A0E587BDE695B0E38082E4BE8BE5A682EFBC8C432B2B20E5928C204A61766120E4B8BAE6ADA4E68F90E4BE9BE4BA86E7B1BBE79A84E69E84E980A0E587BDE695B0E38082, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('982', 0xE68ABDE8B1A1E695B0E68DAEE7BB93E69E84EFBC9A0AE68ABDE8B1A1E695B0E68DAEE7BB93E69E84E58DB3E6A0B9E68DAEE68980E8A681E8BF90E7AE97E79A84E695B0E68DAEE4BBA5E58F8AE585B6E8AEA1E7AE97E5A48DE69D82E680A7E68980E5AE9AE4B989E79A84E68ABDE8B1A1E5AD98E582A8E58CBAEFBC8CE8808CE4B88DE585B3E5BF83E585B7E4BD93E79A84E695B0E68DAEE7BB93E69E84E79A84E5AE9EE78EB0E38082, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('983', 0xE68ABDE8B1A1E695B0E68DAEE7BB93E69E84EFBC9A0AE5B0B1E5AE9EE78EB0E9AB98E69588E78E87E79A84E7AE97E6B395E8808CE8A880EFBC8CE5AFB9E695B0E68DAEE7BB93E69E84E79A84E98089E68BA9E79BB8E5BD93E9878DE8A681E38082E68ABDE8B1A1E695B0E68DAEE7BB93E69E84E79A84E98089E68BA9EFBC8CE586B3E5AE9AE4BA86E9AB98E69588E78E87E79A84E7AE97E6B395E79A84E8AEBEE8AEA1EFBC8CE5928CE4BCB0E8AEA1E585B6E8AEA1E7AE97E5A48DE69D82E680A7E38082, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('984', 0xE68ABDE8B1A1E695B0E68DAEE7BB93E69E84EFBC9A0AE8BF99E4B8AAE6A682E5BFB5E4B88EE7BC96E7A88BE8AFADE8A880E79086E8AEBAE4B8ADE68980E4BDBFE794A8E79A84E68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE99D9EE5B8B8E68EA5E8BF91EFBC8CE5A4A7E887B4E4B88AE68ABDE8B1A1E695B0E68DAEE7BB93E69E84E5928CE68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE79A84E5908DE7A7B0EFBC8CE5928CE585B7E4BD93E79A84E695B0E68DAEE7BB93E69E84E79A84E5908DE7A7B0E4B880E887B4E38082, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('985', 0xE58685E7BDAEE68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BEFBC9A0AE4B880E983A8E58886E68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE59CA8E7A88BE5BA8FE8AEBEE8AEA1E4B8ADE79BB8E5BD93E699AEE9818DE4B894E5AE9EE794A8EFBC8CE68980E4BBA5E59CA8E69F90E4BA9BE7BC96E7A88BE8AFADE8A880E4B8ADEFBC8CE68890E4B8BAE58E9FE7949FE7B1BBE59E8BE38081E68896E58AA0E8BF9BE6A087E58786E5BA93E4B8ADE38082E4BE8BE5A682EFBC8C5065726C20E79A84E695B0E7BB84E58FAFE4BBA5E794A8E58897E8A1A8E68896E58F8CE7ABAFE9989FE58897E4B98BE7B1BBE79A84E68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE69DA5E5AE9EE78EB0EFBC8CE695A3E58897E8A1A8E4B99FE58FAFE4BBA5E794A8204D617020E68896205461626C6520E69DA5E5819AE38082432B2B20E6A087E58786E5BA93E5928C204A61766120E5BA93E4B99FE68F90E4BE9BE4BA86E58897E8A1A8E38081E5A086E6A088E38081E9989FE58897E380814D6170E38081E4BC98E58588E69D83E9989FE58897E5928CE5AD97E7ACA6E4B8B2E38082, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('986', 0xE4BD9CE4B8BAE68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE79A84E69C89E79086E695B0EFBC9A0AE69C89E79086E695B0EFBC88E58FAFE4BBA520612F6220E6A0BCE5BC8FE8A1A8E7A4BAE79A84E695B0EFBC8CE4B894206120E5928C206220E983BDE698AFE695B4E695B0EFBC89E69CACE69DA5E698AFE4B88DE883BDE59CA8E794B5E88491E4B8ADE8A1A8E7A4BAE587BAE69DA5E38082E4B88DE8BF87E58FAFE4BBA5E59088E79086E79A84E68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE69DA5E5AE9AE4B989EFBC8CE5A682E4B88BE38082, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('987', 0xE4BD9CE4B8BAE68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE79A84E69C89E79086E695B0EFBC9A0AE69E84E980A0EFBC9AE4BDBFE794A8E4B8A4E4B8AAE695B4E695B0206120E4B88E206220E5889BE5BBBAE5AE9EE4BD93EFBC8CE585B6E4B8AD206120E4B8BAE58886E5AD90EFBC8C6220E4B8BAE58886E6AF8DE38082, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('988', 0xE4BD9CE4B8BAE68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE79A84E69C89E79086E695B0EFBC9A0AE8BF90E7AE97EFBC9AE58AA0E6B395E38081E5878FE6B395E38081E4B998E6B395E38081E999A4E6B395E38081E4B998E5B995E38081E6AF94E8BE83E38081E7BAA6E58886EFBC8CE8BDACE68890E5AE9EE695B0EFBC88E6B5AEE782B9E695B0EFBC89E38082, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('989', 0xE4BD9CE4B8BAE68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE79A84E69C89E79086E695B0EFBC9A0AE8A681E5AE8CE68890E695B4E4B8AAE8A784E6A0BCEFBC8CE5B0B1E8A681E6A0B9E68DAEE695B0E68DAEE69DA5E5AE9AE4B989E68980E69C89E79A84E8BF90E7AE97E38082E4BE8BE5A682EFBC8CE5BD93E4B8A4E4B8AAE69C89E79086E695B020612F6220E5928C20632F6420E79BB8E4B998E697B6EFBC8CE79BB8E4B998E79A84E7BB93E69E9CE5B0B1E8A681E5AE9AE4B989E4B8BA2028206120632029202F2028206220642029E38082E8BF98E69C89E8BE93E585A5E38081E8BE93E587BAE38081E58588E586B3E69DA1E4BBB6E38081E5908EE7BDAEE69DA1E4BBB6EFBC8CE4BBA5E58F8AE5AFB9E68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE79A84E59084E7A78DE58187E5AE9AE38082, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('990', 0xE68EA5E58FA3EFBC9A0AE5A086E6A088E79A84E68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE68EA5E58FA3EFBC8CE4BBA5204320E8AFADE6B395E7BC96E58699EFBC9A, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('991', 0xhttps://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('992', 0xE794A8E6B395EFBC9A0A6C6F6E6720737461636B3B0A73747275637420666F6F202A663B0A0A737461636B203D20737461636B5F63726561746528293B202F2A20E5BBBAE7AB8BE5A086E58FA0202A2F0A0A737461636B5F7075736828737461636B2C2066293B202F2A20E5B08620666F6F20E7BB93E69E84E58AA0E585A5E5A086E58FA0202A2F0A0A66203D20737461636B5F706F7028737461636B293B202F2A20E4BB8EE5A086E58FA0E58F96E5BE97E9A1B6E983A8E79A84E7BB93E69E84202A2F, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('993', 0xE59084E7A78DE5AE9EE78EB0EFBC9A0AE4B88AE8BFB0E5A086E6A088E79A84E68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BEFBC8CE4B880E5BC80E5A78BE58FAFE4BBA5E4BDBFE794A8E695B0E7BB84E69DA5E5AE9EE78EB0EFBC8CE784B6E5908EE694B9E794A8E993BEE8A1A8EFBC8CE8808CE4B88DE4BC9AE4BCA4E588B0E4BBBBE4BD95E794A8E688B7E79A84E4BBA3E7A081E38082E69C89E5A49AE5B091E696B9E6B395E58FAFE4BBA5E5AE9EE78EB0E68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BEFBC8CE58F96E586B3E4BA8EE7BC96E7A88BE8AFADE8A880E38082E4BE8BE5A682EFBC8CE4B88AE8BFB0E7A4BAE4BE8BE58FAFE4BDBFE794A8204320E7BC96E58699E4B880E4B8AAE7BB93E69E84EFBC8CE4BBA5E58F8AE99A8FE5908CE79A84E4B880E7BB84E695B0E68DAEE7BB93E69E84EFBC8CE58FAFE4BDBFE794A8E695B0E7BB84E68896E993BEE8A1A8E69DA5E5AD98E694BEE8AEB0E5BD95EFBC9BE5BD93E69E84E980A0E587BDE695B0E587BDE695B0E8BF94E59B9EE4B880E4B8AAE68ABDE8B1A1E58FA5E69F84E697B6EFBC8CE5B0B1E5AFB9E794A8E688B7E99A90E8978FE4BA86E79C9FE5AE9EE79A84E5AE9EE78EB0E8BF87E7A88BE38082, 'https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B5%84%E6%96%99%E5%9E%8B%E5%88%AB', '2016-01-01 00:00:00', '2016-12-20 09:45:53', '50', '抽象资料型别', '数据结构');
INSERT INTO `spider_text` VALUES ('994', 0xE69198E8A681EFBC9A0AE69CACE69DA1E79BAEE79A84E8AFADE8B083E68896E9A38EE6A0BCE58FAFE883BDE4B88DE98082E59088E799BEE7A791E585A8E4B9A6E79A84E58699E4BD9CE696B9E5BC8FE38082EFBC8832303133E5B9B43131E69C883139E697A5EFBC8920E8AFB7E6A0B9E68DAEE68C87E58D97E58D8FE58AA9E694B9E59684E8BF99E7AF87E69DA1E79BAEEFBC8CE8AFB7E59CA8E8AEA8E8AEBAE9A1B5E8AEA8E8AEBAE997AEE9A298E68980E59CA8E58F8AE58AA0E4BBA5E694B9E59684E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('995', 0xE69198E8A681EFBC9A0AE68F90E7A4BAEFBC9AE69CACE69DA1E79BAEE79A84E4B8BBE9A298E4B88DE698AFE4BA8CE58F89E6A091EFBC8862696E6172792074726565EFBC89E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('996', 0xE69198E8A681EFBC9A0A42E6A09120E59E8BE6808120E6A09120E697B6E997B4203139373220E4BD9CE88085205275646F6C662042617965722C20456477617264204D2E204D634372656967687420E5A4A74FE7ACA6E58FB720E79A84E697B6E997B4E5A48DE69D82E5BAA620E5B9B3E59D8720E69C80E5B7AE20E7A9BAE997B4204F286E29204F286E2920E6909CE5AFBB204F286C6F67206E29204F286C6F67206E2920E68F92E585A5204F286C6F67206E29204F286C6F67206E2920E588A0E999A4204F286C6F67206E29204F286C6F67206E29, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('997', 0xE69198E8A681EFBC9A0AE59CA8E8AEA1E7AE97E69CBAE7A791E5ADA6E4B8ADEFBC8C42E6A091EFBC88E88BB1E8AFADEFBC9A422D74726565EFBC89E698AFE4B880E7A78DE887AAE5B9B3E8A1A1E79A84E6A091EFBC8CE883BDE5A49FE4BF9DE68C81E695B0E68DAEE69C89E5BA8FE38082E8BF99E7A78DE695B0E68DAEE7BB93E69E84E883BDE5A49FE8AEA9E69FA5E689BEE695B0E68DAEE38081E9A1BAE5BA8FE8AEBFE997AEE38081E68F92E585A5E695B0E68DAEE58F8AE588A0E999A4E79A84E58AA8E4BD9CEFBC8CE983BDE59CA8E5AFB9E695B0E697B6E997B4E58685E5AE8CE68890E3808242E6A091EFBC8CE6A682E68BACE69DA5E8AFB4E698AFE4B880E4B8AAE4B880E888ACE58C96E79A84E4BA8CE58F89E69FA5E689BEE6A091EFBC8862696E617279207365617263682074726565EFBC89EFBC8CE58FAFE4BBA5E68BA5E69C89E5A49AE4BA8E32E4B8AAE5AD90E88A82E782B9E38082E4B88EE887AAE5B9B3E8A1A1E4BA8CE58F89E69FA5E689BEE6A091E4B88DE5908CEFBC8C42E6A091E4B8BAE7B3BBE7BB9FE5A4A7E59D97E695B0E68DAEE79A84E8AFBBE58699E6938DE4BD9CE5819AE4BA86E4BC98E58C96E3808242E6A091E5878FE5B091E5AE9AE4BD8DE8AEB0E5BD95E697B6E68980E7BB8FE58E86E79A84E4B8ADE997B4E8BF87E7A88BEFBC8CE4BB8EE8808CE58AA0E5BFABE5AD98E58F96E9809FE5BAA6E3808242E6A091E8BF99E7A78DE695B0E68DAEE7BB93E69E84E58FAFE4BBA5E794A8E69DA5E68F8FE8BFB0E5A496E983A8E5AD98E582A8E38082E8BF99E7A78DE695B0E68DAEE7BB93E69E84E5B8B8E8A2ABE5BA94E794A8E59CA8E695B0E68DAEE5BA93E5928CE69687E4BBB6E7B3BBE7BB9FE79A84E5AE9EE4BD9CE4B88AE38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('998', 0xE58F98E4BD93EFBC9A0AE69CAFE8AFADEFBCA2E6A091E58FAFE4BBA5E68C87E4B880E4B8AAE789B9E5AE9AE79A84E696B9E6A188EFBC8CE4B99FE58FAFE4BBA5E68C87E5A4A7E4BD93E4B88AE4B880E7B1BBE696B9E6A188E38082E78BADE4B989E4B88AEFBC8CE4B880E4B8AAEFBCA2E6A091E59CA8E5AE83E58685E983A8E88A82E782B9E4B8ADE5AD98E582A8E994AEE580BCEFBC8CE4BD86E4B88DE99C80E59CA8E58FB6E5AD90E88A82E782B9E4B88AE5AD98E582A8E8BF99E4BA9BE994AEE580BCE79A84E8AEB0E5BD95E38082E5A4A7E4BD93E4B88AE79A84E4B880E7B1BBE58C85E590ABE4B880E4BA9BE58F98E4BD93EFBC8CE5A682422BE6A091E5928CEFBCA22AE6A091E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('999', 0xE58F98E4BD93EFBC9A0AE59CA8EFBCA22BE6A091EFBC8CE8BF99E4BA9BE994AEE580BCE79A84E68BB7E8B49DE8A2ABE5AD98E582A8E59CA8E58685E983A8E88A82E782B9EFBC9BE994AEE580BCE5928CE8AEB0E5BD95E5AD98E582A8E59CA8E58FB6E5AD90E88A82E782B9EFBC9BE58FA6E5A496EFBC8CE4B880E4B8AAE58FB6E5AD90E88A82E782B9E58FAFE4BBA5E58C85E590ABE4B880E4B8AAE68C87E99288EFBC8CE68C87E59091E58FA6E4B880E4B8AAE58FB6E5AD90E88A82E782B9E4BBA5E58AA0E9809FE9A1BAE5BA8FE5AD98E58F96E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1000', 0xE58F98E4BD93EFBC9A0A422AE6A091E58886E694AFE587BAE69BB4E5A49AE79A84E58685E983A8E982BBE5B185E88A82E782B9E4BBA5E4BF9DE68C81E58685E983A8E88A82E782B9E69BB4E5AF86E99B86E59CB0E5A1ABE58585E38082E6ADA4E58F98E4BD93E8A681E6B182E99D9EE6A0B9E88A82E782B9E887B3E5B091322F33E5A1ABE58585EFBC8CE8808CE4B88DE698AF312F32E38082E4B8BAE4BA86E7BBB4E68C81E8BF99E6A0B7E79A84E7BB93E69E84EFBC8CE5BD93E4B880E4B8AAE88A82E782B9E5A1ABE6BBA1E4B98BE5908EE5B086E4B88DE4BC9AE5868DE7AB8BE58DB3E58886E589B2E88A82E782B9EFBC8CE8808CE698AFE5B086E5AE83E79A84E994AEE580BCE4B88EE4B88BE4B880E4B8AAE88A82E782B9E585B1E4BAABE38082E5BD93E4B8A4E4B8AAE88A82E782B9E983BDE5A1ABE6BBA1E4B98BE5908EEFBC8CE58886E589B2E6889033E4B8AAE88A82E782B9E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1001', 0xE58F98E4BD93EFBC9A0AE8AEA1E695B042E6A091E5AD98E582A8EFBC8CE6AF8FE4B880E6A091E983BDE5B8A6E69C89E4B880E4B8AAE68C87E99288E5928CE585B6E68C87E59091E5AD90E6A091E79A84E88A82E782B9E695B0E79BAEE38082E8BF99E5B0B1E58581E8AEB8E4BA86E4BBA5E994AEE580BCE4B8BAE5BA8FE5BFABE9809FE69FA5E689BEE7ACAC4EE7AC94E8AEB0E5BD95EFBC8CE68896E698AFE7BB9FE8AEA132E7AC94E8AEB0E5BD95E4B98BE997B4E79A84E8AEB0E5BD95E695B0E79BAEEFBC8CE8BF98E69C89E585B6E4BB96E5BE88E5A49AE79BB8E585B3E79A84E6938DE4BD9CE38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1002', 0xE5908DE5AD97E58F96E4B989EFBC9A0A5275646F6C6620426179657220E5928C204564204D634372656967687420E4BA8E31393732E5B9B4EFBC8CE59CA8426F65696E67205265736561726368204C61627320E5B7A5E4BD9CE697B6E58F91E6988EE4BA864220E6A091EFBC8CE4BD86E698AFE4BB96E4BBACE6B2A1E69C89E8A7A3E9878A4220E4BBA3E8A1A8E4BB80E4B988E6848FE4B989EFBC88E5A682E69E9CE69C89E79A84E8AF9DEFBC89E38082446F75676C617320436F6D657220E8A7A3E9878AE8AFB43A20E4B8A4E4BD8DE4BD9CE88085E4BB8EE69DA5E983BDE6B2A1E8A7A3E9878AE8BF8742E6A091E79A84E58E9FE5A78BE6848FE4B989E38082E6ADA3E5A682E68891E4BBACE68980E8A781EFBC8CE2809C62616C616E636564E2809DEFBC8C20E2809C62726F6164E2809D20E6889620E2809C6275736879E2809D20E58FAFE883BDE98082E59088E38082E585B6E4BB96E4BABAE5BBBAE8AEAEE5AD97E6AF8DE2809C42E2809DE4BBA3E8A1A820426F65696E67E38082E6BA90E887AAE4BA8EE4BB96E79A84E8B59EE58AA9EFBC8CE4B88DE8BF87EFBC8CE79C8BE8B5B7E69DA5E68A8A42E6A091E5BD93E4BD9CE2809C4261796572E2809DE6A091E69BB4E59088E98082E4BA9B, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1003', 0xE5908DE5AD97E58F96E4B989EFBC9A0A446F6E616C64204B6E75746820E59CA8E4BB9631393830E5B9B435E69C88E58F91E8A1A8E79A84E9A298E4B8BAE2809C43533134344320636C617373726F6F6D206C6563747572652061626F7574206469736B2073746F7261676520616E6420422D7472656573E2809DE79A84E8AEBAE69687E4B8ADE68EA8E6B58BE4BA8642E6A091E79A84E5908DE5AD97E58F96E4B989EFBC8CE68F90E587BAE2809C42E2809DE58FAFE883BDE6848FE591B3426F65696E6720E68896E88085426179657220E79A84E5908DE5AD97E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1004', 0xE5B7B2E68E92E5BA8FE69687E4BBB6E79A84E69FA5E689BEE697B6E997B4EFBC9A0AE9809AE5B8B8EFBC8CE68E92E5BA8FE5928CE69FA5E689BEE7AE97E6B395E4BC9AE8A2ABE9809AE8BF87E5A4A74FE7ACA6E58FB7EFBC8CE588BBE794BBE4B8BAE6AF94E8BE83E7BAA7E588ABE79A84E695B0E580BCE38082E5AFB9E4B880E4B8AAE69C894EE7AC94E8AEB0E5BD95E79A84E5B7B2E68E92E5BA8FE8A1A8E8BF9BE8A18CE4BA8CE58F89E69FA5E689BEEFBC8CE68993E4B8AAE6AF94E696B9E8AFB4EFBC8CE58FAFE4BBA5E59CA84FEFBC886C6F67324EEFBC89E6AF94E8BE83E7BAA7E5AE8CE68890E38082E5A682E69E9CE8A1A8E69C89312C3030302C303030E7AC94E8AEB0E5BD952CE982A3E4B988E5AE9AE4BD8DE585B6E4B8ADE4B880E7AC94E8AEB0E5BD95EFBC8CE5B086E59CA8323020E4B8AAE6AF94E8BE83E7BAA7E58685E5AE8CE68890E38082206C6F6732312C3030302C303030203D2031392E3933312E2E2E, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1005', 0xE5B7B2E68E92E5BA8FE69687E4BBB6E79A84E69FA5E689BEE697B6E997B4EFBC9A0AE5A4A7E695B0E68DAEE5BA93E4B880E79BB4E4BBA5E69DA5E8A2ABE5AD98E582A8E59CA8E7A381E79B98E38082E4BB8EE7A381E79B98E4B88AE8AFBBE58F96E4B880E7AC94E8AEB0E5BD95EFBC8CE4B88EE4B98BE5908EE79A84E6AF94E8BE83E994AEE580BCE6938DE4BD9CE79BB8E6AF94EFBC8CE59CA8E88AB1E8B4B9E79A84E8BF90E8A18CE697B6E997B4E4B88AE5898DE88085E5A484E4BA8EE694AFE9858DE59CB0E4BD8DE38082E4BB8EE7A381E79B98E8AFBBE58F96E8AEB0E5BD95E79A84E697B6E997B4E6B689E58F8AE588B0E4B880E4B8AA20E5AFBBE98193E697B6E997B420E5928C20E6978BE8BDACE5BBB6E8BF9FE38082E5AFBBE98193E697B6E997B4E58FAFE883BDE698AFE4BB8E30E588B03230E68896E88085E69BB4E5A49AE6AFABE7A792EFBC8CE6978BE8BDACE5BBB6E8BF9FE5B9B3E59D87E4B88BE69DA5E7BAA6E698AFE6978BE8BDACE591A8E69C9FE79A84E4B880E58D8AE38082E5AFB9E4BA8EE4B880E4B8AA3732303020E8BDACE6AF8FE58886E9929FE79A84E7A381E79B98EFBC8CE6978BE8BDACE591A8E69C9FE5A4A7E7BAA6E698AF382E3333E6AFABE7A792E38082E5838FE5B88CE68DB75354333530303332304E53E8BF99E6A0B7E79A84E7A381E79B982CE7A381E98193E887B3E7A381E98193E79A84E5AFBBE98193E697B6E997B4E4B8BA20302E38E6AFABE7A792EFBC8CE5B9B3E59D87E8AFBBE58F96E5AFBBE98193E697B6E997B4E4B8BA382E35E6AFABE7A792E38082E4B8BAE4BA86E7AE80E58C96EFBC8CE58187E8AEBEE4BB8EE7A381E79B98E8AFBBE58F96E88AB1E8B4B93130E6AFABE7A792E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1006', 0xE5B7B2E68E92E5BA8FE69687E4BBB6E79A84E69FA5E689BEE697B6E997B4EFBC9A0AE4B990E8A782E69DA5E8AFB4EFBC8CE5A682E6ADA4EFBC8CE59CA8E4B880E799BEE4B887E4B8ADE5AE9AE4BD8DE4B880E7AC94E8AEB0E5BD95E5B086E4BC9AE8AF9DE88AB1E8B4B93230E6ACA1E7A381E79B98E8AFBBE58F96E4B998E4B88A3130E6AFABE7A792E6AF8FE6ACA1E8AFBBE58F96E697B6E997B4EFBC8CE680BBE585B1E698AF302E32E7A792E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1007', 0xE5B7B2E68E92E5BA8FE69687E4BBB6E79A84E69FA5E689BEE697B6E997B4EFBC9A0AE697B6E997B4E88AB1E8B4B9E6B2A1E69C89E982A3E4B988E7B39FE7B395E79A84E58E9FE59BA0E698AFEFBC8CE78BACE7AB8BE79A84E8AEB0E5BD95E8A2ABE68890E7BB84E59CB0E8AEB0E5BD95E59CA8E7A381E79B98E59D97E4B88AE38082E4B880E4B8AAE7A381E79B98E59D97E58FAFE883BDE4B8BA313620E58D83E5AD97E88A82E38082E5A682E69E9CE6AF8FE7AC94E8AEB0E5BD95E5A4A7E5B08FE4B8BA31363020E5AD97E88A82EFBC8CE982A3E4B988E4B880E4B8AAE59D97E58FAFE4BBA5E5AD98E582A831303020E7AC94E8AEB0E5BD95E38082E4B88AE99DA2E58187E8AEBEE79A84E7A381E79B98E8AFBBE58F96E697B6E997B4E7A1AEE58887E59CB0E8AFB4E698AFE8AFBBE58F96E4B880E4B8AAE5AE8CE695B4E59D97E79A84E697B6E997B4E38082E4B880E697A6E7A381E5A4B4E588B0E8BEBEE4BD8DE7BDAEEFBC8CE4B880E4B8AAE68896E88085E69BB4E5A49AE79A84E7A381E79B98E59D97E58FAFE4BBA5E4BBA5E8BE83E5B08FE79A84E5BBB6E8BF9FE69DA5E5AE8CE68890E8AFBBE58F96E38082E5AFB9E4BA8E313030E7AC94E8AEB0E5BD95E6AF8FE59D97EFBC8CE69C80E5908EE5B7AEE4B88DE5A49A36E4B8AAE6AF94E8BE83E7BAA7E698AFE4B88DE99C80E8A681E4BBBBE4BD95E7A381E79B98E8AFBBE58F96E79A84E28094E28094E28094E28094E983BDE59CA8E4B88AE6ACA1E8AFBBE58F96E6938DE4BD9CE4B8ADE5AE8CE68890E4BA86E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1008', 0xE5B7B2E68E92E5BA8FE69687E4BBB6E79A84E69FA5E689BEE697B6E997B4EFBC9A0AE4B8BAE8BF9BE4B880E6ADA5E58AA0E9809FE69FA5E689BEEFBC8CE5BC80E5A78BE79A843133E688963134E4B8AAE6AF94E8BE83E7BAA7EFBC88E6AF8FE4B8AAE99C80E8A681E4B880E6ACA1E7A381E79B98E8AEBFE997AEEFBC89E5BF85E9A1BBE8A681E68F90E9809FE38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1009', 0xE68F90E58D87E69FA5E689BEE79A84E7B4A2E5BC95EFBC9A0AE8BE83E5A4A7E7A88BE5BAA6E4B88AE79A84E68F90E58D87E698AFE9809AE8BF87E7B4A2E5BC95E69DA5E5819AE588B0E79A84E38082E59CA8E4B88AE99DA2E79A84E4BE8BE5AD90E4B8ADEFBC8CE5889DE5A78BE7A381E79B98E8AFBBE58F96E4BB8E32E4B8AAE59BA0E7B4A0E99990E588B6E4BA86E69FA5E689BEE88C83E59BB4E38082E8BF99E59FBAE69CACE4B88AE58FAFE4BBA5E9809AE8BF87E5889BE5BBBAE4B880E4B8AAE8BE85E58AA9E7B4A2E5BC95E69DA5E694B9E59684EFBC8CE8BF99E4B8AAE7B4A2E5BC95E58C85E590ABE6AF8FE59D97E7A381E79B98E59D97E4B88AE79A84E9A696E7AC94E8AEB0E5BD95EFBC88E69C89E697B6E7A7B0E4B8BAE7A880E7968FE7B4A2E5BC95EFBC89E38082E8BF99E4B8AAE8BE85E58AA9E7B4A2E5BC95E58FAFE883BDE58FAAE69C89E58E9FE5A78BE695B0E68DAEE5BA93E79A843125E5A4A7E5B08FEFBC8CE4BD86E698AFE5AE83E58FAFE4BBA5E69BB4E5BFABE9809FE59CB0E8A2ABE6A380E7B4A2E38082E59CA8E8BE85E58AA9E7B4A2E5BC95E4B8ADE69FA5E689BEE585A5E58FA3E58FAFE4BBA5E5918AE8AF89E68891E4BBACE59CA8E4B8BBE695B0E68DAEE5BA93E4B8ADE8A681E8AFBBE58EBBE593AAE4B880E59D973BE69FA5E689BEE8BE85E58AA9E7B4A2E5BC95E4B98BE5908EEFBC8CE68891E4BBACE58FAAE99C80E8A681E8AFBBE58F96E4B8BBE695B0E68DAEE5BA93E4B8ADE79A84E789B9E5AE9AE79A84E69F90E4B880E4B8AAE7A381E79B98E58886E59D97E28094E28094E28094E28094E9809AE8BF87E4B880E6ACA1E7A381E79B98E8AFBBE58F96E5BC80E99480E38082E7B4A2E5BC95E58FAFE4BBA5E68F90E4BE9B31302C303030E585A5E58FA3EFBC8CE68980E4BBA5EFBC8CE8BF99E6A0B7E69C80E5A49AE99C80E8A6813134E4B8AAE6AF94E8BE83E7BAA7E38082E5B0B1E5838FE4B8BBE695B0E68DAEE5BA93EFBC8CE8BE85E58AA9E7B4A2E5BC95E4B8ADE69C80E5908E36E4B8AAE5B7A6E58FB3E79A84E6AF94E8BE83E7BAA7E58FAFE883BDE59CA8E79BB8E5908CE79A84E7A381E79B98E58886E59D97E4B88AE38082E7B4A2E5BC95E58FAFE4BBA5E59CA8E5A4A7E7BAA638E6ACA1E7A381E79B98E8AFBBE58F96E4B8ADE5AE8CE68890E69FA5E689BEEFBC8CE79BAEE6A087E8AEB0E5BD95E4BC9AE59CA839E6ACA1E7A381E79B98E8AFBBE58F96E5908EE88EB7E5BE97E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1010', 0xE68F90E58D87E69FA5E689BEE79A84E7B4A2E5BC95EFBC9A0AE5889BE5BBBAE8BE85E58AA9E7B4A2E5BC95E79A84E7AA8DE997A8E698AFE58FAFE4BBA5E9878DE5A48DE59CB0E7BB99E8BE85E58AA9E7B4A2E5BC95E5889BE5BBBAE8BE85E58AA9E7B4A2E5BC95E38082E982A3E6A0B7E58FAFE4BBA5E5AE9EE78EB0E4B880E4B8AAE58FAAE68BA5E69C8931303020E585A5E58FA3EFBC8CE883BDE5A1ABE6BBA1E4B880E695B4E4B8AAE7A381E79B98E59D97E79A84E8BE85E58AA92DE8BE85E58AA9E7B4A2E5BC95E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1011', 0xhttps://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1012', 0xhttps://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1013', 0xE68F90E58D87E69FA5E689BEE79A84E7B4A2E5BC95EFBC9A0AE59CA8E5AE9EE99985E4B8ADEFBC8CE5A682E69E9CE4B8BBE695B0E68DAEE5BA93E8A2ABE9A291E7B981E69FA5E689BEEFBC8CE8BE85E58AA92DE8BE85E58AA9E7B4A2E5BC95E5928CE5A4A7E983A8E58886E79A84E8BE85E58AA9E7B4A2E5BC95E58FAFE883BDE4BC9AE5AD98E582A8E59CA8E7A381E79B98E7BC93E5AD98E4B8ADEFBC8CE68980E4BBA5E5AE83E4BBACE4B88DE4BC9AE4BAA7E7949FE7A381E79B98E8AFBBE58F96E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:20', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1014', 0xE68F92E585A5E5928CE588A0E999A4E5B8A6E69DA5E79A84E9BABBE783A6EFBC9A0AE5A682E69E9CE695B0E68DAEE5BA93E4B88DE4BC9AE694B9E58F98EFBC8CE982A3E4B988E7BC96E588B6E7B4A2E5BC95E5B0B1E5BE88E7AE80E58D95EFBC8CE8808CE4B894E7B4A2E5BC95E6B0B8E8BF9CE4B88DE99C80E8A681E694B9E58F98E38082E5A682E69E9CE4BB96E4BBACE4BC9AE694B9E58F98EFBC8CE982A3E4B988E7AEA1E79086E695B0E68DAEE5BA93E58F8AE585B6E7B4A2E5BC95E5B0B1E58F98E5BE97E99D9EE5B8B8E9BABBE783A6E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1015', 0xE68F92E585A5E5928CE588A0E999A4E5B8A6E69DA5E79A84E9BABBE783A6EFBC9A0AE4BB8EE695B0E68DAEE5BA93E4B8ADE588A0E999A4E8AEB0E5BD95E4B88DE4BC9AE5BC95E8B5B7E5A4AAE5A4A7E997AEE9A298E38082E7B4A2E5BC95E58FAFE4BBA5E4BF9DE68C81E4B88DE58F98EFBC8CE8AEB0E5BD95E58FAAE99C80E8A681E6A087E8AEB0E4B8BAE5B7B2E588A0E999A4E38082E695B0E68DAEE5BA93E4BB8DE784B6E4BF9DE68C81E69C89E5BA8FE78AB6E68081E38082E5A682E69E9CE4BC9AE69C89E5BE88E5A49AE588A0E999A4EFBC8CE4B98BE5908EE69FA5E689BEE5928CE5AD98E582A8E5B0B1E4B88DE5868DE982A3E4B988E9AB98E69588E4BA86E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1016', 0xE68F92E585A5E5928CE588A0E999A4E5B8A6E69DA5E79A84E9BABBE783A6EFBC9A0AE59CA8E4B880E4B8AAE69C89E5BA8FE69687E4BBB6E4B8ADE8BF9BE8A18CE68F92E585A5E5B086E698AFE4B8AAE781BEE99ABEEFBC8CE59BA0E4B8BAE99C80E8A681E7BB99E68F92E585A5E79A84E8AEB0E5BD95E588B6E980A0E7A9BAE997B4E38082E59CA8E69687E4BBB6E4B8ADE7ACACE4B880E7AC94E8AEB0E5BD95E5908EE68F92E585A5E8AEB0E5BD95E99C80E8A681E68A8AE68980E69C89E8AEB0E5BD95E59091E5908EE5818FE7A7BBE4B880E4B8AAE4BD8DE7BDAEE38082E5A682E6ADA4E79A84E6938DE4BD9CE59CA8E5AE9EE99985E4B8ADE5AE9EE59CA8E5A4AAE8BF87E69882E8B4B5E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1017', 0xE68F92E585A5E5928CE588A0E999A4E5B8A6E69DA5E79A84E9BABBE783A6EFBC9A0AE4B880E7A78DE5819AE6B395E698AFE9A284E79599E4B880E4BA9BE7A9BAE997B4E7BB99E68F92E585A5E6938DE4BD9CE38082E7A381E79B98E59D97E69C89E4B880E4BA9BE7A9BAE997B2E7A9BAE997B4E58581E8AEB8E5908EE69DA5E79A84E68F92E585A5EFBC8CE8808CE4B88DE698AFE9AB98E5AF86E5BAA6E59CB0E5A1ABE58585E38082E8BF99E4BA9BE8AEB0E5BD95E58FAFE4BBA5E8A2ABE6A087E8AEB0E4B8BAE5838FE698AFE5B7B2E588A0E999A4E79A84E8AEB0E5BD95E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1018', 0xE68F92E585A5E5928CE588A0E999A4E5B8A6E69DA5E79A84E9BABBE783A6EFBC9A0AE78EB0E59CA8EFBC8CE58FAAE8A681E59D97E4B8ADE5AD98E59CA8E7A9BAE997B4EFBC8CE68F92E585A5E5928CE588A0E999A4E983BDE58FAFE4BBA5E5BE88E5BFABE9809FE38082E5A682E69E9CE4B880E4B8AAE68F92E585A5E6938DE4BD9CE59CA8E4B880E4B8AAE59D97E4B88AE689BEE4B88DE588B0E59088E98082E79A84E7A9BAE997B4EFBC8CE5B0B1E59CA8E4B8B4E8BF91E79A84E59D97E4B8ADE5AFBBE689BEEFBC8CE4B894E8A681E8B083E695B4E8BE85E58AA9E7B4A2E5BC95E38082E69C9FE69C9BE698AFE4B8B4E8BF91E5AD98E59CA8E8B6B3E5A49FE79A84E7A9BAE997B4EFBC8CE4BBA5E5858DE9878DE696B0E8B083E695B4E5A4A7E9878FE79A84E59D97E38082E4BD9CE4B8BAE58FAFE98089E696B9E6A188EFBC8CE58FAFE4BBA5E4BDBFE794A8E4B880E4BA9BE99D9EE68E92E5BA8FE79A84E59D97E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1019', 0x42E6A091E8BF90E794A8E79A84E79086E5BFB5EFBC9A0A42E6A091E4BDBFE794A8E4BA86E4BBA5E4B88AE68980E69C89E79A84E683B3E6B395E38082E789B9E588ABE698AFEFBC9A, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1020', 0x42E6A091E8BF90E794A8E79A84E79086E5BFB5EFBC9A0AE4BF9DE68C81E994AEE580BCE69C89E5BA8FEFBC8CE4BBA5E9A1BAE5BA8FE9818DE58E8620E4BDBFE794A8E5B182E6ACA1E58C96E79A84E7B4A2E5BC95E69DA5E69C80E5B08FE58C96E7A381E79B98E8AFBBE58F9620E4BDBFE794A8E4B88DE5AE8CE585A8E5A1ABE58585E79A84E59D97E69DA5E58AA0E9809FE68F92E585A5E5928CE588A0E999A420E9809AE8BF87E4BC98E99B85E79A84E9818DE58E86E7AE97E6B395E69DA5E4BF9DE68C81E7B4A2E5BC95E5B9B3E8A1A1, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1021', 0x42E6A091E8BF90E794A8E79A84E79086E5BFB5EFBC9A0AE58FA6E5A496EFBC8C42E6A091E9809AE8BF87E4BF9DE8AF81E58685E983A8E88A82E782B9E887B3E5B091E58D8AE6BBA1E69DA5E69C80E5B08FE58C96E7A9BAE997B4E6B5AAE8B4B9E38082E4B880E6A3B542E6A091E58FAFE4BBA5E5A484E79086E4BBBBE6848FE695B0E79BAEE79A84E68F92E585A5E5928CE588A0E999A4E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1022', 0x42E6A091E79A84E5BC8AE7ABAFEFBC9A0AE999A4E99D9EE5AE8CE585A8E9878DE5BBBAE695B0E68DAEE5BA93EFBC8CE590A6E58899E697A0E6B395E694B9E58F98E994AEE580BCE79A84E69C80E5A4A7E995BFE5BAA6E38082E8BF99E4BDBFE5BE97E8AEB8E5A49AE695B0E68DAEE5BA93E7B3BBE7BB9FE5B086E4BABAE5908DE688AAE696ADE588B03730E5AD97E7ACA6E4B98BE58685E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1023', 0x42E6A091E79A84E5BC8AE7ABAFEFBC9A0AEFBC88E585B6E4BB96E585B3E88194E695B0E7BB84E79A84E5AE9EE78EB0EFBC8CE4BE8BE5A682E4B889E58583E6909CE7B4A2E6A091E68896E88085E5BC80E695A3E58897E59388E5B88CE8A1A8EFBC8CE58FAFE4BBA5E58AA8E68081E98082E5BA94E4BBBBE6848FE995BFE5BAA6E79A84E994AEE580BCEFBC89E38082, 'https://zh.wikipedia.org/wiki/B%E6%A0%91', '2016-12-16 06:12:00', '2016-12-20 09:46:21', '53', 'B树', '数据结构');
INSERT INTO `spider_text` VALUES ('1025', 0xE69198E8A681EFBC9A0AE59CA8E8AEA1E7AE97E69CBAE7A791E5ADA6E4B8ADEFBC8CE4BA8CE9A1B9E5A086EFBC8862696E6F6D69616C2068656170EFBC89E698AFE4B880E7A78DE7B1BBE4BCBCE4BA8EE4BA8CE58F89E5A086E79A84E5A086E7BB93E69E84E38082E4B88EE4BA8CE58F89E5A086E79BB8E6AF94EFBC8CE585B6E4BC98E58ABFE698AFE58FAFE4BBA5E5BFABE9809FE59088E5B9B6E4B8A4E4B8AAE5A086EFBC8CE59BA0E6ADA4E5AE83E5B19EE4BA8EE58FAFE59088E5B9B6E5A086EFBC886D6572676561626C652068656170EFBC89E68ABDE8B1A1E695B0E68DAEE7B1BBE59E8BE79A84E4B880E7A78DE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:31', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1026', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:31', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1027', 0xE4BA8CE9A1B9E6A091EFBC9A0AE5BAA6E695B0E4B8BA6BE79A84E4BA8CE9A1B9E6A091E585B1E69C892032206B207B5C646973706C61797374796C6520325E7B6B7D7D20E4B8AAE7BB93E782B9EFBC8CE9AB98E5BAA6E4B8BA206B207B5C646973706C61797374796C65206B7D20E38082E59CA8E6B7B1E5BAA664E5A484E69C892028206B20642029207B5C646973706C61797374796C65207B5C7462696E6F6D207B6B7D7B647D7D7D20EFBC88E4BA8CE9A1B9E5BC8FE7B3BBE695B0EFBC89E4B8AAE7BB93E782B9E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:31', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1028', 0xE4BA8CE9A1B9E6A091EFBC9A0AE5BAA6E695B0E4B8BA6BE79A84E4BA8CE9A1B9E6A091E58FAFE4BBA5E5BE88E5AEB9E69893E4BB8EE4B8A4E9A297E5BAA6E695B0E4B8BA6B2D31E79A84E4BA8CE9A1B9E6A091E59088E5B9B6E5BE97E588B0EFBC9AE68A8AE4B880E9A297E5BAA6E695B0E4B8BA6B2D31E79A84E4BA8CE9A1B9E6A091E4BD9CE4B8BAE58FA6E4B880E9A297E58E9FE5BAA6E695B0E4B8BA6B2D31E79A84E4BA8CE9A1B9E6A091E79A84E69C80E5B7A6E5AD90E6A091E38082E8BF99E4B880E680A7E8B4A8E698AFE4BA8CE9A1B9E5A086E794A8E4BA8EE5A086E59088E5B9B6E79A84E59FBAE7A180E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:31', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1029', 0xE4BA8CE9A1B9E5A086EFBC9A0AE4BA8CE9A1B9E5A086E698AFE68C87E6BBA1E8B6B3E4BBA5E4B88BE680A7E8B4A8E79A84E4BA8CE9A1B9E6A091E79A84E99B86E59088EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:31', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1030', 0xE4BA8CE9A1B9E5A086EFBC9A0AE6AF8FE6A3B5E4BA8CE9A1B9E6A091E983BDE6BBA1E8B6B3E69C80E5B08FE5A086E680A7E8B4A8EFBC8CE58DB3E7BB93E782B9E585B3E994AEE5AD97E5A4A7E4BA8EE7AD89E4BA8EE585B6E788B6E7BB93E782B9E79A84E585B3E994AEE5AD9720E4B88DE883BDE69C89E4B8A4E6A3B5E68896E4BBA5E4B88AE79A84E4BA8CE9A1B9E6A091E69C89E79BB8E5908CE5BAA6E695B0EFBC88E58C85E68BACE5BAA6E695B0E4B8BA30EFBC89E38082E68DA2E58FA5E8AF9DE8AFB4EFBC8CE585B7E69C89E5BAA6E695B06BE79A84E4BA8CE9A1B9E6A091E69C8930E4B8AAE6889631E4B8AAE38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1031', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1032', 0xE8BF90E8A18CE697B6E997B4EFBC9A0AE4BBA5E4B88BE5AFB9E4BA8EE4BA8CE9A1B9E5A086E6938DE4BD9CE79A84E8BF90E8A18CE697B6E997B4E983BDE4B8BA204F2028206C6F6720E281A1206E2029207B5C646973706C61797374796C65207B4F7D285C6C6F67206E297D20EFBC88E7BB93E782B9E695B0E4B8BA206E207B5C646973706C61797374796C65206E7D20EFBC89EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1033', 0xE8BF90E8A18CE697B6E997B4EFBC9A0AE59CA8E4BA8CE9A1B9E5A086E4B8ADE68F92E585A5E696B0E7BB93E782B920E69FA5E689BEE69C80E5B08FE585B3E994AEE5AD97E68980E59CA8E7BB93E782B920E4BB8EE4BA8CE9A1B9E5A086E4B8ADE588A0E999A4E69C80E5B08FE585B3E994AEE5AD97E68980E59CA8E7BB93E782B920E5878FE5B08FE7BB99E5AE9AE7BB93E782B9E585B3E994AEE5AD97E79A84E580BC20E588A0E999A4E7BB99E5AE9AE7BB93E782B920E59088E5B9B6E4B8A4E4B8AAE4BA8CE9A1B9E5A086, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1034', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1035', 0xE8BF90E8A18CE697B6E997B4EFBC9A0AEFBC88E88BB1E69687EFBC89E4BA8CE9A1B9E5A086E79A844A617661206170706C6574E691B8E68B9F20EFBC88E88BB1E69687EFBC89E4BA8CE9A1B9E5A086E79A84507974686F6EE5AE9EE78EB020EFBC88E88BB1E69687EFBC89E4BA8CE9A1B9E5A086E79A8443E5AE9EE78EB020EFBC88E88BB1E69687EFBC89E4BA8CE9A1B9E5A086E79A844A617661E5AE9EE78EB0, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1036', 0xE59088E5B9B6EFBC9A0AE59088E5B9B6E4B8A4E4B8AAE4BA8CE9A1B9E5A086E7A4BAE4BE8BEFBC8CE5AE9EE99985E4B88AE68A8AE4B8A4E6A3B5E5BAA6E695B0E4B8BA31E79A84E4BA8CE9A1B9E6A091E59088E5B9B6E4B8BAE4B880E6A3B5E5BAA6E695B0E4B8BA32E79A84E4BA8CE9A1B9E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1037', 0xE59088E5B9B6EFBC9A0AE69C80E59FBAE69CACE79A84E4B8BAE4BA8CE4B8AAE5BAA6E695B0E79BB8E5908CE79A84E4BA8CE9A1B9E6A091E79A84E59088E5B9B6E38082E794B1E4BA8EE4BA8CE9A1B9E6A091E6A0B9E7BB93E782B9E58C85E590ABE69C80E5B08FE79A84E585B3E994AEE5AD97EFBC8CE59BA0E6ADA4E59CA8E4BA8CE9A297E6A091E59088E5B9B6E697B6EFBC8CE58FAAE99C80E6AF94E8BE83E4BA8CE4B8AAE6A0B9E7BB93E782B9E585B3E994AEE5AD97E79A84E5A4A7E5B08FEFBC8CE585B6E4B8ADE590ABE5B08FE585B3E994AEE5AD97E79A84E7BB93E782B9E68890E4B8BAE7BB93E69E9CE6A091E79A84E6A0B9E7BB93E782B9EFBC8CE58FA6E4B880E6A3B5E6A091E58899E58F98E68890E7BB93E69E9CE6A091E79A84E5AD90E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1038', 0xE59088E5B9B6EFBC9A0A66756E6374696F6E206D657267655472656528702C2071290A20202020696620702E726F6F74203C3D20712E726F6F740A202020202020202072657475726E20702E616464537562547265652871290A20202020656C73650A202020202020202072657475726E20712E61646453756254726565287029, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1039', 0xE59088E5B9B6EFBC9A0AE4B8A4E4B8AAE4BA8CE9A1B9E5A086E79A84E59088E5B9B6E58899E58FAFE68C89E5A682E4B88BE6ADA5E9AAA4E8BF9BE8A18CEFBC9AE5BAA6E695B0206A207B5C646973706C61797374796C65206A7D20E4BB8EE5B08FE58F96E588B0E5A4A7EFBC8CE59CA8E4B8A4E4B8AAE4BA8CE9A1B9E5A086E4B8ADE5A682E69E9CE585B6E4B8ADE58FAAE69C89E4B880E6A3B5E6A091E79A84E5BAA6E695B0E4B8BA206A207B5C646973706C61797374796C65206A7D20EFBC8CE58DB3E5B086E6ADA4E6A091E7A7BBE58AA8E588B0E7BB93E69E9CE5A086EFBC8CE8808CE5A682E69E9CE58FAAE4B8A4E6A3B5E6A091E79A84E5BAA6E695B0E983BDE4B8BA206A207B5C646973706C61797374796C65206A7D20EFBC8CE58899E6A0B9E68DAEE4BBA5E4B88AE696B9E6B395E59088E5B9B6E4B8BAE4B880E4B8AAE5BAA6E695B0E4B8BA206A202B2031207B5C646973706C61797374796C65206A2B317D20E79A84E4BA8CE9A1B9E6A091E38082E6ADA4E5908EE8BF99E4B8AAE5BAA6E695B0E4B8BA206A202B2031207B5C646973706C61797374796C65206A2B317D20E79A84E6A091E5B086E58FAFE883BDE4BC9AE5928CE585B6E4BB96E5BAA6E695B0E4B8BA206A202B2031207B5C646973706C61797374796C65206A2B317D20E79A84E4BA8CE9A1B9E6A091E8BF9BE8A18CE59088E5B9B6E38082E59BA0E6ADA4EFBC8CE5AFB9E4BA8EE4BBBBE4BD95E5BAA6E695B06AEFBC8CE58FAFE883BDE69C80E5A49AE99C80E8A681E59088E5B9B633E6A3B5E4BA8CE9A1B9E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1040', 0xE59088E5B9B6EFBC9A0AE6ADA4E6938DE4BD9CE79A84E697B6E997B4E5A48DE69D82E5BAA6E4B8BA204F2028206C6F6720E281A1206E2029207B5C646973706C61797374796C65207B4F7D285C6C6F67206E297D20E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1041', 0xE59088E5B9B6EFBC9A0A66756E6374696F6E206D6572676528702C2071290A202020207768696C65206E6F742028702E656E64282920616E6420712E656E642829290A202020202020202074726565203D206D657267655472656528702E63757272656E745472656528292C20712E63757272656E74547265652829290A20202020202020200A20202020202020206966206E6F7420686561702E63757272656E745472656528292E656D70747928290A20202020202020202020202074726565203D206D657267655472656528747265652C20686561702E63757272656E74547265652829290A20202020202020200A2020202020202020686561702E616464547265652874726565290A2020202020202020686561702E6E65787428293B20702E6E65787428293B20712E6E6578742829, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1042', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1043', 0xE69FA5E689BEE69C80E5B08FE585B3E994AEE5AD97E68980E59CA8E7BB93E782B9EFBC9A0AE794B1E4BA8EE6BBA1E8B6B3E69C80E5B08FE5A086E680A7E8B4A8EFBC8CE58FAAE99C80E69FA5E689BEE4BA8CE9A1B9E6A091E79A84E79A84E6A0B9E7BB93E782B9E58DB3E58FAFEFBC8CE59BA0E4B8BAE4B880E585B1E69C89206C6F6720E281A1206E207B5C646973706C61797374796C65205C6C6F67206E7D20E6A3B5E5AD90E6A091EFBC8CE68980E4BBA5E794A8E68980E697B6E997B4E4B8BA204F2028206C6F6720E281A1206E2029207B5C646973706C61797374796C65207B4F7D285C6C6F67206E297D20E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1044', 0xE69FA5E689BEE69C80E5B08FE585B3E994AEE5AD97E68980E59CA8E7BB93E782B9EFBC9A0AE58FAFE4BBA5E4BF9DE5AD98E4B880E4B8AAE68C87E59091E69C80E5B08FE58583E7B4A0E79A84E68C87E99288EFBC8CE4BDBFE5BE97E69FA5E689BEE69C80E5B08FE585B3E994AEE5AD97E68980E59CA8E7BB93E782B9E99C80E8A681204F202820312029207B5C646973706C61797374796C65207B4F7D2831297D20E79A84E697B6E997B4E38082E59CA8E689A7E8A18CE585B6E4BB96E6938DE4BD9CE697B6EFBC8CE99C80E8A681E4BFAEE694B9E8AFA5E68C87E99288E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1045', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1046', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1047', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1048', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86', '2016-03-09 16:46:00', '2016-12-20 09:46:32', '54', '二项堆', '数据结构');
INSERT INTO `spider_text` VALUES ('1049', 0xE69198E8A681EFBC9A0AE69CACE69DA1E79BAEE99C80E8A681E7B2BEE9809AE68896E7869FE68289E79BB8E585B3E4B8BBE9A298E79A84E7BC96E88085E58F82E4B88EE58F8AE58D8FE58AA9E7BC96E8BE91E38082EFBC8832303132E5B9B436E69C883230E697A5EFBC8920E8AFB7E98280E8AFB7E98082E59088E79A84E4BABAE5A3ABE694B9E59684E69CACE69DA1E79BAEE38082E69BB4E5A49AE79A84E7BB86E88A82E4B88EE8AFA6E68385E8AFB7E58F82E8A781E8AEA8E8AEBAE9A1B5E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%9D%82%E5%87%91', '2016-02-02 19:01:00', '2016-12-20 09:46:43', '55', '线性杂凑', '数据结构');
INSERT INTO `spider_text` VALUES ('1050', 0xE69198E8A681EFBC9A0AE7BABFE680A7E695A3E58897EFBC88E88BB1E8AFADEFBC9A4C696E6561722048617368696E67EFBC89E698AFE4B880E7A78DE695A3E58897E696B9E6B395EFBC8CE5AE83E69C89E587A0E9A1B9E789B9E782B9EFBC9A, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%9D%82%E5%87%91', '2016-02-02 19:01:00', '2016-12-20 09:46:43', '55', '线性杂凑', '数据结构');
INSERT INTO `spider_text` VALUES ('1051', 0xE69198E8A681EFBC9A0AE6B2A1E69C89E79BAEE5BD95E3808220E58FAFE5809FE794B1E68EA7E588B6E8B49FE88DB7E59BA0E5AD90E69DA5E5BBB6E8BF9FE58886E8A382E3808220E58886E8A382E68C87E6A08720EFBC9AE68C87E59091E4B88BE4B880E4B8AAE8A681E58886E8A382E79A84E8B584E69699E6A08FEFBC8CE59CA8E5AE8CE695B4E689A9E5BCA0E5908EE8A681E9878DE8AEBEE58886E8A382E68C87E6A087E3808220E6A1A3E6A188E7AD89E7BAA720EFBC9AE59CA8E5AE8CE695B4E689A9E5BCA0E5908EE8A681E6A1A3E6A188E7AD89E7BAA7E3808220E58CBAE59D97E695B0E79BAE20EFBC9AE58CBAE59D97E695B0E79BAEE4BC9AE7BABFE680A7E5A29EE58AA0E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%9D%82%E5%87%91', '2016-02-02 19:01:00', '2016-12-20 09:46:43', '55', '线性杂凑', '数据结构');
INSERT INTO `spider_text` VALUES ('1052', 0xE7AE97E6B395EFBC9A0AE8BE93E585A5E8B584E69699E58588E694BEE585A5E5908CE4B880E8B584E69699E6A08FE58685EFBC8CE6AF8FE6ACA1E8BE93E585A5E8B584E69699E983BDE8A681E8BF90E7AE97E8B49FE88DB7E59BA0E5AD90EFBC8CE4BBA5E4BEBFE6A380E69FA5E8B49FE88DB7E59BA0E5AD90E698AFE590A6E8B685E8BF87E997A8E6A79BEFBC8CE5A682E69E9CE8B685E8BF87E8B49FE88DB7E59BA0E5AD90EFBC8CE58899E8A681E99288E5AFB9E58886E8A382E68C87E6A087E68980E68C87E79A84E8B584E69699E6A08FE8BF9BE8A18CE5AE8CE695B4E689A9E5BCA0E3808220E5A682E69E9CE5AE8CE695B4E689A9E5BCA0E58899E8A681E9878DE8AEBEE58886E8A382E68C87E6A087EFBC8CE5AE8CE695B4E689A9E5BCA0E4BC9AE4BDBFE58886E8A382E59BA0E5AD90E68980E68C87E79A84E8B584E69699E6A08FE58886E8A382E4B8BAE58E9FE69DA5E79A84E4B8A4E5808DE3808220E68C81E7BBADE8BE93E585A5E8B584E69699E79BB4E588B0E8B584E69699E8BE93E585A5E5AE8CE6AF95E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%9D%82%E5%87%91', '2016-02-02 19:01:00', '2016-12-20 09:46:43', '55', '线性杂凑', '数据结构');
INSERT INTO `spider_text` VALUES ('1053', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%9D%82%E5%87%91', '2016-02-02 19:01:00', '2016-12-20 09:46:43', '55', '线性杂凑', '数据结构');
INSERT INTO `spider_text` VALUES ('1055', 0xE69198E8A681EFBC9A0AE69CACE69DA1E79BAEE99C80E8A681E7B2BEE9809AE68896E7869FE68289E79BB8E585B3E4B8BBE9A298E79A84E7BC96E88085E58F82E4B88EE58F8AE58D8FE58AA9E7BC96E8BE91E38082EFBC8832303133E5B9B435E69C8831E697A5EFBC8920E8AFB7E98280E8AFB7E98082E59088E79A84E4BABAE5A3ABE694B9E59684E69CACE69DA1E79BAEE38082E69BB4E5A49AE79A84E7BB86E88A82E4B88EE8AFA6E68385E8AFB7E58F82E8A781E8AEA8E8AEBAE9A1B5E38082, 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:08', '58', '深度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1056', 0xE69198E8A681EFBC9A0AE6B7B1E5BAA6E4BC98E58588E6909CE7B4A220E88A82E782B9E8BF9BE8A18CE6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E79A84E9A1BAE5BA8F20E6A682E586B520E7B1BBE588ABEFBC9A20E6909CE7B4A2E7AE97E6B39520E695B0E68DAEE7BB93E69E84EFBC9A20E59BBE20E697B6E997B4E5A48DE69D82E5BAA6EFBC9A204F20282062206D2029207B5C646973706C61797374796C65204F28625E7B6D7D297D20E7A9BAE997B4E5A48DE69D82E5BAA6EFBC9A204F20282062206D2029207B5C646973706C61797374796C65204F28626D297D20E69C80E4BDB3E8A7A3EFBC9A20E590A620E5AE8CE585A8E680A7EFBC9A20E698AF20E585B6E4BB96EFBC9A2062202D20E58886E694AFE7B3BBE695B0206D202D20E59BBEE79A84E69C80E5A4A7E6B7B1E5BAA6, 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:08', '58', '深度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1057', 0xhttps://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:08', '58', '深度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1058', 0xE69198E8A681EFBC9A0AE6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E7AE97E6B395EFBC88E88BB1E8AFADEFBC9A44657074682D46697273742D536561726368EFBC8CE7AE80E7A7B0444653EFBC89E698AFE4B880E7A78DE794A8E4BA8EE9818DE58E86E68896E6909CE7B4A2E6A091E68896E59BBEE79A84E7AE97E6B395E38082E6B2BFE79D80E6A091E79A84E6B7B1E5BAA6E9818DE58E86E6A091E79A84E88A82E782B9EFBC8CE5B0BDE58FAFE883BDE6B7B1E79A84E6909CE7B4A2E6A091E79A84E58886E694AFE38082E5BD93E88A82E782B976E79A84E68980E59CA8E8BEB9E983BDE5B7B1E8A2ABE68EA2E5AFBBE8BF87EFBC8CE6909CE7B4A2E5B086E59B9EE6BAAFE588B0E58F91E78EB0E88A82E782B976E79A84E982A3E69DA1E8BEB9E79A84E8B5B7E5A78BE88A82E782B9E38082E8BF99E4B880E8BF87E7A88BE4B880E79BB4E8BF9BE8A18CE588B0E5B7B2E58F91E78EB0E4BB8EE6BA90E88A82E782B9E58FAFE8BEBEE79A84E68980E69C89E88A82E782B9E4B8BAE6ADA2E38082E5A682E69E9CE8BF98E5AD98E59CA8E69CAAE8A2ABE58F91E78EB0E79A84E88A82E782B9EFBC8CE58899E98089E68BA9E585B6E4B8ADE4B880E4B8AAE4BD9CE4B8BAE6BA90E88A82E782B9E5B9B6E9878DE5A48DE4BBA5E4B88AE8BF87E7A88BEFBC8CE695B4E4B8AAE8BF9BE7A88BE58F8DE5A48DE8BF9BE8A18CE79BB4E588B0E68980E69C89E88A82E782B9E983BDE8A2ABE8AEBFE997AEE4B8BAE6ADA2E38082E5B19EE4BA8EE79BB2E79BAEE6909CE7B4A2E38082, 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:08', '58', '深度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1059', 0xE69198E8A681EFBC9A0AE6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E698AFE59BBEE8AEBAE4B8ADE79A84E7BB8FE585B8E7AE97E6B395EFBC8CE588A9E794A8E6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E7AE97E6B395E58FAFE4BBA5E4BAA7E7949FE79BAEE6A087E59BBEE79A84E79BB8E5BA94E68B93E68991E68E92E5BA8FE8A1A8EFBC8CE588A9E794A8E68B93E68991E68E92E5BA8FE8A1A8E58FAFE4BBA5E696B9E4BEBFE79A84E8A7A3E586B3E5BE88E5A49AE79BB8E585B3E79A84E59BBEE8AEBAE997AEE9A298EFBC8CE5A682E69C80E5A4A7E8B7AFE5BE84E997AEE9A298E7AD89E7AD89E38082, 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:08', '58', '深度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1060', 0xE69198E8A681EFBC9A0AE59BA0E58F91E6988EE2809CE6B7B1E5BAA6E4BC98E58588E6909CE7B4A2E7AE97E6B395E2809DEFBC8CE7BAA6E7BFB0C2B7E99C8DE699AEE5858BE6B49BE5A4ABE789B9E4B88EE7BD97E4BCAFE789B9C2B7E5A194E689ACE585B1E5908CE88EB7E5BE97E8AEA1E7AE97E69CBAE9A286E59F9FE79A84E69C80E9AB98E5A596EFBC9AE59BBEE781B5E5A596E380825BE69DA5E6BA90E8AFB7E6B1825D, 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:08', '58', '深度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1061', 0x432B2BE79A84E5AE9EE78EB0EFBC9A0AE5AE9AE4B989E4B880E4B8AAE7BB93E69E84E4BD93E69DA5E8A1A8E8BEBEE4B880E4B8AA4E4F4445E79A84E7BB93E69E84EFBC9A, 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:08', '58', '深度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1062', 0x432B2BE79A84E5AE9EE78EB0EFBC9A0A737472756374204E6F6465200A7B0A202020696E742073656C663B202F2FE695B0E68DAE200A2020204E6F6465202A6C6566743B202F2FE5B7A6E88A82E782B9200A2020204E6F6465202A72696768743B202F2FE58FB3E88A82E782B9200A7D3B, 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:08', '58', '深度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1063', 0x432B2BE79A84E5AE9EE78EB0EFBC9A0AE982A3E4B988E68891E4BBACE59CA8E6909CE7B4A2E4B880E4B8AAE6A091E79A84E697B6E58099EFBC8CE4BB8EE4B880E4B8AAE88A82E782B9E5BC80E5A78BEFBC8CE883BDE9A696E58588E88EB7E58F96E79A84E698AFE5AE83E79A84E4B8A4E4B8AAE5AD90E88A82E782B9E38082E4BE8BE5A682EFBC9A, 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:08', '58', '深度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1064', 0x432B2BE79A84E5AE9EE78EB0EFBC9A0AE2809C202020202020202020202020202020202020410A2020202020202020202020422020202020202020202020430A20202020202044202020452020202020202020202046202020470A20E2809D, 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:08', '58', '深度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1065', 0x432B2BE79A84E5AE9EE78EB0EFBC9A0A41E698AFE7ACACE4B880E4B8AAE8AEBFE997AEE79A84EFBC8CE784B6E5908EE9A1BAE5BA8FE698AF42E5928C44E38081E784B6E5908EE698AF45E38082E784B6E5908EE5868DE698AF43E3808146E3808147E38082E982A3E4B988E68891E4BBACE6808EE4B988E69DA5E4BF9DE8AF81E8BF99E4B8AAE9A1BAE5BA8FE591A2EFBC9F, 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:08', '58', '深度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1066', 0x432B2BE79A84E5AE9EE78EB0EFBC9A0AE8BF99E9878CE5B0B1E5BA94E8AFA5E794A8E5A086E58FA0E79A84E7BB93E69E84EFBC8CE59BA0E4B8BAE5A086E58FA0E698AFE4B880E4B8AAE58588E8BF9BE5908EE587BAE79A84E9A1BAE5BA8FE38082E9809AE8BF87E4BDBFE794A8432B2BE79A8453544CEFBC8CE4B88BE99DA2E79A84E7A88BE5BA8FE883BDE5B8AEE58AA9E79086E8A7A3EFBC9A, 'https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:08', '58', '深度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1067', 0xhttps://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-07 03:13:00', '2016-12-20 09:47:09', '58', '深度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1068', 0xE69198E8A681EFBC9A0AE59CA8E8AEA1E7AE97E69CBAE7A791E5ADA6E4B8ADEFBC8CE585B3E88194E695B0E7BB84EFBC88E88BB1E8AFADEFBC9A4173736F63696174697665204172726179EFBC89EFBC8CE58F88E7A7B0E698A0E5B084EFBC884D6170EFBC89E38081E5AD97E585B8EFBC8844696374696F6E617279EFBC89E698AFE4B880E4B8AAE68ABDE8B1A1E79A84E695B0E68DAEE7BB93E69E84EFBC8CE5AE83E58C85E590ABE79D80E7B1BBE4BCBCE4BA8EEFBC88E994AEEFBC8CE580BCEFBC89E79A84E69C89E5BA8FE5AFB9E38082E4B880E4B8AAE585B3E88194E695B0E7BB84E4B8ADE79A84E69C89E5BA8FE5AFB9E58FAFE4BBA5E9878DE5A48DEFBC88E5A682432B2BE4B8ADE79A846D756C74696D6170EFBC89E4B99FE58FAFE4BBA5E4B88DE9878DE5A48DEFBC88E5A682432B2BE4B8ADE79A846D6170EFBC89E38082, 'https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84', '2016-09-24 03:47:00', '2016-12-20 09:47:19', '59', '关联数组', '数据结构');
INSERT INTO `spider_text` VALUES ('1069', 0xE69198E8A681EFBC9A0AE8BF99E7A78DE695B0E68DAEE7BB93E69E84E58C85E590ABE4BBA5E4B88BE587A0E7A78DE5B8B8E8A781E79A84E6938DE4BD9CEFBC9A, 'https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84', '2016-09-24 03:47:00', '2016-12-20 09:47:19', '59', '关联数组', '数据结构');
INSERT INTO `spider_text` VALUES ('1070', 0xE69198E8A681EFBC9A0AE59091E585B3E88194E695B0E7BB84E6B7BBE58AA0E9858DE5AFB920E4BB8EE585B3E88194E695B0E7BB84E58685E588A0E999A4E9858DE5AFB920E4BFAEE694B9E585B3E88194E695B0E7BB84E58685E79A84E9858DE5AFB920E6A0B9E68DAEE5B7B2E79FA5E79A84E994AEE5AFBBE689BEE9858DE5AFB95B315D5B325D, 'https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84', '2016-09-24 03:47:00', '2016-12-20 09:47:19', '59', '关联数组', '数据结构');
INSERT INTO `spider_text` VALUES ('1071', 0xE69198E8A681EFBC9A0AE5AD97E585B8E997AEE9A298E698AFE8AEBEE8AEA1E4B880E7A78DE883BDE5A49FE585B7E5A487E585B3E88194E695B0E7BB84E789B9E680A7E79A84E695B0E68DAEE7BB93E69E84E38082E8A7A3E586B3E5AD97E585B8E997AEE9A298E79A84E5B8B8E794A8E696B9E6B395EFBC8CE698AFE588A9E794A8E695A3E58897E8A1A8EFBC8CE4BD86E69C89E4BA9BE68385E586B5E4B88BEFBC8CE4B99FE58FAFE4BBA5E79BB4E68EA5E4BDBFE794A8E4BA8CE58F89E69FA5E689BEE6A091E68896E585B6E4BB96E7BB93E69E84E380825B315D5B325D5B335D, 'https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84', '2016-09-24 03:47:00', '2016-12-20 09:47:19', '59', '关联数组', '数据结构');
INSERT INTO `spider_text` VALUES ('1072', 0xE69198E8A681EFBC9A0AE8AEB8E5A49AE7A88BE5BA8FE8AEBEE8AEA1E8AFADE8A880E58685E7BDAEE59FBAE69CACE79A84E695B0E68DAEE7B1BBE59E8BEFBC8CE68F90E4BE9BE5AFB9E585B3E88194E695B0E7BB84E79A84E694AFE68C81E38082E8808C436F6E74656E742D6164647265737361626C65206D656D6F7279E58899E698AFE7A1ACE4BBB6E5B182E99DA2E4B88AE5AE9EE78EB0E5AFB9E585B3E88194E695B0E7BB84E79A84E694AFE68C81E38082, 'https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84', '2016-09-24 03:47:00', '2016-12-20 09:47:19', '59', '关联数组', '数据结构');
INSERT INTO `spider_text` VALUES ('1073', 0xE69198E8A681EFBC9A0A432B2BE8AFADE8A880E79A84E6A087E58786E6A8A1E69DBFE5BA93E68F90E4BE9BE4BA8638E4B8AAE585B3E88194E695B0E7BB84E5AEB9E599A8E6A8A1E69DBFEFBC9A, 'https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84', '2016-09-24 03:47:00', '2016-12-20 09:47:19', '59', '关联数组', '数据结构');
INSERT INTO `spider_text` VALUES ('1074', 0xE69198E8A681EFBC9A0A7374643A3A6D6170207374643A3A6D756C74696D6170207374643A3A736574207374643A3A6D756C7469736574207374643A3A756E6F7264657265645F6D6170207374643A3A756E6F7264657265645F736574207374643A3A756E6F7264657265645F6D756C74696D6170207374643A3A756E6F7264657265645F6D756C7469736574, 'https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84', '2016-09-24 03:47:00', '2016-12-20 09:47:19', '59', '关联数组', '数据结构');
INSERT INTO `spider_text` VALUES ('1075', 0xhttps://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:28', '60', '资料类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1076', 0xE69CBAE599A8E4B8ADE79A84E695B0E68DAEE7B1BBE59E8BEFBC9A0AE68980E69C89E59CA8E794B5E88491E4B8ADEFBC8CE59FBAE4BA8EE695B0E4BD8DE794B5E5AD90E5ADA6E79A84E5BA95E5B182E695B0E68DAEEFBC8CE983BDE698AFE4BBA5E4BD8DE58583EFBC883020E688962031EFBC89E8A1A8E7A4BAE38082E585B6E4B8ADE695B0E68DAEE79A84E69C80E5B08FE79A84E5AE9AE59D80E58D95E4BD8DEFBC8CE7A7B0E4B8BAE5AD97E88A82EFBC88E9809AE5B8B8E698AFE585ABE4BD8DE58583EFBC8CE4BBA5E585ABE4B8AAE4BD8DE58583E4B8BAE4B880E7BB84EFBC89E38082E69CBAE599A8E7A081E68C87E4BBA4E5A484E79086E79A84E58D95E4BD8DEFBC8CE7A7B0E4BD9CE5AD97E995BFEFBC88E887B3203230303720E5B9B4E6ADA2EFBC8CE4B880E888ACE4B8BA20333220E6889620363420E4BD8DE58583EFBC89E5A4A7E983A8E58886E5AFB9E5AD97E995BFE79A84E68C87E4BBA4E8A7A3E8AF91EFBC8CE4B8BBE8A681E4BBA5E4BA8CE8BF9BE588B6E4B8BAE4B8BBEFBC8CE5A682E4B880E4B8AA20333220E4BD8DE58583E79A84E5AD97E995BFEFBC8CE58FAFE4BBA5E8A1A8E7A4BAE4BB8E203020E887B3203220333220E288922031207B5C646973706C61797374796C6520325E7B33327D2D317D20E79A84E697A0E7ACA6E58FB7E695B4E695B0E580BCEFBC8CE68896E88085E8A1A8E7A4BAE4BB8E20E288922032203331207B5C646973706C61797374796C65202D325E7B33317D7D20E887B3203220333120E288922031207B5C646973706C61797374796C6520325E7B33317D2D317D20E79A84E69C89E7ACA6E58FB7E695B4E695B0E580BCE38082E794B1E4BA8EE69C89E4BA86E4BA8CE79A84E8A1A5E695B0EFBC8CE69CBAE599A8E8AFADE8A880E5928CE69CBAE599A8E5A4A7E5A49AE4B88DE99C80E8A681E58CBAE58886E697A0E7ACA6E58FB7E5928CE69C89E7ACA6E58FB7E695B0E68DAEE7B1BBE59E8BE38082E5AD98E59CA8E79D80E789B9E6AE8AE79A84E7AE97E69CAFE68C87E4BBA4EFBC8CE5AFB9E5AD97E995BFE4B8ADE79A84E4BD8DE58583E4BDBFE794A8E4B88DE5908CE79A84E8A7A3E9878AEFBC8CE4BBA5E6ADA4E4BD9CE4B8BAE6B5AEE782B9E695B0E38082, 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:28', '60', '资料类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1077', 0xhttps://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:28', '60', '资料类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1078', 0xE5A48DE59088E7B1BBE59E8BEFBC9A0AE8BF99E983A8E58886E58FAFE58C85E68BACE4BBA5E4B88BE58685E5AEB9EFBC88E69C80E7BB88E4BB8DE58F96E586B3E4BA8EE7BC96E7A88BE8AFADE8A880EFBC89EFBC9A, 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:28', '60', '资料类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1079', 0xE5A48DE59088E7B1BBE59E8BEFBC9A0AE4B880E7BB84E58F98E695B0E7B1BBE59E8BEFBC8CE4BE8BE5AD90EFBC9AE695B0E68DAEE5BA93E8A1A8E6A0BCE4B8ADE79A84E4B880E8A18C, 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:28', '60', '资料类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1080', 0xE5A48DE59088E7B1BBE59E8BEFBC9A0AE5908CE4B880E7B1BBE59E8BE58F98E695B0E38081E4B894E59BBAE5AE9AE5A4A7E5B08FE79A84E694B6E99B86E5A484, 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1081', 0xE695B0E580BCE88C83E59BB4EFBC9A0AE6AF8FE4B880E4B8AAE695B0E68DAEE7B1BBE59E8BE983BDE69C89E4B880E4B8AAE695B0E580BCE4B88AE79A84E69C80E5A4A7E5928CE69C80E5B08FE580BCEFBC8CE7A7B0E4BD9CE695B0E580BCE88C83E59BB4E38082E4BA86E8A7A3E695B0E580BCE79A84E88C83E59BB4E698AFE5BE88E9878DE8A681E79A84EFBC8CE5B0A4E585B6E698AFE5BD93E4BDBFE794A8E8BE83E5B08FE79A84E7B1BBE59E8BE697B6EFBC8CE4BDA0E5B0B1E58FAAE883BDE582A8E5AD98E88C83E59BB4E4B98BE58685E79A84E695B0E580BCE38082E8AF95E59BBEE582A8E5AD98E4B880E4B8AAE8B685E587BAE585B6E88C83E59BB4E79A84E695B0E580BCEFBC8CE58FAFE883BDE4BC9AE5AFBCE887B4E7BC96E8AF91E68896E689A7E8A18CE99499E8AFAFEFBC8CE68896E88085E4B88DE6ADA3E7A1AEE79A84E8AEA1E7AE97E7BB93E69E9CEFBC88E59BA0E4B8BAE8A2ABE688AAE696ADEFBC89E38082, 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1082', 0xE695B0E580BCE88C83E59BB4EFBC9A0AE4B880E4B8AAE58F98E695B0E79A84E88C83E59BB4EFBC8CE698AFE59FBAE4BA8EE794A8E4BBA5E4BF9DE5AD98E695B0E580BCE79A84E5AD97E88A82E695B0E79BAEEFBC8CE8808CE4B894E695B4E695B0E695B0E68DAEE7B1BBE59E8BE9809AE5B8B85B315DE883BDE5A49FE582A8E5AD982032206E207B5C646973706C61797374796C6520325E7B6E7D7D20E695B0E580BCEFBC88E6ADA4E5A484E79A84206E207B5C646973706C61797374796C65206E7D20E698AFE68C87E4BD8DE58583EFBC89E38082E5AFB9E4BA8EE585B6E5AE83E79A84E695B0E68DAEE7B1BBE59E8BEFBC88E4BE8BE5A682EFBC8CE6B5AEE782B9E695B0EFBC89EFBC8CE585B6E695B0E580BCE88C83E59BB4E69BB4E4B8BAE5A48DE69D82EFBC8CE4B894E587A0E4B98EE58F96E586B3E4BA8EE68980E4BDBFE794A8E79A84E582A8E5AD98E696B9E6B395E38082E8BF98E69C89E4B880E4BA9BE4B88DE794A8E5AE8CE585A8E983A8E79A84E4BD8DE58583EFBC8CE4BE8BE5A682EFBC8CE5B883E5B094E58FAAE99C80E4B880E4B8AAE4BD8DE58583EFBC8CE4B894E8A1A8E7A4BAE4B880E4B8AAE4BA8CE8BF9BE588B6E580BCEFBC88E899BDE784B6E59CA8E5AE9EE8B7B5E4B8ADEFBC8CE9809AE5B8B8E4BC9AE794A8E5AE8CE589A9E4BD99E79A84203720E4B8AAE4BD8DE58583EFBC89E38082E69F90E4BA9BE7BC96E7A88BE8AFADE8A8805B325DE4B99FE58581E8AEB8E58F8DE59091E586B3E5AE9AEFBC8CE7A88BE5BC8FE8AEBEE8AEA1E88085E5AE9AE4B989E8A7A3E586B3E997AEE9A298E68980E99C80E79A84E88C83E59BB4E5928CE7B2BEE5BAA6EFBC8CE784B6E5908EE794B1E7BC96E8AF91E599A8E887AAE58AA8E98089E68BA9E59088E98082E79A84E695B4E695B0E68896E6B5AEE782B9E695B0E38082, 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1083', 0xE695B0E580BCE88C83E59BB4EFBC9A0AE4B88BE8A1A8E58897E587BAE5B8B8E8A781E79A84E695B0E68DAEE7B1BBE59E8BEFBC8CE58F8AE585B6E695B0E580BCE88C83E59BB4EFBC9A5B335D, 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1084', 0xhttps://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1085', 0xE58F82E99885EFBC9A0AE7B1BBE59E8BE79086E8AEBAEFBC8CE585B3E4BA8EE7B1BBE59E8BE79A84E695B0E5ADA6E6A8A1E59E8BE3808220E7B1BBE59E8BE7B3BBE7BB9FEFBC8CE585B3E4BA8EE59CA8E7BC96E7A88BE8AFADE8A880E7B1BBE59E8BE4B8ADE79A84E98089E68BA9E5B7AEE5BC82E38082, 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1086', 0xhttps://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1087', 0xE58F82E99885EFBC9A0A4C7563612043617264656C6C692C205065746572205765676E65722E204F6E20556E6465727374616E64696E672054797065732C2044617461204162737472616374696F6E2C20616E6420506F6C796D6F72706869736D2C205B315D2066726F6D20436F6D707574696E6720537572766579732C2028446563656D6265722C203139383529, 'https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E7%B1%BB%E5%9E%8B', '2016-07-23 17:02:00', '2016-12-20 09:47:29', '60', '资料类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1089', 0xE69198E8A681EFBC9A0AE5AFB9E8AF9DE6A091E698AFE8AEB8E5A49AE58692E999A9E6B8B8E6888F5B315D5B325D5B335D5B345D5B355D5B365DEFBC88E590ABE58AA8E4BD9CE58692E999A9E6B8B8E6888F5B375DEFBC89E38081E794B5E5AD90E8A792E889B2E689AEE6BC94E6B8B8E6888FE8B4AFE7A9BFE4BDBFE794A8E79A84E6B8B8E6888FE69CBAE588B65B385DE38082E5BD93E5928CE99D9EE78EA9E5AEB6E8A792E889B2E4BA92E58AA8E697B6EFBC8CE78EA9E5AEB6E99C80E8A681E98089E68BA9E59CA8E5AFB9E8AF9DE4B8ADE8AFB4E4BB80E4B988EFBC8CE5B9B6E98089E68BA9E79BB4E588B0E5AFB9E8AF9DE7BB93E69D9F5B385DE38082E8A786E8A789E5B08FE8AFB4E5928CE6818BE788B1E6A8A1E68B9FE6B8B8E6888FE7AD89E69F90E4BA9BE794B5E5AD90E6B8B8E6888FE7B1BBE59E8BEFBC8CE587A0E4B98EE5AE8CE585A8E59BB4E7BB95E6ADA4E7B1BBE8A792E889B2E4BAA4E4BA92E5928CE58886E694AFE5AFB9E8AF9D5B395DE38082, 'https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%AF%9D%E6%A0%91', '2016-12-05 14:24:00', '2016-12-20 09:47:38', '61', '对话树', '数据结构');
INSERT INTO `spider_text` VALUES ('1090', 0xhttps://zh.wikipedia.org/wiki/%E5%AF%B9%E8%AF%9D%E6%A0%91', '2016-12-05 14:24:00', '2016-12-20 09:47:38', '61', '对话树', '数据结构');
INSERT INTO `spider_text` VALUES ('1091', 0xE8849AE6B3A8EFBC9A0AE8BF99E698AFE4B880E7AF87E58692E999A9E6B8B8E6888FE5B08FE4BD9CE59381E38082E4BDA0E58FAFE4BBA5E9809AE8BF87E7BC96E8BE91E68896E4BFAEE8AEA2E689A9E58585E585B6E58685E5AEB9E38082, 'https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%AF%9D%E6%A0%91', '2016-12-05 14:24:00', '2016-12-20 09:47:38', '61', '对话树', '数据结构');
INSERT INTO `spider_text` VALUES ('1092', 0xhttps://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1093', 0xhttps://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1094', 0xE69198E8A681EFBC9A0AE5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E7AE97E6B395EFBC88E88BB1E8AFADEFBC9A427265616474682D46697273742D536561726368EFBC8CE7BCA9E58699E4B8BA424653EFBC89EFBC8CE58F88E8AF91E4BD9CE5AEBDE5BAA6E4BC98E58588E6909CE7B4A2EFBC8CE68896E6A8AAE59091E4BC98E58588E6909CE7B4A2EFBC8CE698AFE4B880E7A78DE59BBEE5BDA2E6909CE7B4A2E7AE97E6B395E38082E7AE80E58D95E79A84E8AFB4EFBC8C424653E698AFE4BB8EE6A0B9E88A82E782B9E5BC80E5A78BEFBC8CE6B2BFE79D80E6A091E79A84E5AEBDE5BAA6E9818DE58E86E6A091E79A84E88A82E782B9E38082E5A682E69E9CE68980E69C89E88A82E782B9E59D87E8A2ABE8AEBFE997AEEFBC8CE58899E7AE97E6B395E4B8ADE6ADA2E38082E5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E79A84E5AE9EE78EB0E4B880E888ACE98787E794A86F70656E2D636C6F736564E8A1A8E38082, 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1095', 0xE4BD9CE6B395EFBC9A0A424653E698AFE4B880E7A78DE79BB2E79BAEE6909CE5AFBBE6B395EFBC8CE79BAEE79A84E698AFE7B3BBE7BB9FE59CB0E5B195E5BC80E5B9B6E6A380E69FA5E59BBEE4B8ADE79A84E68980E69C89E88A82E782B9EFBC8CE4BBA5E689BEE5AFBBE7BB93E69E9CE38082E68DA2E58FA5E8AF9DE8AFB4EFBC8CE5AE83E5B9B6E4B88DE88083E89991E7BB93E69E9CE79A84E58FAFE883BDE4BD8DE59D80EFBC8CE5BDBBE5BA95E59CB0E6909CE7B4A2E695B4E5BCA0E59BBEEFBC8CE79BB4E588B0E689BEE588B0E7BB93E69E9CE4B8BAE6ADA2E38082424653E5B9B6E4B88DE4BDBFE794A8E7BB8FE9AA8CE6B395E58899E7AE97E6B395E38082, 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1096', 0xE4BD9CE6B395EFBC9A0AE4BB8EE7AE97E6B395E79A84E8A782E782B9EFBC8CE68980E69C89E59BA0E4B8BAE5B195E5BC80E88A82E782B9E8808CE5BE97E588B0E79A84E5AD90E88A82E782B9E983BDE4BC9AE8A2ABE58AA0E8BF9BE4B880E4B8AAE58588E8BF9BE58588E587BAE79A84E9989FE58897E4B8ADE38082E4B880E888ACE79A84E5AE9EE78EB0E9878CEFBC8CE585B6E982BBE5B185E88A82E782B9E5B09AE69CAAE8A2ABE6A380E9AA8CE8BF87E79A84E88A82E782B9E4BC9AE8A2ABE694BEE7BDAEE59CA8E4B880E4B8AAE8A2ABE7A7B0E4B8BA206F70656E20E79A84E5AEB9E599A8E4B8ADEFBC88E4BE8BE5A682E4BCABE58897E68896E698AFE993BEE8A1A8EFBC89EFBC8CE8808CE8A2ABE6A380E9AA8CE8BF87E79A84E88A82E782B9E58899E8A2ABE694BEE7BDAEE59CA8E8A2ABE7A7B0E4B8BA20636C6F73656420E79A84E5AEB9E599A8E4B8ADE38082EFBC886F70656E2D636C6F736564E8A1A8EFBC89, 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1097', 0xE4BD9CE6B395EFBC9A0AE4BBA5E5BEB7E59BBDE59F8EE5B882E4B8BAE88C83E4BE8BE79A84E59CB0E59BBEE38082E59F8EE5B882E997B4E69C89E695B0E69DA1E98193E8B7AFE79BB8E8BF9EE68EA5E3808220E4BB8EE6B395E585B0E5858BE7A68FE5BC80E5A78BE689A7E8A18CE5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E7AE97E6B395EFBC8CE68980E4BAA7E7949FE79A84E5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E7AE97E6B395E6A091E3808220E5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E7AE97E6B395E79A84E58AA8E794BBE88C83E4BE8B, 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1098', 0xhttps://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1099', 0x432B2B20E79A84E5AE9EE78EB0EFBC9A0A28E8BF99E4B8AAE4BE8BE5AD90E4BB85E99288E5AFB942696E6172792053656172636820547265652920E5AE9AE4B989E4B880E4B8AAE7BB93E69E84E4BD93E69DA5E8A1A8E8BEBEE4B880E4B8AAE88A82E782B9E79A84E7BB93E69E84EFBC9A, 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1100', 0x432B2B20E79A84E5AE9EE78EB0EFBC9A0A737472756374206E6F64650A207B0A20202020696E742073656C663B202F2FE695B0E68DAE0A202020206E6F6465202A6C6566743B202F2FE5B7A6E88A82E782B90A202020206E6F6465202A72696768743B202F2FE58FB3E88A82E782B90A207D3B, 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1101', 0x432B2B20E79A84E5AE9EE78EB0EFBC9A0AE982A3E4B988EFBC8CE68891E4BBACE59CA8E6909CE7B4A2E4B880E4B8AAE6A091E79A84E697B6E58099EFBC8CE4BB8EE4B880E4B8AAE88A82E782B9E5BC80E5A78BEFBC8CE883BDE9A696E58588E88EB7E58F96E79A84E698AFE5AE83E79A84E4B8A4E4B8AAE5AD90E88A82E782B9E38082E4BE8BE5A682EFBC9A, 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1102', 0x432B2B20E79A84E5AE9EE78EB0EFBC9A0A41E698AFE7ACACE4B880E4B8AAE8AEBFE997AEE79A84EFBC8CE784B6E5908EE9A1BAE5BA8FE698AF42E5928C43EFBC9BE784B6E5908EE5868DE698AF42E79A84E5AD90E88A82E782B9EFBC8C43E79A84E5AD90E88A82E782B9E38082E982A3E4B988E68891E4BBACE6808EE4B988E69DA5E4BF9DE8AF81E8BF99E4B8AAE9A1BAE5BA8FE591A2EFBC9F, 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1103', 0x432B2B20E79A84E5AE9EE78EB0EFBC9A0AE8BF99E9878CE5B0B1E5BA94E8AFA5E794A87175657565E695B0E68DAEE7BB93E69E84EFBC8CE59BA0E4B8BA7175657565E98787E794A8E58588E8BF9BE58588E587BA282066697273742D696E2D66697273742D6F75742029E79A84E9A1BAE5BA8FE38082, 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1104', 0x432B2B20E79A84E5AE9EE78EB0EFBC9A0AE4BDBFE794A8432B2BE79A8453544CE587BDE5BC8FE5BA93EFBC8CE4B88BE99DA2E79A84E7A88BE5BA8FE883BDE5B8AEE58AA9E79086E8A7A3EFBC9A, 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1105', 0xhttps://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1106', 0xhttps://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1107', 0xE697B6E997B4E5A48DE69D82E5BAA6EFBC9A0AE69C80E5B7AEE68385E5BDA2E4B88BEFBC8C424653E5BF85E9A1BBE5AFBBE689BEE68980E69C89E588B0E58FAFE883BDE88A82E782B9E79A84E68980E69C89E8B7AFE5BE84EFBC8CE59BA0E6ADA4E585B6E697B6E997B4E5A48DE69D82E5BAA6E4B8BA4F287C567C202B207C457C29EFBC8CE585B6E4B8AD7C567CE698AFE88A82E782B9E79A84E695B0E79BAEEFBC8CE8808C7C457CE698AFE59BBEE4B8ADE8BEB9E79A84E695B0E79BAEE38082, 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1108', 0xE5AE8CE585A8E680A7EFBC9A0AE5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E7AE97E6B395E585B7E69C89E5AE8CE585A8E680A7E38082E8BF99E6848FE68C87E697A0E8AEBAE59BBEE5BDA2E79A84E7A78DE7B1BBE5A682E4BD95EFBC8CE58FAAE8A681E79BAEE6A087E5AD98E59CA8EFBC8CE58899424653E4B880E5AE9AE4BC9AE689BEE588B0E38082E784B6E8808CEFBC8CE88BA5E79BAEE6A087E4B88DE5AD98E59CA8EFBC8CE4B894E59BBEE4B8BAE697A0E99990E5A4A7EFBC8CE58899424653E5B086E4B88DE694B6E6959BEFBC88E4B88DE4BC9AE7BB93E69D9FEFBC89E38082, 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1109', 0xhttps://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1110', 0xE5AFBBE689BEE8BF9EE68EA5E58583E4BBB6EFBC9A0AE794B1E8B5B7E782B9E5BC80E5A78BEFBC8CE689A7E8A18CE5B9BFE5BAA6E4BC98E58588E6909CE7B4A2E7AE97E6B395E5908EE68980E7BB8FE8BF87E79A84E68980E69C89E88A82E782B9EFBC8CE58DB3E4B8BAE58C85E590ABE8B5B7E782B9E79A84E4B880E4B8AAE8BF9EE68EA5E58583E4BBB6E38082, 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1111', 0xhttps://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1112', 0xE5BA94E794A8E4BA8EE794B5E88491E6B8B8E6888FE4B8ADE5B9B3E99DA2E7BD91E6A0BCEFBC9A0A424653E58FAFE794A8E69DA5E8A7A3E586B3E794B5E88491E6B8B8E6888FEFBC88E4BE8BE5A682E58DB3E697B6E7AD96E795A5E6B8B8E6888FEFBC89E4B8ADE689BEE5AFBBE8B7AFE5BE84E79A84E997AEE9A298E38082E59CA8E8BF99E4B8AAE5BA94E794A8E4B8ADEFBC8CE4BDBFE794A8E5B9B3E99DA2E7BD91E6A0BCE69DA5E4BBA3E69BBFE59BBEE5BDA2EFBC8CE8808CE4B880E4B8AAE6A0BCE5AD90E58DB3E698AFE59BBEE4B8ADE79A84E4B880E4B8AAE88A82E782B9E38082E68980E69C89E88A82E782B9E983BDE4B88EE5AE83E79A84E982BBE5B185EFBC88E4B88AE38081E4B88BE38081E5B7A6E38081E58FB3E38081E5B7A6E4B88AE38081E58FB3E4B88AE38081E5B7A6E4B88BE38081E58FB3E4B88BEFBC89E79BB8E68EA5E38082, 'https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:47', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1113', 0xhttps://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1114', 0xhttps://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1115', 0xhttps://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2', '2016-12-12 15:22:00', '2016-12-20 09:47:48', '62', '广度优先搜索', '数据结构');
INSERT INTO `spider_text` VALUES ('1116', 0xhttps://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '数据结构');
INSERT INTO `spider_text` VALUES ('1117', 0xE69198E8A681EFBC9A0A41564CE6A09120E59E8BE6808120E6A09120E697B6E997B4203139363220E4BD9CE8808520E6A0BCE5A5A5E5B094E59089C2B7E998BFE69DB0E5B094E69DBE2DE99FA6E588A9E696AFE59FBAE58F8A452E204D2E204C616E64697320E5A4A74FE7ACA6E58FB720E79A84E697B6E997B4E5A48DE69D82E5BAA620E5B9B3E59D8720E69C80E5B7AE20E7A9BAE997B4204F286E29204F286E2920E6909CE5AFBB204F286C6F67206E29204F286C6F67206E2920E68F92E585A5204F286C6F67206E29204F286C6F67206E2920E588A0E999A4204F286C6F67206E29204F286C6F67206E29, 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '数据结构');
INSERT INTO `spider_text` VALUES ('1118', 0xE69198E8A681EFBC9A0AE59CA8E8AEA1E7AE97E69CBAE7A791E5ADA6E4B8ADEFBC8C41564CE6A091E698AFE69C80E58588E58F91E6988EE79A84E887AAE5B9B3E8A1A1E4BA8CE58F89E69FA5E689BEE6A091E38082E59CA841564CE6A091E4B8ADE4BBBBE4BD95E88A82E782B9E79A84E4B8A4E4B8AAE5AD90E6A091E79A84E9AB98E5BAA6E69C80E5A4A7E5B7AEE588ABE4B8BAE4B880EFBC8CE68980E4BBA5E5AE83E4B99FE8A2ABE7A7B0E4B8BAE9AB98E5BAA6E5B9B3E8A1A1E6A091E38082E69FA5E689BEE38081E68F92E585A5E5928CE588A0E999A4E59CA8E5B9B3E59D87E5928CE69C80E59D8FE68385E586B5E4B88BE983BDE698AF4FEFBC886C6F67206EEFBC89E38082E5A29EE58AA0E5928CE588A0E999A4E58FAFE883BDE99C80E8A681E9809AE8BF87E4B880E6ACA1E68896E5A49AE6ACA1E6A091E6978BE8BDACE69DA5E9878DE696B0E5B9B3E8A1A1E8BF99E4B8AAE6A091E3808241564CE6A091E5BE97E5908DE4BA8EE5AE83E79A84E58F91E6988EE88085472E4D2E204164656C736F6E2D56656C736B79E5928C452E4D2E204C616E646973EFBC8CE4BB96E4BBACE59CA831393632E5B9B4E79A84E8AEBAE69687E3808A416E20616C676F726974686D20666F7220746865206F7267616E697A6174696F6E206F6620696E666F726D6174696F6EE3808BE4B8ADE58F91E8A1A8E4BA86E5AE83E38082, 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '数据结构');
INSERT INTO `spider_text` VALUES ('1119', 0xhttps://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '数据结构');
INSERT INTO `spider_text` VALUES ('1120', 0xhttps://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '数据结构');
INSERT INTO `spider_text` VALUES ('1121', 0xhttps://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '数据结构');
INSERT INTO `spider_text` VALUES ('1122', 0xE5AE9EE78EB0E68F8FE8BFB0EFBC9A0AE59CA8E5B9B3E8A1A1E79A84E4BA8CE58F89E68E92E5BA8FE6A09142425354202842616C616E63696E672042696E61727920536561726368205472656529E4B88AE68F92E585A5E4B880E4B8AAE696B0E79A84E695B0E68DAEE58583E7B4A065E79A84E98092E5BD92E7AE97E6B395E58FAFE68F8FE8BFB0E5A682E4B88BEFBC9A, 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '数据结构');
INSERT INTO `spider_text` VALUES ('1123', 0xhttps://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '数据结构');
INSERT INTO `spider_text` VALUES ('1124', 0xhttps://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '数据结构');
INSERT INTO `spider_text` VALUES ('1125', 0xhttps://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '数据结构');
INSERT INTO `spider_text` VALUES ('1126', 0xE5BC95E794A8EFBC9A0A472E204164656C736F6E2D56656C736B696920616E6420452E4D2E204C616E6469732C2022416E20616C676F726974686D20666F7220746865206F7267616E697A6174696F6E206F6620696E666F726D6174696F6E2E2220446F6B6C61647920416B6164656D6969204E61756B20535353522C203134363A323633E280933236362C2031393632EFBC885275737369616EEFBC892E20456E676C697368207472616E736C6174696F6E206279204D79726F6E204A2E20526963636920696E20536F76696574204D6174682E20446F6B6C6164792C20333A31323539E28093313236332C20313936322E, 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '数据结构');
INSERT INTO `spider_text` VALUES ('1127', 0xhttps://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '数据结构');
INSERT INTO `spider_text` VALUES ('1129', 0xE588A0E999A4EFBC9A0AE4BB8E41564CE6A091E4B8ADE588A0E999A4EFBC8CE58FAFE4BBA5E9808FE8BF87E68A8AE8A681E588A0E999A4E79A84E88A82E782B9E59091E4B88BE6978BE8BDACE68890E4B880E4B8AAE58FB6E5AD90E88A82E782B9EFBC8CE68EA5E79D80E79BB4E68EA5E7A7BBE999A4E8BF99E4B8AAE58FB6E5AD90E88A82E782B9E69DA5E5AE8CE68890E38082E59BA0E4B8BAE59CA8E6978BE8BDACE68890E58FB6E5AD90E88A82E782B9E69C9FE997B4E69C80E5A49AE69C896C6F67206EE4B8AAE88A82E782B9E8A2ABE6978BE8BDACEFBC8CE8808CE6AF8FE6ACA141564CE6978BE8BDACE88097E8B4B9E59BBAE5AE9AE79A84E697B6E997B4EFBC8CE68980E4BBA5E588A0E999A4E5A484E79086E59CA8E695B4E4BD93E4B88AE88097E8B4B94F286C6F67206E2920E697B6E997B4E38082, 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '数据结构');
INSERT INTO `spider_text` VALUES ('1130', 0xE6909CE5AFBBEFBC9A0AE58FAFE4BBA5E5838FE699AEE9809AE4BA8CE58F89E69FA5E689BEE6A091E4B880E6A0B7E79A84E8BF9BE8A18CEFBC8CE68980E4BBA5E88097E8B4B94F286C6F67206E29E697B6E997B4EFBC8CE59BA0E4B8BA41564CE6A091E680BBE698AFE4BF9DE68C81E5B9B3E8A1A1E79A84E38082E4B88DE99C80E8A681E789B9E6AE8AE79A84E58786E5A487EFBC8CE6A091E79A84E7BB93E69E84E4B88DE4BC9AE794B1E4BA8EE69FA5E689BEE8808CE694B9E58F98E38082EFBC88E8BF99E698AFE4B88EE4BCB8E5B195E6A091E6909CE5AFBBE79BB8E5AFB9E7AB8BE79A84EFBC8CE5AE83E4BC9AE59BA0E4B8BAE6909CE5AFBBE8808CE58F98E69BB4E6A091E7BB93E69E84E38082EFBC89, 'https://zh.wikipedia.org/wiki/AVL%E6%A0%91', '2016-01-01 00:00:00', '2016-12-20 09:47:57', '63', 'AVL树', '数据结构');
INSERT INTO `spider_text` VALUES ('1131', 0xE69198E8A681EFBC9A0A322D33E6A09120E59E8BE6808120E6A09120E697B6E997B4203139373020E4BD9CE8808520E7BAA6E7BFB0C2B7E99C8DE699AEE5858BE6B49BE5A4ABE789B920E5A4A74FE7ACA6E58FB720E79A84E697B6E997B4E5A48DE69D82E5BAA620E5B9B3E59D8720E69C80E5B7AE20E7A9BAE997B4204F286E29204F286E2920E6909CE5AFBB204F286C6F67206E29204F286C6F67206E2920E68F92E585A5204F286C6F67206E29204F286C6F67206E2920E588A0E999A4204F286C6F67206E29204F286C6F67206E29, 'https://zh.wikipedia.org/wiki/2-3%E6%A0%91', '2015-04-13 07:42:00', '2016-12-20 09:48:07', '64', '2-3树', '数据结构');
INSERT INTO `spider_text` VALUES ('1132', 0xE69198E8A681EFBC9A0A32E2809333E6A091E698AFE4B880E4B8AAE8BF99E6A0B7E79A84E4B880E6A3B5E6A091EFBC8C20E5AE83E79A84E6AF8FE4B8AAE88A82E782B9E8A681E4B988E69C8932E4B8AAE5ADA9E5AD90E5928C31E4B8AAE695B0E68DAEE58583E7B4A0EFBC8CE8A681E4B988E69C8933E4B8AAE5ADA9E5AD90E5928C32E4B8AAE695B0E68DAEE58583E7B4A0EFBC8CE58FB6E5AD90E88A82E782B9E6B2A1E69C89E5ADA9E5AD90EFBC8CE5B9B6E4B894E69C8931E4B8AAE6889632E4B8AAE695B0E68DAEE58583E7B4A0E38082, 'https://zh.wikipedia.org/wiki/2-3%E6%A0%91', '2015-04-13 07:42:00', '2016-12-20 09:48:07', '64', '2-3树', '数据结构');
INSERT INTO `spider_text` VALUES ('1133', 0xhttps://zh.wikipedia.org/wiki/2-3%E6%A0%91', '2015-04-13 07:42:00', '2016-12-20 09:48:07', '64', '2-3树', '数据结构');
INSERT INTO `spider_text` VALUES ('1134', 0xE993BEE68EA5EFBC9A0A32E280933320547265657320436F6D706C657465204465736372697074696F6E2032E28093332054726565204A617661204170706C65742032E2809333205472656520496E2D6465707468206465736372697074696F6E2032E2809333205472656520696E2046232032E2809333205472656520696E20507974686F6E, 'https://zh.wikipedia.org/wiki/2-3%E6%A0%91', '2015-04-13 07:42:00', '2016-12-20 09:48:07', '64', '2-3树', '数据结构');
INSERT INTO `spider_text` VALUES ('1135', 0xhttps://zh.wikipedia.org/wiki/2-3%E6%A0%91', '2015-04-13 07:42:00', '2016-12-20 09:48:07', '64', '2-3树', '数据结构');
INSERT INTO `spider_text` VALUES ('1136', 0xhttps://zh.wikipedia.org/wiki/2-3%E6%A0%91', '2015-04-13 07:42:00', '2016-12-20 09:48:07', '64', '2-3树', '数据结构');
INSERT INTO `spider_text` VALUES ('1137', 0xE69198E8A681EFBC9A0AE5A086E6A088EFBC88E88BB1E8AFADEFBC9A737461636BEFBC89EFBC8CE4B99FE58FAFE79BB4E68EA5E7A7B0E6A088EFBC88E6B8AFE6BEB3E58FB0E4BD9CE5A086E58FA0EFBC89EFBC8CE59CA8E8AEA1E7AE97E69CBAE7A791E5ADA6E4B8ADEFBC8CE698AFE4B880E7A78DE789B9E6AE8AE79A84E4B8B2E58897E5BDA2E5BC8FE79A84E695B0E68DAEE7BB93E69E84EFBC8CE5AE83E79A84E789B9E6AE8AE4B98BE5A484E59CA8E4BA8EE58FAAE883BDE58581E8AEB8E59CA8E993BEE68EA5E4B8B2E58897E68896E998B5E58897E79A84E4B880E7ABAFEFBC88E7A7B0E4B8BAE5A086E58FA0E9A1B6E7ABAFE68C87E6A087EFBC8CE88BB1E8AFADEFBC9A746F70EFBC89E8BF9BE8A18CE58AA0E585A5E695B0E68DAEEFBC88E88BB1E8AFADEFBC9A70757368EFBC89E5928CE8BE93E587BAE695B0E68DAEEFBC88E88BB1E8AFADEFBC9A706F70EFBC89E79A84E8BF90E7AE97E38082E58FA6E5A496E6A088E4B99FE58FAFE4BBA5E794A8E4B880E7BBB4E695B0E7BB84E68896E8BF9EE7BB93E4B8B2E58897E79A84E5BDA2E5BC8FE69DA5E5AE8CE68890E38082E5A086E58FA0E79A84E58FA6E5A496E4B880E4B8AAE79BB8E5AFB9E79A84E6938DE4BD9CE696B9E5BC8FE7A7B0E4B8BAE4BCABE58897E38082, 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:16', '65', '堆栈', '数据结构');
INSERT INTO `spider_text` VALUES ('1138', 0xE69198E8A681EFBC9A0AE794B1E4BA8EE5A086E58FA0E695B0E68DAEE7BB93E69E84E58FAAE58581E8AEB8E59CA8E4B880E7ABAFE8BF9BE8A18CE6938DE4BD9CEFBC8CE59BA0E8808CE68C89E785A7E5908EE8BF9BE58588E587BAEFBC884C49464F2C204C61737420496E204669727374204F7574EFBC89E79A84E58E9FE79086E8BF90E4BD9CE38082, 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:16', '65', '堆栈', '数据结构');
INSERT INTO `spider_text` VALUES ('1139', 0xE6938DE4BD9CEFBC9A0AE5A086E58FA0E695B0E68DAEE7BB93E69E84E4BDBFE794A8E4B8A4E7A78DE59FBAE69CACE6938DE4BD9CEFBC9AE68EA8E585A5EFBC8870757368EFBC89E5928CE5BCB9E587BAEFBC88706F70EFBC89EFBC9A, 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:16', '65', '堆栈', '数据结构');
INSERT INTO `spider_text` VALUES ('1140', 0xE6938DE4BD9CEFBC9A0AE68EA8E585A5EFBC9AE5B086E695B0E68DAEE694BEE585A5E5A086E58FA0E79A84E9A1B6E7ABAFEFBC88E998B5E58897E5BDA2E5BC8FE68896E4B8B2E58897E5BDA2E5BC8FEFBC89EFBC8CE5A086E58FA0E9A1B6E7ABAF746F70E68C87E6A087E58AA0E4B880E3808220E5BCB9E587BAEFBC9AE5B086E9A1B6E7ABAFE695B0E68DAEE8B584E69699E8BE93E587BAEFBC88E59B9EE4BCA0EFBC89EFBC8CE5A086E58FA0E9A1B6E7ABAFE8B584E69699E5878FE4B880E38082, 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:16', '65', '堆栈', '数据结构');
INSERT INTO `spider_text` VALUES ('1141', 0xE789B9E782B9EFBC9A0AE58588E585A5E5908EE587BAEFBC8CE5908EE585A5E58588E587BAE3808220E999A4E5A4B4E5B0BEE88A82E782B9E4B98BE5A496EFBC8CE6AF8FE4B8AAE58583E7B4A0E69C89E4B880E4B8AAE5898DE9A9B1EFBC8CE4B880E4B8AAE5908EE7BBA7E38082, 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:16', '65', '堆栈', '数据结构');
INSERT INTO `spider_text` VALUES ('1142', 0xE68ABDE8B1A1E5AE9AE4B989EFBC9A0AE4BBA5E4B88BE698AFE5A086E6A088E79A8456444DEFBC885669656E6E6120446576656C6F706D656E74204D6574686F64EFBC88E88BB1E8AFADEFBC9A5669656E6E6120446576656C6F706D656E74204D6574686F64EFBC89EFBC89EFBC9A5B315D, 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:16', '65', '堆栈', '数据结构');
INSERT INTO `spider_text` VALUES ('1143', 0xE68ABDE8B1A1E5AE9AE4B989EFBC9A0A696E69743A202D3E20537461636B0A2020707573683A204E207820537461636B202D3E20537461636B0A2020746F703A20537461636B202D3E20284E2055204552524F52290A2020706F703A20537461636B202D3E20537461636B0A20206973656D7074793A20537461636B202D3E20426F6F6C65616E, 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:16', '65', '堆栈', '数据结构');
INSERT INTO `spider_text` VALUES ('1144', 0xE68ABDE8B1A1E5AE9AE4B989EFBC9A0AE6ADA4E5A484E79A844EE4BBA3E8A1A8E69F90E4B8AAE58583E7B4A0EFBC88E5A682E887AAE784B6E695B0EFBC89EFBC8CE8808C55E8A1A8E7A4BAE99B86E59088E6B182E4BAA4E38082, 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:16', '65', '堆栈', '数据结构');
INSERT INTO `spider_text` VALUES ('1145', 0xE68ABDE8B1A1E5AE9AE4B989EFBC9A0A746F7028696E6974282929203D204552524F520A2020746F70287075736828692C732929203D20690A2020706F7028696E6974282929203D20696E697428290A2020706F70287075736828692C20732929203D20730A20206973656D70747928696E6974282929203D20747275650A20206973656D707479287075736828692C20732929203D2066616C7365, 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:16', '65', '堆栈', '数据结构');
INSERT INTO `spider_text` VALUES ('1146', 0xE5A086E58FA0E79A84E5BA94E794A8EFBC9A0A5E204A6F6E65733A202253797374656D6174696320536F66747761726520446576656C6F706D656E74205573696E672056444D22, 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:16', '65', '堆栈', '数据结构');
INSERT INTO `spider_text` VALUES ('1148', 0xE998B5E58897E5A086E58FA0EFBC9A0AE5A086E6A088E58FAFE4BBA5E794A8E993BEE8A1A8E5928CE695B0E7BB84E4B8A4E7A78DE696B9E5BC8FE5AE9EE78EB0EFBC8CE4B880E888ACE4B8BAE4B880E4B8AAE5A086E6A088E9A284E58588E58886E9858DE4B880E4B8AAE5A4A7E5B08FE59BBAE5AE9AE4B894E8BE83E59088E98082E79A84E7A9BAE997B4E5B9B6E99D9EE99ABEE4BA8BEFBC8CE68980E4BBA5E8BE83E6B581E8A18CE79A84E5819AE6B395E698AF537461636BE7BB93E69E84E4B88BE590ABE4B880E4B8AAE695B0E7BB84E38082E5A682E69E9CE7A9BAE997B4E5AE9EE59CA8E7B4A7E5BCA0EFBC8CE4B99FE58FAFE794A8E993BEE8A1A8E5AE9EE78EB0EFBC8CE4B894E58EBBE68E89E8A1A8E5A4B4E38082E8BF99E9878CE79A84E4BE8BE7A88BE698AFE4BBA5E695B0E7BB84E5AE9EE78EB0E79A84E38082, 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '数据结构');
INSERT INTO `spider_text` VALUES ('1149', 0xhttps://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '数据结构');
INSERT INTO `spider_text` VALUES ('1150', 0xhttps://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '数据结构');
INSERT INTO `spider_text` VALUES ('1151', 0xE7A1ACE4BBB6E694AFE68C81EFBC9A0AE5A4A7E5A49AE695B0435055E983BDE69C89E794A8E4BD9CE5A086E6A088E68C87E99288E79A84E5AF84E5AD98E599A8E38082, 'https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88', '2016-09-24 03:54:00', '2016-12-20 09:48:17', '65', '堆栈', '数据结构');
INSERT INTO `spider_text` VALUES ('1152', 0xE69198E8A681EFBC9A0AE585B3E4BA8EE794A8E4BBA5E582A8E5AD98E58CBAE997B4E68896E7BABFE6AEB5E79A84E695B0E68DAEE7BB93E69E84EFBC8CE8AFA6E8A781E2809CE7BABFE6AEB5E6A0912028E582A8E5AD98E58CBAE997B429E2809DE38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:26', '66', '线段树', '数据结构');
INSERT INTO `spider_text` VALUES ('1153', 0xE69198E8A681EFBC9A0AE7BABFE6AEB5E6A091E698AFE4B880E7A78DE4BA8CE58F89E6A091EFBC8CE5AE83E5B086E4B880E4B8AAE58CBAE997B4E58892E58886E68890E4B880E4BA9BE58D95E58583E58CBAE997B4EFBC8CE6AF8FE4B8AAE58D95E58583E58CBAE997B4E5AFB9E5BA94E7BABFE6AEB5E6A091E4B8ADE79A84E4B880E4B8AAE58FB6E7BB93E782B9E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:26', '66', '线段树', '数据结构');
INSERT INTO `spider_text` VALUES ('1154', 0xE69198E8A681EFBC9A0AE5AFB9E4BA8EE7BABFE6AEB5E6A091E4B8ADE79A84E6AF8FE4B880E4B8AAE99D9EE58FB6E5AD90E88A82E782B95B612C625DEFBC8CE5AE83E79A84E5B7A6E5AD90E6A091E8A1A8E7A4BAE79A84E58CBAE997B4E4B8BA5B612C28612B62292F325DEFBC8CE58FB3E5AD90E6A091E8A1A8E7A4BAE79A84E58CBAE997B4E4B8BA5B28612B62292F322B312C625DE38082E59BA0E6ADA4E7BABFE6AEB5E6A091E698AFE5B9B3E8A1A1E4BA8CE58F89E6A091E38082E58FB6E88A82E782B9E695B0E79BAEE4B8BA4EEFBC8CE58DB3E695B4E4B8AAE7BABFE6AEB5E58CBAE997B4E79A84E995BFE5BAA6E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:26', '66', '线段树', '数据结构');
INSERT INTO `spider_text` VALUES ('1155', 0xE58F98E7A78DEFBC9A0A7A6B77E7BABFE6AEB5E6A091E698AFE4B880E7A78DE887AAE5BA95E59091E4B88AE79A84E7BABFE6AEB5E6A091EFBC8CE794B1E6B885E58D8EE5A4A7E5ADA6E79A84E5BCA0E69886E78EAEE68F90E587BAE38082E5AE83E79BB8E5AFB9E4BA8EE4BCA0E7BB9FE7BABFE6AEB5E6A091E79A84E4BC98E58ABFE4BD93E78EB0E59CA8E5878FE5B091E4BA86E98092E5BD92E6938DE4BD9CE5928CE5A29EE58AA0E4BA86E4BD8DE8BF90E7AE97E7AD89E6938DE4BD9CE4BBA5E5878FE5B091E5B8B8E695B05B315DE38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:26', '66', '线段树', '数据结构');
INSERT INTO `spider_text` VALUES ('1156', 0xE79BB8E585B3E993BEE68EA5EFBC9A0A687474703A2F2F646F6E6778696368656E672E6F72672F7374727563747572652F7365676D656E742D747265652F, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:26', '66', '线段树', '数据结构');
INSERT INTO `spider_text` VALUES ('1157', 0xE79BB8E585B3E993BEE68EA5EFBC9A0A5E20E5BCA0E69886E78EAE2E20E7BB9FE8AEA1E79A84E58A9BE9878FE28094E28094E7BABFE6AEB5E6A091E585A8E68EA5E8A7A62EC2A0, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:26', '66', '线段树', '数据结构');
INSERT INTO `spider_text` VALUES ('1158', 0xE88A82E782B9E695B0E68DAEE59091E4B88AE69BB4E696B0EFBC9A0A2F2A20E5AFB9E4BA8EE58CBAE997B4E6B182E5928C202A2F0A766F696420707573685F757028696E7420727429207B0A20202020747265655B72745D203D20747265655B7274203C3C20315D202B20747265655B7274203C3C2031207C20315D3B0A7D0A0A2F2A20E5AFB9E4BA8EE58CBAE997B4E6B182E69C80E5A4A7E580BC202A2F0A766F696420707573685F757028696E7420727429207B0A20202020747265655B72745D203D206D617828747265655B7274203C3C20315D2C20747265655B7274203C3C2031207C20315D293B0A7D, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '数据结构');
INSERT INTO `spider_text` VALUES ('1159', 0xE88A82E782B9E68792E683B0E6A087E8AEB0E4B88BE68EA8EFBC9A0AE5AFB9E4BA8EE58CBAE997B4E6B182E5928C2C20E58E9FE5AD90E695B0E7BB84E580BCE99C80E8A681E58AA0E4B88A6C617A79E6A087E8AEB0E4B998E4BBA5E5AD90E6A091E68980E7BB9FE8AEA1E79A84E58CBAE997B4E995BFE5BAA6E38082206C656EE4B8BAE788B6E88A82E782B9E7BB9FE8AEA1E79A84E58CBAE997B4E995BFE5BAA62C20E588996C656E202D20286C656E203E3E203129E4B8BAE5B7A6E5AD90E6A091E58CBAE997B4E995BFE5BAA62C206C656E203E3E2031E4B8BAE58FB3E5AD90E6A091E58CBAE997B4E995BFE5BAA6E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '数据结构');
INSERT INTO `spider_text` VALUES ('1160', 0xE88A82E782B9E68792E683B0E6A087E8AEB0E4B88BE68EA8EFBC9A0A766F696420707573685F646F776E28696E742072742C20696E74206C656E29207B0A20202020747265655B7274203C3C20315D202B3D206C617A795B72745D202A20286C656E202D20286C656E203E3E203129293B0A202020206C617A795B7274203C3C20315D202B3D206C617A795B72745D3B0A20202020747265655B7274203C3C2031207C20315D202B3D206C617A795B72745D202A20286C656E203E3E2031293B0A202020206C617A795B7274203C3C2031207C20315D202B3D206C617A795B72745D3B0A202020206C617A795B72745D203D20303B0A7D, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '数据结构');
INSERT INTO `spider_text` VALUES ('1161', 0xE88A82E782B9E68792E683B0E6A087E8AEB0E4B88BE68EA8EFBC9A0AE5AFB9E4BA8EE58CBAE997B4E6B182E69C80E5A4A7E580BC2C20E5AD90E6A091E79A84E580BCE4B88DE99C80E8A681E4B998E4BBA5E995BFE5BAA62C20E68980E4BBA5E4B88DE99C80E8A681E4BCA0E98092E58F82E695B06C656EE38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '数据结构');
INSERT INTO `spider_text` VALUES ('1162', 0xE88A82E782B9E68792E683B0E6A087E8AEB0E4B88BE68EA8EFBC9A0A766F696420707573685F646F776E28696E7420727429207B0A20202020747265655B7274203C3C20315D202B3D206C617A795B72745D3B0A202020206C617A795B7274203C3C20315D202B3D206C617A795B72745D3B0A20202020747265655B7274203C3C2031207C20315D202B3D206C617A795B72745D3B0A202020206C617A795B7274203C3C2031207C20315D202B3D206C617A795B72745D3B0A202020206C617A795B72745D203D20303B0A7D, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '数据结构');
INSERT INTO `spider_text` VALUES ('1163', 0xE5BBBAE6A091EFBC9A0A23646566696E65206C6368696C64207274203C3C20312C206C2C206D0A23646566696E6520726368696C64207274203C3C2031207C20312C206D202B20312C20720A766F6964206275696C6428696E74207274203D20312C20696E74206C203D20312C20696E742072203D204E29207B0A20202020696620286C203D3D207229207B207374643A3A63696E203E3E20747265655B72745D3B2072657475726E3B207D0A20202020696E74206D203D20286C202B207229203E3E20313B0A202020206275696C64286C6368696C64293B206275696C6428726368696C64293B0A20202020707573685F7570287274293B0A7D, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '数据结构');
INSERT INTO `spider_text` VALUES ('1164', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '数据结构');
INSERT INTO `spider_text` VALUES ('1165', 0xE69BB4E696B0EFBC9A0AE68890E6AEB5E69BB4E696B02C20E99C80E8A681E794A8E588B06C617A79E6A087E8AEB0E69DA5E68F90E9AB98E697B6E997B4E69588E78E87, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '数据结构');
INSERT INTO `spider_text` VALUES ('1166', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '数据结构');
INSERT INTO `spider_text` VALUES ('1167', 0xhttps://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91', '2016-09-20 07:53:00', '2016-12-20 09:48:27', '66', '线段树', '数据结构');
INSERT INTO `spider_text` VALUES ('1168', 0xhttps://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:44', '68', '笛卡尔树', '数据结构');
INSERT INTO `spider_text` VALUES ('1169', 0xE5AE9AE4B989EFBC9A0AE697A0E79BB8E5908CE58583E7B4A0E79A84E695B0E58897E69E84E980A0E587BAE79A84E7AC9BE58DA1E5B094E6A091E585B7E69C89E4B88BE58897E680A7E8B4A8EFBC9A, 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:44', '68', '笛卡尔树', '数据结构');
INSERT INTO `spider_text` VALUES ('1170', 0xE5AE9AE4B989EFBC9A0AE7BB93E782B9E4B880E4B880E5AFB9E5BA94E4BA8EE695B0E58897E58583E7B4A0E38082E58DB3E695B0E58897E4B8ADE79A84E6AF8FE4B8AAE58583E7B4A0E983BDE5AFB9E5BA94E4BA8EE6A091E4B8ADE69F90E4B8AAE594AFE4B880E7BB93E782B9EFBC8CE6A091E7BB93E782B9E4B99FE5AFB9E5BA94E4BA8EE695B0E58897E4B8ADE79A84E69F90E4B8AAE594AFE4B880E58583E7B4A020E4B8ADE5BA8FE9818DE58E86EFBC88696E2D6F72646572207472617665727365EFBC89E7AC9BE58DA1E5B094E6A091E58DB3E58FAFE5BE97E588B0E58E9FE695B0E58897E38082E58DB3E4BBBBE6848FE6A091E7BB93E782B9E79A84E5B7A6E5AD90E6A091E7BB93E782B9E68980E5AFB9E5BA94E79A84E695B0E58897E58583E7B4A0E4B88BE6A087E6AF94E8AFA5E7BB93E782B9E68980E5AFB9E5BA94E58583E7B4A0E79A84E4B88BE6A087E5B08FEFBC8CE58FB3E5AD90E6A091E7BB93E782B9E68980E5AFB9E5BA94E695B0E58897E58583E7B4A0E4B88BE6A087E6AF94E8AFA5E7BB93E782B9E68980E5AFB9E5BA94E58583E7B4A0E4B88BE6A087E5A4A7E3808220E6A091E7BB93E69E84E5AD98E59CA8E5A086E5BA8FE680A7E8B4A8EFBC8CE58DB3E4BBBBE6848FE6A091E7BB93E782B9E68980E5AFB9E5BA94E695B0E580BCE5A4A7EFBC8FE5B08FE4BA8EE585B6E5B7A6E38081E58FB3E5AD90E6A091E58685E4BBBBE6848FE7BB93E782B9E5AFB9E5BA94E695B0E580BC, 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:44', '68', '笛卡尔树', '数据结构');
INSERT INTO `spider_text` VALUES ('1171', 0xE5AE9AE4B989EFBC9A0AE6A0B9E68DAEE5A086E5BA8FE680A7E8B4A8EFBC8CE7AC9BE58DA1E5B094E6A091E6A0B9E7BB93E782B9E4B8BAE695B0E58897E4B8ADE79A84E69C80E5A4A7EFBC8FE5B08FE580BCEFBC8CE6A091E69CACE8BAABE4B99FE58FAFE4BBA5E9809AE8BF87E8BF99E4B880E680A7E8B4A8E98092E5BD92E59CB0E5AE9AE4B989EFBC9AE6A0B9E7BB93E782B9E4B8BAE5BA8FE58897E79A84E69C80E5A4A7EFBC8FE5B08FE580BCEFBC8CE5B7A6E38081E58FB3E5AD90E6A091E58899E5AFB9E5BA94E4BA8EE5B7A6E58FB3E4B8A4E4B8AAE5AD90E5BA8FE58897EFBC8CE585B6E7BB93E782B9E5908CE6A0B7E4B8BAE4B8A4E4B8AAE5AD90E5BA8FE58897E79A84E69C80E5A4A72FE5B08FE580BCE38082E59BA0E6ADA4EFBC8CE4B88AE8BFB0E4B889E69DA1E680A7E8B4A8E594AFE4B880E59CB0E5AE9AE4B989E4BA86E7AC9BE58DA1E5B094E6A091E38082E88BA5E695B0E58897E4B8ADE5AD98E59CA8E9878DE5A48DE580BCEFBC8CE58899E58FAFE794A8E585B6E5AE83E68E92E5BA8FE58E9FE58899E4B8BAE695B0E58897E4B8ADE79BB8E5908CE58583E7B4A0E68E92E5AE9AE5BA8FE58897EFBC8CE4BE8BE5A682E4BBA5E4B88BE6A087E8BE83E5B08FE79A84E695B0E4B8BAE8BE83E5B08FEFBC8CE4BEBFE883BDE4B8BAE590ABE9878DE5A48DE580BCE79A84E695B0E58897E69E84E980A0E7AC9BE58DA1E5B094E6A091E38082, 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:44', '68', '笛卡尔树', '数据结构');
INSERT INTO `spider_text` VALUES ('1172', 0xhttps://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:44', '68', '笛卡尔树', '数据结构');
INSERT INTO `spider_text` VALUES ('1173', 0x7472656170EFBC9A0A5E205675696C6C6D696E20313938302E20224120756E696679696E67206C6F6F6B20617420646174612073747275637475726573222C20436F6D6D756E2E2041434D20284E657720596F726B2C204E592C205553413A2041434D29203233202834293A20323239E280933233392C20646F693A31302E313134352F3335383834312E333538383532205E2042656E6465722C204D69636861656C20412E3B204661726163682D436F6C746F6E2C204D617274696E202832303030292C2022546865204C43412070726F626C656D20726576697369746564222C2050726F63656564696E6773206F662074686520347468204C6174696E20416D65726963616E2053796D706F7369756D206F6E205468656F7265746963616C20496E666F726D61746963732C20537072696E6765722D5665726C61672C204C656374757265204E6F74657320696E20436F6D707574657220536369656E636520313737362C2070702E203838E2809339342E, 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:45', '68', '笛卡尔树', '数据结构');
INSERT INTO `spider_text` VALUES ('1175', 0xhttps://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:45', '68', '笛卡尔树', '数据结构');
INSERT INTO `spider_text` VALUES ('1176', 0xE88C83E59BB4E69C80E580BCE69FA5E8AFA2E4B88EE69C80E4BD8EE585ACE585B1E7A596E58588EFBC9A0A42656E6465722026204661726163682D436F6C746F6E202832303030295B325DE58899E68F90E587BAE4BA86524D51E4B88E4C4341E997AEE9A298E79A84E696B0E88194E7B3BBEFBC8CE4BB96E4BBACE9809AE8BF87E4B88DE59FBAE4BA8EE6A091E79A84E7AE97E6B395E5A484E79086524D51E997AEE9A298E4BB8EE8808CE69C89E69588E59CB0E8A7A3E586B34C4341E997AEE9A298E38082E585B6E4BDBFE794A8E6ACA7E68B89E8B7AFE5BE84E79A84E68A80E5B7A7E5B086E6A091E7BB93E69E84E8BDACE58C96E4B8BAE695B0E58897EFBC8CE6ADA4E695B0E58897E585B7E69C89E789B9E5AE9AE680A7E8B4A8EFBC88E79BB8E982BBE695B0E580BCE4BBA3E8A1A8E6A091E4B8ADE79A84E79BB8E982BBE9A1B6E782B9EFBC8CE58DB3E59CA8E6A091E4B8ADE9AB98E5BAA6E5B7AEE4B8BA31E79A84E9A1B6E782B9EFBC89EFBC8CE588A9E794A8E8BF99E4B880E680A7E8B4A8524D51E997AEE9A298E58FAFE4BBA5E5BE88E9AB98E69588E59CB0E5BE97E588B0E8A7A3E586B3E38082E9809AE5B8B8E79A84E695B0E58897E58899E4B88DE585B7E5A487E6ADA4E680A7E8B4A8EFBC8CE4B8BAE4BA86E5B086E4B880E888ACE79A84E695B0E58897E8BDACE58C96E4B8BAE585B7E69C89E4B88AE8BFB0E680A7E8B4A8E79A84E695B0E58897EFBC8CE99C80E8A681E5BA94E794A8E588B0E7AC9BE58DA1E5B094E6A091EFBC8CE585B7E4BD93E8BF87E7A88BE4B8BAE59CA8E699AEE9809AE695B0E58897E4B88AE69E84E980A0E7AC9BE58DA1E5B094E6A091EFBC8CE59CA8E7AC9BE58DA1E5B094E6A091E4B88AE4BDBFE794A8E6ACA7E68B89E8B7AFE5BE84E8BDACE58C96E79A84E696B9E6B395E5B086E6A091E8BDACE58C96E4B8BAE585B7E69C89E4B88AE8BFB0E680A7E8B4A8E79A84E696B0E695B0E58897E38082, 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:45', '68', '笛卡尔树', '数据结构');
INSERT INTO `spider_text` VALUES ('1177', 0xhttps://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:45', '68', '笛卡尔树', '数据结构');
INSERT INTO `spider_text` VALUES ('1178', 0xE88C83E59BB4E69C80E580BCE69FA5E8AFA2E4B88EE69C80E4BD8EE585ACE585B1E7A596E58588EFBC9A0AE7AC9BE58DA1E5B094E6A091E5908CE6A0B7E58FAFE4BBA5E5BA94E794A8E4BA8EE4BBA5E5B8B8E695B0E697B6E997B4E69FA5E8AFA2E8B685E5BAA6E9878FE7A9BAE997B4E58685E782B9E5AFB9E79A84E8B79DE7A6BBE38082E8B685E5BAA6E9878FE7A9BAE997B4E58685E8B79DE7A6BBE79A84E5AE9AE4B989E4B88EE69C80E5AEBDE8B7AFE5BE84E997AEE9A298E4B8ADE79A84E69D83E9878DE79BB8E5908CE38082E4BB8EE69C80E5B08FE7949FE68890E6A091E4B88AE58FAFE4BBA5E69E84E980A0E4B880E4B8AAE7AC9BE58DA1E5B094E6A091EFBC8CE6A0B9E7BB93E782B9E8A1A8E7A4BAE69C80E5B08FE7949FE68890E6A091E4B8ADE79A84E69D83E580BCE69C80E5A4A7E79A84E8BEB9EFBC8CE692A4E58EBBE6ADA4E8BEB9E4BC9AE5B086E69C80E5B08FE7949FE68890E6A091E58886E589B2E4B8BAE4B8A4E4B8AAE5AD90E6A091EFBC8CE7AC9BE58DA1E5B094E6A091E98092E5BD92E59CB0E4BB8EE8BF99E4B8A4E6A3B5E5AD90E6A091E4B88AE69E84E980A0E38082E7AC9BE58DA1E5B094E6A091E79A84E58FB6E7BB93E782B9E8A1A8E7A4BAE5BAA6E9878FE7A9BAE997B4E58685E79A84E782B9EFBC8CE4B8A4E4B8AAE58FB6E7BB93E782B9E79A84E69C80E4BD8EE585ACE585B1E7A596E58588E58899E698AFE8BF99E4B8A4E4B8AAE782B9E59CA8E69C80E5B08FE7949FE68890E6A091E4B8ADE69C80E9878DE79A84E8BEB9EFBC8CE4BBA3E8A1A8E8BF99E4B8A4E782B9E997B4E79A84E8B79DE7A6BBE38082E88EB7E5BE97E4BA86E69C80E5B08FE7949FE68890E6A091E58F8AE5B086E8BEB9E68C89E785A7E69D83E580BCE68E92E5BA8FE5908EEFBC8CE7AC9BE58DA1E5B094E6A091E58DB3E58FAFE59CA8E7BABFE680A7E697B6E997B4E58685E69E84E980A0E587BAE69DA5E38082, 'https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91', '2016-10-22 03:16:00', '2016-12-20 09:48:45', '68', '笛卡尔树', '数据结构');
INSERT INTO `spider_text` VALUES ('1179', 0xE69198E8A681EFBC9A0AE69CACE69DA1E79BAEE99C80E8A681E7BC96E4BFAEEFBC8CE4BBA5E7A1AEE4BF9DE69687E6B395E38081E794A8E8AF8DE38081E8AFADE6B094E38081E6A0BCE5BC8FE38081E6A087E782B9E7AD89E4BDBFE794A8E681B0E5BD93E38082EFBC8832303131E5B9B43130E69C883133E697A5EFBC8920E8AFB7E68C89E785A7E6A0A1E5AFB9E68C87E5BC95EFBC8CE5B8AEE58AA9E7BC96E8BE91E8BF99E4B8AAE69DA1E79BAEE38082EFBC88E5B8AEE58AA9E38081E8AEA8E8AEBAEFBC89, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:54', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1180', 0xE69198E8A681EFBC9A0AE59CA8E7A6BBE695A3E695B0E5ADA6E4B8ADEFBC8CE6A091E6978BE8BDACEFBC88E88BB1E8AFADEFBC9A5472656520726F746174696F6EEFBC89E698AFE59CA8E4BA8CE58F89E6A091E4B8ADE79A84E4B880E7A78DE5AD90E6A091E8B083E695B4E6938DE4BD9C2C20E6AF8FE4B880E6ACA1E6978BE8BDACE5B9B6E4B88DE5BDB1E5938DE5AFB9E8AFA5E4BA8CE58F89E6A091E8BF9BE8A18CE4B8ADE5BA8FE9818DE58E86E79A84E7BB93E69E9C2E20E6A091E6978BE8BDACE9809AE5B8B8E5BA94E794A8E4BA8EE99C80E8A681E8B083E695B4E6A091E79A84E5B180E983A8E5B9B3E8A1A1E680A7E79A84E59CBAE59088E38082, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:54', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1181', 0xE59BBEE7A4BAEFBC9A0AE6A091E6978BE8BDACE58C85E68BACE4B8A4E4B8AAE4B88DE5908CE79A84E696B9E5BC8FEFBC8CE58886E588ABE698AFE5B7A6E6978BE8BDACEFBC88E4BBA550E4B8BAE8BDACE8BDB4EFBC89E5928CE58FB3E6978BE8BDACEFBC88E4BBA551E4B8BAE8BDACE8BDB4EFBC89E38082E4B8A4E7A78DE6978BE8BDACE59188E9959CE5838FEFBC8CE8808CE4B894E4BA92E4B8BAE98086E6938DE4BD9CE38082, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:54', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1182', 0xE59BBEE7A4BAEFBC9A0AE4B88BE59BBEE7A4BAE6848FE4BA86E4B8A4E7A78DE6A091E6978BE8BDACE8BF87E7A88BE4B8AD2C20E5AD90E6A091E79A84E5889DE68081E5928CE7BB88E68081, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:54', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1183', 0xhttps://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:54', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1184', 0xE59BBEE7A4BAEFBC9A0AE585B6E4B8AD2C20E58FB3E6978BE8BDACE8AFA6E7BB86E6ADA5E9AAA4E5A682E4B88BE59BBE2052302C2052312C20523220E4B889E4B8AAE6ADA5E9AAA4E68980E7A4BA2C20E5B7A6E6978BE8BDACE58899E5A682204C302C204C312C204C3220E4B889E4B8AAE6ADA5E9AAA4E68980E7A4BA2E, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:54', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1185', 0xE59BBEE7A4BAEFBC9A0A5F5F0A20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202F20205C0A202020202020202020202020202020202020202020202020202020202020202020202020202B2D2D2D2B202020202020202020202020202020202020202020202F20202B2D2D2D2B0A202020202020202020202020202020202020202020202020202020202020202020202020207C2051207C2020202020202020202020202020202020202020202F2020207C2051207C0A2020202020202020202020202020202020202020202020202020202B2D2D2D2B20202020202B2D2D2D2B20202020202020202020202020202B2D2D2D2B202F202020202B2D2D2D2B0A20202020202020202B2D2D2D2B20202020202020202020202020207C2050207C202020202F20202020205C202020202020523120202020207C2050207C2F202020202F20202020205C20202020202020202020202020202B2D2D2D2B0A20202020202020207C2051207C20202020205230202020202020202B2D2D2D2B2020202F20202020202B2D2D2D2B202D2D2D2D2D3E2020202B2D2D2D2B202020202F20202020202B2D2D2D2B20202052322020202020207C2050207C0A20202020202020202B2D2D2D2B2020202D2D2D2D2D3E202020202F20202020205C202F2020202020207C205A207C2020202020202020202F20202020202020202F2020202020207C205A207C202D2D2D2D2D3E202020202B2D2D2D2B0A202020202020202F20202020205C2020202020202020202B2D2D2D2B2020202B2D2D2D2B20202020202B2D2D2D2B2020202020202B2D2D2D2B202020202B2D2D2D2B20202020202B2D2D2D2B202020202020202020202F20202020205C0A202020202B2D2D2D2B2020202B2D2D2D2B2020202020207C2058207C2020207C2059207C202020202020202020202020202020207C2058207C202020207C2059207C20202020202020202020202020202020202B2D2D2D2B2020202B2D2D2D2B0A202020207C2050207C2020207C205A207C2020202020202B2D2D2D2B2020202B2D2D2D2B202020202020202020202020202020202B2D2D2D2B202020202B2D2D2D2B20202020202020202020202020202020207C2058207C2020207C2051207C0A202020202B2D2D2D2B2020202B2D2D2D2B20202020202020202020202020205F5F20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202B2D2D2D2B2020202B2D2D2D2B0A2020202F20202020205C20202020202020202020202020202020202020202F20205C20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202F20202020205C0A2B2D2D2D2B2020202B2D2D2D2B20202020204C32202020202020202B2D2D2D2B20205C20202020202020202020202020202020202020202020202B2D2D2D2B202020202020202020202020202020204C302020202020202B2D2D2D2B2020202B2D2D2D2B0A7C2058207C2020207C2059207C2020203C2D2D2D2D2D20202020207C2050207C2020205C202020202020202020202020202020202020202020207C2050207C20202020202020202020202020203C2D2D2D2D2D202020207C2059207C2020207C205A207C0A2B2D2D2D2B2020202B2D2D2D2B20202020202020202020202020202B2D2D2D2B202020205C202B2D2D2D2B2020202020204C31202020202020202B2D2D2D2B20202020202B2D2D2D2B20202020202020202020202020202B2D2D2D2B2020202B2D2D2D2B0A20202020202020202020202020202020202020202020202020202F20202020205C202020205C7C2051207C202020203C2D2D2D2D2D202020202F20202020205C202020207C2051207C0A20202020202020202020202020202020202020202020202B2D2D2D2B20202020205C202020202B2D2D2D2B20202020202020202020202B2D2D2D2B20202020205C2020202B2D2D2D2B0A20202020202020202020202020202020202020202020207C2058207C2020202020205C20202020202020205C202020202020202020207C2058207C2020202020205C202F20202020205C0A20202020202020202020202020202020202020202020202B2D2D2D2B20202020202B2D2D2D2B202020202B2D2D2D2B202020202020202B2D2D2D2B20202020202B2D2D2D2B2020202B2D2D2D2B0A2020202020202020202020202020202020202020202020202020202020202020207C2059207C202020207C205A207C20202020202020202020202020202020207C2059207C2020207C205A207C0A2020202020202020202020202020202020202020202020202020202020202020202B2D2D2D2B202020202B2D2D2D2B20202020202020202020202020202020202B2D2D2D2B2020202B2D2D2D2B, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:54', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1186', 0xE5AE9EE78EB0EFBC9A0AE4B88AE99DA2E79A84E59BBEE7A4BAE4BB85E68F8FE8BFB0E4BA86E5A682E4BD95E8BF9BE8A18CE5B180E983A8E58F98E68DA22C20E59CA8E5AE9EE99985E5BA94E794A8E4B8AD2C20E8BF98E99C80E8A681E5B086E58E9FE69C89E788B6E88A82E782B9E79A84E788B6E88A82E782B9E7BAB3E585A5E88083E89991E88C83E59BB42E20E4BBA5E4B88AE8BFB0E58FB3E6978BE8BDACE4B8BAE4BE8B2C20E5A682E69E9C205120E698AFE585B6E788B6E88A82E782B920726F6F7420E79A84E5B7A6E5AD90E88A82E782B92C20E58899E59CA8E6978BE8BDACE5AE8CE5908E20726F6F7420E79A84E5B7A6E5AD90E88A82E782B9E99C80E8A681E4BFAEE694B9E68C87E59091E88A82E782B920502E20E4BD86E8BF99E4B880E782B9E5B9B6E6B2A1E69C89E4BD93E78EB0E59CA8E4B88AE99DA2E79A84E59BBEE7A4BAE4B8AD2E, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:54', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1187', 0xhttps://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1188', 0xhttps://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1189', 0xhttps://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1190', 0xE5AE9EE78EB0EFBC9A0AE4B88AE8BFB0E8BF87E7A88BE5B9B6E4B88DE98082E794A8E4BA8EE5BD9320706172656E7420E88A82E782B9E69CACE8BAABE5B0B1E698AFE6A091E79A84E6A0B9E88A82E782B9E79A84E68385E586B52E20E8BF99E7A78DE68385E586B5E4B88B2C20E99C80E8A681E4BBA5E585B6E5AE83E696B9E5BC8FE9878DE8AEBEE6A091E79A84E6A0B9E88A82E782B9E4B8BA207069766F742E20E4B880E7A78DE697A0E99C80E59CA8E6A0B9E88A82E782B9E79A84E69F90E4B880E5AD90E88A82E782B9E4B8BAE8BDACE8BDB4E697B6E8BF9BE8A18CE789B9E6AE8AE5A484E79086E79A84E69BBFE4BBA3E696B9E6A188E698AFE8AEA9E6A091E79A84E5AE9EE99985E79A84E6A0B9E88A82E782B9E698AFE4B880E4B8AAE789B9E6AE8AE585A5E58FA3E88A82E782B92C20E8808CE980BBE8BE91E4B88AE79A84E6A0B9E88A82E782B9E4BD9CE4B8BAE8AFA5E585A5E58FA3E88A82E782B9E79A84E69F90E4B8AAE5AD90E88A82E782B9E5AD98E59CA82C20E5B9B6E981BFE5858DE4BBBBE4BD95E4BBA5E980BBE8BE91E6A0B9E88A82E782B9E4B8BAE8BDACE8BDB4E79A84E6978BE8BDAC2E, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1191', 0xE5AE9EE78EB0EFBC9A0AE5A682E69E9CE4BB8EE88A82E782B9E587BAE58F912C20E58FAAE883BDE8AEBFE997AEE585B6E4B8A4E4B8AAE5AD90E88A82E782B92C20E8808CE697A0E6B395E8AEBFE997AEE585B6E788B6E88A82E782B92C20E982A3E4B988E4B88AE8BFB0E696B9E6B395E4B99FE4B88DE98082E794A82E20E8BF99E7A78DE68385E586B5E4B88B2C20726F6F7420E88A82E782B9E4BAA6E698AFE6978BE8BDACE79A84E5BF85E8A681E58F82E695B0E4B98BE4B8802E20E6978BE8BDACE8BF87E7A88BE79A84E4BCAAE4BBA3E7A081E8A1A8E7A4BAE5A682E4B88B, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1192', 0xE5AE9EE78EB0EFBC9A0A66756E6320726F746174655F726967687428726F6F742C20706172656E74293A0A202061737365727420726F6F742E6C656674203D3D20706172656E74207C7C20726F6F742E7269676874203D3D20706172656E740A20206C6574207069766F74203D20706172656E742E6C6566740A20202F2F2052300A2020706172656E742E6C656674203D207069766F742E72696768740A20202F2F2052310A2020696620706172656E74203D3D20726F6F742E6C6566743A0A20202020726F6F742E6C656674203D207069766F740A2020656C73653A0A20202020726F6F742E7269676874203D207069766F740A20207069766F742E7269676874203D20706172656E74, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1193', 0xhttps://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1194', 0xE6978BE8BDACE8B79DE7A6BBEFBC9A0AE4B8A4E6A3B5E4BA8CE58F89E6A091E4B98BE997B4E79A84E6978BE8BDACE8B79DE7A6BBE68C87E79A84E698AF2C20E585B6E4B8ADE4B880E6A3B5E6A091E9809AE8BF87E5B0BDE58FAFE883BDE5B091E79A84E6A091E6978BE8BDACE58F98E68DA2E588B0E58FA6E4B880E6A3B5E6A0912C20E6ADA4E8BF87E7A88BE4B8ADE68980E4BDBFE794A8E79A84E6978BE8BDACE6ACA1E695B02E20E5AFB9E4BA8EE4B880E4B8AAE58C85E590ABE79BB8E5908CE4B8AAE695B0E88A82E782B9E79A84E4BA8CE58F89E6A091E99B86E590882C20E5AE83E4BBACE4B8A4E4B8A4E4B98BE997B4E79A84E8B79DE7A6BBE58FAFE4BBA5E69E84E68890E4B880E4B8AAE5BAA6E9878FE7A9BAE997B42E20E698AFE590A6E5AD98E59CA8E4B880E4B8AAE7AE97E6B3952C20E883BDE59CA8E5A49AE9A1B9E5BC8FE697B6E997B4E58685E8AEA1E7AE97E4B8A4E4B8AAE4BA8CE58F89E6A091E4B98BE997B4E79A84E6978BE8BDACE8B79DE7A6BB2C20E79BAEE5898DE8BF98E698AFE4B880E4B8AAE69CAAE586B3E997AEE9A2982E, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1195', 0xE6978BE8BDACE8B79DE7A6BBEFBC9A0A436F726D656E2C204C6569736572736F6E2C205269766573742C20537465696E2E20496E74726F64756374696F6E20746F20416C676F726974686D732E204D6173736163687573657474733A20546865204D49542050726573732C20323030322E2070703237332D37372E204953424E20302D30372D3031333135312D31, 'https://zh.wikipedia.org/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC', '2016-05-21 18:33:00', '2016-12-20 09:48:55', '69', '树旋转', '数据结构');
INSERT INTO `spider_text` VALUES ('1196', 0xE69198E8A681EFBC9A0AE993BEE8A1A8EFBC884C696E6B6564206C697374EFBC89E698AFE4B880E7A78DE5B8B8E8A781E79A84E59FBAE7A180E695B0E68DAEE7BB93E69E84EFBC8CE698AFE4B880E7A78DE7BABFE680A7E8A1A8EFBC8CE4BD86E698AFE5B9B6E4B88DE4BC9AE68C89E7BABFE680A7E79A84E9A1BAE5BA8FE5AD98E582A8E695B0E68DAEEFBC8CE8808CE698AFE59CA8E6AF8FE4B880E4B8AAE88A82E782B9E9878CE5AD98E588B0E4B88BE4B880E4B8AAE88A82E782B9E79A84E68C87E9928828506F696E74657229E38082E794B1E4BA8EE4B88DE5BF85E9A1BBE68C89E9A1BAE5BA8FE5AD98E582A8EFBC8CE993BEE8A1A8E59CA8E68F92E585A5E79A84E697B6E58099E58FAFE4BBA5E8BEBEE588B04F283129E79A84E5A48DE69D82E5BAA6EFBC8CE6AF94E58FA6E4B880E7A78DE7BABFE680A7E8A1A8E9A1BAE5BA8FE8A1A8E5BFABE5BE97E5A49AEFBC8CE4BD86E698AFE69FA5E689BEE4B880E4B8AAE88A82E782B9E68896E88085E8AEBFE997AEE789B9E5AE9AE7BC96E58FB7E79A84E88A82E782B9E58899E99C80E8A6814F286E29E79A84E697B6E997B4EFBC8CE8808CE9A1BAE5BA8FE8A1A8E79BB8E5BA94E79A84E697B6E997B4E5A48DE69D82E5BAA6E58886E588ABE698AF4F286C6F676E29E5928C4F283129E38082, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:05', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1197', 0xE69198E8A681EFBC9A0AE4BDBFE794A8E993BEE8A1A8E7BB93E69E84E58FAFE4BBA5E5858BE69C8DE695B0E7BB84E993BEE8A1A8E99C80E8A681E9A284E58588E79FA5E98193E695B0E68DAEE5A4A7E5B08FE79A84E7BCBAE782B9EFBC8CE993BEE8A1A8E7BB93E69E84E58FAFE4BBA5E58585E58886E588A9E794A8E8AEA1E7AE97E69CBAE58685E5AD98E7A9BAE997B4EFBC8CE5AE9EE78EB0E781B5E6B4BBE79A84E58685E5AD98E58AA8E68081E7AEA1E79086E38082E4BD86E698AFE993BEE8A1A8E5A4B1E58EBBE4BA86E695B0E7BB84E99A8FE69CBAE8AFBBE58F96E79A84E4BC98E782B9EFBC8CE5908CE697B6E993BEE8A1A8E794B1E4BA8EE5A29EE58AA0E4BA86E7BB93E782B9E79A84E68C87E99288E59F9FEFBC8CE7A9BAE997B4E5BC80E99480E6AF94E8BE83E5A4A7E38082, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:05', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1198', 0xhttps://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:05', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1199', 0xE69198E8A681EFBC9A0AE993BEE8A1A8E58FAFE4BBA5E59CA8E5A49AE7A78DE7BC96E7A88BE8AFADE8A880E4B8ADE5AE9EE78EB0E38082E5838F4C697370E5928C536368656D65E8BF99E6A0B7E79A84E8AFADE8A880E79A84E58685E5BBBAE695B0E68DAEE7B1BBE59E8BE4B8ADE5B0B1E58C85E590ABE4BA86E993BEE8A1A8E79A84E8AEBFE997AEE5928CE6938DE4BD9CE38082E7A88BE5BA8FE8AFADE8A880E68896E99DA2E59091E5AFB9E8B1A1E8AFADE8A880EFBC8CE5A682432F432B2BE5928C4A617661E4BE9DE99DA0E69893E58F98E5B7A5E585B7E69DA5E7949FE68890E993BEE8A1A8E38082, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:05', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1200', 0xhttps://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:05', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1201', 0xE993BEE8A1A8E79A84E5BA94E794A8EFBC9A0AE993BEE8A1A8E794A8E69DA5E69E84E5BBBAE8AEB8E5A49AE585B6E5AE83E695B0E68DAEE7BB93E69E84EFBC8CE5A682E5A086E6A088EFBC8CE9989FE58897E5928CE4BB96E4BBACE79A84E6B4BEE7949FE38082, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:05', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1202', 0xE993BEE8A1A8E79A84E5BA94E794A8EFBC9A0AE88A82E782B9E79A84E695B0E68DAEE59F9FE4B99FE58FAFE4BBA5E68890E4B8BAE58FA6E4B880E4B8AAE993BEE8A1A8E38082E9809AE8BF87E8BF99E7A78DE6898BE6AEB5EFBC8CE68891E4BBACE58FAFE4BBA5E794A8E58897E8A1A8E69DA5E69E84E5BBBAE8AEB8E5A49AE993BEE680A7E695B0E68DAEE7BB93E69E84EFBC9BE8BF99E4B8AAE5AE9EE4BE8BE4BAA7E7949FE4BA8E4C697370E7BC96E7A88BE8AFADE8A880EFBC8CE59CA84C697370E4B8ADE993BEE8A1A8E698AFE5889DE7BAA7E695B0E68DAEE7BB93E69E84EFBC8CE5B9B6E4B894E78EB0E59CA8E68890E4B8BAE4BA86E5B8B8E8A781E79A84E59FBAE7A180E7BC96E7A88BE6A8A1E5BC8FE3808220E69C89E697B6E58099EFBC8CE993BEE8A1A8E794A8E69DA5E7949FE68890E88194E59088E695B0E7BB84EFBC8CE59CA8E8BF99E7A78DE68385E586B5E4B88BE68891E4BBACE7A7B0E4B98BE4B8BAE88194E59088E695B0E58897E38082E8BF99E7A78DE68385E586B5E4B88BE794A8E993BEE8A1A8E4BC9AE4BC98E4BA8EE585B6E5AE83E695B0E68DAEE7BB93E69E84EFBC8CE5A682E887AAE5B9B3E5AFB9E58886E69FA5E689BEE6A091EFBC8873656C662D62616C616E63696E672062696E61727920736561726368207472656573EFBC89E7949AE887B3E698AFE4B880E4BA9BE5B08FE79A84E695B0E68DAEE99B86E59088E38082E4B88DE7AEA1E6808EE6A0B7EFBC8CE4B880E4BA9BE697B6E58099E4B880E4B8AAE993BEE8A1A8E59CA8E8BF99E6A0B7E4B880E4B8AAE6A091E4B8ADE5889BE5BBBAE4B880E4B8AAE88A82E782B9E5AD90E99B86EFBC8CE5B9B6E4B894E4BBA5E6ADA4E69DA5E69BB4E69C89E69588E78E87E59CB0E8BDACE68DA2E8BF99E4B8AAE99B86E59088E38082, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:05', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1203', 0x43E5AE8FE5AE9EE4BE8BEFBC9A0AE4BBA5E4B88BE4BBA3E7A081E69198E887AA4C696E7578E58685E6A0B8322E362E32312E35E6BA90E7A08128E983A8E5888629EFBC8CE5B195E7A4BAE4BA86E993BEE8A1A8E79A84E58FA6E4B880E7A78DE5AE9EE78EB0E6809DE8B7AFEFBC8CE69CAAE98787E794A8414E53492043E6A087E58786EFBC8CE98787E794A8474E552043E6A087E58786EFBC8CE981B5E4BB8E47504CE78988E69D83E8AEB8E58FAFE38082, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1204', 0x43E5AE8FE5AE9EE4BE8BEFBC9A0A737472756374206C6973745F68656164207B0A2020202020202020737472756374206C6973745F68656164202A6E6578742C202A707265763B0A7D3B0A0A23646566696E65204C4953545F484541445F494E4954286E616D6529207B2026286E616D65292C2026286E616D6529207D0A0A23646566696E65204C4953545F48454144286E616D6529205C0A2020202020202020737472756374206C6973745F68656164206E616D65203D204C4953545F484541445F494E4954286E616D65290A0A73746174696320696E6C696E6520766F696420494E49545F4C4953545F4845414428737472756374206C6973745F68656164202A6C697374290A7B0A20202020202020206C6973742D3E6E657874203D206C6973743B0A20202020202020206C6973742D3E70726576203D206C6973743B0A7D0A0A73746174696320696E6C696E6520766F6964205F5F6C6973745F61646428737472756374206C6973745F68656164202A6E65772C0A202020202020202020202020202020202020202020202020202020202020737472756374206C6973745F68656164202A707265762C0A202020202020202020202020202020202020202020202020202020202020737472756374206C6973745F68656164202A6E657874290A7B0A20202020202020206E6578742D3E70726576203D206E65773B0A20202020202020206E65772D3E6E657874203D206E6578743B0A20202020202020206E65772D3E70726576203D20707265763B0A2020202020202020707265762D3E6E657874203D206E65773B0A7D0A0A73746174696320696E6C696E6520766F6964206C6973745F61646428737472756374206C6973745F68656164202A6E65772C20737472756374206C6973745F68656164202A68656164290A7B0A20202020202020205F5F6C6973745F616464286E65772C20686561642C20686561642D3E6E657874293B0A7D0A0A73746174696320696E6C696E6520766F6964205F5F6C6973745F64656C28737472756374206C6973745F68656164202A20707265762C20737472756374206C6973745F68656164202A206E657874290A7B0A20202020202020206E6578742D3E70726576203D20707265763B0A2020202020202020707265762D3E6E657874203D206E6578743B0A7D0A0A0A73746174696320696E6C696E6520766F6964206C6973745F64656C28737472756374206C6973745F68656164202A656E747279290A7B0A20202020202020205F5F6C6973745F64656C28656E7472792D3E707265762C20656E7472792D3E6E657874293B0A2020202020202020656E7472792D3E6E657874203D204E554C4C3B0A2020202020202020656E7472792D3E70726576203D204E554C4C3B0A7D0A0A23646566696E65205F5F6C6973745F666F725F6561636828706F732C206865616429205C0A2020202020202020666F722028706F73203D202868656164292D3E6E6578743B20706F7320213D202868656164293B20706F73203D20706F732D3E6E657874290A0A23646566696E65206C6973745F666F725F656163685F656E74727928706F732C20686561642C206D656D6265722920202020202020202020202020202020202020202020202020205C0A2020202020202020666F722028706F73203D206C6973745F656E747279282868656164292D3E6E6578742C20747970656F66282A706F73292C206D656D626572293B2020202020205C0A20202020202020202020202020707265666574636828706F732D3E6D656D6265722E6E657874292C2026706F732D3E6D656D62657220213D202868656164293B20202020202020205C0A20202020202020202020202020706F73203D206C6973745F656E74727928706F732D3E6D656D6265722E6E6578742C20747970656F66282A706F73292C206D656D6265722929, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1205', 0xE5B8B8E8A781E794A8E98094EFBC9A0AE5B8B8E794A8E4BA8EE7BB84E7BB87E588A0E999A4E38081E6A380E7B4A2E8BE83E5B091EFBC8CE8808CE6B7BBE58AA0E38081E9818DE58E86E8BE83E5A49AE79A84E695B0E68DAEE3808220E5A682E69E9CE4B88EE4B88AE8BFB0E68385E5BDA2E79BB8E58F8DEFBC8CE5BA94E98787E794A8E585B6E4BB96E695B0E68DAEE7BB93E69E84E68896E88085E4B88EE585B6E4BB96E695B0E68DAEE7BB93E69E84E7BB84E59088E4BDBFE794A8E38082, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1206', 0xE5B8B8E8A781E794A8E98094EFBC9A0AE7BABFE680A7E8A1A820E9A1BAE5BA8FE8A1A820E59FBAE69CACE695B0E68DAEE7BB93E69E8420E6A0912028E695B0E68DAEE7BB93E69E8429, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1208', 0xE58D95E59091E993BEE8A1A8EFBC9A0AE993BEE8A1A8E4B8ADE69C80E7AE80E58D95E79A84E4B880E7A78DE698AFE58D95E59091E993BEE8A1A8EFBC8CE5AE83E58C85E590ABE4B8A4E4B8AAE59F9FEFBC8CE4B880E4B8AAE4BFA1E681AFE59F9FE5928CE4B880E4B8AAE68C87E99288E59F9FE38082E8BF99E4B8AAE993BEE68EA5E68C87E59091E58897E8A1A8E4B8ADE79A84E4B88BE4B880E4B8AAE88A82E782B9EFBC8CE8808CE69C80E5908EE4B880E4B8AAE88A82E782B9E58899E68C87E59091E4B880E4B8AAE7A9BAE580BCE38082, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1209', 0xE58D95E59091E993BEE8A1A8EFBC9A0AE4B880E4B8AAE58D95E59091E993BEE8A1A8E58C85E590ABE4B8A4E4B8AAE580BC3A20E5BD93E5898DE88A82E782B9E79A84E580BCE5928CE4B880E4B8AAE68C87E59091E4B88BE4B880E4B8AAE88A82E782B9E79A84E993BEE68EA5, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1210', 0xE58D95E59091E993BEE8A1A8EFBC9A0AE4B880E4B8AAE58D95E59091E993BEE8A1A8E79A84E88A82E782B9E8A2ABE58886E68890E4B8A4E4B8AAE983A8E58886E38082E7ACACE4B880E4B8AAE983A8E58886E4BF9DE5AD98E68896E88085E698BEE7A4BAE585B3E4BA8EE88A82E782B9E79A84E4BFA1E681AFEFBC8CE7ACACE4BA8CE4B8AAE983A8E58886E5AD98E582A8E4B88BE4B880E4B8AAE88A82E782B9E79A84E59CB0E59D80E38082E58D95E59091E993BEE8A1A8E58FAAE58FAFE59091E4B880E4B8AAE696B9E59091E9818DE58E86E38082, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1211', 0xhttps://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1212', 0xhttps://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1213', 0xhttps://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1214', 0xE58F8CE59091E993BEE8A1A8EFBC9A0AE4B880E4B8AAE58F8CE59091E993BEE8A1A8E69C89E4B889E4B8AAE695B4E695B0E580BC3A20E695B0E580BC2C20E59091E5908EE79A84E88A82E782B9E993BEE68EA52C20E59091E5898DE79A84E88A82E782B9E993BEE68EA5, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1215', 0xE58F8CE59091E993BEE8A1A8EFBC9A0AE59CA8E4B880E4BA9BE4BD8EE7BAA7E8AFADE8A880E4B8AD2C20584F522D6C696E6B696E6720E68F90E4BE9BE4B880E7A78DE59CA8E58F8CE59091E993BEE8A1A8E4B8ADE9809AE8BF87E794A8E4B880E4B8AAE8AF8DE69DA5E8A1A8E7A4BAE4B8A4E4B8AAE993BEE68EA5EFBC88E5898DE5908EEFBC89EFBC8CE68891E4BBACE9809AE5B8B8E4B88DE68F90E580A1E8BF99E7A78DE5819AE6B395E38082, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1216', 0xhttps://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1217', 0xhttps://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1218', 0xE5BEAAE78EAFE993BEE8A1A8EFBC9A0AE59CA8E4B880E4B8AA20E5BEAAE78EAFE993BEE8A1A8E4B8AD2C20E9A696E88A82E782B9E5928CE69CABE88A82E782B9E8A2ABE8BF9EE68EA5E59CA8E4B880E8B5B7E38082E8BF99E7A78DE696B9E5BC8FE59CA8E58D95E59091E5928CE58F8CE59091E993BEE8A1A8E4B8ADE79A86E58FAFE5AE9EE78EB0E38082E8A681E8BDACE68DA2E4B880E4B8AAE5BEAAE78EAFE993BEE8A1A8EFBC8CE4BDA0E5BC80E5A78BE4BA8EE4BBBBE6848FE4B880E4B8AAE88A82E782B9E784B6E5908EE6B2BFE79D80E58897E8A1A8E79A84E4BBBBE4B880E696B9E59091E79BB4E588B0E8BF94E59B9EE5BC80E5A78BE79A84E88A82E782B9E38082E5868DE69DA5E79C8BE58FA6E4B880E7A78DE696B9E6B395EFBC8CE5BEAAE78EAFE993BEE8A1A8E58FAFE4BBA5E8A2ABE8A786E4B8BAE2809CE697A0E5A4B4E697A0E5B0BEE2809DE38082E8BF99E7A78DE58897E8A1A8E5BE88E588A9E4BA8EE88A82E7BAA6E695B0E68DAEE5AD98E582A8E7BC93E5AD98EFBC8C20E58187E5AE9AE4BDA0E59CA8E4B880E4B8AAE58897E8A1A8E4B8ADE69C89E4B880E4B8AAE5AFB9E8B1A1E5B9B6E4B894E5B88CE69C9BE68980E69C89E585B6E4BB96E5AFB9E8B1A1E8BFADE4BBA3E59CA8E4B880E4B8AAE99D9EE789B9E6AE8AE79A84E68E92E58897E4B88BE38082, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1219', 0xE5BEAAE78EAFE993BEE8A1A8EFBC9A0AE68C87E59091E695B4E4B8AAE58897E8A1A8E79A84E68C87E99288E58FAFE4BBA5E8A2ABE7A7B0E4BD9CE8AEBFE997AEE68C87E99288E38082, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1220', 0xhttps://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1221', 0xhttps://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1222', 0xE59D97E78AB6E993BEE8A1A8EFBC9A0AE59D97E78AB6E993BEE8A1A8E69CACE8BAABE698AFE4B880E4B8AAE993BEE8A1A8EFBC8CE4BD86E698AFE993BEE8A1A8E582A8E5AD98E79A84E5B9B6E4B88DE698AFE4B880E888ACE79A84E695B0E68DAEEFBC8CE8808CE698AFE794B1E8BF99E4BA9BE695B0E68DAEE7BB84E68890E79A84E9A1BAE5BA8FE8A1A8E38082E6AF8FE4B880E4B8AAE59D97E78AB6E993BEE8A1A8E79A84E88A82E782B9EFBC8CE4B99FE5B0B1E698AFE9A1BAE5BA8FE8A1A8EFBC8CE58FAFE4BBA5E8A2ABE58FABE5819AE4B880E4B8AAE59D97E38082, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1223', 0xE59D97E78AB6E993BEE8A1A8EFBC9A0AE59D97E78AB6E993BEE8A1A8E9809AE8BF87E4BDBFE794A8E58FAFE58F98E79A84E9A1BAE5BA8FE8A1A8E79A84E995BFE5BAA6E5928CE789B9E6AE8AE79A84E68F92E585A5E38081E588A0E999A4E696B9E5BC8FEFBC8CE58FAFE4BBA5E59CA8E8BEBEE588B0204F2028206E2029207B5C646973706C61797374796C65204F287B5C73717274207B6E7D7D297D20E79A84E5A48DE69D82E5BAA6E38082E59D97E78AB6E993BEE8A1A8E58FA6E4B880E4B8AAE789B9E782B9E698AFE79BB8E5AFB9E4BA8EE699AEE9809AE993BEE8A1A8E69DA5E8AFB4E88A82E79C81E58685E5AD98EFBC8CE59BA0E4B8BAE4B88DE794A8E4BF9DE5AD98E68C87E59091E6AF8FE4B880E4B8AAE695B0E68DAEE88A82E782B9E79A84E68C87E99288E38082, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1224', 0xE585B6E5AE83E689A9E5B195EFBC9A0AE6A0B9E68DAEE68385E586B5EFBC8CE4B99FE58FAFE4BBA5E887AAE5B7B1E8AEBEE8AEA1E993BEE8A1A8E79A84E585B6E5AE83E689A9E5B195E38082E4BD86E698AFE4B880E888ACE4B88DE4BC9AE59CA8E8BEB9E4B88AE99984E58AA0E695B0E68DAEEFBC8CE59BA0E4B8BAE993BEE8A1A8E79A84E782B9E5928CE8BEB9E59FBAE69CACE4B88AE698AFE4B880E4B880E5AFB9E5BA94E79A84EFBC88E999A4E4BA86E7ACACE4B880E4B8AAE68896E88085E69C80E5908EE4B880E4B8AAE88A82E782B9EFBC8CE4BD86E698AFE4B99FE4B88DE4BC9AE4BAA7E7949FE789B9E6AE8AE68385E586B5EFBC89E38082E4B88DE8BF87E69C89E4B880E4B8AAE789B9E4BE8BE698AFE5A682E69E9CE993BEE8A1A8E694AFE68C81E59CA8E993BEE8A1A8E79A84E4B880E6AEB5E4B8ADE68A8AE5898DE5928CE5908EE68C87E99288E58F8DE59091EFBC8CE58F8DE59091E6A087E8AEB0E58AA0E59CA8E8BEB9E4B88AE58FAFE883BDE4BC9AE69BB4E696B9E4BEBFE38082, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1225', 0xhttps://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1226', 0xE5AD98E582A8E7BB93E69E84EFBC9A0AE993BEE8A1A8E4B8ADE79A84E88A82E782B9E4B88DE99C80E8A681E4BBA5E789B9E5AE9AE79A84E696B9E5BC8FE5AD98E582A8EFBC8CE4BD86E698AFE99B86E4B8ADE5AD98E582A8E4B99FE698AFE58FAFE4BBA5E79A84EFBC8CE4B8BBE8A681E58886E4B88BE99DA2E8BF99E587A0E7A78DE585B7E4BD93E79A84E5AD98E582A8E696B9E6B395EFBC9A, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1227', 0xhttps://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1228', 0xhttps://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1229', 0xE585B6E4BB96E695B0E68DAEE7BB93E69E84EFBC9A0AE7BABFE680A7E8A1A820E9A1BAE5BA8FE8A1A820E59FBAE69CACE695B0E68DAEE7BB93E69E8420E6A0912028E695B0E68DAEE7BB93E69E8429, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:06', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1231', 0xE7B1BBE59E8BE7A1AEE5AE9AEFBC9A0A737472756374206E6F64655F7374207B0A2020202020202020766F6964202A64617461703B0A2020202020202020737472756374206E6F64655F7374202A6E6578742C202A707265763B0A7D3B0A0A737472756374206C6C6973745F7374207B0A2020202020202020737472756374206E6F64655F737420686561643B0A2020202020202020696E7420656C6D73697A653B0A2020202020202020696E7420656C6D6E723B0A7D3B, 'https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1232', 0xhttps://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1233', 0xhttps://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1234', 0xhttps://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1235', 0xhttps://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8', '2015-07-24 11:09:00', '2016-12-20 09:49:07', '70', '链表', '数据结构');
INSERT INTO `spider_text` VALUES ('1236', 0xE69198E8A681EFBC9A0AE4BA8CE58F89E69FA5E689BEE6A091EFBC88E88BB1E8AFADEFBC9A42696E617279205365617263682054726565EFBC89EFBC8CE4B99FE7A7B0E4BA8CE58F89E6909CE7B4A2E6A091E38081E69C89E5BA8FE4BA8CE58F89E6A091EFBC88E88BB1E8AFADEFBC9A6F7264657265642062696E6172792074726565EFBC89EFBC8CE68E92E5BA8FE4BA8CE58F89E6A091EFBC88E88BB1E8AFADEFBC9A736F727465642062696E6172792074726565EFBC89EFBC8CE698AFE68C87E4B880E6A3B5E7A9BAE6A091E68896E88085E585B7E69C89E4B88BE58897E680A7E8B4A8E79A84E4BA8CE58F89E6A091EFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:18', '71', '二元搜寻树', '数据结构');
INSERT INTO `spider_text` VALUES ('1237', 0xE69198E8A681EFBC9A0AE4BBBBE6848FE88A82E782B9E79A84E5B7A6E5AD90E6A091E4B88DE7A9BAEFBC8CE58899E5B7A6E5AD90E6A091E4B88AE68980E69C89E7BB93E782B9E79A84E580BCE59D87E5B08FE4BA8EE5AE83E79A84E6A0B9E7BB93E782B9E79A84E580BCEFBC9B20E4BBBBE6848FE88A82E782B9E79A84E58FB3E5AD90E6A091E4B88DE7A9BAEFBC8CE58899E58FB3E5AD90E6A091E4B88AE68980E69C89E7BB93E782B9E79A84E580BCE59D87E5A4A7E4BA8EE5AE83E79A84E6A0B9E7BB93E782B9E79A84E580BCEFBC9B20E4BBBBE6848FE88A82E782B9E79A84E5B7A6E38081E58FB3E5AD90E6A091E4B99FE58886E588ABE4B8BAE4BA8CE58F89E69FA5E689BEE6A091EFBC9B20E6B2A1E69C89E994AEE580BCE79BB8E7AD89E79A84E88A82E782B9E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:18', '71', '二元搜寻树', '数据结构');
INSERT INTO `spider_text` VALUES ('1238', 0xE69198E8A681EFBC9A0AE4BA8CE58F89E69FA5E689BEE6A091E79BB8E6AF94E4BA8EE585B6E4BB96E695B0E68DAEE7BB93E69E84E79A84E4BC98E58ABFE59CA8E4BA8EE69FA5E689BEE38081E68F92E585A5E79A84E697B6E997B4E5A48DE69D82E5BAA6E8BE83E4BD8EE38082E4B8BA4F286C6F67206E29E38082E4BA8CE58F89E69FA5E689BEE6A091E698AFE59FBAE7A180E680A7E695B0E68DAEE7BB93E69E84EFBC8CE794A8E4BA8EE69E84E5BBBAE69BB4E4B8BAE68ABDE8B1A1E79A84E695B0E68DAEE7BB93E69E84EFBC8CE5A682E99B86E59088E380816D756C7469736574E38081E585B3E88194E695B0E7BB84E7AD89E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:18', '71', '二元搜寻树', '数据结构');
INSERT INTO `spider_text` VALUES ('1239', 0xE69198E8A681EFBC9A0AE4BA8CE58F89E69FA5E689BEE6A091E79A84E69FA5E689BEE8BF87E7A88BE5928CE6ACA1E4BC98E4BA8CE58F89E6A091E7B1BBE4BCBCEFBC8CE9809AE5B8B8E98787E58F96E4BA8CE58F89E993BEE8A1A8E4BD9CE4B8BAE4BA8CE58F89E69FA5E689BEE6A091E79A84E5AD98E582A8E7BB93E69E84E38082E4B8ADE5BA8FE9818DE58E86E4BA8CE58F89E69FA5E689BEE6A091E58FAFE5BE97E588B0E4B880E4B8AAE585B3E994AEE5AD97E79A84E69C89E5BA8FE5BA8FE58897EFBC8CE4B880E4B8AAE697A0E5BA8FE5BA8FE58897E58FAFE4BBA5E9809AE8BF87E69E84E980A0E4B880E6A3B5E4BA8CE58F89E69FA5E689BEE6A091E58F98E68890E4B880E4B8AAE69C89E5BA8FE5BA8FE58897EFBC8CE69E84E980A0E6A091E79A84E8BF87E7A88BE58DB3E4B8BAE5AFB9E697A0E5BA8FE5BA8FE58897E8BF9BE8A18CE69FA5E689BEE79A84E8BF87E7A88BE38082E6AF8FE6ACA1E68F92E585A5E79A84E696B0E79A84E7BB93E782B9E983BDE698AFE4BA8CE58F89E69FA5E689BEE6A091E4B88AE696B0E79A84E58FB6E5AD90E7BB93E782B9EFBC8CE59CA8E8BF9BE8A18CE68F92E585A5E6938DE4BD9CE697B6EFBC8CE4B88DE5BF85E7A7BBE58AA8E585B6E5AE83E7BB93E782B9EFBC8CE58FAAE99C80E694B9E58AA8E69F90E4B8AAE7BB93E782B9E79A84E68C87E99288EFBC8CE794B1E7A9BAE58F98E4B8BAE99D9EE7A9BAE58DB3E58FAFE38082E6909CE7B4A2E38081E68F92E585A5E38081E588A0E999A4E79A84E5A48DE69D82E5BAA6E7AD89E4BA8EE6A091E9AB98EFBC8CE69C9FE69C9B204F2028206C6F6720E281A1206E2029207B5C646973706C61797374796C65204F285C6C6F67206E297D20EFBC8CE69C80E59D8F204F2028206E2029207B5C646973706C61797374796C65204F286E297D20EFBC88E695B0E58897E69C89E5BA8FEFBC8CE6A091E98080E58C96E68890E7BABFE680A7E8A1A8EFBC89E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:18', '71', '二元搜寻树', '数据结构');
INSERT INTO `spider_text` VALUES ('1240', 0xE69198E8A681EFBC9A0AE899BDE784B6E4BA8CE58F89E69FA5E689BEE6A091E79A84E69C80E59D8FE69588E78E87E698AF4F286E292CE4BD86E5AE83E694AFE68C81E58AA8E68081E69FA5E8AFA2EFBC8CE4B894E69C89E5BE88E5A49AE694B9E8BF9BE78988E79A84E4BA8CE58F89E69FA5E689BEE6A091E58FAFE4BBA5E4BDBFE6A091E9AB98E4B8BA204F2028206C6F6720E281A1206E2029207B5C646973706C61797374796C65204F285C6C6F67206E297D202CE5A6825342542C41564CE6A091EFBC8CE7BAA2E9BB91E6A091E7AD89E38082E69585E4B88DE5A4B1E4B8BAE4B880E7A78DE5A5BDE79A84E58AA8E68081E69FA5E689BEE696B9E6B395E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:18', '71', '二元搜寻树', '数据结构');
INSERT INTO `spider_text` VALUES ('1241', 0xE4BA8CE58F89E6909CE7B4A2E6A091E79A84E69FA5E689BEE7AE97E6B395EFBC9A0AE88BA562E698AFE7A9BAE6A091EFBC8CE58899E6909CE7B4A2E5A4B1E8B4A5EFBC8CE590A6E58899EFBC9A20E88BA578E7AD89E4BA8E62E79A84E6A0B9E88A82E782B9E79A84E695B0E68DAEE59F9FE4B98BE580BCEFBC8CE58899E69FA5E689BEE68890E58A9FEFBC9BE590A6E58899EFBC9A20E88BA578E5B08FE4BA8E62E79A84E6A0B9E88A82E782B9E79A84E695B0E68DAEE59F9FE4B98BE580BCEFBC8CE58899E6909CE7B4A2E5B7A6E5AD90E6A091EFBC9BE590A6E58899EFBC9A20E69FA5E689BEE58FB3E5AD90E6A091E38082, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:18', '71', '二元搜寻树', '数据结构');
INSERT INTO `spider_text` VALUES ('1242', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:18', '71', '二元搜寻树', '数据结构');
INSERT INTO `spider_text` VALUES ('1243', 0xE59CA8E4BA8CE58F89E6909CE7B4A2E6A091E68F92E585A5E88A82E782B9E79A84E7AE97E6B395EFBC9A0AE59091E4B880E4B8AAE4BA8CE58F89E6909CE7B4A2E6A09162E4B8ADE68F92E585A5E4B880E4B8AAE88A82E782B973E79A84E7AE97E6B395EFBC8CE8BF87E7A88BE4B8BAEFBC9A, 'https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:18', '71', '二元搜寻树', '数据结构');
INSERT INTO `spider_text` VALUES ('1244', 0xhttps://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%AF%BB%E6%A0%91', '2016-12-19 13:54:00', '2016-12-20 09:49:18', '71', '二元搜寻树', '数据结构');
INSERT INTO `spider_text` VALUES ('1328', 0xE4BCAAE4BBA3E7A081EFBC9A0AE59CA8E8BF99E4B8AAE69585E99A9CE5BCB1E58C96E79A84616C7068612D62657461E4B8ADEFBC8CE5BD9376E8B685E587BAE8B083E794A8E58F82E695B0CEB1E5928CCEB2E69E84E68890E79A84E99B86E59088E697B6EFBC8876203C20CEB1E6889676203E20CEB2EFBC89EFBC8C616C70686162657461E587BDE695B0E8BF94E59B9EE580BC76E38082E8808CE4B88EE6ADA4E79BB8E5AFB9EFBC8CE69585E99A9CE5BCBAE58C96E79A84616C7068612D62657461E99990E588B6E587BDE695B0E8BF94E59B9EE59CA8CEB1E4B88ECEB2E58C85E68BACE88C83E59BB4E4B8ADE79A84E580BCE38082, 'https://zh.wikipedia.org/wiki/Alpha-beta%E5%89%AA%E6%9E%9D', '2016-07-12 08:44:00', '2016-12-20 09:50:24', '77', 'Alpha-beta剪枝', '数据结构');
INSERT INTO `spider_text` VALUES ('1329', 0xhttps://zh.wikipedia.org/wiki/Alpha-beta%E5%89%AA%E6%9E%9D', '2016-07-12 08:44:00', '2016-12-20 09:50:24', '77', 'Alpha-beta剪枝', '数据结构');
INSERT INTO `spider_text` VALUES ('1330', 0xhttps://zh.wikipedia.org/wiki/Alpha-beta%E5%89%AA%E6%9E%9D', '2016-07-12 08:44:00', '2016-12-20 09:50:24', '77', 'Alpha-beta剪枝', '数据结构');
INSERT INTO `spider_text` VALUES ('1331', 0xhttps://zh.wikipedia.org/wiki/Alpha-beta%E5%89%AA%E6%9E%9D', '2016-07-12 08:44:00', '2016-12-20 09:50:24', '77', 'Alpha-beta剪枝', '数据结构');
INSERT INTO `spider_text` VALUES ('1333', 0xE69198E8A681EFBC9A0AE69CACE69DA1E79BAEE5B7B2E58897E587BAE58F82E88083E69687E78CAEEFBC8CE4BD86E59BA0E4B8BAE6B2A1E69C89E69687E58685E5BC95E6B3A8E8808CE4BDBFE69DA5E6BA90E4BB8DE784B6E4B88DE6988EE38082EFBC8832303134E5B9B438E69C883138E697A5EFBC8920E8AFB7E9809AE8BF87E58AA0E585A5E59088E98082E79A84E8A18CE58685E5BC95E794A8E69DA5E694B9E59684E8BF99E7AF87E69DA1E79BAEE38082, 'https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E7%B1%BB%E5%9E%8B', '2014-08-18 12:30:00', '2016-12-20 09:50:32', '78', '递归类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1334', 0xE69198E8A681EFBC9A0AE69CACE69DA1E79BAEE99C80E8A681E8A1A5E58585E69BB4E5A49AE69DA5E6BA90E38082EFBC8832303134E5B9B438E69C883138E697A5EFBC8920E8AFB7E58D8FE58AA9E6B7BBE58AA0E5A49AE696B9E99DA2E58FAFE99DA0E69DA5E6BA90E4BBA5E694B9E59684E8BF99E7AF87E69DA1E79BAEEFBC8CE697A0E6B395E69FA5E8AF81E79A84E58685E5AEB9E58FAFE883BDE4BC9AE59BA0E4B8BAE5BC82E8AEAEE68F90E587BAE8808CE7A7BBE999A4E38082, 'https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E7%B1%BB%E5%9E%8B', '2014-08-18 12:30:00', '2016-12-20 09:50:32', '78', '递归类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1335', 0xE69198E8A681EFBC9A0AE59CA8E8AEA1E7AE97E69CBAE7BC96E7A88BE8AFADE8A880E4B8ADEFBC8CE98092E5BD92E7B1BBE59E8BEFBC88E58F88E5908DEFBC9AE98092E5BD92E5AE9AE4B989E38081E99A90E590ABE7B1BBE59E8BE68896E99A90E590ABE5AE9AE4B989EFBC89E698AFE4B880E7A78DE789B9E6AE8AE79A84E695B0E68DAEE7B1BBE59E8BEFBC8CE5AE83E8A1A8E7A4BAE887AAE8BAABE58685E983A8E58FAFE883BDE58C85E590ABE585B6E5AE83E79A84E5908CE6A0B7E7B1BBE59E8BE79A84E580BCE38082, 'https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E7%B1%BB%E5%9E%8B', '2014-08-18 12:30:00', '2016-12-20 09:50:32', '78', '递归类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1336', 0xE7A4BAE4BE8BEFBC9A0AE4BBA5E4B88BE698AFE4B880E4B8AAE59CA84861736B656C6CE4B8ADE4BDBFE794A8E993BEE8A1A8E7B1BBE59E8BE79A84E4B880E4B8AAE58897E5AD90EFBC9A, 'https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E7%B1%BB%E5%9E%8B', '2014-08-18 12:30:00', '2016-12-20 09:50:32', '78', '递归类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1337', 0xE7A4BAE4BE8BEFBC9A0A64617461204C6973742061203D204E696C207C20436F6E73206120284C697374206129, 'https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E7%B1%BB%E5%9E%8B', '2014-08-18 12:30:00', '2016-12-20 09:50:32', '78', '递归类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1338', 0xE7A4BAE4BE8BEFBC9A0AE8BF99E8A1A8E7A4BA61E79A84E993BEE8A1A873E58FAFE4BBA5E698AFE4B880E4B8AAE7A9BAE8A1A8E68896E4B880E4B8AA636F6E73E58D95E58583E58C85E590ABE4BA86E4B880E4B8AA276127EFBC88E993BEE8A1A8E79A84E2809CE5A4B4E2809DEFBC89E5928CE58FA6E4B880E4B8AAE993BEE8A1A8EFBC88E2809CE5B0BEE2809DEFBC89E38082, 'https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E7%B1%BB%E5%9E%8B', '2014-08-18 12:30:00', '2016-12-20 09:50:32', '78', '递归类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1339', 0xE7A4BAE4BE8BEFBC9A0AE98092E5BD92E4B88DE58581E8AEB8E59CA84D6972616E6461E8AFADE8A880E4B8ADE5928C4861736B656C6CE79A84E5908CE4B989E7B1BBE59E8BE4B8ADE587BAE78EB0EFBC8CE68980E4BBA5E4BBA5E4B88BE79A844861736B656C6CE7B1BBE59E8BE698AFE99D9EE6B395E79A84EFBC9A, 'https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E7%B1%BB%E5%9E%8B', '2014-08-18 12:30:00', '2016-12-20 09:50:33', '78', '递归类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1340', 0xE7A4BAE4BE8BEFBC9A0A7479706520426164203D2028496E742C20426164290A74797065204576696C203D20426F6F6C202D3E204576696C, 'https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E7%B1%BB%E5%9E%8B', '2014-08-18 12:30:00', '2016-12-20 09:50:33', '78', '递归类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1341', 0xE7A4BAE4BE8BEFBC9A0AE79BB8E58F8DE59CB0EFBC8CE8A1A8E99DA2E4B88AE698AFE79BB8E7AD89E79A84E4BBA3E695B0E695B0E68DAEE7B1BBE59E8BE58DB4E698AFE58FAFE4BBA5E79A84EFBC9A, 'https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E7%B1%BB%E5%9E%8B', '2014-08-18 12:30:00', '2016-12-20 09:50:33', '78', '递归类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1342', 0xE7A4BAE4BE8BEFBC9A0A6461746120476F6F64203D205061697220496E7420476F6F640A646174612046696E65203D2046756E2028426F6F6C2D3E46696E6529, 'https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E7%B1%BB%E5%9E%8B', '2014-08-18 12:30:00', '2016-12-20 09:50:33', '78', '递归类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1343', 0xE7A4BAE4BE8BEFBC9A0AE69CACE69DA1E79BAEE983A8E58886E68896E585A8E983A8E58685E5AEB9E587BAE887AAE4BBA54746444CE68E88E69D83E58F91E5B883E79A84E3808AE887AAE794B1E59CA8E7BABFE794B5E88491E8AF8DE585B8E3808BEFBC88464F4C444F43EFBC89E38082, 'https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E7%B1%BB%E5%9E%8B', '2014-08-18 12:30:00', '2016-12-20 09:50:33', '78', '递归类型', '数据结构');
INSERT INTO `spider_text` VALUES ('1344', 0xE69198E8A681EFBC9A0A414120E6A091E59CA8E8AEA1E7AE97E69CBAE7A791E5ADA6E4B880E7A78DE5BDA2E5BC8FE79A84E887AAE5B9B3E8A1A1E4BA8CE58F89E69FA5E689BEE6A091E794A8E4BA8EE9AB98E69588E5AD98E582A8E5928CE6A380E7B4A2E5BA8FE695B0E68DAEE3808220414120E6A091E79A84E5908DE7A7B0E698AFE794B1E5AE83E79A84E58F91E6988EE8808541726E6520416E64657273736F6EE8808CE69DA5E38082, 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:43', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1345', 0xhttps://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:43', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1346', 0xE69198E8A681EFBC9A0AE59BA0E4B8BA4141E6A091E69C89E4B8A5E6A0BCE79A84E69DA1E4BBB628E7BAA2E88A82E782B9E58FAAE883BDE4B8BAE58FB3E88A82E782B929EFBC8CE69585E58FAAE99C80E88083E8999132E7A78DE68385E5BDA23A, 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:43', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1347', 0xE6978BE8BDACE5B9B3E8A1A1EFBC9A0AE5B9B3E8A1A1E4B880E9A297E7BAA2E9BB91E6A091E99C80E8A681E8AEB0E5BD95E585B6E9A29CE889B2EFBC8CE8808C4141E6A091E698AFE59CA8E6AF8FE4B8AAE88A82E782B9E8AEB0E5BD95E585B6226C6576656C22E8BF99E79BB8E5BD93E4BA8EE7BAA2E9BB91E6A091E88A82E782B9E79A84E9BB91E9AB98E5BAA6, 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:43', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1348', 0xhttps://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:43', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1349', 0xhttps://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:43', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1350', 0xE6978BE8BDACE5B9B3E8A1A1EFBC9A0AE68F92E585A5E5928CE588A0E999A4E4BC9AE8AEA94141E6A091E58F98E79A84E4B88DE5B9B3E8A1A128E58DB3E8BF9DE58F8DE5AE83E79A84E680A7E8B4A829E38082E681A2E5A48DE5B9B3E8A1A1E58FAAE99C80E4B8A4E7A78DE6938DE4BD9C3A22736B657722E5928C2273706C6974222E20536B6577E698AFE4B880E4B8AAE58FB3E6978BE8BDACE4BDBFE5BE97E5AD90E6A091E4B8ADE59091E5B7A6E79A84E6B0B4E5B9B3E8BEB9E58F98E68890E59091E58FB3E79A84E6B0B4E5B9B3E8BEB9EFBC9B53706C6974E698AFE4B880E4B8AAE5B7A6E6978BE5B9B6E5A29EE58AA0E5AD90E6A091E6A0B9E88A82E782B9E79A846C6576656C28E8AFB7E79C8BE88C83E4BE8B29E4BDBFE5BE97E8BF9EE7BBADE59091E58FB3E79A84E6B0B4E5B9B3E8BEB9E6B688E5A4B1E38082E5B9B3E8A1A1E68F92E585A5E5928CE588A0E999A4E6938DE4BD9CE79A84E5AE9EE78EB0E698AFE794B1736B6577E58F8A73706C6974E586B3E5AE9AE698AFE590A6E6978BE8BDACEFBC8CE8808CE4B88DE698AFE59CA8E4B8BBE7A88BE5BC8FE4B8ADE588A4E696ADE38082, 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:43', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1351', 0xhttps://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:43', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1352', 0xhttps://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:43', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1353', 0xE68F92E585A5EFBC9A0AE59CA8E98092E59B9EE79A84E5AE9EE5819AE4B8ADEFBC8CE999A4E4BA86E58FB6E88A82E782B9E4B98BE5A496EFBC8CE59CA8E6AF8FE6ACA1E79A84E98092E59B9EE7BB93E69D9FE5908EE591BCE58FAB736B6577E5928C73706C6974E58F8AE58FAF, 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:43', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1354', 0xhttps://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:43', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1355', 0xE588A0E999A4EFBC9A0AE59CA8E5A4A7E983A8E58886E79A84E4BA8CE58F89E69FA5E689BEE6A091EFBC8CE588A0E999A4E4B880E4B8AAE58685E983A8E88A82E782B9E58FAFE4BBA5E8BDACE68DA2E68890E4BAA4E68DA2E58685E983A8E88A82E782B9E58F8AE585B6E69C80E68EA5E8BF91E79A84E5898DE9A9B1E68896E5908EE7BBA7E88A82E782B9EFBC8CE8BF99E58F96E586B3E4BA8EE4BDBFE794A8E88085E3808220E4B8BAE4BA86E5B9B3E8A1A1E8BF99E9A297E6A091EFBC8CE69C89E587A0E4B8ADE696B9E6B395EFBC8C416E64657273736F6EE69599E68E88E68F8FE8BFB0E79A846F726967696E616C207061706572E698AFE69C80E59FBAE69CACE79A84EFBC8CE5B0BDE7AEA1E5AE83E8BF98E883BDE5868DE8A2ABE4BC98E58C96E38082E588A0E999A4E5908EE7ACACE4B880E4BBB6E4BA8BE698AFE9998DE4BD8EE585B66C6576656C28E5A682E69E9CE58FAFE4BBA529EFBC8CE4BA8EE698AFEFBC8CE695B4E4B8AA6C6576656CE5BF85E9A1BB736B6577E5928C73706C6974EFBC8CE8BF99E4B8AAE696B9E6B395E69C80E58F97E588B0E6ACA2E8BF8EE79A84EFBC8CE59BA0E4B8BAE5AE83E79A84E6A682E5BFB5E69893E68782EFBC8CE58FAFE4BBA5E58897E4B8BEE68890E4B88BE58897E4B889E4B8AAE7AE80E58D95E6ADA5E9AAA43A, 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:43', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1356', 0xE588A0E999A4EFBC9A0AE5A682E69E9CE58FAFE4BBA5E79A84E8AF9DEFBC8CE5878FE5B091E585B66C6576656C20536B6577E585B66C6576656C2E2053706C6974E585B66C6576656C2E, 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:43', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1357', 0xhttps://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:43', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1358', 0xhttps://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:43', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1359', 0xE588A0E999A4EFBC9A0AE8BF99E4B8AAE7BD91E7AB99E5B195E7A4BAE4BA86E889AFE5A5BDE79A84E588A0E999A4E7A4BAE88C83416E64657273736F6E2070617065722E, 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1360', 0xE69588E883BDEFBC9A0A4141E6A091E79A84E680A7E883BDE5928CE7BAA2E9BB91E6A091E698AFE5BE88E7B1BBE4BCBCE79A8428E585B6E5AE9EE5BE88E685A229E38082E59BA0E4B8BA4141E6A091E6AF94E7BAA2E9BB91E6A091E5819AE8BE83E5A49AE6ACA1E6978BE8BDACEFBC8CE68980E4BBA5E8BE83E5AEB9E69893E5AE9EE5819AE38082E899BDE784B6E7BAA2E9BB91E6A091E69588E883BDE8BE83E4B8BAE5B9B3E59D87EFBC8CE4BD86E698AF4141E6A091E9AB98E5BAA6E8BE83E6B585E69585E69FA5E689BEE697B6E997B4E8BE83E5BFAB5B315D, 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1361', 0xE5BC95E794A8EFBC9A0A5E204120446973717569736974696F6E206F6E2054686520506572666F726D616E6365204265686176696F72206F662042696E61727920536561726368205472656520446174612053747275637475726573202870616765732036372D3735292028504446292EC2A0, 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1362', 0xhttps://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1363', 0xhttps://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1364', 0xE5BC95E794A8EFBC9A0A5BE698BEE7A4BA5D20E69FA520E8AEBA20E7BC9620E8AEA1E7AE97E69CBAE7A791E5ADA6E4B8ADE79A84E6A09120E4BA8CE58F89E6A09120E4BA8CE58F89E69FA5E689BEE6A091EFBC88425354EFBC8920E7AC9BE58DA1E5B094E6A091204D5650E6A09120546F7020747265652054E6A09120E887AAE5B9B3E8A1A1E4BA8CE58F89E69FA5E689BEE6A091204141E6A0912041564CE6A09120E5B7A6E580BEE7BAA2E9BB91E6A09120E7BAA2E9BB91E6A09120E69BBFE7BDAAE7BE8AE6A09120E4BCB8E5B195E6A09120E6A091E5A08620E58AA0E69D83E5B9B3E8A1A1E6A0912042E6A09120422BE6A09120422AE6A091204278E6A091205542E6A09120322D33E6A09120322D332D34E6A0912028612C62292DE6A0912044616E63696E6720747265652048E6A09120E5A08620E4BA8CE58F89E5A08620E4BA8CE9A1B9E5A08620E69690E6B3A2E982A3E5A591E5A08620E5B7A6E5818FE6A0912050616972696E67206865617020E6969CE5A0862056616E20456D646520426F61732074726565205472696520E5908EE7BC80E6A09120E59FBAE695B0E6A09120E4B889E58F89E69FA5E689BEE6A09120582DE5BFABE9809FE5898DE7BC80E6A09120592DE5BFABE9809FE5898DE7BC80E6A09120E4BA8CE58F89E7A9BAE997B4E58886E589B2EFBC88425350EFBC89E6A09120E59B9BE58F89E6A09120E585ABE58F89E6A091206B2D64E6A09120E99A90E5BC8F6B2D64E6A091205650E6A09120E99D9EE4BA8CE58F89E6A09120E68C87E695B0E6A09120E89E8DE59088E6A09120E58CBAE997B4E6A091205051E6A0912052616E676520747265652053505152E6A09120E7A9BAE997B4E695B0E68DAEE58886E589B2E6A0912052E6A09120522AE6A09120522BE6A0912058E6A091204DE6A09120E7BABFE6AEB5E6A09120E5B88CE5B094E4BCAFE789B952E6A09120E4BC98E5858852E6A09120E585B6E4BB96E6A09120E695A3E58897E697A5E58E8620E695A3E58897E6A0912046696E6765722074726565204F72646572207374617469737469632074726565204D6574726963207472656520436F766572207472656520424BE6A09120446F75626C7920636861696E65642074726565206944697374616E6365204C696E6B2D63757420747265652046656E7769636B2074726565204C6F672D73747275637475726564206D657267652D7472656520E6A091E78AB6E695B0E7BB84, 'https://zh.wikipedia.org/wiki/AA%E6%A0%91', '2015-03-18 02:43:00', '2016-12-20 09:50:44', '79', 'AA树', '数据结构');
INSERT INTO `spider_text` VALUES ('1365', 0xE69198E8A681EFBC9A0AE59CA8E59BBEE8AEBAE9878CE99DA2EFBC8CE4B880E4B8AAE59BBE47E79A84E8A1A5E59BBEEFBC88636F6D706C656D656E74EFBC89E68896E88085E58F8DE99DA2EFBC88696E7665727365EFBC89E698AFE4B880E4B8AAE59BBEE69C89E79D80E8B79F47E79BB8E5908CE79A84E782B9EFBC8CE8808CE4B894E8BF99E4BA9BE782B9E4B98BE997B4E69C89E8BEB9E79BB8E8BF9EE5BD93E4B894E4BB85E5BD93E59CA847E9878CE99DA2E4BB96E4BBACE6B2A1E69C89E8BEB9E79BB8E8BF9EE38082E59CA8E588B6E4BD9CE59BBEE79A84E697B6E58099EFBC8CE4BDA0E58FAFE4BBA5E58588E5BBBAE7AB8BE4B880E4B8AAE69C8947E68980E69C89E782B9E79A84E5AE8CE585A8E59BBEEFBC8CE784B6E5908EE6B885E999A447E9878CE99DA2E5B7B2E7BB8FE69C89E79A84E8BEB9E69DA5E5BE97E588B0E8A1A5E59BBEE38082E8BF99E9878CE79A84E8A1A5E59BBEE5B9B6E4B88DE698AFE59BBEE69CACE8BAABE79A84E8A1A5E99B86EFBC9BE59BA0E4B8BAE58FAAE69C89E8BEB9E79A84E983A8E58886E59088E4B98EE8A1A5E99B86E79A84E6A682E5BFB5E38082, 'https://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', '2016-01-12 18:44:00', '2016-12-20 09:50:54', '80', '补图', '数据结构');
INSERT INTO `spider_text` VALUES ('1366', 0xE6ADA3E5BC8FE5BBBAE7AB8BE6B395EFBC9A0AE4BBA447C2A03DC2A028562CC2A04529E698AFE4B880E4B8AAE59BBEEFBC8C4BE58C85E590ABE68980E69C8956E79A84E4BA8CE58583E5AD90E99B86EFBC88322D656C656D656E7420737562736574EFBC89E38082E58899E59BBE48C2A03DC2A028562CC2A04BC2A05CC2A0452920E698AF47E79A84E8A1A5E59BBEE38082, 'https://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', '2016-01-12 18:44:00', '2016-12-20 09:50:54', '80', '补图', '数据结构');
INSERT INTO `spider_text` VALUES ('1367', 0xE5BA94E794A8E4B88EE88C83E4BE8BEFBC9A0AE8AEB8E5A49AE59BBEE8AEBAE79A84E6A682E5BFB5E983BDE4BA92E79BB8E4BBA5E8A1A5E59BBEE79A84E585B3E7B3BBE8BF9EE68EA5EFBC9A, 'https://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', '2016-01-12 18:44:00', '2016-12-20 09:50:54', '80', '补图', '数据结构');
INSERT INTO `spider_text` VALUES ('1368', 0xhttps://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', '2016-01-12 18:44:00', '2016-12-20 09:50:54', '80', '补图', '数据结构');
INSERT INTO `spider_text` VALUES ('1369', 0xE5BA94E794A8E4B88EE88C83E4BE8BEFBC9A0A426F6E64792C204A6F686E2041647269616E3B204D757274792C20552E20532E20522E2C204772617068205468656F72792077697468204170706C69636174696F6E732C204E6F7274682D486F6C6C616E642C20313937362C204953424EC2A0302D3434342D31393435312D37C2A02C207061676573203620616E642032392E, 'https://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', '2016-01-12 18:44:00', '2016-12-20 09:50:54', '80', '补图', '数据结构');
INSERT INTO `spider_text` VALUES ('1370', 0xE5BA94E794A8E4B88EE88C83E4BE8BEFBC9A0A4469657374656C2C205265696E686172642C204772617068205468656F7279203372642C20537072696E6765722C20323030352C204953424EC2A0332D3534302D32363138322D36C2A02E20456C656374726F6E69632065646974696F6E2C207061676520342E, 'https://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', '2016-01-12 18:44:00', '2016-12-20 09:50:54', '80', '补图', '数据结构');
INSERT INTO `spider_text` VALUES ('1371', 0xE5BA94E794A8E4B88EE88C83E4BE8BEFBC9A0AE8BF99E698AFE4B880E7AF87E5B08FE4BD9CE59381E38082E4BDA0E58FAFE4BBA5E9809AE8BF87E7BC96E8BE91E68896E4BFAEE8AEA2E689A9E58585E585B6E58685E5AEB9E38082, 'https://zh.wikipedia.org/wiki/%E8%A1%A5%E5%9B%BE', '2016-01-12 18:44:00', '2016-12-20 09:50:54', '80', '补图', '数据结构');
INSERT INTO `spider_text` VALUES ('1373', 0xE69198E8A681EFBC9A0AE59CA8E4B8A4E4B8AAE7949FE68890E5858361E5928C62E4B88AE79A84E887AAE794B1E7BEA4E79A84E587AFE88EB1E59BBE, 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1374', 0xhttps://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1375', 0xE5AE9AE4B989EFBC9A0AE58187E8AEBE2047207B5C646973706C61797374796C6520477D20EFBC8CE698AFE7BEA4E8808C2053207B5C646973706C61797374796C6520537D20EFBC8CE698AFE7949FE68890E99B86E38082E587AFE88EB1E59BBE20CE93203D20CE9320282047202C20532029207B5C646973706C61797374796C65205C47616D6D61203D5C47616D6D612028472C53297D20EFBC8CE698AFE5A682E4B88BE69E84E980A0E79A84E79D80E889B2E79A84E69C89E59091E59BBEE38082, 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1376', 0xhttps://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1377', 0xhttps://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1378', 0xE4BE8BE5AD90EFBC9A0AE58187E8AEBE47203D205AE698AFE697A0E99990E5BEAAE78EAFE7BEA4E8808CE99B86E5908853E69C89E6A087E58786E7949FE68890E5858331E5928CE5AE83E79A84E98086E58583EFBC88E794A8E58AA0E6B395E7ACA6E58FB7E4B8BAE2889231EFBC89E69E84E68890EFBC8CE58899E5AE83E79A84E587AFE88EB1E59BBEE698AFE697A0E7A9B7E993BEE38082, 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1379', 0xE4BE8BE5AD90EFBC9A0AE7B1BBE4BCBCE79A84EFBC8CE5A682E69E9C47203D205A6EE698AF6EE998B6E5BEAAE78EAFE7BEA4E8808C53E794B1E4B8A4E4B8AAE58583E7B4A0E69E84E68890EFBC8C47E79A84E6A087E58786E7949FE68890E58583E5928CE5AE83E79A84E98086E58583EFBC8CE58899E587AFE88EB1E59BBEE698AFE78EAFE59BBE436EE38082, 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1380', 0xhttps://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1381', 0xE4BE8BE5AD90EFBC9A0AE4BA8CE99DA2E4BD93E7BEA44434E59CA8E4B8A4E4B8AAE7949FE68890E5858361E5928C62E4B88AE79A84E587AFE88EB1E59BBEE38082, 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1382', 0xhttps://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1383', 0xE4BE8BE5AD90EFBC9A0AE29FA82061202C2062207C20612034203D20622032203D2065202C20612062203D20622061203320E29FA9207B5C646973706C61797374796C65205C6C616E676C6520612C627C615E7B347D3D625E7B327D3D652C61623D62615E7B337D5C72616E676C65207D20E38082, 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1384', 0xhttps://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1385', 0xhttps://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1386', 0xE789B9E5BE81EFBC9A0AE59BBE20CE93207B5C646973706C61797374796C65205C47616D6D61207D20E698AFE7BEA42047207B5C646973706C61797374796C6520477D20E79A84E587AFE88EB1E59BBEEFBC8CE5BD93E4B894E4BB85E5BD93E5AE83E9809AE8BF87E59BBEE887AAE5908CE69E84E8AEB8E58FAF2047207B5C646973706C61797374796C6520477D20E79A84E7AE80E58D95E4BCA0E98092E4BD9CE794A8EFBC88E5B0B1E698AFE4BF9DE5AD98E8BEB9E79A84E99B86E59088EFBC89E38082, 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1387', 0xhttps://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1388', 0xE59FBAE69CACE680A7E8B4A8EFBC9A0AE5A682E69E9CE7949FE68890E99B86E59088E79A84E68890E591982073207B5C646973706C61797374796C6520737D20E698AFE887AAE8BAABE79A84E98086E58583EFBC8CE58DB32073203D207320E288922031207B5C646973706C61797374796C6520733D735E7B2D317D7D20EFBC8CE58899E5AE83E4B880E888ACE8A2ABE8A1A8E7A4BAE4B8BAE697A0E59091E8BEB9E38082, 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1389', 0xhttps://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1390', 0xE59FBAE69CACE680A7E8B4A8EFBC9A0AE59CA8E587AFE88EB1E59BBEE4B8ADE79A84E78EAFEFBC88E2809CE997ADE59088E8B7AFE5BE84E2809DEFBC89E68C87E7A4BAE59CA82053207B5C646973706C61797374796C6520537D20E79A84E4B8A4E4B8AAE58583E7B4A0E4B98BE997B4E79A84E585B3E7B3BBE38082E59CA8E7BEA4E79A84E587AFE88EB1E5A48DE5BDA2E79A84E69BB4E7B2BEE7BB86E69E84E980A0E4B8ADEFBC8CE5AFB9E5BA94E4BA8EE585B3E7B3BBE79A84E997ADE59088E8B7AFE5BE84E8A2ABE794A8E5A49AE8BEB9E5BDA2E2809CE5A1ABE58585E2809DE38082, 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1391', 0xE59FBAE69CACE680A7E8B4A8EFBC9A0AE5A682E69E9C2066203A204720E280B220E286922047207B5C646973706C61797374796C6520663A47275C746F20477D20E698AFE6BBA1E5B084E7BEA4E5908CE68081E5B9B6E4B894204720E280B2207B5C646973706C61797374796C652047277D20E79A84E7949FE68890E99B86E59088205320E280B2207B5C646973706C61797374796C652053277D20E79A84E58583E7B4A0E79A84E5838FE698AFE4B88DE5908CE79A84EFBC8CE58899E5AE83E5BC95E58F91E4B880E4B8AAE59BBEE79A84E8A686E79B96, 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1392', 0xhttps://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1393', 0xE59FBAE69CACE680A7E8B4A8EFBC9A0AE59BBE20CE9320282047202C20532029207B5C646973706C61797374796C65205C47616D6D612028472C53297D20E58FAFE4BBA5E8A2ABE69E84E980A0E58DB3E4BDBFE99B86E590882053207B5C646973706C61797374796C6520537D20E4B88DE7949FE68890E7BEA42047207B5C646973706C61797374796C6520477D20E38082E4BD86E698AFEFBC8CE5AE83E698AFE8BF9EE9809AE79A84E5B9B6E4B88DE8A2ABE8AEA4E4B8BAE698AFE587AFE88EB1E59BBEE38082E59CA8E8BF99E7A78DE68385E586B5E4B88BEFBC8CE8BF99E4B8AAE59BBEE79A84E6AF8FE4B8AAE8BF9EE9809AE983A8E4BBB6E8A1A8E7A4BAE4B880E4B8AA2053207B5C646973706C61797374796C6520537D20E7949FE68890E5AD90E7BEA4E79A84E999AAE99B86E38082, 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1394', 0xE59FBAE69CACE680A7E8B4A8EFBC9A0AE5AFB9E4BA8EE8A2ABE8AEA4E4B8BAE698AFE697A0E59091E79A84E587AFE88EB1E59BBEEFBC8CE9A1B6E782B9E8BF9EE9809AE680A7E7AD89E4BA8EE8BF99E4B8AAE59BBEE79A84E5BAA6E380825B315D, 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:04', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1395', 0x5363687265696572E999AAE99B86E59BBEEFBC9A0AE5A682E69E9CE8BDACE8808CE68A8AE9A1B6E782B9E4BD9CE4B8BAE59BBAE5AE9AE5AD90E7BEA42048207B5C646973706C61797374796C6520487D20E79A84E58FB3E999AAE99B86EFBC8CE5B0B1E5BE97E588B0E4BA86E4B880E4B8AAE69C89E585B3E79A84E69E84E980A05363687265696572E999AAE99B86E59BBEEFBC8CE5AE83E698AFE999AAE99B86E69E9AE4B8BEE68896546F64642D436F7865746572E7AE97E6B395E79A84E59FBAE7A180E38082, 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1396', 0xE4B88EE7BEA4E8AEBAE79A84E585B3E7B3BBEFBC9A0AE7A094E7A9B6E59BBEE79A84E982BBE68EA5E79FA9E998B5E789B9E588ABE698AFE5BA94E794A8E8B0B1E59BBEE79086E8AEBAE79A84E5AE9AE79086E883BDE6B49EE5AF9FE7BEA4E79A84E7BB93E69E84E38082, 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1397', 0xE4B88EE7BEA4E8AEBAE79A84E585B3E7B3BBEFBC9A0A5E2042616261692C204C2E20546563686E6963616C205265706F72742054522D39342D31302E20556E6976657273697479206F66204368696361676F2E20313939362EC2A05B315D, 'https://zh.wikipedia.org/wiki/%E5%87%AF%E8%8E%B1%E5%9B%BE', '2016-01-01 00:00:00', '2016-12-20 09:51:05', '81', '凯莱图', '数据结构');
INSERT INTO `spider_text` VALUES ('1398', 0xE69198E8A681EFBC9A0AE59CA8E8AEA1E7AE97E69CBAE7A791E5ADA6E4B8ADEFBC8CE5A48DE59088E7B1BBE59E8BE698AFE4B880E7A78DE695B0E68DAEE7B1BBE59E8BEFBC8CE5AE83E58FAFE4BBA5E58E9FE5A78BE7B1BBE59E8BE5928CE585B6E5AE83E79A84E5A48DE59088E7B1BBE59E8BE68980E69E84E68890E38082E69E84E68890E4B880E4B8AAE5A48DE59088E7B1BBE59E8BE79A84E58AA8E4BD9CEFBC8CE58F88E7A7B0E4BD9CE7BB84E59088E38082, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1399', 0x432F432B2BEFBC9A0A737472756374E698AF204320E5928C20432B2B20E79A84E5A48DE59088E7B1BBE59E8BE6A682E5BFB5EFBC8CE698AFE4B880E4B8AAE5B086E5AD97E6AEB5E68896E68890E59198E4BBA5E4B880E5AE9AE7BB84E59088E696B9E5BC8FE68980E7BB84E68890E79A84E695B0E68DAEE7B1BBE59E8BE38082E59BA0E4B8BAE59CA8E5AEA3E5918AE697B6EFBC8CE4BDBFE794A8E4BA86E585B3E994AEE5AD9720737472756374EFBC8CE68980E4BBA5E5AE83E7AE80E7A7B0E4B8BAE7BB93E69E84EFBC8CE68896E88085E69BB4E7B2BEE7A1AEE59CB0E8AFB4E794A8E688B7E5AE9AE4B989E79A84E695B0E68DAEE7BB93E69E84E38082, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1400', 0x432F432B2BEFBC9A0AE59CA820432B2B20E9878CEFBC8C73747275637420E4B88E636C617373E79A84E594AFE4B880E58CBAE588ABE698AFE9BB98E8AEA4E79A84E8AEBFE997AEE6A1A3E6ACA1EFBC8C636C617373E698AFE7A781E69C89E79A84EFBC8C73747275637420E58899E698AFE585ACE69C89E79A84E38082, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1401', 0xhttps://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1402', 0x432F432B2BEFBC9A0A73747275637420E5AEA3E5918AE7BB84E68890E4B880E4B8AAE5AD97E6AEB5E6B885E58D95EFBC8CE585B6E4B8ADE79A84E6AF8FE4B880E4B8AAE58FAFE4BBA5E698AFE4BBBBE6848FE7B1BBE59E8BE38082E5AFB9E4BA8E2073747275637420E5AFB9E8B1A1E68980E99C80E79A84E5AD98E582A8E58CBAEFBC8CE58DB3E4B8BAE585A8E983A8E5AD97E6AEB5E79A84E680BBE59088EFBC8CE5868DE58AA0E4B88AE58685E983A8E79A84E8A1A5E799BDE38082, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1403', 0x432F432B2BEFBC9A0A737472756374204163636F756E74207B0A20202020696E74206163636F756E745F6E756D6265723B0A2020202063686172202A66697273745F6E616D653B0A2020202063686172202A6C6173745F6E616D653B0A20202020666C6F61742062616C616E63653B0A207D3B, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1404', 0xhttps://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1405', 0x432F432B2BEFBC9A0A7479706564656620737472756374204163636F756E745F207B0A20202020696E74202020206163636F756E745F6E756D6265723B0A20202020636861722020202A66697273745F6E616D653B0A20202020636861722020202A6C6173745F6E616D653B0A20202020666C6F6174202062616C616E63653B0A207D204163636F756E743B, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1406', 0x432F432B2BEFBC9A0AE59CA820432B2B20E4B8ADEFBC8CE5B9B6E4B88DE99C80E8A6812074797065646566EFBC8CE59BA0E4B8BAE4BDBFE794A8E4BA862073747275637420E79A84E7B1BBE59E8BE5AE9AE4B989EFBC8CE5B7B2E698AFE5908DE5AD97E7A9BAE997B4E79A84E4B880E983A8E58886EFBC8CE68980E4BBA5E8AFA5E7B1BBE59E8BE58FAFE7A7B0E4BD9C20737472756374204163636F756E7420E68896E8BE83E7AE80E58D95E79A84204163636F756E74E38082, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1407', 0x432F432B2BEFBC9A0AE585B6E5AE83E4BE8BE5AD90EFBC8CE4B880E4B8AAE4BDBFE794A8E4BA86E6B5AEE782B9E695B0E695B0E68DAEE7B1BBE59E8BE79A84E4B889E7BBB4E59091E9878FE5A48DE59088E7B1BBE59E8BEFBC8CE58FAFE5A682E6ADA4E5889BE5BBBAEFBC9A, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1408', 0x432F432B2BEFBC9A0A73747275637420566563746F72207B0A202020666C6F617420783B0A202020666C6F617420793B0A202020666C6F6174207A3B0A207D3B, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1409', 0x432F432B2BEFBC9A0AE4B880E4B8AAE4BBA520566563746F7220E5A48DE59088E7B1BBE59E8BE4B8BAE7B1BBE59E8BE79A84E58F98E9878FE5908D2076656C6F63697479EFBC8CE58FAFE4BBA5E5AEA3E5918AE4B8BA20566563746F722076656C6F636974793BEFBC8CE58FAFE4BBA5E794A8E782B9E8BF90E7AE97E7ACA6282E29E8AEBFE997AE2076656C6F6369747920E79A84E68890E59198E38082E4BE8BE5A682EFBC8C76656C6F636974792E78203D20353BEFBC8CE4BC9AE4BDBF2076656C6F6369747920E79A84E7BB84E4BBB6207820E7AD89E4BA8E2035E38082, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1410', 0x432F432B2BEFBC9A0AE5908CE6A0B7E59CB0EFBC8CE4B880E4B8AAE9A29CE889B2E7BB93E69E84E58FAFE5A682E6ADA4E5889BE5BBBAEFBC9A, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1411', 0x432F432B2BEFBC9A0A73747275637420436F6C6F72207B0A202020696E74207265643B0A202020696E7420677265656E3B0A202020696E7420626C75653B0A207D3B, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1412', 0x432F432B2BEFBC9A0AE59CA8E4B889E7BBB4E59BBEE5838FE4B8ADEFBC8CE5BF85E9A1BBE7BB8FE5B8B8E4B88DE696ADE8BFBDE8B8AAE6AF8FE4B880E4B8AAE9A1B6E782B9E79A84E4BD8DE7BDAEE5928CE9A29CE889B2E38082E58FAFE4BBA5E4BDBFE794A8E4B98BE5898DE68980E5889BE5BBBAE79A8420566563746F7220E5928C20436F6C6F7220E5A48DE59088E7B1BBE59E8BE69DA5E5889BE5BBBA2056657274657820E5A48DE59088E7B1BBE59E8BEFBC9A, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1413', 0x432F432B2BEFBC9A0A73747275637420566572746578207B0A202020566563746F7220706F736974696F6E3B0A202020436F6C6F7220636F6C6F723B0A207D3B, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1414', 0x432F432B2BEFBC9A0AE4BBA5E5908CE6A0B7E79A84E6A0BCE5BC8FE5889BE5BBBAE4B880E4B8AA2056657274657820E7B1BBE59E8BE79A84E58F98E9878FEFBC9A56657274657820763BEFBC8CE5B9B6E4BBA5E5A682E4B88BE696B9E5BC8FE68C87E6B4BEE695B0E580BCE7BB99207620EFBC9A, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1415', 0x432F432B2BEFBC9A0A762E706F736974696F6E2E78203D20302E303B0A202020762E706F736974696F6E2E79203D20312E353B0A202020762E706F736974696F6E2E7A203D20302E303B0A202020762E636F6C6F722E726564203D203132383B0A202020762E636F6C6F722E677265656E203D20303B0A202020762E636F6C6F722E626C7565203D203235353B, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1416', 0xE58E9FE5A78BE5AD90E7B1BBE59E8BE6A380E69FA5EFBC9A0AE5889AE5BC80E5A78BE4BDBFE794A8E79A8420737472756374EFBC8CE698AFE794A8E69DA5E5BBBAE69E84E7BB84E59088E695B0E68DAEE7B1BBE59E8BEFBC8CE4B88DE8BF87E69C89E697B6E5AE83E698AFE794A8E69DA5E981BFE5BC80E6A087E58786204320E58D8FE8AEAEEFBC8CE4BBA5E5889BE5BBBAE58E9FE5A78BE5AD90E7B1BBE59E8BE6A380E69FA5EFBC887072696D697469766520737562747970696E67EFBC89E38082E4BE8BE5A682EFBC8CE585B1E5908CE79A84E7BD91E7BB9CE58D8FE8AEAEE4BE9DE8B596E4BA8EE4BBA5E4B88BE4BA8BE5AE9EEFBC8C4320E7BC96E8AF91E599A8E4BBA5E58FAFE9A284E69699E79A84E696B9E6B395EFBC8CE59CA8E7BB93E69E84E5AD97E6AEB5E4B98BE997B4E8A1A5E799BDEFBC9BE59BA0E6ADA4E4BBA3E7A081, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1417', 0xE58E9FE5A78BE5AD90E7B1BBE59E8BE6A380E69FA5EFBC9A0A7374727563742069666F6F5F6F6C645F73747562207B0A202020206C6F6E6720782C20793B0A207D3B0A207374727563742069666F6F5F76657273696F6E5F3432207B0A202020206C6F6E6720782C20792C207A3B0A2020202063686172202A6E616D653B0A202020206C6F6E6720612C20622C20633B0A207D3B0A20766F6964206F7065726174655F6F6E5F69666F6F287374727563742069666F6F5F6F6C645F73747562202A293B0A207374727563742069666F6F5F76657273696F6E5F343220733B0A202E202E202E0A206F7065726174655F6F6E5F69666F6F282673293B, 'https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%9E%8B%E5%88%AB', '2016-03-02 09:17:00', '2016-12-20 09:51:15', '82', '复合型别', '数据结构');
INSERT INTO `spider_text` VALUES ('1419', 0xE69198E8A681EFBC9A0AE59CA8E59BBEE8AEBAE4B88AEFBC8CE4B880E4B8AAE59BBE2047207B5C646973706C61797374796C6520477D20E79A84E7BABFE59BBE204C202820472029207B5C646973706C61797374796C65204C2847297D20E698AFEFBC9A, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E5%9B%BE', '2016-01-12 18:43:00', '2016-12-20 09:51:25', '83', '线图', '数据结构');
INSERT INTO `spider_text` VALUES ('1420', 0xE69198E8A681EFBC9A0A4C202820472029207B5C646973706C61797374796C65204C2847297D20E79A84E4B880E4B8AAE9A1B6E782B9E5AFB9E5BA942047207B5C646973706C61797374796C6520477D20E79A84E4B880E8BEB9204C202820472029207B5C646973706C61797374796C65204C2847297D20E79A84E9A1B6E782B9E79BB8E982BBE5BD93E4B894E4BB85E5BD93E5AE83E4BBACE59CA82047207B5C646973706C61797374796C6520477D20E5AFB9E5BA94E79A84E8BEB9E79BB8E982BBEFBC88E69C89E585ACE585B1E9A1B6E782B9EFBC89E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E5%9B%BE', '2016-01-12 18:43:00', '2016-12-20 09:51:25', '83', '线图', '数据结构');
INSERT INTO `spider_text` VALUES ('1421', 0xE680A7E8B4A8EFBC9A0AE88BA5E58E9FE59BBEE698AFE8BF9EE9809AE79A84EFBC8CE7BABFE59BBEE4B99FE698AFE3808220CF872045202820472029203D20CF8720562028204C2028204720292029207B5C646973706C61797374796C65205C636869205F7B457D2847293D5C636869205F7B567D284C284729297D20EFBC8CE58E9FE59BBEE79A84E8BEB9E889B2E695B0E7AD89E4BA8EE7BABFE59BBEE79A84E782B9E889B2E695B0E38082, 'https://zh.wikipedia.org/wiki/%E7%BA%BF%E5%9B%BE', '2016-01-12 18:43:00', '2016-12-20 09:51:25', '83', '线图', '数据结构');
INSERT INTO `spider_text` VALUES ('1423', 0xE69198E8A681EFBC9A0AE4B880E4B8AAE5AE9EE695B0E79A84E697A0E99990E5BA8FE58897EFBC88E8939DE889B2EFBC89E38082E8BF99E4B8AAE5BA8FE58897E697A2E4B88DE698AFE98092E5A29EE79A84E4B99FE4B88DE698AFE98092E5878FE79A84E69BB4E4B88DE698AFE694B6E6959BE79A84EFBC8CE4BD86E5AE83E698AFE69C89E7958CE79A84E38082, 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '数据结构');
INSERT INTO `spider_text` VALUES ('1424', 0xE69198E8A681EFBC9A0AE695B0E5ADA6E4B88AEFBC8CE5BA8FE58897E698AFE8A2ABE68E92E68890E4B880E58897E79A84E5AFB9E8B1A1EFBC88E68896E4BA8BE4BBB6EFBC89EFBC9BE8BF99E6A0B7EFBC8CE6AF8FE4B8AAE58583E7B4A0E4B88DE698AFE59CA8E585B6E4BB96E58583E7B4A0E4B98BE5898DEFBC8CE5B0B1E698AFE59CA8E585B6E4BB96E58583E7B4A0E4B98BE5908EE38082E8BF99E9878CEFBC8CE58583E7B4A0E4B98BE997B4E79A84E9A1BAE5BA8FE99D9EE5B8B8E9878DE8A681E38082, 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '数据结构');
INSERT INTO `spider_text` VALUES ('1425', 0xhttps://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '数据结构');
INSERT INTO `spider_text` VALUES ('1426', 0xE4BE8BE5AD90E5928CE7ACA6E58FB7EFBC9A0AE5BA8FE58897E58699E4BD9CEFBC8861312C61322C202E2E2EEFBC89E38082E7AE80E58D95E8B5B7E8A781EFBC8CE4B99FE58FAFE4BBA5E794A8E7ACA6E58FB7EFBC88616EEFBC89E38082, 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '数据结构');
INSERT INTO `spider_text` VALUES ('1427', 0xE4BE8BE5AD90E5928CE7ACA6E58FB7EFBC9A0AE4B880E4B8AAE79BB8E5AFB9E6ADA3E5BC8FE79A84E5AE9AE4B989EFBC9AE585B6E9A1B9E5B19EE4BA8EE99B86E5908853E79A84E69C89E99990E5BA8FE58897E698AFE4B880E4B8AAE4BB8E7B312C322C2E2E2E2C6E7DE588B053E79A84E587BDE695B0EFBC8CE8BF99E9878C6EE289A530E38082E5B19EE4BA8E53E79A84E697A0E99990E5BA8FE58897E698AFE4BB8E7B312C322C2E2E2E7DEFBC88E887AAE784B6E695B0E99B86E59088EFBC89E588B053E79A84E587BDE695B0E38082, 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '数据结构');
INSERT INTO `spider_text` VALUES ('1428', 0xE4BE8BE5AD90E5928CE7ACA6E58FB7EFBC9A0AE69C89E99990E5BA8FE58897E4B99FE7A7B0E4BD9C6EE58583E7BB84E38082E4B880E4B8AAE4BB8EE68980E69C89E695B4E695B0E588B0E99B86E59088E79A84E587BDE695B0E69C89E697B6E4B99FE7A7B0E4BD9CE58F8CE697A0E99990E5BA8FE58897EFBC8CE8BF99E9878CE5B086E4BBA5E8B49FE695B4E695B0E7B4A2E5BC95E79A84E5BA8FE58897E8AEA4E4B8BAE698AFE58FA6E4B880E4B8AAE4BBA5E6ADA3E695B4E695B0E7B4A2E5BC95E79A84E5BA8FE58897E38082, 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '数据结构');
INSERT INTO `spider_text` VALUES ('1429', 0xE5BA8FE58897E79A84E5BDA2E5BC8FE5928CE680A7E8B4A8EFBC9A0AE4B880E4B8AAE7BB99E5AE9AE5BA8FE58897E79A84E5AD90E5BA8FE58897E698AFE4BB8EE7BB99E5AE9AE5BA8FE58897E4B8ADE58EBBE999A4E4B880E4BA9BE58583E7B4A0EFBC8CE8808CE4B88DE694B9E58F98E585B6E4BB96E58583E7B4A0E4B98BE997B4E79BB8E5AFB9E4BD8DE7BDAEE8808CE5BE97E588B0E79A84E38082, 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '数据结构');
INSERT INTO `spider_text` VALUES ('1430', 0xE5BA8FE58897E79A84E5BDA2E5BC8FE5928CE680A7E8B4A8EFBC9A0AE88BA5E5BA8FE58897E79A84E9A1B9E5B19EE4BA8EE4B880E4B8AAE5818FE5BA8FE99B86EFBC8CE58899E58D95E8B083E98092E5A29EE5BA8FE58897E5B0B1E698AFE585B6E4B8ADE6AF8FE4B8AAE9A1B9E983BDE5A4A7E4BA8EE7AD89E4BA8EE4B98BE5898DE79A84E9A1B9EFBC9BE88BA5E6AF8FE4B8AAE9A1B9E983BDE4B8A5E6A0BCE5A4A7E4BA8EE4B98BE5898DE79A84E9A1B9EFBC8CE8BF99E4B8AAE5BA8FE58897E5B0B1E698AFE4B8A5E6A0BCE58D95E8B083E98092E5A29EE79A84E38082E7B1BBE4BCBCE58FAFE5AE9AE4B989E58D95E8B083E98092E5878FE5BA8FE58897E38082E58D95E8B083E5BA8FE58897E698AFE58D95E8B083E587BDE695B0E79A84E4B880E4B8AAE789B9E4BE8BE38082, 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '数据结构');
INSERT INTO `spider_text` VALUES ('1431', 0xE5BA8FE58897E79A84E5BDA2E5BC8FE5928CE680A7E8B4A8EFBC9A0AE794B1E695B4E695B0E7BB84E68890E79A84E5BA8FE58897E7A7B0E4B8BAE695B4E695B0E58897EFBC9BE794B1E5A49AE9A1B9E5BC8FE7BB84E68890E79A84E5BA8FE58897E7A7B0E4B8BAE5A49AE9A1B9E5BC8FE58897E38082, 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '数据结构');
INSERT INTO `spider_text` VALUES ('1432', 0xE5BA8FE58897E79A84E5BDA2E5BC8FE5928CE680A7E8B4A8EFBC9A0AE88BA553E585B7E69C89E68B93E68991EFBC8CE982A3E4B988E5B0B1E58FAFE4BBA5E8AEA8E8AEBA53E4B8ADE79A84E697A0E99990E5BA8FE58897E79A84E694B6E6959BE38082E8AFB7E8AFA6E8A781E69E81E99990E38082, 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '数据结构');
INSERT INTO `spider_text` VALUES ('1433', 0xE5BA8FE58897E79A84E5BDA2E5BC8FE5928CE680A7E8B4A8EFBC9A0AE794B1E695B0E7BB84E68890E79A84E5BA8FE58897E7A7B0E4B8BAE695B0E58897EFBC9BE794B1E695B0E58897E79A84E983A8E58886E5928CE7BB84E68890E79A84E5BA8FE58897E7A7B0E4B8BAE7BAA7E695B0EFBC8CE4BE8BE5A682EFBC9A, 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '数据结构');
INSERT INTO `spider_text` VALUES ('1434', 0xE5BA8FE58897E79A84E5BDA2E5BC8FE5928CE680A7E8B4A8EFBC9A0A31202B20312032202B20312034202B20312038202B2031203136202B20E28BAF202B20312032206E20E288922031203D2032206E20E2889220312032206E20E288922031202E207B5C646973706C61797374796C6520312B7B5C66726163207B317D7B327D7D2B7B5C66726163207B317D7B347D7D2B7B5C66726163207B317D7B387D7D2B7B5C66726163207B317D7B31367D7D2B5C63646F7473202B7B5C66726163207B317D7B325E7B6E2D317D7D7D3D7B5C66726163207B325E7B6E7D2D317D7B325E7B6E2D317D7D7D2E7D, 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '数据结构');
INSERT INTO `spider_text` VALUES ('1435', 0xE5BA8FE58897E79A84E5BDA2E5BC8FE5928CE680A7E8B4A8EFBC9A0AE69FAFE8A5BFE5BA8FE5889720E7BD912028E695B0E5ADA629EFBC88E5BA8FE58897E79A84E68EA8E5B9BFEFBC8920E5BA8FE58897E7A9BAE997B420E695B0E5889720E695B4E695B0E695B0E58897E59CA8E7BABFE5A4A7E585A8, 'https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97', '2016-03-16 12:07:00', '2016-12-20 09:51:35', '84', '序列', '数据结构');
INSERT INTO `spider_text` VALUES ('1436', 0xE6B58BE8AF95E7A28EE78987, null, null, '2017-10-22 16:29:58', '85', '测试主题1', '测试课程');
INSERT INTO `spider_text` VALUES ('1437', 0xE6B58BE8AF95E7A28EE78987, null, null, '2017-10-22 16:30:28', '85', '测试主题1', '测试课程');
INSERT INTO `spider_text` VALUES ('1438', 0xE6B58BE8AF95E7A28EE78987, null, null, '2017-10-22 16:30:53', '85', '测试主题1', '测试课程');
INSERT INTO `spider_text` VALUES ('1439', 0xE8AFB7E6B7BBE58AA0E7A28EE789872E2E2E, null, null, '2017-10-23 13:00:12', '89', 'test', '测试课程');
INSERT INTO `spider_text` VALUES ('1440', 0xE8AFB7E6B7BBE58AA0E7A28EE789872E2E2E, null, null, '2017-10-23 13:27:37', '85', '测试主题1', '测试课程');

-- ----------------------------
-- Table structure for unadd_image
-- ----------------------------
DROP TABLE IF EXISTS `unadd_image`;
CREATE TABLE `unadd_image` (
  `ImageID` int(20) NOT NULL AUTO_INCREMENT,
  `ImageContent` longblob,
  `ImageUrl` varchar(255) DEFAULT NULL,
  `ImageScratchTime` datetime DEFAULT NULL,
  `ImageAPI` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`ImageID`)
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of unadd_image
-- ----------------------------
INSERT INTO `unadd_image` VALUES ('1', http://image.baidu.com/23125202783402798.jpg', '2017-10-22 16:29:57', 'http://yotta.xjtushilei.com:9218/Yotta/SpiderAPI/getUnaddImage?imageID=1');
INSERT INTO `unadd_image` VALUES ('2', http://image.baidu.com/9939513227163097.jpg', '2017-10-22 16:30:27', 'http://yotta.xjtushilei.com:9218/Yotta/SpiderAPI/getUnaddImage?imageID=2');
INSERT INTO `unadd_image` VALUES ('3', 0xFFD8FFE000104A46494600010100004800480000FFDB00430006040506050406060506070706080A100A0A09090A140E0F0C1017141818171416161A1D251F1A1B231C1616202C20232627292A29191F2D302D283025282928FFDB0043010707070A080A130A0A13281A161A2828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828FFC00011080244024403011100021101031101FFC4001F0000010501010101010100000000000000000102030405060708090A0BFFC400B5100002010303020403050504040000017D01020300041105122131410613516107227114328191A1082342B1C11552D1F02433627282090A161718191A25262728292A3435363738393A434445464748494A535455565758595A636465666768696A737475767778797A838485868788898A92939495969798999AA2A3A4A5A6A7A8A9AAB2B3B4B5B6B7B8B9BAC2C3C4C5C6C7C8C9CAD2D3D4D5D6D7D8D9DAE1E2E3E4E5E6E7E8E9EAF1F2F3F4F5F6F7F8F9FAFFC4001F0100030101010101010101010000000000000102030405060708090A0BFFC400B51100020102040403040705040400010277000102031104052131061241510761711322328108144291A1B1C109233352F0156272D10A162434E125F11718191A262728292A35363738393A434445464748494A535455565758595A636465666768696A737475767778797A82838485868788898A92939495969798999AA2A3A4A5A6A7A8A9AAB2B3B4B5B6B7B8B9BAC2C3C4C5C6C7C8C9CAD2D3D4D5D6D7D8D9DAE2E3E4E5E6E7E8E9EAF2F3F4F5F6F7F8F9FAFFDA000C03010002110311003F00FA56AC41400500140C28105001400500828185020A002800A0614082800A00281850014082800A0614005026140050014005030A04140C28105030A04140C2800A04140C28003430129005301680034803A5002500140050014802800A0038A0614030A0414005001486140050014005002628016800A002800A40211400B40098A003A5031B400B4804A000D0313F0A404B5B1985030A002800A041400500140C2800A002800A04140C2800A0414005030A002800A04140C2800A002800A002800A0028105030A04140C28105030A002800A004A401400BDA8012800A002800A002800A0614084EF4862D020A60140050019A0033400521894805C5300A041486145C04CD002D0025001DE900B400500140086800CD21894009400B40094006450324AD480A002800A002800A002800A002800A002800A002800A002800A002800A002800A002800A002800A002800A002800A002800A002800A002800A002800A004C52016800A004A002800A002800A002800CD200EF4C02800A002800A0625201681094BA8C053016900940050C05A10098A002900BDA9805200A004A005340C69348028012801680034005003768CD2192D6C40500140050014005001400500140050014005001400500140050014005001400500140050014005001400500140050014005001400500140050006800FAD0C04CD200FAD00140050014005030A04140050014005030CD0025002D20133400B9A0029A012900B4009480298052014508028602520173400868012818B9A0009A006D2601400B40094005002D00273486495B19850014005030A04140050014005001400500140050014005001400500140C2800A002800A002800A04140050014005030A002800A000D0025002D00140094802801280168012818B40828012818A68013EB4085A004CE6800ED4005030CD200A00050014000A005A00298094800D001400500148029008690C29805002D0021A004A402D0020A002800A00424E690C96B6202800A002800A002800A002800A002800A002800A002800A002800A002800A18050073BE26F18E8FE1BBDB2B5D56778E5BAC95D89B8228E3737A0CFD7BFA57551C255AE9CA0AE91CD5B174E8B4A7D4DF8A549A249227578DD432B29C820F420D733F774923A149495E2667FC245A49D77FB185FC1FDA6067C8CF3F4F4CFB75AD7EAF5393DA5BDD31FAC53E6F677D4D6AC8DEC14802800A002800A002800CD2012800A003340050014009400B40050025200A00334C6140050014082800268B8C2800A40140050014005002D3013DAA5805340148028B8050014009400B400849348614005002D00B410D03B894802800A0414006281852024AD8CEE1405C28185001400502B85030A002800A0570A02E140C2800A002815C280B85030A00E2FE2678C66F0958DAB5ADBC734F3B100CB9D88A077C773D87D6BD1CBF07F5B9B4DD923871D8A786873A57363C17AF2F88FC3D6BA8F9421924C89230DB82B038E0FA1EA2B9F1587787A8E0CD70B5D57A6A6719F157C1775AFEAD657F688CCA22104BB065861B20E323239E7D315E965798470B19425D4E2CC3052C44949743B8F095B4F65E1DB0B5BB4D93431842A4E781D3F4AF3315252AAE69E87A1422E34D45EE78D78634FB96F8B293DC46CC56EDA47671C92771DDEC33DBE9E95F455AA4165FCB13C2A14E6F1DCCCF7C15F2DAD91F47D585200A2E01400520129DC029005001400500266800CD0019A003348760A02C14C2C1482C1F4A00298051700A4014C2C1482C06800A004A002800A002800CD0019A60152C05ED4C0290EC21A560B0B4C425218B4C4140052189400B9E28013EB40094005200A062F4A042500140C693CD2026AD8CEC1405828185001400502B05030A002800A0560A02C140C2800A0028158280B05030A00C2F19E810F88744B8B493624BB4F972919D87AFF004AEBC1E2A587A89AD9EE7362A846B53719181F0EAFB45D2EDA2D020D4EDA7D49B74A638CE431EE01E84F1923B574660AB567ED9C7439F053A34D7B18CAECF31F8B9E34BA5F8891C3652CAB1694C802E4AAB49C313C1E41E066BD8CAF0119619B9ABDCE1C7569FB5567B1E93E3BF1E47A3F812D353B4751A86A51AFD9571B802402CC7D873F98AF1F098075712E93D96E7A188C5BA7454D6EC83E0BEA73EBDA65FEA5A908DEF3CF0BE60400E36E7AF7ADB37A6A85454E0F4EC6796C9D48B94B73D22BC63D30A003B52012800A002800A002800A0028013340C5A2E21290D050021A005A004A0007BD0019A602F6A4025002D3B805200A00280108A0028016800A002800A7700A004A402D161DC28B05C4A421690C4CD301680B0521086818943014D001400940052B00B400940050312958096B6202800A002800A002800A002800A002800A002800A002800A002800A00280193C4934324520CA48A51BE8460D35271B344C97345A67C8FE28D2F51F0778C5A00CF1DC5AC827B5914E720125187E5D3EB5F77859C319874ADA35667CB54A6F0D5347A9CFCF752EA17B3DDDE4A0CF2C86490B75DC793FCEBBA9C634E0A10D9113E6BDDF52DEA1A8DD6AD67A65BC92B3476113411866CED52C4FF5C7E159D3C2C69C9CE3A37ABF909D66D72CFE47D4FF000C7465D0FC11A65AEC292BC6269738CEF6E4FF004AF87CC6B3AD88948FA5C153E4A28EA2B84EA0A002900500140050014005001400500148625001400DA003B50028EB4001F7A004A00280145001400B4EC02669006680168013140050007F4A0028016800A002800A0028001400527A005030A00290094005002D0020A000D0019A00295C03B500250025030A0096B5330A002800A0614082800A06140050014082800A0028185020A002800A0607A5300EB46C9826721E3EF08693E258E27BE962B6BD8462399881C75C119E47F2AEDC063EA60A5EEEA8E3C560E3885AEE795DD781BC396570C6EB528E47573F2DA8DDF8927A67EA7E95EB54E2276F76270C32793F8A469E8D61E03B5BA4F36D6F8BC5F38DC032367B15079AF3EAE7B88A8B97A1D31CA6941A95EECEE9BE21691044162B7BB60A0008A8A303A7AFA76AF29CF99DCF4796DB17E1F1D6812A83F6B74CFF007E23FD3345C762E47E2AD0A460ABAA5B063D03311FCC5170B1AD0CD14D0ACB0CB1C9137DD756041FC6815892800A002800A0028B801A4312800A00280426681899C5002366801DF9502138A6007AF1480013E94C03F0A005A0028001400520128017A5001D680128016800EBCD00140050014005002D00252DC05ED40C41400500140094805A002800A003B52012800A00439ED4007D68189B85004D5A9014005001400500140050014005001400500140050014005001400530303C49E29B1D0F6C6F9B8BA63C411B0C81EA4F41F4A96C0F38F10FC41BD91C8FB745A75B9FE08D86FC7D7AD4399491C66A3E27D221759A6B8B8BA96404990A1C7D096E6A1C99764B739CB8F1C86F3521B38A2C0F95D896207D3E94F562BA464DD78B6FEE11A25B88610E38DA983D3A0229A8B1392292F893548D084BD94281800375FCE8D84D93C3E37BDB662257FB506C7127CB8FA11D2AA289B972DFC7A9233F9FA746A98E024A49FD453682E6E68DE33B4661E54D359B9ED272B9FA8FF0A971B8D4ACEE7AC7837C7AD6C56DB557696D58011CCBF395FF00114256072B9EA90CB1CD124B0BAC91B8DCACA7208F6AB10FA402668001D6800CD00213CD03019C7BD0027E340C376075A0043EF400A0F6A0421C034C05E3EB40013EDF8520107B5301D814009D6800A401DBA5300A401DE80023B64D002FD2800A0028003D2800A004A005A43014C42D200A10050312800FAD200A60148028012800A005ED400948614001A0042334009B68026AD4CC2800A0614005020A00281850014005020A002800A0614000A6170F5A42B1C0F8F3C646C24974ED35CA4CB959E7FEE7FB2BEFEF512958B48F07BFD6A7D48B5ADAB794B21E58B619FF001CE7FF00D5509B65DAC8C7D4E54D2EE8425E3971CC9B01E33EBEFF00534F94972473D757124E06E2C4649018F1ED4244F314CB6DE4AF4EA2A89B91BED0A36AE0FAE79FFF00577AA4D012DB48B0C8D23A8665FE0619DDDAA58CDBB7D6A094A8B9B3B6C04F2FE68C36EE4727D69A76016E60B1D61B16AA96770A0B05ECDC7B71D71EFD69F30AC60DD5ACB673F953A949472083C1F70684C0D8F0EF88A6D32511CA4BDB311BE3FEA3D0FF003A6D023DDBE1F78D4E9CB1A3CBF68D2643C81CB479EE07F31DEA4A3DA619A39A1496170F1B80CACA72181EE2801C3A5200A60264D0000F3ED40C5CD021B400633400671400673D69A0107B8A007668003FAD002671400EF434804E0F4A00093F5A0039A0039A000500281F5A004ED40C07BD00C2810645002F6A004CD0316800CD020CD0002900503169009400669806690094005001400503131400B480334007D6801334012D6A405001400500140050014005001400500140050014006680395D77C71A5694ED0C6CD79723831C3D01F42DD3F9D2B8EC717A8FC48D4E59F6DAADBD98C70A5779FA9CFF00852B81E4DE35F116F596DE1B8267F34966E7749C727E993D6A1ABB2DBB238349A4388F0ABCE7A73F9D5DAC45DB346EAF6DE585120B08ED4E39F2DD9B763D735370B685341E6230078079E7B50D8922B4B10673B3257D49A571D8AB210AD8C7B1FF000A60908D83B4A640EE0F634206840C410476F4A621DE7B82B994A119C3E704668035AFE45D474C59D10FDA20DA1C024961C0CFD3814EE066A5BC9327EEE32C705860F61D69DEE237BC1DAB7D827C4D9FB2CC551981FB8DFC271E9DBFFD5401F48FC2BF1183FF00126BB600805EDC93D3FBCBFD47E3458AB9E921815C8E47AD480A0E7A8A631A73D3A5002E681099F7A005E940C4E4D001C500C53C531064FA5001ECD4000A0001C9A005A003F0C50014800D300078E8450019A4006800A0606800A005FC680026810940C2800A002810B4862520173400669809400520168012800A002800A6303D290094001E69005004B5A99850014005030A0414005008281850014082800A063269638227966758E2452CCCC70140EA4D0078CF8FBE214B3412A5BCE2C74BCECDC78926F6F519F41F8D4B03C4F56F176A1792B4366DF64B5FF607CEDF56FF000A760B986F7322B366476909E5C924B7AE7D6A463659A4653E630624F7A114F61610082D2703A820FE7C50D923D50C8AE7A6D048F7A8B8EDA092261B23E6C0FA53B8885DDD4FCF1E07438E0D21A57222A8D3EEDD81D7D698ED664136DFE0383D6813576405B1B7D3A75A6989A2C6997EF65782555468C8DB244E015917B839A6846B6A8AB65323DA645BCF1078C77556EDD693D1948A9A14C61D5AD40276B48108C763C534432F5B69A46A9A9D990042D16559B90A410413F99AA03674AF17A25AC0B711CAF244811A44604B11C66803D3BC1FE3BBBD3D41B3B84BDB33C982463807BFBA9A4C699EBFE1AF13587882226D1DA39D7EFC126370F71EA3DE9146DE719C53101F7340076A062E4FE1400BBB8C63F2A04379391DC534029CD002FE74084C73D0D0317EB40071F8D002D002038C90280173C7340099CE31400B4001C0A002800A40140D0500C2810500140C33EDCF4A0402818B480314201280168012800A005A003AD0025200A00314005300A40140C43C74A40253026AD0CC2800A0028185020A002804140C2800A0028011885524900019C9A4078E7C4DF1B47716F3C76ECC34CB524BB2B63ED2C08C63FD907A7AF5A4D8EC7CF1ABEAD3EAF7A67B86C28E1107445F403FAD310D86D1677C170AA319C0EBEC3DEA1B1A45D5D355234639556076BB30C3F35372EC96E654BF35C1DB82B9C2F3C1A05EE88E78C1C1028045BB760E8A8547008523BFF9C522C64AEA8A54F25F8522844B3365621B939E3F0AAB3E84A76D4899B241E73495D6E5EE009CF527BD3B89218082F820E3383517D46D5CB9A4DAC335E341728B2092360AC4E3691C822B44CC9A24B96F37C2F6CDBB32DADC1809C7553923F0E29AB01996B237DA232BF7F7A91E99C8A3A81D06B5792DAEB779E5000CCA03027381C631E878A77031026D462A70076A2E22EE977B716B7082DDDF24E028EE7D2AAC4DCF41F0D78A966BB8A22F35A5F8E55D4E32DE80F5068B1773E83F0278A46B76E6DAF085D462196C0C0957FBC3DFD47E35233ACA4038FAD300EDC134007E34C05EBD28001D4E41A005FC3140074E4F4FD6800CE4F02800E0D0019E98A000003A0C0A0428233C50314723B5201298050035D88DB81924E0FD28603BB75A100A3AD0C02900500250014005030FCE800A402D00140094005200A602D00276A4014005002D36025218500028010F34806FE54013D6A66140C2800A00281050014020A06140050014033CFBE27788E4B55FEC9B4708644DD71203C853FC1ED9EF52D8D1F3578CF5BFED0B86B78801046783EB492B83673319F98E3F0C55126B592B08E40474507AF5E3FC2B2668852F8B780FC803127A73CFFF00AA9A426EE64BCC4CE761390C79CD037B087E6E9C526C7025DE02C6C401823FCFF2A94363267F981E0043C1C7735647523760FC3119C673EA7D28B94569085623A0CD009D86A901B2738C763D2A5BB02434AE79C86C9C919E94EE2EA4E8EAAC8CAC7767181DA81CB72390B7D9DE351F2960D8FA71C7E74EE4B4561BA3646233820E3A679AB5624B97D7CF7B772CF2FCACDC000FDD03D280210EC41072413939A4161F1318640F1B10CA72A47635698AC6E195AFAC16F5495BBB7215DC1EA3B1FA8A4C947A3F82F5D98ADB5DDB4C0DEC0C097031F37BFB11C1FC6828FA3340D522D674A82FA05D9E60C3C79E51C755FC3F950CA4688E9DE9000F403AD002D3063BA8E9C50029FC8500260E79A005C1EA28013A93D49A04078A004CD0317F5A0418E719A06281ED4001E3A502139CD031AE0B3263A03927F0A007F6A0033C50C05A4014009400B4009F8500140C2800A1885A0625200A002801690094005001400500140C43D69005300A4025004D5A90140050014005001400500140050014011DCCC96D6F2CF29C4712176FA019343047CD3E38D4A57B3BCBC2479D712171907B9CE3F90AC1EE688F1DB995A59198FF0011CD6E95919DF516DA096521954ED040CF6CF6A4D8246C5AAB18D6DD800ECE437AE31C11ED59B5729D8A9AAC8915C0454C61400318E94D89232D491B57FBC734BA1A2D8B6F1158F8603B103D2A013B0E8257B6590C60658614919C8E41F6E8698361A646B25EC08E06D0C4907D003D7FCF7AA466C6CD1AC696E1B8936B3118E792719FC2932A250B84048C0C114931B4566DCA76E319E7834301E872A154F6EFDA96C02A44CC40CA8C8EAC718AABE84F52EC641B641216DC370F603A8FD49A8B9692284C430E33BBB62B5899C88C03E983D29B10E0DD3B0CD21937AE39A6B71B45BD32E4C1F68560A5254C156F5EDF8F356CCCD7F09EA2F61A82E5888198472AE78C1CE0FE07BD2047D13F0A35678B539F4E918F9770BBD47501D7D3EABFCA8B947AA8F5A4363B3400AA71EB400EEBEA05300C03C9A004C902800C8A005E73C50021EB4007B9239A042839E8681864E68002781400039EA79A0038FAD0021249F7A00503140067143014F14806E727028016800A0039F5A005A00281894085EF40094AE31475A2E0250014005001DA9300A000F4A004C1C50303400806680171EF4005004B5A1985030A002800A0028105030A002800A00E5FE23DDB5B786254472AD70EB171D48EA7F963F1A4C68F9B3E225C3AADB5AAE40DA5C9038F4FE9FAD65D46CF3D7C1624E338E715AF3116357475F32CEFE258F3208C48A7233F29E9F966A5D9944D149BD20B9452E50ED7C1CE07638A57B0348A7E2588ADE2C8B9298C139CE0FF009FE54D8E266C201627D3D6B3B965E88E558851BD4671EBCF6A0121D711116CCDB0E1180CFA53134456930B769246192E3600073EF473585CA549A7FB45C48E5B686E8070063B54B772A2AC2392319C00BC7152514A505B3C639E2AD221B04014819DCC78FA536849930C77F53F952F406EE3A270AAD93C0CF5E68654511AA6604C8C375FC29C5932445E5B17CF38EA38AA2451F78679E686522551B8E33421B648885880BD738E2AD33268B56F84B8DB2E50104723143D05748F61F07EA66D24D2EFC72D0B23B6D3E9C11F9669269967D211BA491A4913EE8DC02A47707A1A761127B0A061CD002FE34001A004CE4E2800E338EF400E028010E0FD6800039FBB8A000FB8A04267D698C3BFD69085C5030FAD0203D4D031734D8060FE74803E9D2800A003E948028017B714009DA90C5EBDA9884A430ED4C029005201680129805002D0025200A000D0310D001400B400D3D6901356A40500140050014082818500140050006806703F1667DB63A7DBE0E5A569338F4007F5A96347CD5E3B9DA5D6254DC4AA00B8FD4E3F122A1152D0E55BAF15565D492DE9F7125BDCA3A0DD9F94A67EF67B50AC80D882DE25BB2F6EFF00B97FBD1E72473E9DEA1B292B9CFDD4E49921396404EDDD9C8E78A7712DC6401998ED38C726A1B3468B2653108954056041DDF4A57608D0712BC73C7E5EC2CDD31D78E7AFE345C0C59FF7721471DB9F714C968A5BB3149BD783C8CF6344871047CA1001045243639E2C2F20E7823DC536C9B1148850E474FA552D4964BCBAEE00E4E4903B0FE94B6102A79CFB5B9F404E2829368D383EC42D6E52E0ED9957111E406247714681B9A7AC9473A34531C96FBC77745F97F4F7F635A696259CE5DC6897B32C243C41C8073C1F7CD2634EDB8C8D413C9E723031D6807666CE9D6E8972AD3B2A47D79E3A528EE264FA9428F6373772A005E50203DF1EBF88CFE95A2336AECED7C1E5CE8712C8AC368C67D4633FD71511D646AF63E9EF0FA5C47A258ADE22473AC40304391EDFA62AC469633ED400119E9DA800C7A502108ED9A004C67A5003B81D280133400A3E9400119E31C5003493BBDA800E09CE29809F8FE5400E14805A00074A062F1803F5A60264669084F71D2818BC9A003A5200ED4C033EB4802800A005A402503171EB4009400500140051EA007AD00253B0064D48013CE28185200A6021340094809EB5330A0028185001400500140050014001A00F3AF8B5F7B4CFF81FF4A965247CD9E345FF0089DDE6DC60BF000F615311CCE6BAB0E29B249A321C1565E339E3BD48EC68D8F98F37EEA5543C21C1EA0F6A865A286AC5018D118B38DD927DCF7F7E95692B058AF692159C0007CDC1CFA566CAB96B538FCCCB263683C606DFD2A40B524FE7AC1399412C419588E41E847E99A02C65DDC524F753B47F750FCCEC40017B13E95484CA32C912831C477B639908C2FE03FA9FCAA9EA2445193B8364E0D4A28BB6E4B22E4FCC3A7D3D2826E364899B6C9B098D98E7D855C4996E4F705F4F747B76DC92A95190482BDC669B4495F4D824BCBC860895999BAE3F9FD29582E7671783EDDED489EEA7F34AE03201B41F5C1EA3F1A7CA82E71F7D6B2595ECD6F30C4B1108769C83C7041F42391F5A3602F41E1ED6A48FCC5D3DC46CB900B286F5CEDCE6A92B89EA67796D0CACB22B2329C3065C153E94305A1A25D1A22CADBBB019C8150B42AC497534F7D3C4B31511C5F2AC6ABB42FF009FE556E5A0ADA9EAFF000FEC3FB4AF34FB21B9219A6C7CA3911E01FE42A20548FA4D540002FDD1C01ED5A9371C38E9408763E5EF40083D7BD0028F7A00063DE800EDC7340083D4628014734008339A003AE79FC2800C74E28003F4C0A6003838E290C527DE80133F4A003AF7A041839C741400A7A50310F340050020278345805073DE90050014005002D00252630C1A480298053401498052D80055009DEA462E280139F4A4004F34C05148061EB4013D6A4050014005001400500140050014008680389F8A9007D26CE6E731CE46074E57BFE552CA47CE1E3DB5D9AAF9C06D8E58C73FED01FD411CD25A09B38B65C1C8EF4C42C4DB5BDC1E47AD432D1A1A592E4AC5866DC08071C9FF000A968A4675FC7B6E1BF74517DE82AC881C1474C9E194367FCFBD1CAD88BDF6C32DB79522866518E7A9FF0038A8B0EE57B5B868DD1770081B70C8EFEB4EDA05CAFA85EBDD798640BE8A14600E7D29A8D80CB7EB927DC8C5326C58B71F23641C9A95B94CBD6327933AF98BFBB3839CF4F7A6F520D49E336721923CF9521DF95E9F9D34EC26AE73D7273348119B6062D827819ABB9274FF000F2D924BDBAB976C2C08149EDF31CFE1D28B016EFF00C61B2EE26B68A468639C9621FE5923E980B8FC41F61EB49341CACE8A5BAD18A0D60C96F2044CACDB7E7007F081D73CF4EBCD5589663D978D23B9D4638E6B63059C8C543B1CBAFA3376FAE3FA50B4197B5FF0D47A9EA0972B30858E3CEE321C01C118EFDA9363D0A09E13B882695A192274EAA4B6323D31D4543BB1A6996B49F0E14B867BADA5339201CE6925765688F76F845A0950FAC5C46555418EDB8FBDC619BFA0FC6B54883D3F391D6AD883FAD20141A000FB5001CE680133EC68017AFB500140098E99A003F1A0000209E28013B7BD002F22800C63EB4006323D2800ED4006DA005A0686F278E71400A48C50027F9CD3017EA6930002900BF950025001400A2800C7AD030A56012980BDA8D804CFE74804CD1600CE281867348051D28010D0021A005ED4806934013D6A40500140050019A002800A2E019A004A4014C0C8F15D87F696817702A6F942F9918FF69791FD454B1A763E70F175A35F5A98A055FB4AA6E4CFA64E47E22B3D8BB5CF30994AB90C00EFC55DC8688CE42ABF4CFDEC75FA527A890FD3DDD1D821208F989E952D1ADEC2DFB97F9DDBE6E0631D692D057296471CE31D0FA53D50D31F93B4E000C0F4F5A9B0CAEEFBB20FDE3C9CF7A69015E53D11704E3B75A5719130DAF824114D92D966065116EF98F3CF1D29587B9360E3E5F989F4349824496B34A51A151947CA11E9F4A181D3783B4CB3B7B5BFD5B55092C76C4AA0917705C725B1DCF200AB8EBB99C8E7F57BC8AE750B89F4C88DA5A4C361893E50E07525471C9E7145C6914260EAAA7EF2FA7BD25643D5117EEF7FCAA3903B77C76AD13219761411DB2C87249242907806A1B291DF783A699E193CC791ADD214215CE42925B803E8288B09247A8C5E15B69756D22C3CF9524BA086671DB29BB81ED4A2F981C523BCD2FE1DE8F673892E3CEBC0A7E58E62027E217AD68A36259D8AA04508A02AA8C2A8180055087E7818A6003E87F1A4028E680039A004C8CFAD00007A5003874A0043EF40098E68017DFB5001FCE80109E6800E00CD002643605002E3F4A000F1D39140050019E28180F5A005CE719A00406980BF5A4C04C75A400BD28014D03B07E74082800A0621CD020A060690099A0018E28188686028E6900A4501710D166025002D26C04C1F5A009AB5B9019A002800CD2012980B9A004A40140050014000EA33C8A00F05F883A349A5DFCFB10E23732267A3C4DFE7F4A891513C63C416DE4EA2E402226C3467B0523A7E14930667C112CF7490BB18C382011EB8E2A922486DE17692443B56555E10F56FA54B43B904D2ACBB5A357E461B3D8F4A5618C8D9564F98131B7DE1FD7FAD360990BB049701F700BCF1D7BD4A2EE5595896073D7BD55AC4B93B8D56C2EE039271516D4BBE83189278E09F7AA466DDD16225DB6EECA4EF040231D41A4C69E858B72CC8431E4F5ED532291B7A4786EF6EA06B8876045C84DC79908EBD3A73C0CD093684E76D0DFD6D5ECBC04F1CAA629E6DA1D4F0C0B38E0FBE074AD22ACB5259CBE81A7ADE158D8BB3331015474F4E6B09B6DE86B15A5CEFF42F0840CA556CA5BF9E25F3642A0958F1DF1FE7354B4DC7184A7B2296B5E0AB3977359A3595CE3708DB3E59FC0F2BF51F955C5A7D499C250DD1C1DF5BCF673B413214910EDDA4F4A1EAC89791E91E00856EADA15C31F3E744624F5C0553FD693568B04EF23D9EE5DA3F8A7608C76A870A831D06D2A3F90A28EC3A9B9E9791D056E40B9A0419F73400753400BDB340087F33400ABF5A0009C50019F4A004EF400BD8D00347AD0028F5A000F5A004E72450003AF14C009A402F518F4A0030474A0043EE78A005E7D281DC3F434C04E6900A3EB4000EF4000A40140EE0680B05020A0607814083340C414802801B8F989E6818A0E6905C3F1A005CF140828E6631060D002FD0D26804A009AB4200D300A4025001400500140050014005001401CE78E3453AAE97E640A0DD5BE5947F797F896A5AB9513E65F1A68BE416648C8889DC8C3F83FD923D0D4EC1238597AFCC086073EE2AD3249BED02E90492868EE233F2CAA325B181CFAD4B61633EEA49249F7C89F34849254601CD2B8C6323070ACBC023F0A1AEC3486BA82383D3AFB52436549906E18E7D6A89089B2FB4F21B03078A9682E452050392C0E78A2E86D685AB54312B3B73D7E53D3A54B4547445C83270C17710A0EDED48AF33BF4BB7F0FF00856D64B888C8E8155915B6905CE7BFA66B58FBA8CA4EECC3BDD44F88E089551A28A37E62620E4FA93F43FA9AC6A5435A7056B9B1E07D2A5B58EE27BA8BCB667291F3D573C9C7E9F4A5177D50DC75E53DB86CD07C3A3ECEA0C84A8EB812487B9F61FC8564973B3D795B0D4D5B72D5CD8DCEAF61671EA3A6C72457602C7796E3E6B727A3119E99EBED4F48BD0E09D4753E23C3FE206812453CA2EE1D9776FBA3938EB8E47FF58FA35742775738DE8CD8F8656BB0E96AA47EF2F0364761BC7F8529BF75825667A6F8D1DB4FF1EE9D7CE4F97FBB7040E815886A9A2F42EA23D4F8CF1F85749981E0F5A09179EA280147BD001D2800E2800FAD0018FA5001EF400B9C8E2800C77CD002138FA50019FCE800C803D4D02133F5A062F7EFF4A60379CF419A402E368E680178C7BD0020FCE80154F14000EBED4C043CD2187F3A005073400A3814C04CFAFE7480290C2801474A042103F2A003B1A0627E34980940062801690050014862673D2800CD318A290583140892B4202800A002800A002800A002800A002800A002803CFF00E22F8496F2DA7BFD3E2CB9CB4F16321877603D7DA93434FB9F37F89BC3AD6CC5E0DC518E1703A7B13FC8D4B19871E9D74891AF94C439C03D89F4FCC54368B51269B46BD428CF008172727EF374EBB473FF00EBA9E62942C16FA3C5AA4F15BD93C8650BFBE90AFCABE8688DEE4C9237D7C096EB010647738F99B18C9F53CD68D3211CC6B5E18BAB294BC31C8D08E373720E7FDA1FD40A5CCD2D47A3D11990E8D7724F0C42364724020839FA8A972B8F92DB96B53D1A6B2B3693EC924517DD05D0825BDCD2426644424042B96DB8C74F7ED5571A3B4D23414862FB6EAD2791663056263B59F1D377A0F61C9F6A22975072E88A5E2BF105CEA026B3862416C6412091325980C103DAA9CB4B12A1ADC668492DAC72CF86CEDC952BF7B04638F5AE69AB9D31D363D2F4BB949ECADDA48238BA92509C3F3D79FA55D38D91129FBC8F48F145A93A2DBCC8A4A24892139FE165E0D4534EECEFC54B9E0A48EEB419525D12C9E2E0794AA71D88E08A895EE70AB9E79F18F435B84875055FDDCABF679C8E39E76927E991F80AD68CAFA322A474B9C6FC24D3A4B6D674BB5B83B992E5DC1073903254FE40554FE1B0A1EF33D23E2A5BEFB1B1B85EB1BB21FF008101FD454D169686B38368ECBC35742F740D3E6C962D0A8627AEE1C1FD45751CA698EB8A60078A00527B5002F6A00523BF4A0043CD001C50021E28014F4FF1A004EA326801467D68101A0621EB4083AD030C1E680000D001D49C83E99A0052338E303DA8001EDC50020E0734009919E791400BD39E940C43D7DE8017BF3400A7E9408423B503171E87148618E334001E05020FA5030E280131498098C0A003B7BD000290077A63023352018A601DA90C3340EE14124B5A101400500140C281050014005200A00298050014802981E7BE3BF040BD56BBD1E04695B3E6DB6061FDD41EFD78A96867936A3E166B6BA592EAD2EE0652A72CA54023A1CFBD43A652914752B9D2EC885BC80A6FCFEF0C24E4679E473472A072661DF789AC6C6D9ADF4648D88E8C54EC53F43C9A6AC8577D4E421BCBF4BD92EE2BA9FED04972EAC739F71D08E9C74A6D899D6E8FE294784C1AE7CB2E36F98172B20C7F101DFF000C54DEFA0D7721BFF1469FA65B6CD1A269A6C6D57707620CFBF271E9FAD095B61B7723D27C4F16AB1DC596B8608C48B8473F206FF64FA7D6AB4EA46A694D068B601AEEECD934C987F30619C9EC700F5FC39A56455CE335BF10DD6A9772A0444B407091950587B93D89F6A571E84BA1DACD23191950AE72BBBD79ACA524691475FA2E96C24D93EFDA41639F94A8EBF8727AD42D59A743D293C2A62F0D35E48ACB77B4490C4380B18FE1C7A9FF000A9F6EA32B17F57E68DCEABC0F7116BFE1A934D9C812C09E50CFF70F28DF81E3F0155AA6A44F37BBCA5FF01CD3A0BDB0B8421A03CFB367047E99A9ABAEA4A37B57D3A0D5B4E9ECAF17314AB8CF756ECC3DC1A98CB958E4AE8E5FC1BE0D9744D464BDBE92367456485539EBFC5EDF4F7AD2557995888C1265DF195BADCE9173BCEE645322A83DC0A88E8CEE82BC5917C29BA69FC3F34258EE8673C1FE10C33FCC1AEE8EA8F2E5B9DBAAFAD5921C66900E241E6801C07BE2800EA68003C5001C60500267038EA68013AD301475F6A4003F3A0039A004C628013EA78A042F4A0603D680176FAD00046280128017EA0E28010F5CF1400B4009C2FF00F5A8186475A005EF400B4006690086800ED486267B014C05028010D200A001BF4A006D002D2017B50313F1A003AD20131400B4012D684050014005001400500148028189400669885A06148425318B48443750C7776B2DBDC28921914A3A1E4106819F39FC42F0DCD637335B609922FDE4471FEB13D87AF51F98F4A4D0CF179CA35C38F940CF40081FFD6A9B084C60AF04330054EEED482C5A89558AB49F74F2DC6681F910185177658AE41E08E9FE7D695CAB21B0403CD01D4329FE123AFF009C51706882EF872C10A2AF41C91ED8CD1726C58D3AD80BA12C885947240A96CB48EAFC2B14D712948E353C8DBB8124E4E30077EDF9563257D8D23A1E97E13D045D6B096A9868633BA6900FBC14E07E678A2A3E58F99A538F34AE7AEDCD88991911383D429C0E2B924AFA9D51A8A2F5380D62D2E7C31AA43ABE9E31197FDE22FDD19EA0FF00B27F9D74D29F32E567356859F323D0B42D42C756B637F62A8AF301E70E37861FC2DEF4A69A7A99C7534C0EF5231B212DC50546C646BCA8D6D3975FF964FCE70071FE7F2AB8EE7441E8CE5BE10BB8BBBF8D4FC8D0A363DF7103F426BB60F43CC96E7A67E35648E078E28011BE9400E1D28014D001FCE8010714008471C734C0074A0052322900BFA50007D073400631D68109B47503140C4C1CD002E39CD001DE8001400638C7EB40001C7A500031F4A003B5000706818BDA800C50212818BF950025200340C07BD020340C3F0A002860231EB4806E7DA8001EF498C5CD0014009838F7A005CFAD2013340135684050014005200A00281882800A2C01458028013340050019A00334007D28030FC59A141AEE9C639542DC46098651D54FA1F63DE9319F36F8D7C0F8D4659668A4B7BB5E1D40F95FFDAC77FA8352D8EC70F77A35C46F9546CAFCDB8E02F5EC7D0D45C7629C3208E3F2A4F9A4C9F9BA71E98A0762CC1179C5798C2E3259C81C7B7AF4F4ED498EC49E40926023705FA65BB52B8586CB66E63CB8291E73B98704F5CFE34EE2B1A9A3DB4132A818553F3920F271C60E39FC6A1B2D23ACD36CDED25F345C6FC865F9463827F9FB8A147A8395B43DC3C13A40D2B478BCD8FF00D26702590E3A7F757F01FA935CD525CCCDE0B96274233C2856E95086FB91CF6B0CF13C5344248DC10EAC3861E9551F75DC529732B1C63F85B51D0F526BAF0E991E26180BBC1600FF000B038DCBE9DC56FCEA4B5326ADB1DDC0CFE4466640B29505D41C8071C806B218FCFE7DE80303C5D76B67A35ECE4E0AC65147AB3702AE0AECDD3E58B3CE7C3BA1FF006BDB5C49657A22D5202A618776D2E3D8F507FC9AEA7271763822B995CEF7C27E30B7974693FB72ED21BBB66D92338C170785381D4F041C56C417CF8DBC3EA405BE2C719CAC4FFE1400C6F1DE808E81AE261BFF008CC0D81F5340D9D1595E5BDF5B89ECE68E784F01E33B87FF005A9B1163B520179A003183DA800EDD88A00093FF00EAA0031EF400628001D6800C7A77A0041D79E9400BDE80133CD002F205001D71DA8003DFAFB5016133CE3D298580E3F1A00075269001EBCF4A061DE8017AF5A003B50020C52003C9A000F4EB40050019C74A0041CF5EB40077A453139EF40808A0043DA9318B8A4018A004A00439C50018A009EAC80A6014802818520128B80517B809400668012801686014D0C4A041400521876EB40191AFE8B67ADDA98AE906F03F77281F327D3D47B53684789F89FC28FA6CDE56A766AF031F9655C956FA11D09E38EB5938948E54784F4FB8986C8E6B97C05557009FA003AFE3CD0916D99F71E0EB6DE5E1BDB882457CF96CA08033D33C1145912AE76167E1AD422D352E6D74A99AD073BD22049ED9C753F502A7992D0B5193D910D978766B99775B6993C9239D8018D8A8CF6E4607E34AF15B8F9264DA86897BA7141A858984670030047E9D8D5A717B19B5289BBE0FF0EDC6AFA94534D03258236F9242BB4363F857EBFCAB29C945591A462EFA9EBD8E73803D85729B37D0720E79A10992000F5AA24303B5210D3D698C4E9F4EF401E75F107513A9DF43A358A34922C833B79DEE4703F0C9AE9A6B97564CE5CDA1CECFE1BD6F4D45966B2997612C248886298EFC722B55514998B83466C2E8B74B35DC5F688F259D4B952FEBF30ABD6DA13CCBA9D969DAB783A5445BED1D2CDB3F7D81707FE040E6B39464CB8C93D0E8ACF41D07C43A4C574960F04726447872ACA031008E71CE33DEB1E795CBE547277F6B7FE05D6EDA6B5B8965B191B76DE82403EF238E9BB0783FCABA212B994925B1EB5657505F5AC5756AE2482550E8E3B8AD5924F9F634803AD0018C7D3BD0003F5A040681867EB400671D280019EFDFD680003D6800A00514008463B5001919F7A004EDF4A0077402801A7934006314001A0602800A0039A000D0014803B74A00050014005000450313183C5200C62860263DE90C5A003B500276A402500271EB4013D5901400521886800A0625200CD002508038A6019A6019A00334800D3B8013EF48069A00534011B64E4038A0081A149D248A68C3AB0C3ABA82187E3401E73E24D3EDB49F1BE8E74F85208D82B954F5DE467F2FE5515169734A6B53B0BDB5B3795669AD6DA4983643BC60B7D6B8F98EEA70BB248C97036EE603DAA6F72DC6C4AAD80016EBEA6910D126C57C16556F4C8071419BD094504362118140146DF5AD2EE279208751B56963255944801047D7AFE156E9C96A4B66928DCBB97953DC722A1C585C0E40F7A632BDC5CC36D1992E668E241C96760A05349BD81B390D53C5ED7864B5D02279A461B44DB78FA8AD6304B5910DDB4466DADADD784C8BCB8B26BDD42746712104AC23BE4E3EF773ED5AD94CCF546868B6BADF8BE2FB45FDDA5A6944918B75DAD281D87278F73E9570A718EC4B9B6664BA4E9FA2F8E4E99796AB2E9B74ABE5B4A4E537743BB3FDE047E35536D2D094B51BE29F07C56FAD6996BA5B48A97CE54AB1DC62C724FD00F5F4AC54DB5A9A38753D234BB2874DB1B7B2B5DDE4C2BB14B1C93EE7F1AC53F78D3A147C6D6106A1E1DBD49570F0A19E37032559413FA8C8FC6BA14ED2B19B57384F0278CADB44B56B1BF8A7681A4322491FCDB320646DF4CF3C7AD6E647A6E95AC69FABC464D3AEA29D7B853861F50791401A1D7A5020C0A061DBD2800EFC0A0041C9E2801DDE810DCF3CD031C39A0028013140083D7AD002FD38A004F4E6800CF19A0028014F4A0684EB40BA80C8C67A50313E9400A28011BAD0028E94D8054805300FA50C0335234069A010E7D6860152C02800A2E31280027A8A43128284C7BD0413D592250014802801290C2800A004A004C7BD08029805002679ED4005001D680019E94200CD1701A464D0031C8FEF6D23F114C0F2DF17EAD04BE2AB7B842248ECD555BCA20E48624807A77A99ABA2E17E84D75E37BA9A50D67A4A3467F8A4C923F11C560A8DCE8F693453BAF13EBEEA9241A7C51A73C188B7EB4FD8263F6B53B0D8BC77A845FEBF4FB53C60852CBFD4D0E82E84FB5A9D51A369F106D87FC7D58CC8DEB13061F91C566E8DB61BAC6DD9F8DB459F01AE5E127FE7AC447EA322A7D9C909B5B9AB69AD6997D298ED6FEDA5907F0AB8CFE47AD4B8C869A3CE3C57A15B41E2B8B4EB10E82E8230DFCEC2EC7A63B0AED82F77539A4F535D7C01ABD9058EC35684440755778F6D3E41735868D0FC609284FED12C98FBE2E72BF43919FD2A5D343E728683A1CBE20D52FA1BFBD9244B63B5E553BC16C9185CF1D8D44E4A3A22E2B9B567A368BA3DA68F6C21B453EF2372CC7DCD6129736E594BC6F72D6DE1ABB58DB124F881467AEE3CFE99ABA6899337745B25D3B48B3B48C00218954FB9C727F3CD76230673FF0010F411ABE99F69B74737B6AA5902F25D7BAE3D7B8F71EF4357409D86783F5F8B59D3E359180BE814248A48DCDC7DE1F5EFEF5C3562D1D1095CE894E2B34C762A6B473A3EA04E0FFA3C9C7FC00D545FBC0D591E4DE19F07DC6BFA23DEDADCA24C921884720E0E141EBF8D7A0B6397A93E97E12F115AEA76CB1DA4F6F2248B9B947015573C9CE79E3B53407B5B724E3D690098FCE80022800C5001834005001E9DA810B40C3A74A006F2680179381DBEB4001C8FA50025002E2801A28017B5030A04040C7340C3A0A6028F5EF4804A0039A003AF6E684028A180948627724F4A4C05A2E020A2E01DF9A005ED4BA808698C6D2010D21850509C8A0827AB242800A002900940C4A4004E2800EF40086801284021FCE98099C50019F5EB400A0F14007E3400633D68B001F9483401C2FC42D6A48CA693A70637370313151C843D147B9FE5F5A572A31BBB15F40F0FDB595BAB5C46B25C3750D8609EC283D1A74B916A8E8012A02212A0740A3A50696435C48719738FAD3295915E5B48253BA682290FAB460D026A2CAD3687A74CA44963064F3955C7F2A110E9C3B19379E0EB2949303188FA14047E9834CCA5878BD8C5D43C23771C4CD1C1E66DE82297767DF0DCD16B983A124F4327ECDAA59DFC52C72B8B88C864DE4AB8C74203761472184A9C933A1B6F883A9C0AD16A764B3B8E3728F2D87D7A834EFDC9B235DBE21D9C9A55CEC8A6B7BE111F2D1C0652DD06187A673C8ED45C4D1ADF0E2CBECDE168243CC972CD339EA4E7819FC07EB5C7513B9B459D2935996721E2E6FB6F88BC3DA675469BCD703EB8FE40D6F40CEA1DE13B8E7B9AE9311067D2803CD7E20D8DA787AEE0D76CA378EE2691A378E3385672321B1DBEEF3513826B52A3A1DAC52334485D4ABB28665FEE923915C1256675D8ADAD384D175032B054FB3C9927B7CA69C3714B630FE0F367C2CE31C8B96CFF00DF2B5E8AD8E47B9DDF14084A00064F2680148E473CD0014083BF5A0614001A003AF5A003B500213C74A004C7B50029F7E94009DC0FD28002A0FF0085001D7BE28017071E9EF4009F5A005E28013B7340C314005020A0629A0041400B40098148619A4C00D0014D0052010FBD00373EB48614006290C438EF4089B35420A0414001E9486369806690075A004A6021CE281894005002639CD00028015A8131B914AC02E73DF8A6056BFB98ED2D66B89C811C4A5893ED4023CEFC308D7B7D73A9DCEE799892188FE26CFF002148EDC353E6773ABB651B3EE819F418A0EC9B252808EF4CCB984F2CE00CD3B05C71071E9482E273D48E29A1A620E5B9A018A40CF7A02E3248524DC24456047719A02E66DDE8BA7DC03BED6304F74CA9FD280F67096E8C2BEF045A4CC4DB4F2C2DE8D861FE34194B0D07B3330F86759D3D83E9F38623906098C6DF9719A96AFB993C3496CCD2D3BC6D7FA7CDF66D7E077C7FCB409B641F51D1BF4A8F629EC459C7E344F69AB5A6A9F1274EB8B493CD8045B54905486D8DC60F7C9AB8D3E5D8CA4F99E87A4ACAA7D413EBC55932858782477E6820E03E2AA9BA6D06C88631CB7997FA703AFF00C0AA67B151DCEC447C9C0C60E31E95C2D6A75DF42BEAB6BF6BD2AF2DC759609107D4A9C7EB4477265B1CB7C18958E857D6EFCF95701BFEFA51FF00C4D77476391EE7A09E78AA01714008C0E38A005A003BD020340C5A000D0021CE38A0420CE39C67DA8185000481CF34000209C60D0007A50028181400840CD000793C74A0031EA79A003A75A000F4340C28010E6800A003EB40053E802D20138A401C50C6148009C500253010F3D0D4B181C7A5001F4A004CD201BF85004D4C40698050019A002900D34005080298C3AD003738A003BFF5A0043400B9C5002120F5A04276CE38A77002463B50071BF11AF9E1D321B388FEF2E9F9FF007075FD715238AD45D1EDBECDA6C31701880EDF53FF00D6C507A7421C91B9A8830314D0DBB8F078A6480EB9C5301C410393EF8A3710D3C807B7D6A4A447C819279A0AB0E5E9EDEB544B14F340868F7A450A403F5A6171A57AF140D3B115CDB4371179571124A8C31B5C645213D77399D47C1561293258C92DA480E460EE5CFF0031F81A16862E845EA8C865F13E82DBA2BAB89204C9055CBA9FA834AECC654651D4E8343F89104ACB0EB16E60F59A2CB28FAAF51548E69E8C7F8CA7B7D4B57F0D7D96649E3927DEAC87208DEA383F856755D90E0B53B9F5AE337B8D6FBA7E8685B81C1FC213B27D5A223F8637CFE2C2BBA1B1CD2DCF4818E6A8428F6A003EB400671400B400868017140083EB400500140076A00319F4A002800CF14009EF40075205002F4A0043FCE8010F419A00339A0618E38A002800A002800A601DA90050027D6958039F4A2C30A900A60140C43CD1601293010E6900668025AA1050025200A0033CD0021A430AA0129301338A100B9F7A602679E452B8098A0437393C531899E3DE81067A50005BA1ED401E6FE2B3FDA5E3386D9589F24247827B9E4F1F8D235A6AF23A952ACFF2F4EA3E9423D2D9136DE39A7633109C10298EC4839A62003038E2810D23049C52189B7269157233C75AA1D870A041D7A673480427B73CD30480374F4A02C2F539A01922A06E0D04B1AC81339E869B434EFB9C678EB49B23A5CD7F0C012E22C12C9C023201C8EFF5A48CEB534E2E465F826379F50F0FEE60552695C03FEF74FD2B2ADB1C10DCF5E1D2B94DC6E7E61C719ED537D476386F86D1AC1E26D7615F9760C05CF007987FFAD5DD0774734B73D1AAC90E9400BDB34009FCE8016800A0028012800A004CE2800EBF5A005A0028012800A003DCD001D680034009CE7D68001DF8A004E73EB40C75021281871400BC50027539A00081DC500348F4E280146450C6843503014C42D030A004C50C04A90128024A6988298053B801A401DA90C4CE290099A698050037E9400138C7AD300A560109E450022E33C7E74C42F340EC2371405888834203CCB42945DF8B2E663F2B1791F23B75A47561D6A7656C3E524700D08ED9E84C781CD5197523EFCD068B62553C753F8D3218EC71C5226E1CF7A682E46410DCF4A19450D4EF52C6059A65768F705257923AF348ABA8ABB27B7B88A7852486459226190EA720D035696C4C0FA9CFD28B92D08C7AE41A10D013EF40080FF74F14EE5343D6438391FAD1721A1CED9007714C94AC737E382C9E1BBB23382554FE2C2A6C15A56A6CE4FC2B6BA9D83D96BB1D9BDC69F0B3E423F38E437CBD7AF39E951357D0F36373D6349D56CF55B413D8CCB22F01973F321F423B1AE492B686D7B970707350B72CE1BE1F9CF8DB5C07BAB938FF00AEBFFD7AEFA7F09CB3DCF47EE6AC903D7DA8001400BDE800A6014804A004E73CE28017F1A004EB4001140067B0C50003F5A005140099A005FAD00277E2800E7B8C5001C67DE8001D0D00203400A483F5A07613F1C50021ED9A0007A7EB400BDBDE800C50019A0046271D3345C06D26314703DE900BDBBD002534862F6A4C04A4031B834AE04B4D0829805030CD2B8584A00434803BFB7A5002669801F7A004EBE84D300C714084CFA75A43051D6980A7B66800C1EE31405C82E498E1918024AA9381EC33421DCF2DF061DF757323704AE4F1DCF5A9B9DD8457676D6470832791C1AA474565A96092490A334CCEC46AA739340EE483AD31363C2D162008C03EF400D209049E9D85055CCED4916581E0954346EB860693368C14D599C4C77577E18B87507CEB076E327A7B1F43EFDE9732D8CDD39D1F7BA1D5E95AC5AEA4BFB893E6EF19FBC3FC7EA282E2D4D5D1AA08E83914D325A11F83ED45C16A2678E3AD172C3340AC05BE5EA69DC56390F89179B34A82D41E659771FA28CFF32295CE7C5AB4525D4EB3C0E86DFC2DA6C65BE6F2B774E9924FF5AE6AB2D743250B2D4D6B6D3ED20B99AE20B78E39E60164641B770072323A679EB585DBDC97A32C30C3508A5A9C3F81C9FF0084EB546439578E563EFF00BC18AEFA7F09CD35A9E8F564098A402F6A00298050014806938A005A04275EB40C319F5A00060F73400719A004EE68014500263F4A005FA50003AD0007A73EBC50025002FAD001EFD681D84A005E9E940087AD00038A0043D79A005ED4008060609268016801A452B0C2800A0051C53430A96030939E7A5201303D69012D310500068189405C28013BD001EF4001C500251B0C4CF5A2E201F4A620C0C74EBEB40C0F07A7340013400121703B9E82802AEA6C534FBA7E41589C823AFDD343D03C8F31F0660CF380092547D4D49E9E115A373B68388F2D5491A4F563D8075C300475C53207283DCFE940AE483A0FE54D098F1E868201BA503434D03457B942CB8E99A5634A72E56626A16A324819ECC1870456328D9DD1E952A975CACE5350D1B65C79FA549E44C392992149F63DBF953552DA330AB80E6F7E9BB162C7C59796328B7D62224FF7800180F53D8FD4568B5385C9D2972D43ADB3D4EDEFE2DF6D20923EF83D3EBE94AE6F04A5F0BB969413CE698DE8EC34B907E94C76B8D328914302318CE7345C1C6DA9E7D7DBFC55E2E86CE025A00FE5A91D020E5DFF00CFB54CB4479988A9CD3B2D8F61863485447180B1A00AA3D00E95C6DDC6E571D9C722A44B56559A628C0852C73CFB0A66D085CE3FE161375AEEB175D42A84C9EC4B93FD2BBE0BDD38EAEE7A5551905002D002500140066801290062800C66800C6334007D28013140001CF3D280149F4A0007D6800C0A002800A004CF20628017EB4009D68181A000E73400879FA5002E38C500274FFEBD0014007AE2800EF45C04EF4AE30C734300A4014C029318D34804E28024FA52B885A6014C04348621A004A0042280128402F5A63108A448E1D3D2980940C5A004FAD0027D38A00A3AC311A65D7192217C0FF809A18753CE3C163F765C0391B416FC39A8D8F5F06BF76CED21002004018AB429E8C54C927229889573DC714C8B0E5C1E6810B9E7D6810EA010D3FAD0318FC8A02E50B88D704100724FD7350CECA526635D400A139F9C0C63D6B19C6E7A14AA3397F1143FBC824923CA84653F5CFF009FCEAE9688F3F348C5B522F5CF87351D311350D0A595A3650ED08396C119FA30E6B4B1E6D9C55E2EC69E85E248B516FB35C20B7BC538D87A39F6F43ED41D94AB29E92373049F7A0E8564721E2DD786D96C2C9833B0DB2BA9CE3D547BD238F135F47181D4FC3DF0D1D1B4EFB5DDC7B6FEE579047FAA8FB2FD7B9FFEB565567D11E7C236DCEB474C573234239580071D7D053B171DCE63C49AD43A75ACE9E6037401DA8A3BF6CFA0AD210727736752305A87C26D324B3D1EE6F2552BF6B71E582304A2E7E6FC493F9576A3CE93BB3BAA090A00281050312800A002800A40277A005A00319E28010003A50018C74EF40062800E9400B40086800A00011D68003D280105002D0310F4A0028013E9400B4008466800E9400521A0A004C63E9400B48043D69805218DC734804A00928105300A00334862668010D003589C7340301D4FBD00281EC7EB400703AD00C0F6C53106680128B8C01E6930132338EF4C0A3AB1FF008965E6380207FF00D04D034B53CEFC18B98E4040C65739FA1A896E7AF86D291D840D8DC0F38E9B4F26AC5310B6C91C8EE7B7146A16BA25E368271FE34D5C868941C01E9ED4C81DD7A0A00524018C64D021AFD6818D6C76A63488258C72724B1F5A96691958CBB996DA3902CD2C719FF69B04FF009C52E5B9D2AB2868CE6FC52D1FD9230B2A31F338039E39E6A62ACCC719523382B33BDF099F3FC3761249862D105FCB8FE9568F339DEC62F8F7C271EA16A6FB4C8FFE2631E0954FF96AA3B7FBC3B53B1177BA3866D47C43343F61923BE2EC366DF218337B6719A2C5BAD36AD73A8F0D7C3B98DAB5C6AF712DADC100C70C0C3747FEF1E99F61D3D6958C399F5355BC2BE20B239D2F5E69133C24E5871FA8A9704C39994A64F1CC52189048C0FF001ABC6E3F33D28F6487CECAF368BE34BC7D93CA763752D3AA81F97342A690F9D9AFA3FC3EB686613EB1706FA407708D4158F3EAD9E5BF4157621DDEECEE6A8414802800A002801314005001408290C2800A002800C50021A005A00075A0028003D280139CD0018A002818502101340C0F3400668107E140C01E0D00250018A40140D05000680105200EF40C3BFB50025260371401275A0414C028010FB526025243129809D680168109F8D03034C005020FAD00071F5A56189D4FBD00211C1CE7F0A76114B555DDA6DD83D0C2E307FDD34171DCF3BF0690C922FF00B4A7F0C544B73D6C3FF0CEA6191B6E30300F5F6C9FE82A933494490952D9CE770C93DA99095B41F116DA4647BF7C53B8A56254718C679A68C9A25193DB1412C7703A002810839E4D01718401D2818C6E7E83AD05A4707E36FDCDC195F79431E401D3827355147362DB52B9CE3E8D15B5C5C4F05DBCA25CC854AE724819E4B1AEC7847ECF9EE792B1779F233D5BE1B4826F0BC699C98A5753EDDC7F3AE04CEBBDB43A931E7F0A6171C0119C927F1A04D8F5ED4C917BD00181E940050014005001400500140050014084A0614005200A000FB500140050002800A004FA500283400940073400A39A0069EB400B4000A004C5030A042E281886800140074A004A43403D28010D00140C3F3A4025210878EF40C4073D33401213ED400940076A00314001A0069F6A4018CD0800FB734C04A620F6A005C77345806F53400848E9E940074A4311496CE7AFAD171D8A3A93EDD3EE58E4811B9E3BF06994B73CFBC1B8F2E7FF00809A967AD87F80E8ADF04B13C8C7AE2923799329F9413B41EF839AB3264B0FCAC78E0D044912C5D5B18E0D32644AB92304E69993241CE303F1A040C700F14088D8608A468885C16CF61D28291C8F8FA106C55F8CEE29F9E3FF00AF4E2CC3191BA45086C6ED7C8DB079892C4A4363920A62BDD84A13A16BF43E626A50AD7B1D47C24933A66A11B67E4994819F55FF00EB57836B6C7AF7BEA7783A5310B400A29805001400500140050014005001400668012810B40C4A002800A00290073EBC5002751CD002D001400500140050021A0039A0614084E7BF4A06140064E3A5020CF2681803400714001A40071400940C280109F6A00290C2800028101C7E1486349F4CD021D40C5C7AD16010F14ED600A4DDC04C5240140094200EB9A6213B51700271CD2B80A3E957D0627AD2B008718A000FE0690D1137CDD6828A3AD63FB26F0E3FE58BFF00E826982DCE0FC24BFE8B70EC542E40F6CD4B3D7C3FC06FC0F9DC7918C751C8F6FCA92379A251F78020371D47D6A88B0F87EF33313F4FAD044F6264247503B71EF4CCDAB93AB7CF8DA3F1A086895391D85519B56148E338FA5022361827072682D111079C1FAD22D1CE78B82BE8CC48C947539FC714135E37A699D7785645B9F0CE98C14604213079E47154A4D6C79328A6F539BF86198EF359808C6195BDB3B9854ADCA92D0EFE9922D0014C02800A04140050014020A0614082818868105030A4014C02800A401DA800A002800A002800140099A00075A005340099A00281886801738028100A06250014001A004A40140D0BF8D00C3340094200A9EA020CD3014F4A2C034D21899F6A0438508629A620A18C4A40068013F5A004C647340074A4C05A004EF4C038FA5300A041ED40C69EBD3140843C8E83AD21DCC7F134AB168B7EC4803C8718FA8C5052DCE3FC3D1E34F2DB3E52DDB91C0A967B385F84D944601402324E738A123693D07F49994F5C63DAA89E83E3CEE5C671D4F4E2992DE9626F95CEE5CE01E0FA9A665AA4584071C75A0C9B2543C74C9A68864879C628111B8E0F140D101E074A0D1187AFA1974BBE45FBA173F5C7352CD2B46F4DB37BE1F303E17B6C73B64901FF00BE8D523C69189E0B06D3C6BACDAFDD0C1CEDFA3E47E8692DC72D8EFE9902E681053185020A002800A002804140C2810940C2800A005EB4009400500140050021A4003A50028A002800A00280108A005A004A0614007D2810500140C2800A401F950021EBD05001498D09CF7A680314005200A0028003D2900DA430A63B8EA0414085A004A002801314007148621340072681063F3A630C714C04EF4085ED40C69A421A7B9A2E0737E399847E1FBB5C72FB231EBCB0FF000A1971DCC3D063D9A585FEF1CFAF7C7F4A9DCF6A8AB534D1AAB18581113DBF9D52D0A6F563F1CF527271412850015E3807BD313268BE61EAC0F5A444993018239E2A8CD928C9C50664AA00007F2A6491B64F5E282910BF007A505A32B50066B6BD8F6E54C4DC6719C29ACD6E6D522952BB343E1CB06F0D718E2671FCAB4478B3DCC72A6C3E282125825C9F5EBBD7FC454BDC7F64F411CD5102D300A002800A002800A002800A0028010F5A002800A4014C02801734804A6014082800A430A002800A0028012800ED40062800A0606800A00281052180A0419F4A062500140D0500250027E9480514200EF498099A40276A630A007D084253016801290C4CD00140050084E2800A005ED4C04A00422800EDCD00068010F43E9484713F11E654D32D93692649C6481C8C026932E1B858AB0B2B752A47CA38FAFF00FAE923D987C28BF80220D8C81FA7F9CD589BD471C06DDE9CE45215C11001D7F0A626C962003138E0D3224EE4B819A081E87A8A04C93802A881ADD0900D22881D791DB14168CCBF3E559DD30CE3CB62403D32B50CD6A6B4D927C39995F459618DB6B47312CA0648040C55A3C992BEA51F1FAB596BBA66A018921473E9B1B3FC8D4C8947A02B8750C84156E47D2A881D4C02800A002800A002800A0028012800A00281052185001400500140050014005001400500140050021A00514005001DE8003400868185020A0009E290C4CD001DE80128017140C4A4007A50027F2A63014802900869300FC6988750014200A601400948614007140084D0014803354014005200A6014806487084819F6A00F3FF008933126C2200E773920FAE00FEB4A45D3F891AD180AAA33D060508F66DA13E0F9600E0D519BDC0AF078048E7EB4021C870A33C7F4A05244A08EB9A6881CBC8EE4504B1C0E3B5048E0C73D78A616039E99A02C46C78A0A4539218E6468A4E55C153D01C1A935DE2D1C9DCF85EF6D25336997B18656C8666642075E4D3391D06DE8656BD16BECA0EA770F3229182D701C007D05126999CF0B520AE7ADF85AE3ED5E1FD3E56237342338F6E3FA535B1CB2D19AB4C41400500140050006800A000D002500140050014802800A002800A002800A002800A002800A002800A002800A002800A0625001400500148028010D00140050C68414802801680128631284034D4B01BF8D0225E94C02980B400940087AD21850020FD290062800A621075A061CE7DA9800FD6900B4C038269008C32A6803CFBE2338179A603F77E738C77C8A4CD292BC91763932F9EEC3341EEDB42EC4D94079CFA1AA3092D47B6767A1A095B8ABD38CE69831C09E9DBD6825A268CE23E0F4A0CD8D2D9E9C0A0761E318049A6886983F5E73F402818C6C0000C93D7A521A20900761C74E3348D511CACC8A011BB390734154D26CE6B5EE2CE71273B7690DDFAD6517EF1D1898A9516D1D77C3CB8F3FC2F0AE73E548F1FE19C8FE75D08F9C9EE74D408334005001408281850019A004A005A004A002800A002900500140050014005001400500140050006800A000107A1140050014F40129005030A0029082818500250025001F8521A0A002800A60252601DA90C4C8A006E01F5A4225E8298084F340C3340050021A002800FD68003D28013F0A00418A601400A3B5200FA8A00052B001EF540713F1181F2F4F7C02A8EC3F31FFD6A525D8D293B4D115AB6E485B04ABC79CFA63B54AF33DF524E1745ADFC282EC178F99476F4F6FAD55CCA4AE5A04322EC2368E98A2E62D38B255ED9E2992D8A084193C51716E20619E4E73D076A62B0AC324F140C72303C74C71CF7A0964BE60DBB41EB4136EA3253C649E49A184752B49222F2CE76E718CF5E292375193D8A92C84B858D015001E01C83DFDBA50CD610EE616B5E7B59DE144F2D044776EEDCF38FC2B28A7CD736C434A83D753A0F852BFF0014ECED9E1AE5B1F40AA2BA11F352D753B3A0414805A60140076A0005002500140050014005200A6014005200A002800A002800A00280034001A003AD001400607A0A000D0025030A2E20A0620A005A40140094001A004A06149802F5F6A002800A1BB801A56010D031A734804C13EB401267DE988420D03019CD002D0021A005C500250084CD3401D28B8076A003B50C04A901D4C04C7E74009401CEF8EAD1A7D02678D37344CB2607A03CFE868B150F88F3EB4D7CC502862582E40C103143573D3A58C8C23CB61E7C5F0C5F23C448ECBBF27EB49217D7A2FA1A965E25B195D32268F73850300819E84FB7F2A7CB63458884CDD4B97E082194FF00163AD1736F669EC384C5F1BF27DA813A6D1663248E053B99C90F5E5724103DFAD5198BB9547240A409364724EAABBBF87D7B503E5B6E636A3AFD94270F72320F2B18DC7FC295C6AA5386E72BAE78EAD6C4314F2E27DA5B74EC0B6077DB4D230A98E4B48A29F8635FD43C5FA8C16D6576CA6462A71F2F978049240ED8A1A39BEB351F53A7BAF87FACB648D46DE607F8599C7F4A763395594959B3B6F06E8F2687A145693B234E5DA490A124649FF002831372800A003B50014C02800A0028014D00250014802800A00298011CD200A002800A002800A002800A00434000A005340050025030A003E94084E7BD1601714009DBA714861400B400D3CD00140D051700A0029300FC69001EB8A004340C2900D3C1E99A007D17105318500140084D0014005002500039A100B4C008A02E1DA800A4027E14D2016900DE08E3BD0333E5D1B4C925F39F4FB5328E7718D7FC28B8AECF9EFE25BAF85F5A908B767B737251D9460AA30CA9FE9EF551570936914754BABBB6D2DE7D3F6BC91A89029FE35C64E3DF1D29F90B99A5A14B46F89925891BE5758D803839E3D891C7E628E5358E266BA9D441F162D8E0B4F1F1EA14E7EB49C4D962E46D5BFC44132A1F32D9C3723B7F234AC52C5771D7DF1062B540679ACE007805DFA9FA75A2CCA78BF239ABFF008A368640A352638FF9E319C7FF005E9A8B329E29B39DD6BE2607CADBF9D7279DAD7126D5FF00BE4734D44C655E4FA9C96A7E36D5AE15D23B858A37C7C902EDC0FAF5FD6AB94C5CDB39D9AE65B825A419278CE4926A9227999EFDFB33C41B50BA976924A38DC47A05E9FCAB37B951D4FA1C1A062D020E871400B40050014005002F4A60251700A0029005001400500140050014005001400500140076A002800A002800A003A0A0028181A042500140EC19A02C1480280128012800ED40051618526802958029D8038EB4804EB4005031314AC171D40583F1A6014210B4EC025218940052003ED4C04A00514C00D2B8062800ED4001F7A180871DF1405C4FA500211D69A407957C67D0A2BC85659B6886EA236CE5BA2B0E51BEBFE149E8C373C1BC25ABC96372349D49C13E634487A88DC1C633DC123FCE6B47DC8DB430FC5DA39D27532F1E4DA5CB3347FF004CDBA94FC3A8F6FA55224C50320F231541A0E2594E093D739A56195E666672496639EA4D16131BB1F9C03FD4D31364F6B6BBDC02793D3AF5A01AB1AE9A629877678076E40E73EFFD3E94C4D955E1F2CB14431ED0010DDCFF004345C9D4FA63F67CB46482E672AB83110768C72CE7FA0AC1BD4DA3B1ECA00ED4C62E68105002FF003A00280131400B4005001400500140050014005001400500140087A81400B4005001400500140050019A004CD03B0B40086800ED484029DC028185001480280128012800A002800A430A0028B8063BD48C314C419A0634E33405850734805CF34C02840069884FC690C2800A4014005300A0039A0040724D003A801BD680039A002840140183E35D3BFB4BC357F0840CE23DEA36E72579FE9402D0F8DFC756DF63F13DC36709701664C71818C1FD41FE75A43533674CEABE2BF086E5C1BB038FFAEC9FE3FD4D3D85B9E6B130C9122919F5FE13FE735605A75DAEBE53EE0CBC303D07BD0210C7C83B171EBDCFF85005A86DDC43F3A323B9E0E31DFF00FD5FA5162596F4F44DEE045938CEEDDC0E4714C7B9D4DAE8732C4935E4830CAECCCD82140E8280B1CF5FEE9AE42333B1F30441474C0031C7E1FA8A4C11F4EFC16B34B7D32EDC9264511C58C60018C9FC7358ADCDBA1E920F34085A621681877E2810B4001A004A005A00280133F9D002D00068012800A018B4009400B4009400B40050025300C8A4000D0014005030A00280168109DA90050014C614804A005A004A003B5001400940C286014803AD200A0604E290842698C334805A003F0A60277A005CD301290050021A00290001EF400B4C03AD000318A4019A6006801A69000A004EF4C046E460F7E0D023E4CF8D3A30B6B891C0556B4BA68B18E76B64A8FCAB4A64C91CC7C3BBD6B7D4E4B373FBBB85C8FF0079791F98CD3689466F8E6C469FAFC8C8BB62B91E72FA673F37EB5498EC61A3105583631E94C46AE92AD7934B2162A5795C1C1CFF0087BD023AED3F464BA77792596594B1DA3392F8233D7F0F4E94C468E9FA62898C4F1AA9F3362E79E320939FD28197F5465B7D2C908AD233606F23BE001D7AE2807A1C74291FF6D47144AEF1F9C42AB1E9CE3AFB7AFB527B096A7D4DF0AD4AE8573F2FCBF68C03DC9DA33FD2B15B9B743B5A042D002D3109DA8016800A0028017340099C500140066800A004EF40075E9400EA004A002800CE39A0005002D0014C02818948028001D6800A002800A04148614005300A401400500250014009DE81A0A002800A4014800D03129009F5A00426801F40050027D6980BDA80101A400680139A6019A003BFA50019A003AD20168010F5A004269807D69005002628010D023C53E3868AB7335D2A8FF8F9B612824701D3FF00AC07E7549D81EA8F9A2CAE648268A785D92688EE43EE3A56ACCD1DFF008DA05D67C2706A768A19A3513F1FDDE8E07D3FA1A48A3CD939E95441B7E1F9238EF1E394643A8E338E9FE4FD296A2B9D4C5772C0D1496EF88A44CF079041E474F6EB5680E934E2913C57088033E1F39277679E467F9530449AEEF96352BB817258AEF190B83900678E38CD21CB539CF0A4027D7C9F2F6AC61CBAB8EFF4EC73513765A8E16B9F4E7C3785A1F0CA3B3022599DC7D381FD2B246ACEAB9EBD2992283EB400A79A1085180298C5C834001E9C500140843D3340D0BDB9A0185020A003A500277A003A5002D03034083A50004D0019A004340C3D0E68016801081DE8001C0A005A003140077A002800A420A00281850025001400B40086800FCA931894C028602D2B008690C4A003A0A0029009F85003A8010D001DA980678A402500140050014201334C029000A005CF34C03AD00140098A420A630A18098A482C70BF14ED81B1B2BA2A1845294638FE161FE22981F1C6A568D61AADF59B8C182774C7B678FD315B999DBFC35BC13D8DEE9D361821F3154F39461861FE7D6A25A08E1B53B36D3F55BAB320EE8642A33FC4BD41FC462AA2C43E095964591382A73F8550923A2B39A296CA03302648DFEFEEE361C9FE7F9503B1D4F86E72EF1C059A40C0155C701B91F7BB0C678F7A603B5A5417B8F348710FCA01C67963C0EC78A05D4A7E0019D4AE37C8ECC22CE4E79CB0C83DB8ACEA6C54373EA0F01A11E13B1DD804EF6FCD8D648D19D081542173C8CD002D3017E940001CD0007AF06800A042F4E9400500250003DE80168012818BF850014009CFD6801680108A005A0434F3D2818EFA50020A005A002800EFED4005020A002800A60148614802800A0028013340066800A002818868B8062800C54B1862800228010D201B9A621D8A43034C0075A0008E2900638A004C5200A6020E940053001400BC628013AD002D0025002D201334084A0629E698185E35B4179E19BE8C0CBAC6645FAAF3FD28423E36F8916E20F165C48A46D9E28E6E3D48DA7F55ADA3B13222F09DFC563AE58CA40019BC973FECB719C7B1C529928D0F89961E46A76D7EBD6606293FDE5191FA13F9511D819CC40A320F6240C550AE4B6F765222A0905432E08EABC73ED405CDBD3F5536C7F72EA4E17CACE719F4DBDFA0A685737752D416FEC1A470CB280132C71839F5F739FC38A63347C04195A7E0365172C4FAE0D675361C373E9AF068D9E17D341CEEF2B247D49ACD1A1B59CD310EE28017E94802980B40071DE801734C42773400B4005002719EB40C5A00281087A5001F5A061F85021680138140075A0618A00280039ED4002F4A00074F7A005A00281066900500253B8C5FAD2003408281850025200140C07A50014021298054805300A9180E698013400DA003A77A00701E94800F4A6000714001E290099A006B2EE2BD460E78A96B501D548043C50C04140053017F0A002800A002800E9400500068010F4E38A0082F23135BC9111C48A50E7D08C530B687C69F166CCC5A869D7217E5785ADC9FF691B3FC9AB48AD0CD9C4412346FC646E18E3A839C834DAD0573D335D88F893C0F1DC44A3ED5E589D40E7E75CEE03EBF30FC6A12B0DB3CC209481B95BA8073FCAAC8246048DC7927A9CD50335744B217B3833B04456039CFA502674F7ED1C7652A98D4A2B47CC6D803049DAA0FA9A18D33A7F0746560B80A548DCA0E0739DBD3359D434A7AEA7D3BA74461D3ED6360372C48A76F4E1454A2996075A0685CD210B9CF4EB400B4C419A00061850029A620140C3183EF400741D68001CD02188240D26F642A5BE40A3042E0707D4E73FA503243D680128003D6800C0A003D79A0042462801471400500005001400B40050014005200C502034C04CD218A4D001400500262800C50014862D2010D5304252B5C028B580334804340C3B734005002138A4001A95C0753003D2801075A602F4A4034FB500140050004D0025002D300140076A004A0033400B4804A6025001F4A0434F1401F287C6EDB1C7E4ED5DC3509704F51D7A7E62AE1B932D8F2424800AF0C0820FB8AD2FD097B1EA5F0FEE84BA3CD6F95630C82418391871BB1F9E4567256635B1E75AED87F65EBD7D6800F2D652F1803F81B91FCF1F855887D85A79F16F76DA9D318EA6AC96741A5810958C8181F301EA78E323E83F2A046AEA0D1A41079C81D9242C431EB95DB8E075CB7E9435A0D1D1F815D64335BAB6E7F3B2C718F4519ACAA1703EA5C6D0171D062A1162E73F5A005A0001FAD002E698076A0570FC68182E700311EE4530171431067142010F3400B9E78A005A00407D6800C8C50025002FD3AD0020EFC5002938A0041CF3400A47A500203E9400EEF4001A180508043FAD0014805A000D00140086800EB400B400940050007A5002521853401437600349B0107E94AE30EF40066800A0069EBDA9009914807D3016800E00A004CE79A004A4020A00298050027F2A005A601DE800A402D300238A0426290C314009D39A0009CD31F419DFD4E69127C95F1B678EE359B84403724EEFED82E47FECB5B4762647961183DF8AA333B2F8613ECD4EF2DF276C908603B654FF81A89ABA2909F146CDA2D4AC6F53EE4D1985BD994E47E87F4A70774366668B226155CFDE201C0DC7EB8AB333A1D2E548EEE16B819DAFC63818E73C7AD31AD0B9AA492068DE38F7BB83D3180015F5FF268B85BA9A5F0E0EFD5753032516644C6075DC738C7D2B199A53D8FABD802DD6A1142E71C53003D3A73400679A0051E9400B9229885CD00349F4E4D00283C7F8500267D29A0173F8D002FA62800EF4009D280146718A004A003BD002D0019A0001A004A00071400A280169009D7A1A680314300A402D020A0620A000D00140066800CD0004D21853012900B4C069ED8A4C05CD200A0621EB4009400A38A006B73CD2001D28B80EA005E9400868012800A9EA007AD500D340075A0031400BC0A003D2800CD300A005ED480407D6980679A0043FCE810940C6938C11DBD6803E39F8A9213AF2839F9D49624753B8F19FCCD6903396E70D344C5324647F2AB219B3E0F9BEC9E23D3DB1B6394985883C73C7F3C5292D0ABD8EC3E22DB09FC312C9C66DA54979EC33B4FE8D59C194F63CE74D9F64800EA7A1F4EF5B2337A1D159093767201FBC01CF39A62BDCD8BB89A5B5B6977B2112C68368DD9C9CF38FCF9F4A066D7C2DCA6B935BC84E1A48A56FAF9A41E7FEF9AC6A1A53D51F5636039C7A9A828418A2E038D300CE3B1A100039EC73400BF5A003A50014C033400B9FAD0019F97D298839F5A2E30EB4841CE71DA8001FCE8010D0028E94C04EC722800C7181C5002F4A002800A002800C668016900678A0028017A50021A003340C0D020CFBD00145C04A77187E3498052401400517B0050DDC6254805300CD0014001A0069A4034F5E9520499AA00CD00068012800A5600A004A100734001A004E7A9E2980BDA801075A00750006801B400B40080F5A60148042062803C7FE23F816168EE27922496C1D8311D1E224F63D719F4EC714D3681A47946ABE12B0BA52B6205A3292A0C79643EB9527F956919773368C587C1B7F05D4522DC5ABAC6E1C125813820F4C5573682B1D9EB71A4DA36A08E9957B7932BFF00013592DC6789D9B60C4C70C38CE78CD6E883763BF27852578E08EF4C66AE97A85F5EC51DAD94265F2C8760A3A819FCFAFE9480F44F03D82DA7C46B9B68655B8308B65CC6785624165FAE7AD6550BA67D2A400C6A0B0E94AC0283934C428A0629E94C420A005140077F7A601D29200CE2983173C74A0009E290080E7A5310500078E868181E073D69000381C8AAB88767D2900DEF400739A062E6801924AB1B46A4313236D180480704F3E838EB4087F38ED4005002F5CF6A004A005CD00140087D6800A002800A00295861400B400948029D800D2600681A128010F4A003B7BD001DE9007D680138340011CD480B545582810B4083A9A0008C1A00434800D2012980B400531A1281D800A091474A000FB50030F5A0051400BDE8010D0018FCA8031FC5368DA8689756D17333A128338C91CE3F4A00F9C356F0DDD43AC5DDD69B7925A5EBB932C522EE8F7771C76CFD7AD34EDB89A31EFA6F16A6F852CE0995976878429653EA0EE1CFE1569A26C6BF85175A7B3F275FB68C42232A1E47CCAFCE30C3A631DFBF152ECB6049989AFF0081EC67BB274EBB4B3B87E7C86198FF000C723F5AB527B83461AF81B5942E8ED678033BCCC02E3D7D7F4AA52B93CB727F0F692F61AA3DB5D6AD6D6B70EBE508E19771DC7A024703E99CF34DBB6E2E53DDFE0B78223D347F6935C492AAB9E58FFAC900C671D80CF7E49AC5FBC6B1563D8013D0738A45050262AF7A421C31421874354203C52017BFB5300A0033C76A0000A0051D38A1009D4F34C05FA50014083140C4CD0018E738C62900A7E94C041D79A002800A4014C05A60029005001400B4082800A4D8050312980500148028401430168BD804A69808693D46231C2938E952007A53012800A003A75A401D7BD0021A402D0558514C570CD02168001C5001400869009400B40052B8094C618A6170C5021680022801A680034000E680168003D2803CE7E306BB369560890BBAC62179A658CE0BA8C0033F9D34AEC1B491E33A37C4692DEEC3DBC125BEEE1984C0E46780411823356E16D885347A1787FC73A75FB795AA5AD9DDC0F82E0C2AB2273D78E08A9699575D0EF0D8F85AF2D657B18B4F3E5216CA0195F94F241FEB49A28F9F3C51A2DCDD4E97960F279B90248C1E4E070C3FC2AE12D2C66D1C6EA2BA8CD0B41233F5C6CCE39E9D3F2AB4D7521DC9342F0A6AB73287B88DAC16265756B88F3B883D8679F5A99493D117156D4F76D1BC7F6BE1AD3CDADF18543C8D2A97976B1CE38031C8C8A84BB1772E0F8B56EFBDA24B3D98C82D2B703D49C628B05CD6D17E2659DD9569A388C271F3DB49BF03DC1E45260ECCEFACEE63BBB78E68195E2906E561D08A422C75E0F4A10C5E29B10119F7FAD03179F4A68428A000E7B50014D0077A005A4027E145C029801EB4005200CD3B00B48031EB4C0050003340062800EB48029A0607AD020181C0E3DA81850014085A56185001400945C0280168D80295C04EF4803A53181A006900AE0F4340050014804A004A0031C5002521A0A570B8F5AA10500140050019F6A0760CD21D828B0985020A40277A601DE80169805200CD3010D2B8080714C05E940050035BEB40EC78D7ED081974A77009CD938FCA419FD0D54756291F37A36D27BE7F4ADCC2C593A84F6EF0CD6933C536D20953C9E71CF634AC3B9DD780B5C9F5159E3BA606688004FF00787AFB56728DB6348B2EDBF8DF4A596689DE740DC1678030E0F6E491F952E56905CED742BED12E1A192F6C9A783BCB6D2B0EBDCAFF00418A968A56B9DAAEB3E0AD12D64B980DBA941905A362EC7D0171424C1B47856A96F2F8FF00C43326916E635B6596E598A0C12D92A817AF24601FA9C56D0466C8A5F014933EA1043AA3936B60B70891E1967B9C39283B05010FBF23D6AB949B9C5B7DBB41D5A64694457D6AE51CC4F95C8EA33DC76353643BBB1F547C1CD45B51F0ECB95758D5D648D5D76950EB9200F4C838FAD60688F421C7BD343145002F6ED9A40006EE28011482323A5310A69800391400A7A5001D051A80879EBD2801C2801071D69801E3D29001A7700E3D69007F3A00334C033F9D0019A401C77CD0028A0033EB45C2C14EE01DCD0014005200A00280169011CAED1C4CC9134AC3A229009FCF8A603F8C9C51700A400695C614C04A0043400114009DE900500140087DE80038348686161EF52224AAB9561734C414082800A0A4276A0620A04D05261617340583340583BD02B0B408280133EB4C03348AB0532443EC6800F6A4021E9ED4CA479AFC58B18352BBB0B2BB7F2ADA78648DE4FEE82C39FC28BB5B09AB9F3AF8DBC1FA8F852EBFD2019ACD8FC93A0E00ED93FD471F4E95B46775A98B5639B607CB56D8FB173F36D38C536C11D87C34B591AE2F2F94836E81606C73F393BBF90FD6A1B292399BCB76B6BEBA825CF990CAEA73C1383FFEAAB5AA218BA7DC4F1094C171344FD7E490AE71DF834F9531A623DF4CF2A996E2590F5DCEC5FF009D34AC2BEA7B0FC3678348F0E7DA8AB36A1A99DFE616C08E104A93EC00EE78CC847634EDD81957C35A92FF0064CB7560CD71777D77243696EB9DC23054162A390088D4E08E77FD693924090EB6F87CB06AB2EB3E2A984B7D712B4D16951A03FBC66C8F3393F28C818E338F4AC653EC6918EA7B8780B479F49D2646BC5DB7570E1D90F54006003EFD4E3B545CB6CE9BAD310B4005001490800006076A601C13C1A005A2E30A680334085E9F5A005CD0037767914C038ED4805A004C5003850021EB4C038FC69007245002E68010D001CD001400B4C033D28003480295C03BF7A2E0142D400D00140050021F7A561894C039EF400A280109F5A004348028010D2B801E6818D278F7A07619F952B8C985002D3242988290EC277A634068185001D29300CD002714005020A0560E940583F9D01610034142F38E298AC148560EF4009D7140D197E23D12DF5BB310DC655D4E63917AA1FEBF4A02DA9C3DC78475AB05FF0040BB8E78C1E11BE5C8FA1CAD1A8590C8FC33E213FBC167A7C6C783958F38FC8D3D44D22878AFC352E8FA6DBDCDCCE269E49B6B08D36C69C678F7E3DA9A11E19E32B196DFC457532C588E73E70208C1E0678CFA8ADA2CC9A39D6DD1B3B3E51181EA3AD55EC2D8D4F0DF84F5CF104A89A5D8CB2A30CF998C281EBCF6A972D06A2DBB9EB3A4F826DF48B76FF84835C90C8D6E90BDB5A90EFB13954DDD1003E9EF51ED1A2F94EE7C35E139D6D13FB3ECE0D1A07FBD29CBDCC83DD8F23F4ACDBE62D44ED345F0EE9FA5624822F32E3BCF2FCCE4FD7B7E1421D8D91C0EF41228A6019F4A00377BD02147345860473400702810BFD28180ED40001400BEB4C04A0404D030038A04071DE8016800A000838EB40083AD002F7A005A0028011B3400508039A7701684C033D6934007A7148041400A69AD0001CFAD21870281050312801314008734AE0028B8086800A003BD21850160ED405861A0A1A7935204C2800AA26C2D30B052188681850020A00393400500038EB4001A004EF400BDE815C0F4A0620A00519A002800A09B0631D281A019A06029803521333F5CD322D5F4B9ECE538DE32ADFDD61D0D02B1E6573A0EBD6119B73A725E5B13BB985274CFAE08E0D55EC2E532D7C3D2DB6147852DD1BA6E4B323DFB7D697331F29A56FA67882F94C169A7BD942F80E42792A47FB449C9FA5170B33B2F0FF82ECB4CF2A5B863757487706618453EA17FC680B1D505CF7E7BD0AC50E3C74ED458570A648A393CD00029084EFD2980ECF14861F4E6800A601D6900BF4A002980B4EE01FCA8B0094805029DC418A002800A00298C290831400B4EC014803340083AD2B80BDE9B00A4019A003348614C008CD0025001FCE801393DE8016801B9A401F4A004A003BD0006801077A43418CF7C50500A00631A004CD02B935218B40AE154312800A4025002FD2801B400B4005001C62800E07BD026028107D68280F5A003DE815C0D03168003ED4C051D2801BEB4007D280002801001C9C520038A004C64FE1400A718A602638A0571402298AC2D020E2800EF48008A6028E3A520002980B4006290074340066980BDA8B8087E94C05A0414861CE29D803B50014200140050019F6A5710039A00297A800A601480393400BDE980940C29005300FC680168010D0019E2801290076A004A0031EB40098A003BD2188475140240700668284CD0046C49F7A006FE7489B1657A5050B4C9B094C619A4312800A002800A003B62800A002800F4A04140AC28A0A1A6801C3D2826C0681883340C2980A280168010F41400DE7B9A0028016801318ED400B8E7E940801FCE81585EB41427F3A09B05020ED40013F9D3016800A005EC690099CD08051D698012076A00323AE7140075F5A13D40323F1A6C05FCAA40074E29A6027E3430018CD2B80B4C0280107279A005EFD39A00514C04FA5210B40050021EB40C280128016800FAD001CD2B80847BD300ED48040C0F638F7140073400B40084FB50020348621E681A17EB40C63F1DA801B9A00438C52B80CC7BD202D50014C0075A2E007AD00251700A2E014C05340094005001D280109A0051D7AD002E6801334009400A2800A002800A005A004ED40094C00FDDA005A401DE81313938A62168283140831CD301474A420A0407AD0003EBC50029F6A003B50027B0A100A3DE9809F4A005140050018A5700140074CD170027D29805200A602D001400B4084CF5A0051480426980A3DA81884F340099268010020D0029EB48039ED4C05A004CD20014001A002800A004E290098A06808A0A19FC5DF14001E6801B8EB9A0046A8603698167AD0019A0028013AD00140050025580EA40349FCE800CE6800A0028017A50007F4A0000C500274A00075A005A004271400B40050014C028013BD002FD2800CF1EB400878C5002F7A005CD0406280168010F4A004233400A38A000F14000A1806684014C0439E8091F4A0051D39FC6801690C29883A500068001C52401F85300A005E33EF48041400B4C04EF4006703DE8013DC5003A800C8A004C806900A4D3013BD002D201BD3A5300C5201C2801AC7140099C0FAD0029E052012800CD0342673EC68280F4A006FB0140084F5A4034E3348069CF6A902C5031BDEA8071E94C90ED4C6250303D6800A04C1BA52401D40A60039A00050018E6801280168014D0020EB400BDE9801A4021381400EA60276A00280128001C9A003BD00149EC02F614200029800A003D3DE8014F4A090A041DA8001D050029A6020A068551DA810878FCE82807340314F1412276A0AE829A09101CD000BDFEB400BDA8005148407AE298C4EF400E1D69807A52011BAD0018A0029005002530147434AC014C029001E94C06D021D8E0D0313B502101EB4862D0007AD260263341486839247A50311891400BD4D00365E08C50034D4B01ADD6818C62735223FFD9, 'http://image.baidu.com/1927824697331766.jpg', '2017-10-22 16:30:52', 'http://yotta.xjtushilei.com:9218/Yotta/SpiderAPI/getUnaddImage?imageID=3');
